/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) on 6/3/13 2:56 PM
 */
package org.rdfs.sioc.services;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 * <li>MaxResults</li>
 * <li>ResultsFormat</li>
 * <li>ServiceDefinition</li>
 * <li>ServiceEndpoint</li>
 * <li>ServiceOf</li>
 * <li>ServiceProtocol</li>
 * </ul>
 * 
 * This class was generated by <a
 * href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 6/3/13 2:56 PM
 */
public class Service extends Thing {
    private static final long serialVersionUID = 5890746990357699633L;

    /** http://rdfs.org/sioc/services#Service */
    public static final URI RDFS_CLASS = new URIImpl(
	    "http://rdfs.org/sioc/services#Service", false);

    /** http://rdfs.org/sioc/services#max_results */
    public static final URI MAXRESULTS = new URIImpl(
	    "http://rdfs.org/sioc/services#max_results", false);

    /** http://rdfs.org/sioc/services#results_format */
    public static final URI RESULTSFORMAT = new URIImpl(
	    "http://rdfs.org/sioc/services#results_format", false);

    /** http://rdfs.org/sioc/services#service_definition */
    public static final URI SERVICEDEFINITION = new URIImpl(
	    "http://rdfs.org/sioc/services#service_definition", false);

    /** http://rdfs.org/sioc/services#service_endpoint */
    public static final URI SERVICEENDPOINT = new URIImpl(
	    "http://rdfs.org/sioc/services#service_endpoint", false);

    /** http://rdfs.org/sioc/services#service_of */
    public static final URI SERVICEOF = new URIImpl(
	    "http://rdfs.org/sioc/services#service_of", false);

    /** http://rdfs.org/sioc/services#service_protocol */
    public static final URI SERVICEPROTOCOL = new URIImpl(
	    "http://rdfs.org/sioc/services#service_protocol", false);

    /**
     * All property-URIs with this class as domain. All properties of all
     * super-classes are also available.
     */
    public static final URI[] MANAGED_URIS = {
	    new URIImpl("http://rdfs.org/sioc/services#max_results", false),
	    new URIImpl("http://rdfs.org/sioc/services#results_format", false),
	    new URIImpl("http://rdfs.org/sioc/services#service_definition",
		    false),
	    new URIImpl("http://rdfs.org/sioc/services#service_endpoint", false),
	    new URIImpl("http://rdfs.org/sioc/services#service_of", false),
	    new URIImpl("http://rdfs.org/sioc/services#service_protocol", false)
    };

    // protected constructors needed for inheritance

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.semweb4j.org
     * @param classURI
     *            URI of RDFS class
     * @param instanceIdentifier
     *            Resource that identifies this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c1]
     */
    protected Service(Model model, URI classURI,
	    org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
	    boolean write) {
	super(model, classURI, instanceIdentifier, write);
    }

    // public constructors

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param instanceIdentifier
     *            an RDF2Go Resource identifying this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c2]
     */
    public Service(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
	    boolean write) {
	super(model, RDFS_CLASS, instanceIdentifier, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a URI, given as
     * a String. Creating two wrappers for the same URI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param uriString
     *            a URI given as a String
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * @throws ModelRuntimeException
     *             if URI syntax is wrong
     * 
     *             [Generated from RDFReactor template rule #c7]
     */
    public Service(Model model, String uriString, boolean write)
	    throws ModelRuntimeException {
	super(model, RDFS_CLASS, new URIImpl(uriString, false), write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a blank node.
     * Creating two wrappers for the same blank node is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param bnode
     *            BlankNode of this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c8]
     */
    public Service(Model model, BlankNode bnode, boolean write) {
	super(model, RDFS_CLASS, bnode, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a randomly
     * generated URI. Creating two wrappers results in different URIs.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c9]
     */
    public Service(Model model, boolean write) {
	super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
    }

    // /////////////////////////////////////////////////////////////////
    // typing

    /**
     * Return an existing instance of this class in the model. No statements are
     * written.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return an instance of Service or null if none existst
     * 
     *         [Generated from RDFReactor template rule #class0]
     */
    public static Service getInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getInstance(model, instanceResource, Service.class);
    }

    /**
     * Create a new instance of this class in the model. That is, create the
     * statement (instanceResource, RDF.type,
     * http://rdfs.org/sioc/services#Service).
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class1]
     */
    public static void createInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.createInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return true if instanceResource is an instance of this class in the
     *         model
     * 
     *         [Generated from RDFReactor template rule #class2]
     */
    public static boolean hasInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.hasInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @return all instances of this class in Model 'model' as RDF resources
     * 
     *         [Generated from RDFReactor template rule #class3]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(
	    Model model) {
	return Base.getAllInstances(model, RDFS_CLASS,
		org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @return all instances of this class in Model 'model' as a ReactorResult,
     *         which can conveniently be converted to iterator, list or array.
     * 
     *         [Generated from RDFReactor template rule #class3-as]
     */
    public static ReactorResult<? extends Service> getAllInstances_as(
	    Model model) {
	return Base.getAllInstances_as(model, RDFS_CLASS, Service.class);
    }

    /**
     * Remove rdf:type Service from this instance. Other triples are not
     * affected. To delete more, use deleteAllProperties
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class4]
     */
    public static void deleteInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.deleteInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * Delete all (this, *, *), i.e. including rdf:type
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     */
    public static void deleteAllProperties(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.deleteAllProperties(model, instanceResource);
    }

    // /////////////////////////////////////////////////////////////////
    // property access methods

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Service' to this
     *         Service instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllService_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Thing.SERVICE, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Service' to this
     *         Service instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllService_Inverse() {
	return Base.getAll_Inverse(this.model, Thing.SERVICE, this
		.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Service' to
     *         this Service instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllService_Inverse_as(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse_as(model, Thing.SERVICE, objectValue,
		org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@319dd265 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasMaxResults(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, MAXRESULTS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@319dd265 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasMaxResults() {
	return Base.has(this.model, this.getResource(), MAXRESULTS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@319dd265 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasMaxResults(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, MAXRESULTS, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@319dd265 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasMaxResults(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), MAXRESULTS, value);
    }

    /**
     * Get all values of property MaxResults as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMaxResults_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, MAXRESULTS);
    }

    /**
     * Get all values of property MaxResults as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMaxResults_asNode_(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_as(model, instanceResource, MAXRESULTS,
		org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property MaxResults as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMaxResults_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), MAXRESULTS);
    }

    /**
     * Get all values of property MaxResults as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllMaxResults_asNode_() {
	return Base.getAll_as(this.model, this.getResource(), MAXRESULTS,
		org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property MaxResults * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.Integer> getAllMaxResults(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, MAXRESULTS,
		java.lang.Integer.class);
    }

    /**
     * Get all values of property MaxResults as a ReactorResult of
     * java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.Integer> getAllMaxResults_as(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_as(model, instanceResource, MAXRESULTS,
		java.lang.Integer.class);
    }

    /**
     * Get all values of property MaxResults * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.Integer> getAllMaxResults() {
	return Base.getAll(this.model, this.getResource(), MAXRESULTS,
		java.lang.Integer.class);
    }

    /**
     * Get all values of property MaxResults as a ReactorResult of
     * java.lang.Integer
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.Integer> getAllMaxResults_as() {
	return Base.getAll_as(this.model, this.getResource(), MAXRESULTS,
		java.lang.Integer.class);
    }

    /**
     * Adds a value to property MaxResults as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addMaxResults(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, MAXRESULTS, value);
    }

    /**
     * Adds a value to property MaxResults as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addMaxResults(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), MAXRESULTS, value);
    }

    /**
     * Adds a value to property MaxResults from an instance of java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addMaxResults(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.Integer value) {
	Base.add(model, instanceResource, MAXRESULTS, value);
    }

    /**
     * Adds a value to property MaxResults from an instance of java.lang.Integer
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addMaxResults(java.lang.Integer value) {
	Base.add(this.model, this.getResource(), MAXRESULTS, value);
    }

    /**
     * Sets a value of property MaxResults from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setMaxResults(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, MAXRESULTS, value);
    }

    /**
     * Sets a value of property MaxResults from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setMaxResults(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), MAXRESULTS, value);
    }

    /**
     * Sets a value of property MaxResults from an instance of java.lang.Integer
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setMaxResults(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.Integer value) {
	Base.set(model, instanceResource, MAXRESULTS, value);
    }

    /**
     * Sets a value of property MaxResults from an instance of java.lang.Integer
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setMaxResults(java.lang.Integer value) {
	Base.set(this.model, this.getResource(), MAXRESULTS, value);
    }

    /**
     * Removes a value of property MaxResults as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeMaxResults(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, MAXRESULTS, value);
    }

    /**
     * Removes a value of property MaxResults as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeMaxResults(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), MAXRESULTS, value);
    }

    /**
     * Removes a value of property MaxResults given as an instance of
     * java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeMaxResults(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.Integer value) {
	Base.remove(model, instanceResource, MAXRESULTS, value);
    }

    /**
     * Removes a value of property MaxResults given as an instance of
     * java.lang.Integer
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeMaxResults(java.lang.Integer value) {
	Base.remove(this.model, this.getResource(), MAXRESULTS, value);
    }

    /**
     * Removes all values of property MaxResults * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllMaxResults(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, MAXRESULTS);
    }

    /**
     * Removes all values of property MaxResults * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllMaxResults() {
	Base.removeAll(this.model, this.getResource(), MAXRESULTS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3955914a has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasResultsFormat(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, RESULTSFORMAT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3955914a has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasResultsFormat() {
	return Base.has(this.model, this.getResource(), RESULTSFORMAT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3955914a has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasResultsFormat(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, RESULTSFORMAT, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3955914a has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasResultsFormat(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), RESULTSFORMAT,
		value);
    }

    /**
     * Get all values of property ResultsFormat as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllResultsFormat_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, RESULTSFORMAT);
    }

    /**
     * Get all values of property ResultsFormat as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllResultsFormat_asNode_(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_as(model, instanceResource, RESULTSFORMAT,
		org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property ResultsFormat as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllResultsFormat_asNode() {
	return Base
		.getAll_asNode(this.model, this.getResource(), RESULTSFORMAT);
    }

    /**
     * Get all values of property ResultsFormat as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllResultsFormat_asNode_() {
	return Base.getAll_as(this.model, this.getResource(), RESULTSFORMAT,
		org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property ResultsFormat * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllResultsFormat(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, RESULTSFORMAT, Thing.class);
    }

    /**
     * Get all values of property ResultsFormat as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllResultsFormat_as(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_as(model, instanceResource, RESULTSFORMAT,
		Thing.class);
    }

    /**
     * Get all values of property ResultsFormat * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllResultsFormat() {
	return Base.getAll(this.model, this.getResource(), RESULTSFORMAT,
		Thing.class);
    }

    /**
     * Get all values of property ResultsFormat as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllResultsFormat_as() {
	return Base.getAll_as(this.model, this.getResource(), RESULTSFORMAT,
		Thing.class);
    }

    /**
     * Adds a value to property ResultsFormat as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addResultsFormat(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, RESULTSFORMAT, value);
    }

    /**
     * Adds a value to property ResultsFormat as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addResultsFormat(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), RESULTSFORMAT, value);
    }

    /**
     * Adds a value to property ResultsFormat from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addResultsFormat(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.add(model, instanceResource, RESULTSFORMAT, value);
    }

    /**
     * Adds a value to property ResultsFormat from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addResultsFormat(Thing value) {
	Base.add(this.model, this.getResource(), RESULTSFORMAT, value);
    }

    /**
     * Sets a value of property ResultsFormat from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setResultsFormat(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, RESULTSFORMAT, value);
    }

    /**
     * Sets a value of property ResultsFormat from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setResultsFormat(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), RESULTSFORMAT, value);
    }

    /**
     * Sets a value of property ResultsFormat from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setResultsFormat(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.set(model, instanceResource, RESULTSFORMAT, value);
    }

    /**
     * Sets a value of property ResultsFormat from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setResultsFormat(Thing value) {
	Base.set(this.model, this.getResource(), RESULTSFORMAT, value);
    }

    /**
     * Removes a value of property ResultsFormat as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeResultsFormat(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, RESULTSFORMAT, value);
    }

    /**
     * Removes a value of property ResultsFormat as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeResultsFormat(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), RESULTSFORMAT, value);
    }

    /**
     * Removes a value of property ResultsFormat given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeResultsFormat(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.remove(model, instanceResource, RESULTSFORMAT, value);
    }

    /**
     * Removes a value of property ResultsFormat given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeResultsFormat(Thing value) {
	Base.remove(this.model, this.getResource(), RESULTSFORMAT, value);
    }

    /**
     * Removes all values of property ResultsFormat * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllResultsFormat(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, RESULTSFORMAT);
    }

    /**
     * Removes all values of property ResultsFormat * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllResultsFormat() {
	Base.removeAll(this.model, this.getResource(), RESULTSFORMAT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8f95d4a has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasServiceDefinition(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, SERVICEDEFINITION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8f95d4a has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasServiceDefinition() {
	return Base.has(this.model, this.getResource(), SERVICEDEFINITION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8f95d4a has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasServiceDefinition(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, SERVICEDEFINITION, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@8f95d4a has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasServiceDefinition(
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), SERVICEDEFINITION,
		value);
    }

    /**
     * Get all values of property ServiceDefinition as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllServiceDefinition_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, SERVICEDEFINITION);
    }

    /**
     * Get all values of property ServiceDefinition as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllServiceDefinition_asNode_(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_as(model, instanceResource, SERVICEDEFINITION,
		org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property ServiceDefinition as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllServiceDefinition_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(),
		SERVICEDEFINITION);
    }

    /**
     * Get all values of property ServiceDefinition as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllServiceDefinition_asNode_() {
	return Base.getAll_as(this.model, this.getResource(),
		SERVICEDEFINITION, org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property ServiceDefinition * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllServiceDefinition(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, SERVICEDEFINITION,
		Thing.class);
    }

    /**
     * Get all values of property ServiceDefinition as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllServiceDefinition_as(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_as(model, instanceResource, SERVICEDEFINITION,
		Thing.class);
    }

    /**
     * Get all values of property ServiceDefinition * @return a ClosableIterator
     * of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllServiceDefinition() {
	return Base.getAll(this.model, this.getResource(), SERVICEDEFINITION,
		Thing.class);
    }

    /**
     * Get all values of property ServiceDefinition as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllServiceDefinition_as() {
	return Base.getAll_as(this.model, this.getResource(),
		SERVICEDEFINITION, Thing.class);
    }

    /**
     * Adds a value to property ServiceDefinition as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addServiceDefinition(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, SERVICEDEFINITION, value);
    }

    /**
     * Adds a value to property ServiceDefinition as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addServiceDefinition(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), SERVICEDEFINITION, value);
    }

    /**
     * Adds a value to property ServiceDefinition from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addServiceDefinition(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.add(model, instanceResource, SERVICEDEFINITION, value);
    }

    /**
     * Adds a value to property ServiceDefinition from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addServiceDefinition(Thing value) {
	Base.add(this.model, this.getResource(), SERVICEDEFINITION, value);
    }

    /**
     * Sets a value of property ServiceDefinition from an RDF2Go node. First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setServiceDefinition(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, SERVICEDEFINITION, value);
    }

    /**
     * Sets a value of property ServiceDefinition from an RDF2Go node. First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setServiceDefinition(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), SERVICEDEFINITION, value);
    }

    /**
     * Sets a value of property ServiceDefinition from an instance of Thing
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setServiceDefinition(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.set(model, instanceResource, SERVICEDEFINITION, value);
    }

    /**
     * Sets a value of property ServiceDefinition from an instance of Thing
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setServiceDefinition(Thing value) {
	Base.set(this.model, this.getResource(), SERVICEDEFINITION, value);
    }

    /**
     * Removes a value of property ServiceDefinition as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeServiceDefinition(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, SERVICEDEFINITION, value);
    }

    /**
     * Removes a value of property ServiceDefinition as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeServiceDefinition(
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), SERVICEDEFINITION, value);
    }

    /**
     * Removes a value of property ServiceDefinition given as an instance of
     * Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeServiceDefinition(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.remove(model, instanceResource, SERVICEDEFINITION, value);
    }

    /**
     * Removes a value of property ServiceDefinition given as an instance of
     * Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeServiceDefinition(Thing value) {
	Base.remove(this.model, this.getResource(), SERVICEDEFINITION, value);
    }

    /**
     * Removes all values of property ServiceDefinition * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllServiceDefinition(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, SERVICEDEFINITION);
    }

    /**
     * Removes all values of property ServiceDefinition * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllServiceDefinition() {
	Base.removeAll(this.model, this.getResource(), SERVICEDEFINITION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d2cc218 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasServiceEndpoint(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, SERVICEENDPOINT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d2cc218 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasServiceEndpoint() {
	return Base.has(this.model, this.getResource(), SERVICEENDPOINT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d2cc218 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasServiceEndpoint(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, SERVICEENDPOINT, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d2cc218 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasServiceEndpoint(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), SERVICEENDPOINT,
		value);
    }

    /**
     * Get all values of property ServiceEndpoint as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllServiceEndpoint_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, SERVICEENDPOINT);
    }

    /**
     * Get all values of property ServiceEndpoint as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllServiceEndpoint_asNode_(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_as(model, instanceResource, SERVICEENDPOINT,
		org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property ServiceEndpoint as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllServiceEndpoint_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(),
		SERVICEENDPOINT);
    }

    /**
     * Get all values of property ServiceEndpoint as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllServiceEndpoint_asNode_() {
	return Base.getAll_as(this.model, this.getResource(), SERVICEENDPOINT,
		org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property ServiceEndpoint * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllServiceEndpoint(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, SERVICEENDPOINT,
		Thing.class);
    }

    /**
     * Get all values of property ServiceEndpoint as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllServiceEndpoint_as(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_as(model, instanceResource, SERVICEENDPOINT,
		Thing.class);
    }

    /**
     * Get all values of property ServiceEndpoint * @return a ClosableIterator
     * of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllServiceEndpoint() {
	return Base.getAll(this.model, this.getResource(), SERVICEENDPOINT,
		Thing.class);
    }

    /**
     * Get all values of property ServiceEndpoint as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllServiceEndpoint_as() {
	return Base.getAll_as(this.model, this.getResource(), SERVICEENDPOINT,
		Thing.class);
    }

    /**
     * Adds a value to property ServiceEndpoint as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addServiceEndpoint(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, SERVICEENDPOINT, value);
    }

    /**
     * Adds a value to property ServiceEndpoint as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addServiceEndpoint(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), SERVICEENDPOINT, value);
    }

    /**
     * Adds a value to property ServiceEndpoint from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addServiceEndpoint(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.add(model, instanceResource, SERVICEENDPOINT, value);
    }

    /**
     * Adds a value to property ServiceEndpoint from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addServiceEndpoint(Thing value) {
	Base.add(this.model, this.getResource(), SERVICEENDPOINT, value);
    }

    /**
     * Sets a value of property ServiceEndpoint from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setServiceEndpoint(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, SERVICEENDPOINT, value);
    }

    /**
     * Sets a value of property ServiceEndpoint from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setServiceEndpoint(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), SERVICEENDPOINT, value);
    }

    /**
     * Sets a value of property ServiceEndpoint from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setServiceEndpoint(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.set(model, instanceResource, SERVICEENDPOINT, value);
    }

    /**
     * Sets a value of property ServiceEndpoint from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setServiceEndpoint(Thing value) {
	Base.set(this.model, this.getResource(), SERVICEENDPOINT, value);
    }

    /**
     * Removes a value of property ServiceEndpoint as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeServiceEndpoint(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, SERVICEENDPOINT, value);
    }

    /**
     * Removes a value of property ServiceEndpoint as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeServiceEndpoint(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), SERVICEENDPOINT, value);
    }

    /**
     * Removes a value of property ServiceEndpoint given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeServiceEndpoint(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.remove(model, instanceResource, SERVICEENDPOINT, value);
    }

    /**
     * Removes a value of property ServiceEndpoint given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeServiceEndpoint(Thing value) {
	Base.remove(this.model, this.getResource(), SERVICEENDPOINT, value);
    }

    /**
     * Removes all values of property ServiceEndpoint * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllServiceEndpoint(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, SERVICEENDPOINT);
    }

    /**
     * Removes all values of property ServiceEndpoint * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllServiceEndpoint() {
	Base.removeAll(this.model, this.getResource(), SERVICEENDPOINT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4cca9378 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasServiceOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, SERVICEOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4cca9378 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasServiceOf() {
	return Base.has(this.model, this.getResource(), SERVICEOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4cca9378 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasServiceOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, SERVICEOF, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4cca9378 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasServiceOf(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), SERVICEOF, value);
    }

    /**
     * Get all values of property ServiceOf as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllServiceOf_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, SERVICEOF);
    }

    /**
     * Get all values of property ServiceOf as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllServiceOf_asNode_(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_as(model, instanceResource, SERVICEOF,
		org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property ServiceOf as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllServiceOf_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), SERVICEOF);
    }

    /**
     * Get all values of property ServiceOf as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllServiceOf_asNode_() {
	return Base.getAll_as(this.model, this.getResource(), SERVICEOF,
		org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property ServiceOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllServiceOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, SERVICEOF, Thing.class);
    }

    /**
     * Get all values of property ServiceOf as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllServiceOf_as(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_as(model, instanceResource, SERVICEOF, Thing.class);
    }

    /**
     * Get all values of property ServiceOf * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllServiceOf() {
	return Base.getAll(this.model, this.getResource(), SERVICEOF,
		Thing.class);
    }

    /**
     * Get all values of property ServiceOf as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllServiceOf_as() {
	return Base.getAll_as(this.model, this.getResource(), SERVICEOF,
		Thing.class);
    }

    /**
     * Adds a value to property ServiceOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addServiceOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, SERVICEOF, value);
    }

    /**
     * Adds a value to property ServiceOf as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addServiceOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), SERVICEOF, value);
    }

    /**
     * Adds a value to property ServiceOf from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addServiceOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.add(model, instanceResource, SERVICEOF, value);
    }

    /**
     * Adds a value to property ServiceOf from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addServiceOf(Thing value) {
	Base.add(this.model, this.getResource(), SERVICEOF, value);
    }

    /**
     * Sets a value of property ServiceOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setServiceOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, SERVICEOF, value);
    }

    /**
     * Sets a value of property ServiceOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setServiceOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), SERVICEOF, value);
    }

    /**
     * Sets a value of property ServiceOf from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setServiceOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.set(model, instanceResource, SERVICEOF, value);
    }

    /**
     * Sets a value of property ServiceOf from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setServiceOf(Thing value) {
	Base.set(this.model, this.getResource(), SERVICEOF, value);
    }

    /**
     * Removes a value of property ServiceOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeServiceOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, SERVICEOF, value);
    }

    /**
     * Removes a value of property ServiceOf as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeServiceOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), SERVICEOF, value);
    }

    /**
     * Removes a value of property ServiceOf given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeServiceOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.remove(model, instanceResource, SERVICEOF, value);
    }

    /**
     * Removes a value of property ServiceOf given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeServiceOf(Thing value) {
	Base.remove(this.model, this.getResource(), SERVICEOF, value);
    }

    /**
     * Removes all values of property ServiceOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllServiceOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, SERVICEOF);
    }

    /**
     * Removes all values of property ServiceOf * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllServiceOf() {
	Base.removeAll(this.model, this.getResource(), SERVICEOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@146816b7 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasServiceProtocol(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, SERVICEPROTOCOL);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@146816b7 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasServiceProtocol() {
	return Base.has(this.model, this.getResource(), SERVICEPROTOCOL);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@146816b7 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasServiceProtocol(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, SERVICEPROTOCOL, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@146816b7 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasServiceProtocol(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), SERVICEPROTOCOL,
		value);
    }

    /**
     * Get all values of property ServiceProtocol as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllServiceProtocol_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, SERVICEPROTOCOL);
    }

    /**
     * Get all values of property ServiceProtocol as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllServiceProtocol_asNode_(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_as(model, instanceResource, SERVICEPROTOCOL,
		org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property ServiceProtocol as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllServiceProtocol_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(),
		SERVICEPROTOCOL);
    }

    /**
     * Get all values of property ServiceProtocol as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllServiceProtocol_asNode_() {
	return Base.getAll_as(this.model, this.getResource(), SERVICEPROTOCOL,
		org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property ServiceProtocol * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllServiceProtocol(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, SERVICEPROTOCOL,
		Thing.class);
    }

    /**
     * Get all values of property ServiceProtocol as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllServiceProtocol_as(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_as(model, instanceResource, SERVICEPROTOCOL,
		Thing.class);
    }

    /**
     * Get all values of property ServiceProtocol * @return a ClosableIterator
     * of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllServiceProtocol() {
	return Base.getAll(this.model, this.getResource(), SERVICEPROTOCOL,
		Thing.class);
    }

    /**
     * Get all values of property ServiceProtocol as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllServiceProtocol_as() {
	return Base.getAll_as(this.model, this.getResource(), SERVICEPROTOCOL,
		Thing.class);
    }

    /**
     * Adds a value to property ServiceProtocol as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addServiceProtocol(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, SERVICEPROTOCOL, value);
    }

    /**
     * Adds a value to property ServiceProtocol as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addServiceProtocol(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), SERVICEPROTOCOL, value);
    }

    /**
     * Adds a value to property ServiceProtocol from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addServiceProtocol(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.add(model, instanceResource, SERVICEPROTOCOL, value);
    }

    /**
     * Adds a value to property ServiceProtocol from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addServiceProtocol(Thing value) {
	Base.add(this.model, this.getResource(), SERVICEPROTOCOL, value);
    }

    /**
     * Sets a value of property ServiceProtocol from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setServiceProtocol(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, SERVICEPROTOCOL, value);
    }

    /**
     * Sets a value of property ServiceProtocol from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setServiceProtocol(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), SERVICEPROTOCOL, value);
    }

    /**
     * Sets a value of property ServiceProtocol from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setServiceProtocol(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.set(model, instanceResource, SERVICEPROTOCOL, value);
    }

    /**
     * Sets a value of property ServiceProtocol from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setServiceProtocol(Thing value) {
	Base.set(this.model, this.getResource(), SERVICEPROTOCOL, value);
    }

    /**
     * Removes a value of property ServiceProtocol as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeServiceProtocol(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, SERVICEPROTOCOL, value);
    }

    /**
     * Removes a value of property ServiceProtocol as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeServiceProtocol(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), SERVICEPROTOCOL, value);
    }

    /**
     * Removes a value of property ServiceProtocol given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeServiceProtocol(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.remove(model, instanceResource, SERVICEPROTOCOL, value);
    }

    /**
     * Removes a value of property ServiceProtocol given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeServiceProtocol(Thing value) {
	Base.remove(this.model, this.getResource(), SERVICEPROTOCOL, value);
    }

    /**
     * Removes all values of property ServiceProtocol * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllServiceProtocol(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, SERVICEPROTOCOL);
    }

    /**
     * Removes all values of property ServiceProtocol * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllServiceProtocol() {
	Base.removeAll(this.model, this.getResource(), SERVICEPROTOCOL);
    }
}