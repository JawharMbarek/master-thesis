/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) on 21.12.12 17:00
 */
package de.m0ep.uni.ma.rdf.foaf;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> Basednear </li>
 *   <li> Currentproject </li>
 *   <li> FamilyName </li>
 *   <li> Familyname </li>
 *   <li> FirstName </li>
 *   <li> Geekcode </li>
 *   <li> Image </li>
 *   <li> Knows </li>
 *   <li> LastName </li>
 *   <li> MyersBriggs </li>
 *   <li> Pastproject </li>
 *   <li> Plan </li>
 *   <li> Publications </li>
 *   <li> SchoolHomepage </li>
 *   <li> Surname </li>
 *   <li> Workinfohomepage </li>
 *   <li> Workplacehomepage </li>
 *   <li> Comment </li>
 *   <li> Label </li>
 *   <li> Member </li>
 *   <li> Type </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 21.12.12 17:00
 */
public class Person extends Agent {

    /** http://xmlns.com/foaf/0.1/Person */
	@SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://xmlns.com/foaf/0.1/Person", false);

    /** http://xmlns.com/foaf/0.1/based_near */
	public static final URI BASEDNEAR = new URIImpl("http://xmlns.com/foaf/0.1/based_near",false);

    /** http://xmlns.com/foaf/0.1/currentProject */
	public static final URI CURRENTPROJECT = new URIImpl("http://xmlns.com/foaf/0.1/currentProject",false);

    /** http://xmlns.com/foaf/0.1/familyName */
	public static final URI FAMILYNAME = new URIImpl("http://xmlns.com/foaf/0.1/familyName",false);

    /** http://xmlns.com/foaf/0.1/family_name */
	public static final URI FAMILYNAME = new URIImpl("http://xmlns.com/foaf/0.1/family_name",false);

    /** http://xmlns.com/foaf/0.1/firstName */
	public static final URI FIRSTNAME = new URIImpl("http://xmlns.com/foaf/0.1/firstName",false);

    /** http://xmlns.com/foaf/0.1/geekcode */
	public static final URI GEEKCODE = new URIImpl("http://xmlns.com/foaf/0.1/geekcode",false);

    /** http://xmlns.com/foaf/0.1/img */
	public static final URI IMAGE = new URIImpl("http://xmlns.com/foaf/0.1/img",false);

    /** http://xmlns.com/foaf/0.1/knows */
	public static final URI KNOWS = new URIImpl("http://xmlns.com/foaf/0.1/knows",false);

    /** http://xmlns.com/foaf/0.1/lastName */
	public static final URI LASTNAME = new URIImpl("http://xmlns.com/foaf/0.1/lastName",false);

    /** http://xmlns.com/foaf/0.1/myersBriggs */
	public static final URI MYERSBRIGGS = new URIImpl("http://xmlns.com/foaf/0.1/myersBriggs",false);

    /** http://xmlns.com/foaf/0.1/pastProject */
	public static final URI PASTPROJECT = new URIImpl("http://xmlns.com/foaf/0.1/pastProject",false);

    /** http://xmlns.com/foaf/0.1/plan */
	public static final URI PLAN = new URIImpl("http://xmlns.com/foaf/0.1/plan",false);

    /** http://xmlns.com/foaf/0.1/publications */
	public static final URI PUBLICATIONS = new URIImpl("http://xmlns.com/foaf/0.1/publications",false);

    /** http://xmlns.com/foaf/0.1/schoolHomepage */
	public static final URI SCHOOLHOMEPAGE = new URIImpl("http://xmlns.com/foaf/0.1/schoolHomepage",false);

    /** http://xmlns.com/foaf/0.1/surname */
	public static final URI SURNAME = new URIImpl("http://xmlns.com/foaf/0.1/surname",false);

    /** http://xmlns.com/foaf/0.1/workInfoHomepage */
	public static final URI WORKINFOHOMEPAGE = new URIImpl("http://xmlns.com/foaf/0.1/workInfoHomepage",false);

    /** http://xmlns.com/foaf/0.1/workplaceHomepage */
	public static final URI WORKPLACEHOMEPAGE = new URIImpl("http://xmlns.com/foaf/0.1/workplaceHomepage",false);

    /** http://www.w3.org/2000/01/rdf-schema#comment */
	public static final URI COMMENT = new URIImpl("http://www.w3.org/2000/01/rdf-schema#comment",false);

    /** http://www.w3.org/2000/01/rdf-schema#label */
	public static final URI LABEL = new URIImpl("http://www.w3.org/2000/01/rdf-schema#label",false);

    /** http://www.w3.org/2000/01/rdf-schema#member */
	public static final URI MEMBER = new URIImpl("http://www.w3.org/2000/01/rdf-schema#member",false);

    /** http://www.w3.org/1999/02/22-rdf-syntax-ns#type */
	public static final URI TYPE = new URIImpl("http://www.w3.org/1999/02/22-rdf-syntax-ns#type",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
	@SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://xmlns.com/foaf/0.1/based_near",false),
      new URIImpl("http://xmlns.com/foaf/0.1/currentProject",false),
      new URIImpl("http://xmlns.com/foaf/0.1/familyName",false),
      new URIImpl("http://xmlns.com/foaf/0.1/family_name",false),
      new URIImpl("http://xmlns.com/foaf/0.1/firstName",false),
      new URIImpl("http://xmlns.com/foaf/0.1/geekcode",false),
      new URIImpl("http://xmlns.com/foaf/0.1/img",false),
      new URIImpl("http://xmlns.com/foaf/0.1/knows",false),
      new URIImpl("http://xmlns.com/foaf/0.1/lastName",false),
      new URIImpl("http://xmlns.com/foaf/0.1/myersBriggs",false),
      new URIImpl("http://xmlns.com/foaf/0.1/pastProject",false),
      new URIImpl("http://xmlns.com/foaf/0.1/plan",false),
      new URIImpl("http://xmlns.com/foaf/0.1/publications",false),
      new URIImpl("http://xmlns.com/foaf/0.1/schoolHomepage",false),
      new URIImpl("http://xmlns.com/foaf/0.1/surname",false),
      new URIImpl("http://xmlns.com/foaf/0.1/workInfoHomepage",false),
      new URIImpl("http://xmlns.com/foaf/0.1/workplaceHomepage",false),
      new URIImpl("http://www.w3.org/2000/01/rdf-schema#comment",false),
      new URIImpl("http://www.w3.org/2000/01/rdf-schema#label",false),
      new URIImpl("http://www.w3.org/2000/01/rdf-schema#member",false),
      new URIImpl("http://www.w3.org/1999/02/22-rdf-syntax-ns#type",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Person ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Person ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Person ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Person ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Person ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Person  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Person  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Person.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://xmlns.com/foaf/0.1/Person).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Person> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Person.class );
	}

    /**
	 * Remove rdf:type Person from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Knows' to this Person instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFKnows_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Person.KNOWS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Knows' to this Person instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFKnows_Inverse() {
		return Base.getAll_Inverse(this.model, Person.KNOWS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Knows' to this Person instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllFOAFKnows_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Person.KNOWS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a95d12e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFBasednear(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, BASEDNEAR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a95d12e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFBasednear() {
		return Base.has(this.model, this.getResource(), BASEDNEAR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a95d12e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFBasednear(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, BASEDNEAR, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a95d12e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFBasednear( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), BASEDNEAR, value);
	}

     /**
     * Get all values of property Basednear as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFBasednear_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, BASEDNEAR);
	}
	
    /**
     * Get all values of property Basednear as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFBasednear_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BASEDNEAR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Basednear as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFBasednear_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), BASEDNEAR);
	}

    /**
     * Get all values of property Basednear as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFBasednear_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), BASEDNEAR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Basednear     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<SpatialThing> getAllFOAFBasednear(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, BASEDNEAR, SpatialThing.class);
	}
	
    /**
     * Get all values of property Basednear as a ReactorResult of SpatialThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<SpatialThing> getAllFOAFBasednear_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, BASEDNEAR, SpatialThing.class);
	}

    /**
     * Get all values of property Basednear     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<SpatialThing> getAllFOAFBasednear() {
		return Base.getAll(this.model, this.getResource(), BASEDNEAR, SpatialThing.class);
	}

    /**
     * Get all values of property Basednear as a ReactorResult of SpatialThing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<SpatialThing> getAllFOAFBasednear_as() {
		return Base.getAll_as(this.model, this.getResource(), BASEDNEAR, SpatialThing.class);
	}
 
    /**
     * Adds a value to property Basednear as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFBasednear( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, BASEDNEAR, value);
	}
	
    /**
     * Adds a value to property Basednear as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFBasednear( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), BASEDNEAR, value);
	}
    /**
     * Adds a value to property Basednear from an instance of SpatialThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFBasednear(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, SpatialThing value) {
		Base.add(model, instanceResource, BASEDNEAR, value);
	}
	
    /**
     * Adds a value to property Basednear from an instance of SpatialThing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFBasednear(SpatialThing value) {
		Base.add(this.model, this.getResource(), BASEDNEAR, value);
	}
  

    /**
     * Sets a value of property Basednear from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFBasednear( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, BASEDNEAR, value);
	}
	
    /**
     * Sets a value of property Basednear from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFBasednear( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), BASEDNEAR, value);
	}
    /**
     * Sets a value of property Basednear from an instance of SpatialThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFBasednear(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, SpatialThing value) {
		Base.set(model, instanceResource, BASEDNEAR, value);
	}
	
    /**
     * Sets a value of property Basednear from an instance of SpatialThing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFBasednear(SpatialThing value) {
		Base.set(this.model, this.getResource(), BASEDNEAR, value);
	}
  


    /**
     * Removes a value of property Basednear as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFBasednear( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, BASEDNEAR, value);
	}
	
    /**
     * Removes a value of property Basednear as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFBasednear( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), BASEDNEAR, value);
	}
    /**
     * Removes a value of property Basednear given as an instance of SpatialThing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFBasednear(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, SpatialThing value) {
		Base.remove(model, instanceResource, BASEDNEAR, value);
	}
	
    /**
     * Removes a value of property Basednear given as an instance of SpatialThing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFBasednear(SpatialThing value) {
		Base.remove(this.model, this.getResource(), BASEDNEAR, value);
	}
  
    /**
     * Removes all values of property Basednear     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFBasednear( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, BASEDNEAR);
	}
	
    /**
     * Removes all values of property Basednear	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFBasednear() {
		Base.removeAll(this.model, this.getResource(), BASEDNEAR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b2fbba9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFCurrentproject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CURRENTPROJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b2fbba9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFCurrentproject() {
		return Base.has(this.model, this.getResource(), CURRENTPROJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b2fbba9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFCurrentproject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CURRENTPROJECT, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b2fbba9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFCurrentproject( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CURRENTPROJECT, value);
	}

     /**
     * Get all values of property Currentproject as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFCurrentproject_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CURRENTPROJECT);
	}
	
    /**
     * Get all values of property Currentproject as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFCurrentproject_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CURRENTPROJECT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Currentproject as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFCurrentproject_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CURRENTPROJECT);
	}

    /**
     * Get all values of property Currentproject as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFCurrentproject_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CURRENTPROJECT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Currentproject     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.owl.Thing> getAllFOAFCurrentproject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CURRENTPROJECT, org.ontoware.rdfreactor.schema.owl.Thing.class);
	}
	
    /**
     * Get all values of property Currentproject as a ReactorResult of org.ontoware.rdfreactor.schema.owl.Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.owl.Thing> getAllFOAFCurrentproject_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CURRENTPROJECT, org.ontoware.rdfreactor.schema.owl.Thing.class);
	}

    /**
     * Get all values of property Currentproject     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.owl.Thing> getAllFOAFCurrentproject() {
		return Base.getAll(this.model, this.getResource(), CURRENTPROJECT, org.ontoware.rdfreactor.schema.owl.Thing.class);
	}

    /**
     * Get all values of property Currentproject as a ReactorResult of org.ontoware.rdfreactor.schema.owl.Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.owl.Thing> getAllFOAFCurrentproject_as() {
		return Base.getAll_as(this.model, this.getResource(), CURRENTPROJECT, org.ontoware.rdfreactor.schema.owl.Thing.class);
	}
 
    /**
     * Adds a value to property Currentproject as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFCurrentproject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CURRENTPROJECT, value);
	}
	
    /**
     * Adds a value to property Currentproject as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFCurrentproject( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CURRENTPROJECT, value);
	}
    /**
     * Adds a value to property Currentproject from an instance of org.ontoware.rdfreactor.schema.owl.Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFCurrentproject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.add(model, instanceResource, CURRENTPROJECT, value);
	}
	
    /**
     * Adds a value to property Currentproject from an instance of org.ontoware.rdfreactor.schema.owl.Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFCurrentproject(org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.add(this.model, this.getResource(), CURRENTPROJECT, value);
	}
  

    /**
     * Sets a value of property Currentproject from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFCurrentproject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CURRENTPROJECT, value);
	}
	
    /**
     * Sets a value of property Currentproject from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFCurrentproject( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CURRENTPROJECT, value);
	}
    /**
     * Sets a value of property Currentproject from an instance of org.ontoware.rdfreactor.schema.owl.Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFCurrentproject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.set(model, instanceResource, CURRENTPROJECT, value);
	}
	
    /**
     * Sets a value of property Currentproject from an instance of org.ontoware.rdfreactor.schema.owl.Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFCurrentproject(org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.set(this.model, this.getResource(), CURRENTPROJECT, value);
	}
  


    /**
     * Removes a value of property Currentproject as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFCurrentproject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CURRENTPROJECT, value);
	}
	
    /**
     * Removes a value of property Currentproject as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFCurrentproject( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CURRENTPROJECT, value);
	}
    /**
     * Removes a value of property Currentproject given as an instance of org.ontoware.rdfreactor.schema.owl.Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFCurrentproject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.remove(model, instanceResource, CURRENTPROJECT, value);
	}
	
    /**
     * Removes a value of property Currentproject given as an instance of org.ontoware.rdfreactor.schema.owl.Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFCurrentproject(org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.remove(this.model, this.getResource(), CURRENTPROJECT, value);
	}
  
    /**
     * Removes all values of property Currentproject     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFCurrentproject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CURRENTPROJECT);
	}
	
    /**
     * Removes all values of property Currentproject	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFCurrentproject() {
		Base.removeAll(this.model, this.getResource(), CURRENTPROJECT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33ffb584 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFFamilyName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FAMILYNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33ffb584 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFFamilyName() {
		return Base.has(this.model, this.getResource(), FAMILYNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33ffb584 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFFamilyName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FAMILYNAME, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33ffb584 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFFamilyName( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FAMILYNAME, value);
	}

     /**
     * Get all values of property FamilyName as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFFamilyName_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FAMILYNAME);
	}
	
    /**
     * Get all values of property FamilyName as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFFamilyName_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FAMILYNAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FamilyName as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFFamilyName_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FAMILYNAME);
	}

    /**
     * Get all values of property FamilyName as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFFamilyName_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FAMILYNAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FamilyName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllFOAFFamilyName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FAMILYNAME, java.lang.String.class);
	}
	
    /**
     * Get all values of property FamilyName as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllFOAFFamilyName_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FAMILYNAME, java.lang.String.class);
	}

    /**
     * Get all values of property FamilyName     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllFOAFFamilyName() {
		return Base.getAll(this.model, this.getResource(), FAMILYNAME, java.lang.String.class);
	}

    /**
     * Get all values of property FamilyName as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllFOAFFamilyName_as() {
		return Base.getAll_as(this.model, this.getResource(), FAMILYNAME, java.lang.String.class);
	}
 
    /**
     * Adds a value to property FamilyName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFFamilyName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FAMILYNAME, value);
	}
	
    /**
     * Adds a value to property FamilyName as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFFamilyName( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FAMILYNAME, value);
	}
    /**
     * Adds a value to property FamilyName from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFFamilyName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, FAMILYNAME, value);
	}
	
    /**
     * Adds a value to property FamilyName from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFFamilyName(java.lang.String value) {
		Base.add(this.model, this.getResource(), FAMILYNAME, value);
	}
  

    /**
     * Sets a value of property FamilyName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFFamilyName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FAMILYNAME, value);
	}
	
    /**
     * Sets a value of property FamilyName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFFamilyName( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FAMILYNAME, value);
	}
    /**
     * Sets a value of property FamilyName from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFFamilyName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, FAMILYNAME, value);
	}
	
    /**
     * Sets a value of property FamilyName from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFFamilyName(java.lang.String value) {
		Base.set(this.model, this.getResource(), FAMILYNAME, value);
	}
  


    /**
     * Removes a value of property FamilyName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFFamilyName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FAMILYNAME, value);
	}
	
    /**
     * Removes a value of property FamilyName as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFFamilyName( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FAMILYNAME, value);
	}
    /**
     * Removes a value of property FamilyName given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFFamilyName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, FAMILYNAME, value);
	}
	
    /**
     * Removes a value of property FamilyName given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFFamilyName(java.lang.String value) {
		Base.remove(this.model, this.getResource(), FAMILYNAME, value);
	}
  
    /**
     * Removes all values of property FamilyName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFFamilyName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FAMILYNAME);
	}
	
    /**
     * Removes all values of property FamilyName	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFFamilyName() {
		Base.removeAll(this.model, this.getResource(), FAMILYNAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69d254f9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFFamilyname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FAMILYNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69d254f9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFFamilyname() {
		return Base.has(this.model, this.getResource(), FAMILYNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69d254f9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFFamilyname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FAMILYNAME, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69d254f9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFFamilyname( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FAMILYNAME, value);
	}

     /**
     * Get all values of property Familyname as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFFamilyname_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FAMILYNAME);
	}
	
    /**
     * Get all values of property Familyname as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFFamilyname_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FAMILYNAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Familyname as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFFamilyname_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FAMILYNAME);
	}

    /**
     * Get all values of property Familyname as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFFamilyname_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FAMILYNAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Familyname     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllFOAFFamilyname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FAMILYNAME, java.lang.String.class);
	}
	
    /**
     * Get all values of property Familyname as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllFOAFFamilyname_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FAMILYNAME, java.lang.String.class);
	}

    /**
     * Get all values of property Familyname     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllFOAFFamilyname() {
		return Base.getAll(this.model, this.getResource(), FAMILYNAME, java.lang.String.class);
	}

    /**
     * Get all values of property Familyname as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllFOAFFamilyname_as() {
		return Base.getAll_as(this.model, this.getResource(), FAMILYNAME, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Familyname as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFFamilyname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FAMILYNAME, value);
	}
	
    /**
     * Adds a value to property Familyname as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFFamilyname( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FAMILYNAME, value);
	}
    /**
     * Adds a value to property Familyname from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFFamilyname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, FAMILYNAME, value);
	}
	
    /**
     * Adds a value to property Familyname from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFFamilyname(java.lang.String value) {
		Base.add(this.model, this.getResource(), FAMILYNAME, value);
	}
  

    /**
     * Sets a value of property Familyname from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFFamilyname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FAMILYNAME, value);
	}
	
    /**
     * Sets a value of property Familyname from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFFamilyname( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FAMILYNAME, value);
	}
    /**
     * Sets a value of property Familyname from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFFamilyname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, FAMILYNAME, value);
	}
	
    /**
     * Sets a value of property Familyname from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFFamilyname(java.lang.String value) {
		Base.set(this.model, this.getResource(), FAMILYNAME, value);
	}
  


    /**
     * Removes a value of property Familyname as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFFamilyname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FAMILYNAME, value);
	}
	
    /**
     * Removes a value of property Familyname as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFFamilyname( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FAMILYNAME, value);
	}
    /**
     * Removes a value of property Familyname given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFFamilyname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, FAMILYNAME, value);
	}
	
    /**
     * Removes a value of property Familyname given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFFamilyname(java.lang.String value) {
		Base.remove(this.model, this.getResource(), FAMILYNAME, value);
	}
  
    /**
     * Removes all values of property Familyname     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFFamilyname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FAMILYNAME);
	}
	
    /**
     * Removes all values of property Familyname	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFFamilyname() {
		Base.removeAll(this.model, this.getResource(), FAMILYNAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fe677c4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFFirstName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FIRSTNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fe677c4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFFirstName() {
		return Base.has(this.model, this.getResource(), FIRSTNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fe677c4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFFirstName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FIRSTNAME, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fe677c4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFFirstName( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FIRSTNAME, value);
	}

     /**
     * Get all values of property FirstName as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFFirstName_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FIRSTNAME);
	}
	
    /**
     * Get all values of property FirstName as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFFirstName_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FIRSTNAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FirstName as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFFirstName_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FIRSTNAME);
	}

    /**
     * Get all values of property FirstName as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFFirstName_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FIRSTNAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FirstName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllFOAFFirstName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FIRSTNAME, java.lang.String.class);
	}
	
    /**
     * Get all values of property FirstName as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllFOAFFirstName_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FIRSTNAME, java.lang.String.class);
	}

    /**
     * Get all values of property FirstName     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllFOAFFirstName() {
		return Base.getAll(this.model, this.getResource(), FIRSTNAME, java.lang.String.class);
	}

    /**
     * Get all values of property FirstName as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllFOAFFirstName_as() {
		return Base.getAll_as(this.model, this.getResource(), FIRSTNAME, java.lang.String.class);
	}
 
    /**
     * Adds a value to property FirstName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFFirstName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FIRSTNAME, value);
	}
	
    /**
     * Adds a value to property FirstName as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFFirstName( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FIRSTNAME, value);
	}
    /**
     * Adds a value to property FirstName from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFFirstName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, FIRSTNAME, value);
	}
	
    /**
     * Adds a value to property FirstName from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFFirstName(java.lang.String value) {
		Base.add(this.model, this.getResource(), FIRSTNAME, value);
	}
  

    /**
     * Sets a value of property FirstName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFFirstName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FIRSTNAME, value);
	}
	
    /**
     * Sets a value of property FirstName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFFirstName( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FIRSTNAME, value);
	}
    /**
     * Sets a value of property FirstName from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFFirstName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, FIRSTNAME, value);
	}
	
    /**
     * Sets a value of property FirstName from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFFirstName(java.lang.String value) {
		Base.set(this.model, this.getResource(), FIRSTNAME, value);
	}
  


    /**
     * Removes a value of property FirstName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFFirstName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FIRSTNAME, value);
	}
	
    /**
     * Removes a value of property FirstName as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFFirstName( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FIRSTNAME, value);
	}
    /**
     * Removes a value of property FirstName given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFFirstName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, FIRSTNAME, value);
	}
	
    /**
     * Removes a value of property FirstName given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFFirstName(java.lang.String value) {
		Base.remove(this.model, this.getResource(), FIRSTNAME, value);
	}
  
    /**
     * Removes all values of property FirstName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFFirstName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FIRSTNAME);
	}
	
    /**
     * Removes all values of property FirstName	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFFirstName() {
		Base.removeAll(this.model, this.getResource(), FIRSTNAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@106df971 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFGeekcode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GEEKCODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@106df971 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFGeekcode() {
		return Base.has(this.model, this.getResource(), GEEKCODE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@106df971 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFGeekcode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GEEKCODE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@106df971 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFGeekcode( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GEEKCODE, value);
	}

     /**
     * Get all values of property Geekcode as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFGeekcode_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GEEKCODE);
	}
	
    /**
     * Get all values of property Geekcode as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFGeekcode_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GEEKCODE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Geekcode as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFGeekcode_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GEEKCODE);
	}

    /**
     * Get all values of property Geekcode as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFGeekcode_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GEEKCODE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Geekcode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllFOAFGeekcode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GEEKCODE, java.lang.String.class);
	}
	
    /**
     * Get all values of property Geekcode as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllFOAFGeekcode_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GEEKCODE, java.lang.String.class);
	}

    /**
     * Get all values of property Geekcode     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllFOAFGeekcode() {
		return Base.getAll(this.model, this.getResource(), GEEKCODE, java.lang.String.class);
	}

    /**
     * Get all values of property Geekcode as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllFOAFGeekcode_as() {
		return Base.getAll_as(this.model, this.getResource(), GEEKCODE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Geekcode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFGeekcode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GEEKCODE, value);
	}
	
    /**
     * Adds a value to property Geekcode as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFGeekcode( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GEEKCODE, value);
	}
    /**
     * Adds a value to property Geekcode from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFGeekcode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, GEEKCODE, value);
	}
	
    /**
     * Adds a value to property Geekcode from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFGeekcode(java.lang.String value) {
		Base.add(this.model, this.getResource(), GEEKCODE, value);
	}
  

    /**
     * Sets a value of property Geekcode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFGeekcode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GEEKCODE, value);
	}
	
    /**
     * Sets a value of property Geekcode from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFGeekcode( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GEEKCODE, value);
	}
    /**
     * Sets a value of property Geekcode from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFGeekcode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, GEEKCODE, value);
	}
	
    /**
     * Sets a value of property Geekcode from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFGeekcode(java.lang.String value) {
		Base.set(this.model, this.getResource(), GEEKCODE, value);
	}
  


    /**
     * Removes a value of property Geekcode as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFGeekcode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GEEKCODE, value);
	}
	
    /**
     * Removes a value of property Geekcode as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFGeekcode( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GEEKCODE, value);
	}
    /**
     * Removes a value of property Geekcode given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFGeekcode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, GEEKCODE, value);
	}
	
    /**
     * Removes a value of property Geekcode given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFGeekcode(java.lang.String value) {
		Base.remove(this.model, this.getResource(), GEEKCODE, value);
	}
  
    /**
     * Removes all values of property Geekcode     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFGeekcode( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GEEKCODE);
	}
	
    /**
     * Removes all values of property Geekcode	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFGeekcode() {
		Base.removeAll(this.model, this.getResource(), GEEKCODE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69d13cb2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFImage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, IMAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69d13cb2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFImage() {
		return Base.has(this.model, this.getResource(), IMAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69d13cb2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFImage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, IMAGE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69d13cb2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFImage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), IMAGE, value);
	}

     /**
     * Get all values of property Image as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFImage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, IMAGE);
	}
	
    /**
     * Get all values of property Image as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFImage_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Image as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFImage_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), IMAGE);
	}

    /**
     * Get all values of property Image as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFImage_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), IMAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Image     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Image> getAllFOAFImage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, IMAGE, Image.class);
	}
	
    /**
     * Get all values of property Image as a ReactorResult of Image 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Image> getAllFOAFImage_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IMAGE, Image.class);
	}

    /**
     * Get all values of property Image     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Image> getAllFOAFImage() {
		return Base.getAll(this.model, this.getResource(), IMAGE, Image.class);
	}

    /**
     * Get all values of property Image as a ReactorResult of Image 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Image> getAllFOAFImage_as() {
		return Base.getAll_as(this.model, this.getResource(), IMAGE, Image.class);
	}
 
    /**
     * Adds a value to property Image as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFImage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, IMAGE, value);
	}
	
    /**
     * Adds a value to property Image as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFImage( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), IMAGE, value);
	}
    /**
     * Adds a value to property Image from an instance of Image 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFImage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Image value) {
		Base.add(model, instanceResource, IMAGE, value);
	}
	
    /**
     * Adds a value to property Image from an instance of Image 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFImage(Image value) {
		Base.add(this.model, this.getResource(), IMAGE, value);
	}
  

    /**
     * Sets a value of property Image from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFImage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, IMAGE, value);
	}
	
    /**
     * Sets a value of property Image from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFImage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), IMAGE, value);
	}
    /**
     * Sets a value of property Image from an instance of Image 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFImage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Image value) {
		Base.set(model, instanceResource, IMAGE, value);
	}
	
    /**
     * Sets a value of property Image from an instance of Image 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFImage(Image value) {
		Base.set(this.model, this.getResource(), IMAGE, value);
	}
  


    /**
     * Removes a value of property Image as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFImage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, IMAGE, value);
	}
	
    /**
     * Removes a value of property Image as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFImage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), IMAGE, value);
	}
    /**
     * Removes a value of property Image given as an instance of Image 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFImage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Image value) {
		Base.remove(model, instanceResource, IMAGE, value);
	}
	
    /**
     * Removes a value of property Image given as an instance of Image 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFImage(Image value) {
		Base.remove(this.model, this.getResource(), IMAGE, value);
	}
  
    /**
     * Removes all values of property Image     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFImage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, IMAGE);
	}
	
    /**
     * Removes all values of property Image	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFImage() {
		Base.removeAll(this.model, this.getResource(), IMAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a4da220 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFKnows(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, KNOWS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a4da220 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFKnows() {
		return Base.has(this.model, this.getResource(), KNOWS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a4da220 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFKnows(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, KNOWS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a4da220 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFKnows( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), KNOWS, value);
	}

     /**
     * Get all values of property Knows as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFKnows_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, KNOWS);
	}
	
    /**
     * Get all values of property Knows as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFKnows_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, KNOWS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Knows as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFKnows_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), KNOWS);
	}

    /**
     * Get all values of property Knows as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFKnows_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), KNOWS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Knows     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Person> getAllFOAFKnows(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, KNOWS, Person.class);
	}
	
    /**
     * Get all values of property Knows as a ReactorResult of Person 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Person> getAllFOAFKnows_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, KNOWS, Person.class);
	}

    /**
     * Get all values of property Knows     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Person> getAllFOAFKnows() {
		return Base.getAll(this.model, this.getResource(), KNOWS, Person.class);
	}

    /**
     * Get all values of property Knows as a ReactorResult of Person 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Person> getAllFOAFKnows_as() {
		return Base.getAll_as(this.model, this.getResource(), KNOWS, Person.class);
	}
 
    /**
     * Adds a value to property Knows as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFKnows( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, KNOWS, value);
	}
	
    /**
     * Adds a value to property Knows as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFKnows( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), KNOWS, value);
	}
    /**
     * Adds a value to property Knows from an instance of Person 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFKnows(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Person value) {
		Base.add(model, instanceResource, KNOWS, value);
	}
	
    /**
     * Adds a value to property Knows from an instance of Person 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFKnows(Person value) {
		Base.add(this.model, this.getResource(), KNOWS, value);
	}
  

    /**
     * Sets a value of property Knows from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFKnows( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, KNOWS, value);
	}
	
    /**
     * Sets a value of property Knows from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFKnows( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), KNOWS, value);
	}
    /**
     * Sets a value of property Knows from an instance of Person 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFKnows(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Person value) {
		Base.set(model, instanceResource, KNOWS, value);
	}
	
    /**
     * Sets a value of property Knows from an instance of Person 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFKnows(Person value) {
		Base.set(this.model, this.getResource(), KNOWS, value);
	}
  


    /**
     * Removes a value of property Knows as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFKnows( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, KNOWS, value);
	}
	
    /**
     * Removes a value of property Knows as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFKnows( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), KNOWS, value);
	}
    /**
     * Removes a value of property Knows given as an instance of Person 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFKnows(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Person value) {
		Base.remove(model, instanceResource, KNOWS, value);
	}
	
    /**
     * Removes a value of property Knows given as an instance of Person 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFKnows(Person value) {
		Base.remove(this.model, this.getResource(), KNOWS, value);
	}
  
    /**
     * Removes all values of property Knows     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFKnows( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, KNOWS);
	}
	
    /**
     * Removes all values of property Knows	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFKnows() {
		Base.removeAll(this.model, this.getResource(), KNOWS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@680112df has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFLastName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LASTNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@680112df has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFLastName() {
		return Base.has(this.model, this.getResource(), LASTNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@680112df has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFLastName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LASTNAME, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@680112df has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFLastName( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LASTNAME, value);
	}

     /**
     * Get all values of property LastName as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFLastName_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LASTNAME);
	}
	
    /**
     * Get all values of property LastName as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFLastName_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LASTNAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property LastName as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFLastName_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LASTNAME);
	}

    /**
     * Get all values of property LastName as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFLastName_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LASTNAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property LastName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllFOAFLastName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LASTNAME, java.lang.String.class);
	}
	
    /**
     * Get all values of property LastName as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllFOAFLastName_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LASTNAME, java.lang.String.class);
	}

    /**
     * Get all values of property LastName     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllFOAFLastName() {
		return Base.getAll(this.model, this.getResource(), LASTNAME, java.lang.String.class);
	}

    /**
     * Get all values of property LastName as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllFOAFLastName_as() {
		return Base.getAll_as(this.model, this.getResource(), LASTNAME, java.lang.String.class);
	}
 
    /**
     * Adds a value to property LastName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFLastName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LASTNAME, value);
	}
	
    /**
     * Adds a value to property LastName as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFLastName( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LASTNAME, value);
	}
    /**
     * Adds a value to property LastName from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFLastName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, LASTNAME, value);
	}
	
    /**
     * Adds a value to property LastName from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFLastName(java.lang.String value) {
		Base.add(this.model, this.getResource(), LASTNAME, value);
	}
  

    /**
     * Sets a value of property LastName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFLastName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LASTNAME, value);
	}
	
    /**
     * Sets a value of property LastName from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFLastName( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LASTNAME, value);
	}
    /**
     * Sets a value of property LastName from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFLastName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, LASTNAME, value);
	}
	
    /**
     * Sets a value of property LastName from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFLastName(java.lang.String value) {
		Base.set(this.model, this.getResource(), LASTNAME, value);
	}
  


    /**
     * Removes a value of property LastName as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFLastName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LASTNAME, value);
	}
	
    /**
     * Removes a value of property LastName as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFLastName( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LASTNAME, value);
	}
    /**
     * Removes a value of property LastName given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFLastName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, LASTNAME, value);
	}
	
    /**
     * Removes a value of property LastName given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFLastName(java.lang.String value) {
		Base.remove(this.model, this.getResource(), LASTNAME, value);
	}
  
    /**
     * Removes all values of property LastName     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFLastName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LASTNAME);
	}
	
    /**
     * Removes all values of property LastName	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFLastName() {
		Base.removeAll(this.model, this.getResource(), LASTNAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55167e58 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFMyersBriggs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MYERSBRIGGS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55167e58 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFMyersBriggs() {
		return Base.has(this.model, this.getResource(), MYERSBRIGGS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55167e58 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFMyersBriggs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MYERSBRIGGS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55167e58 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFMyersBriggs( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MYERSBRIGGS, value);
	}

     /**
     * Get all values of property MyersBriggs as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFMyersBriggs_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MYERSBRIGGS);
	}
	
    /**
     * Get all values of property MyersBriggs as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFMyersBriggs_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MYERSBRIGGS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property MyersBriggs as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFMyersBriggs_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MYERSBRIGGS);
	}

    /**
     * Get all values of property MyersBriggs as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFMyersBriggs_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MYERSBRIGGS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property MyersBriggs     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllFOAFMyersBriggs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MYERSBRIGGS, java.lang.String.class);
	}
	
    /**
     * Get all values of property MyersBriggs as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllFOAFMyersBriggs_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MYERSBRIGGS, java.lang.String.class);
	}

    /**
     * Get all values of property MyersBriggs     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllFOAFMyersBriggs() {
		return Base.getAll(this.model, this.getResource(), MYERSBRIGGS, java.lang.String.class);
	}

    /**
     * Get all values of property MyersBriggs as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllFOAFMyersBriggs_as() {
		return Base.getAll_as(this.model, this.getResource(), MYERSBRIGGS, java.lang.String.class);
	}
 
    /**
     * Adds a value to property MyersBriggs as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFMyersBriggs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MYERSBRIGGS, value);
	}
	
    /**
     * Adds a value to property MyersBriggs as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFMyersBriggs( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MYERSBRIGGS, value);
	}
    /**
     * Adds a value to property MyersBriggs from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFMyersBriggs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, MYERSBRIGGS, value);
	}
	
    /**
     * Adds a value to property MyersBriggs from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFMyersBriggs(java.lang.String value) {
		Base.add(this.model, this.getResource(), MYERSBRIGGS, value);
	}
  

    /**
     * Sets a value of property MyersBriggs from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFMyersBriggs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MYERSBRIGGS, value);
	}
	
    /**
     * Sets a value of property MyersBriggs from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFMyersBriggs( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MYERSBRIGGS, value);
	}
    /**
     * Sets a value of property MyersBriggs from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFMyersBriggs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, MYERSBRIGGS, value);
	}
	
    /**
     * Sets a value of property MyersBriggs from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFMyersBriggs(java.lang.String value) {
		Base.set(this.model, this.getResource(), MYERSBRIGGS, value);
	}
  


    /**
     * Removes a value of property MyersBriggs as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFMyersBriggs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MYERSBRIGGS, value);
	}
	
    /**
     * Removes a value of property MyersBriggs as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFMyersBriggs( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MYERSBRIGGS, value);
	}
    /**
     * Removes a value of property MyersBriggs given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFMyersBriggs(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, MYERSBRIGGS, value);
	}
	
    /**
     * Removes a value of property MyersBriggs given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFMyersBriggs(java.lang.String value) {
		Base.remove(this.model, this.getResource(), MYERSBRIGGS, value);
	}
  
    /**
     * Removes all values of property MyersBriggs     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFMyersBriggs( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MYERSBRIGGS);
	}
	
    /**
     * Removes all values of property MyersBriggs	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFMyersBriggs() {
		Base.removeAll(this.model, this.getResource(), MYERSBRIGGS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73630a24 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFPastproject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PASTPROJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73630a24 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFPastproject() {
		return Base.has(this.model, this.getResource(), PASTPROJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73630a24 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFPastproject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PASTPROJECT, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73630a24 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFPastproject( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PASTPROJECT, value);
	}

     /**
     * Get all values of property Pastproject as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFPastproject_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PASTPROJECT);
	}
	
    /**
     * Get all values of property Pastproject as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFPastproject_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PASTPROJECT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Pastproject as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFPastproject_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PASTPROJECT);
	}

    /**
     * Get all values of property Pastproject as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFPastproject_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PASTPROJECT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Pastproject     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.owl.Thing> getAllFOAFPastproject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PASTPROJECT, org.ontoware.rdfreactor.schema.owl.Thing.class);
	}
	
    /**
     * Get all values of property Pastproject as a ReactorResult of org.ontoware.rdfreactor.schema.owl.Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.owl.Thing> getAllFOAFPastproject_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PASTPROJECT, org.ontoware.rdfreactor.schema.owl.Thing.class);
	}

    /**
     * Get all values of property Pastproject     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.owl.Thing> getAllFOAFPastproject() {
		return Base.getAll(this.model, this.getResource(), PASTPROJECT, org.ontoware.rdfreactor.schema.owl.Thing.class);
	}

    /**
     * Get all values of property Pastproject as a ReactorResult of org.ontoware.rdfreactor.schema.owl.Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.owl.Thing> getAllFOAFPastproject_as() {
		return Base.getAll_as(this.model, this.getResource(), PASTPROJECT, org.ontoware.rdfreactor.schema.owl.Thing.class);
	}
 
    /**
     * Adds a value to property Pastproject as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFPastproject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PASTPROJECT, value);
	}
	
    /**
     * Adds a value to property Pastproject as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFPastproject( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PASTPROJECT, value);
	}
    /**
     * Adds a value to property Pastproject from an instance of org.ontoware.rdfreactor.schema.owl.Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFPastproject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.add(model, instanceResource, PASTPROJECT, value);
	}
	
    /**
     * Adds a value to property Pastproject from an instance of org.ontoware.rdfreactor.schema.owl.Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFPastproject(org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.add(this.model, this.getResource(), PASTPROJECT, value);
	}
  

    /**
     * Sets a value of property Pastproject from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFPastproject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PASTPROJECT, value);
	}
	
    /**
     * Sets a value of property Pastproject from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFPastproject( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PASTPROJECT, value);
	}
    /**
     * Sets a value of property Pastproject from an instance of org.ontoware.rdfreactor.schema.owl.Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFPastproject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.set(model, instanceResource, PASTPROJECT, value);
	}
	
    /**
     * Sets a value of property Pastproject from an instance of org.ontoware.rdfreactor.schema.owl.Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFPastproject(org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.set(this.model, this.getResource(), PASTPROJECT, value);
	}
  


    /**
     * Removes a value of property Pastproject as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFPastproject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PASTPROJECT, value);
	}
	
    /**
     * Removes a value of property Pastproject as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFPastproject( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PASTPROJECT, value);
	}
    /**
     * Removes a value of property Pastproject given as an instance of org.ontoware.rdfreactor.schema.owl.Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFPastproject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.remove(model, instanceResource, PASTPROJECT, value);
	}
	
    /**
     * Removes a value of property Pastproject given as an instance of org.ontoware.rdfreactor.schema.owl.Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFPastproject(org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.remove(this.model, this.getResource(), PASTPROJECT, value);
	}
  
    /**
     * Removes all values of property Pastproject     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFPastproject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PASTPROJECT);
	}
	
    /**
     * Removes all values of property Pastproject	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFPastproject() {
		Base.removeAll(this.model, this.getResource(), PASTPROJECT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c6fa3f3 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFPlan(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PLAN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c6fa3f3 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFPlan() {
		return Base.has(this.model, this.getResource(), PLAN);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c6fa3f3 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFPlan(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PLAN, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c6fa3f3 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFPlan( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PLAN, value);
	}

     /**
     * Get all values of property Plan as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFPlan_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PLAN);
	}
	
    /**
     * Get all values of property Plan as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFPlan_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PLAN, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Plan as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFPlan_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PLAN);
	}

    /**
     * Get all values of property Plan as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFPlan_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PLAN, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Plan     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllFOAFPlan(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PLAN, java.lang.String.class);
	}
	
    /**
     * Get all values of property Plan as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllFOAFPlan_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PLAN, java.lang.String.class);
	}

    /**
     * Get all values of property Plan     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllFOAFPlan() {
		return Base.getAll(this.model, this.getResource(), PLAN, java.lang.String.class);
	}

    /**
     * Get all values of property Plan as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllFOAFPlan_as() {
		return Base.getAll_as(this.model, this.getResource(), PLAN, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Plan as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFPlan( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PLAN, value);
	}
	
    /**
     * Adds a value to property Plan as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFPlan( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PLAN, value);
	}
    /**
     * Adds a value to property Plan from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFPlan(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, PLAN, value);
	}
	
    /**
     * Adds a value to property Plan from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFPlan(java.lang.String value) {
		Base.add(this.model, this.getResource(), PLAN, value);
	}
  

    /**
     * Sets a value of property Plan from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFPlan( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PLAN, value);
	}
	
    /**
     * Sets a value of property Plan from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFPlan( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PLAN, value);
	}
    /**
     * Sets a value of property Plan from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFPlan(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, PLAN, value);
	}
	
    /**
     * Sets a value of property Plan from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFPlan(java.lang.String value) {
		Base.set(this.model, this.getResource(), PLAN, value);
	}
  


    /**
     * Removes a value of property Plan as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFPlan( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PLAN, value);
	}
	
    /**
     * Removes a value of property Plan as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFPlan( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PLAN, value);
	}
    /**
     * Removes a value of property Plan given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFPlan(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, PLAN, value);
	}
	
    /**
     * Removes a value of property Plan given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFPlan(java.lang.String value) {
		Base.remove(this.model, this.getResource(), PLAN, value);
	}
  
    /**
     * Removes all values of property Plan     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFPlan( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PLAN);
	}
	
    /**
     * Removes all values of property Plan	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFPlan() {
		Base.removeAll(this.model, this.getResource(), PLAN);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c79b12a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFPublications(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PUBLICATIONS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c79b12a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFPublications() {
		return Base.has(this.model, this.getResource(), PUBLICATIONS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c79b12a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFPublications(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PUBLICATIONS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c79b12a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFPublications( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PUBLICATIONS, value);
	}

     /**
     * Get all values of property Publications as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFPublications_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PUBLICATIONS);
	}
	
    /**
     * Get all values of property Publications as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFPublications_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PUBLICATIONS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Publications as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFPublications_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PUBLICATIONS);
	}

    /**
     * Get all values of property Publications as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFPublications_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PUBLICATIONS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Publications     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Document> getAllFOAFPublications(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PUBLICATIONS, Document.class);
	}
	
    /**
     * Get all values of property Publications as a ReactorResult of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Document> getAllFOAFPublications_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PUBLICATIONS, Document.class);
	}

    /**
     * Get all values of property Publications     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Document> getAllFOAFPublications() {
		return Base.getAll(this.model, this.getResource(), PUBLICATIONS, Document.class);
	}

    /**
     * Get all values of property Publications as a ReactorResult of Document 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Document> getAllFOAFPublications_as() {
		return Base.getAll_as(this.model, this.getResource(), PUBLICATIONS, Document.class);
	}
 
    /**
     * Adds a value to property Publications as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFPublications( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PUBLICATIONS, value);
	}
	
    /**
     * Adds a value to property Publications as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFPublications( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PUBLICATIONS, value);
	}
    /**
     * Adds a value to property Publications from an instance of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFPublications(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.add(model, instanceResource, PUBLICATIONS, value);
	}
	
    /**
     * Adds a value to property Publications from an instance of Document 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFPublications(Document value) {
		Base.add(this.model, this.getResource(), PUBLICATIONS, value);
	}
  

    /**
     * Sets a value of property Publications from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFPublications( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PUBLICATIONS, value);
	}
	
    /**
     * Sets a value of property Publications from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFPublications( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PUBLICATIONS, value);
	}
    /**
     * Sets a value of property Publications from an instance of Document 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFPublications(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.set(model, instanceResource, PUBLICATIONS, value);
	}
	
    /**
     * Sets a value of property Publications from an instance of Document 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFPublications(Document value) {
		Base.set(this.model, this.getResource(), PUBLICATIONS, value);
	}
  


    /**
     * Removes a value of property Publications as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFPublications( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PUBLICATIONS, value);
	}
	
    /**
     * Removes a value of property Publications as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFPublications( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PUBLICATIONS, value);
	}
    /**
     * Removes a value of property Publications given as an instance of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFPublications(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.remove(model, instanceResource, PUBLICATIONS, value);
	}
	
    /**
     * Removes a value of property Publications given as an instance of Document 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFPublications(Document value) {
		Base.remove(this.model, this.getResource(), PUBLICATIONS, value);
	}
  
    /**
     * Removes all values of property Publications     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFPublications( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PUBLICATIONS);
	}
	
    /**
     * Removes all values of property Publications	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFPublications() {
		Base.removeAll(this.model, this.getResource(), PUBLICATIONS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29e31934 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFSchoolHomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SCHOOLHOMEPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29e31934 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFSchoolHomepage() {
		return Base.has(this.model, this.getResource(), SCHOOLHOMEPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29e31934 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFSchoolHomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SCHOOLHOMEPAGE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29e31934 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFSchoolHomepage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SCHOOLHOMEPAGE, value);
	}

     /**
     * Get all values of property SchoolHomepage as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFSchoolHomepage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SCHOOLHOMEPAGE);
	}
	
    /**
     * Get all values of property SchoolHomepage as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFSchoolHomepage_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SCHOOLHOMEPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property SchoolHomepage as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFSchoolHomepage_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SCHOOLHOMEPAGE);
	}

    /**
     * Get all values of property SchoolHomepage as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFSchoolHomepage_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SCHOOLHOMEPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property SchoolHomepage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Document> getAllFOAFSchoolHomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SCHOOLHOMEPAGE, Document.class);
	}
	
    /**
     * Get all values of property SchoolHomepage as a ReactorResult of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Document> getAllFOAFSchoolHomepage_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SCHOOLHOMEPAGE, Document.class);
	}

    /**
     * Get all values of property SchoolHomepage     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Document> getAllFOAFSchoolHomepage() {
		return Base.getAll(this.model, this.getResource(), SCHOOLHOMEPAGE, Document.class);
	}

    /**
     * Get all values of property SchoolHomepage as a ReactorResult of Document 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Document> getAllFOAFSchoolHomepage_as() {
		return Base.getAll_as(this.model, this.getResource(), SCHOOLHOMEPAGE, Document.class);
	}
 
    /**
     * Adds a value to property SchoolHomepage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFSchoolHomepage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SCHOOLHOMEPAGE, value);
	}
	
    /**
     * Adds a value to property SchoolHomepage as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFSchoolHomepage( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SCHOOLHOMEPAGE, value);
	}
    /**
     * Adds a value to property SchoolHomepage from an instance of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFSchoolHomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.add(model, instanceResource, SCHOOLHOMEPAGE, value);
	}
	
    /**
     * Adds a value to property SchoolHomepage from an instance of Document 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFSchoolHomepage(Document value) {
		Base.add(this.model, this.getResource(), SCHOOLHOMEPAGE, value);
	}
  

    /**
     * Sets a value of property SchoolHomepage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFSchoolHomepage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SCHOOLHOMEPAGE, value);
	}
	
    /**
     * Sets a value of property SchoolHomepage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFSchoolHomepage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SCHOOLHOMEPAGE, value);
	}
    /**
     * Sets a value of property SchoolHomepage from an instance of Document 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFSchoolHomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.set(model, instanceResource, SCHOOLHOMEPAGE, value);
	}
	
    /**
     * Sets a value of property SchoolHomepage from an instance of Document 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFSchoolHomepage(Document value) {
		Base.set(this.model, this.getResource(), SCHOOLHOMEPAGE, value);
	}
  


    /**
     * Removes a value of property SchoolHomepage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFSchoolHomepage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SCHOOLHOMEPAGE, value);
	}
	
    /**
     * Removes a value of property SchoolHomepage as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFSchoolHomepage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SCHOOLHOMEPAGE, value);
	}
    /**
     * Removes a value of property SchoolHomepage given as an instance of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFSchoolHomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.remove(model, instanceResource, SCHOOLHOMEPAGE, value);
	}
	
    /**
     * Removes a value of property SchoolHomepage given as an instance of Document 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFSchoolHomepage(Document value) {
		Base.remove(this.model, this.getResource(), SCHOOLHOMEPAGE, value);
	}
  
    /**
     * Removes all values of property SchoolHomepage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFSchoolHomepage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SCHOOLHOMEPAGE);
	}
	
    /**
     * Removes all values of property SchoolHomepage	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFSchoolHomepage() {
		Base.removeAll(this.model, this.getResource(), SCHOOLHOMEPAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@66b3b2c4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFSurname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SURNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@66b3b2c4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFSurname() {
		return Base.has(this.model, this.getResource(), SURNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@66b3b2c4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFSurname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SURNAME, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@66b3b2c4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFSurname( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SURNAME, value);
	}

     /**
     * Get all values of property Surname as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFSurname_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SURNAME);
	}
	
    /**
     * Get all values of property Surname as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFSurname_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SURNAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Surname as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFSurname_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SURNAME);
	}

    /**
     * Get all values of property Surname as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFSurname_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SURNAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Surname     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllFOAFSurname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SURNAME, java.lang.String.class);
	}
	
    /**
     * Get all values of property Surname as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllFOAFSurname_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SURNAME, java.lang.String.class);
	}

    /**
     * Get all values of property Surname     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllFOAFSurname() {
		return Base.getAll(this.model, this.getResource(), SURNAME, java.lang.String.class);
	}

    /**
     * Get all values of property Surname as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllFOAFSurname_as() {
		return Base.getAll_as(this.model, this.getResource(), SURNAME, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Surname as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFSurname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SURNAME, value);
	}
	
    /**
     * Adds a value to property Surname as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFSurname( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SURNAME, value);
	}
    /**
     * Adds a value to property Surname from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFSurname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, SURNAME, value);
	}
	
    /**
     * Adds a value to property Surname from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFSurname(java.lang.String value) {
		Base.add(this.model, this.getResource(), SURNAME, value);
	}
  

    /**
     * Sets a value of property Surname from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFSurname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SURNAME, value);
	}
	
    /**
     * Sets a value of property Surname from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFSurname( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SURNAME, value);
	}
    /**
     * Sets a value of property Surname from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFSurname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, SURNAME, value);
	}
	
    /**
     * Sets a value of property Surname from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFSurname(java.lang.String value) {
		Base.set(this.model, this.getResource(), SURNAME, value);
	}
  


    /**
     * Removes a value of property Surname as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFSurname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SURNAME, value);
	}
	
    /**
     * Removes a value of property Surname as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFSurname( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SURNAME, value);
	}
    /**
     * Removes a value of property Surname given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFSurname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, SURNAME, value);
	}
	
    /**
     * Removes a value of property Surname given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFSurname(java.lang.String value) {
		Base.remove(this.model, this.getResource(), SURNAME, value);
	}
  
    /**
     * Removes all values of property Surname     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFSurname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SURNAME);
	}
	
    /**
     * Removes all values of property Surname	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFSurname() {
		Base.removeAll(this.model, this.getResource(), SURNAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23fbf047 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFWorkinfohomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, WORKINFOHOMEPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23fbf047 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFWorkinfohomepage() {
		return Base.has(this.model, this.getResource(), WORKINFOHOMEPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23fbf047 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFWorkinfohomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, WORKINFOHOMEPAGE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23fbf047 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFWorkinfohomepage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), WORKINFOHOMEPAGE, value);
	}

     /**
     * Get all values of property Workinfohomepage as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFWorkinfohomepage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WORKINFOHOMEPAGE);
	}
	
    /**
     * Get all values of property Workinfohomepage as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFWorkinfohomepage_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WORKINFOHOMEPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Workinfohomepage as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFWorkinfohomepage_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WORKINFOHOMEPAGE);
	}

    /**
     * Get all values of property Workinfohomepage as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFWorkinfohomepage_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WORKINFOHOMEPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Workinfohomepage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Document> getAllFOAFWorkinfohomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, WORKINFOHOMEPAGE, Document.class);
	}
	
    /**
     * Get all values of property Workinfohomepage as a ReactorResult of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Document> getAllFOAFWorkinfohomepage_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WORKINFOHOMEPAGE, Document.class);
	}

    /**
     * Get all values of property Workinfohomepage     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Document> getAllFOAFWorkinfohomepage() {
		return Base.getAll(this.model, this.getResource(), WORKINFOHOMEPAGE, Document.class);
	}

    /**
     * Get all values of property Workinfohomepage as a ReactorResult of Document 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Document> getAllFOAFWorkinfohomepage_as() {
		return Base.getAll_as(this.model, this.getResource(), WORKINFOHOMEPAGE, Document.class);
	}
 
    /**
     * Adds a value to property Workinfohomepage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFWorkinfohomepage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, WORKINFOHOMEPAGE, value);
	}
	
    /**
     * Adds a value to property Workinfohomepage as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFWorkinfohomepage( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), WORKINFOHOMEPAGE, value);
	}
    /**
     * Adds a value to property Workinfohomepage from an instance of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFWorkinfohomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.add(model, instanceResource, WORKINFOHOMEPAGE, value);
	}
	
    /**
     * Adds a value to property Workinfohomepage from an instance of Document 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFWorkinfohomepage(Document value) {
		Base.add(this.model, this.getResource(), WORKINFOHOMEPAGE, value);
	}
  

    /**
     * Sets a value of property Workinfohomepage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFWorkinfohomepage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, WORKINFOHOMEPAGE, value);
	}
	
    /**
     * Sets a value of property Workinfohomepage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFWorkinfohomepage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), WORKINFOHOMEPAGE, value);
	}
    /**
     * Sets a value of property Workinfohomepage from an instance of Document 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFWorkinfohomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.set(model, instanceResource, WORKINFOHOMEPAGE, value);
	}
	
    /**
     * Sets a value of property Workinfohomepage from an instance of Document 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFWorkinfohomepage(Document value) {
		Base.set(this.model, this.getResource(), WORKINFOHOMEPAGE, value);
	}
  


    /**
     * Removes a value of property Workinfohomepage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFWorkinfohomepage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, WORKINFOHOMEPAGE, value);
	}
	
    /**
     * Removes a value of property Workinfohomepage as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFWorkinfohomepage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), WORKINFOHOMEPAGE, value);
	}
    /**
     * Removes a value of property Workinfohomepage given as an instance of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFWorkinfohomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.remove(model, instanceResource, WORKINFOHOMEPAGE, value);
	}
	
    /**
     * Removes a value of property Workinfohomepage given as an instance of Document 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFWorkinfohomepage(Document value) {
		Base.remove(this.model, this.getResource(), WORKINFOHOMEPAGE, value);
	}
  
    /**
     * Removes all values of property Workinfohomepage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFWorkinfohomepage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, WORKINFOHOMEPAGE);
	}
	
    /**
     * Removes all values of property Workinfohomepage	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFWorkinfohomepage() {
		Base.removeAll(this.model, this.getResource(), WORKINFOHOMEPAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@48249d84 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFWorkplacehomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, WORKPLACEHOMEPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@48249d84 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFWorkplacehomepage() {
		return Base.has(this.model, this.getResource(), WORKPLACEHOMEPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@48249d84 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFWorkplacehomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, WORKPLACEHOMEPAGE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@48249d84 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFWorkplacehomepage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), WORKPLACEHOMEPAGE, value);
	}

     /**
     * Get all values of property Workplacehomepage as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFWorkplacehomepage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, WORKPLACEHOMEPAGE);
	}
	
    /**
     * Get all values of property Workplacehomepage as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFWorkplacehomepage_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WORKPLACEHOMEPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Workplacehomepage as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFWorkplacehomepage_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), WORKPLACEHOMEPAGE);
	}

    /**
     * Get all values of property Workplacehomepage as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFWorkplacehomepage_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), WORKPLACEHOMEPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Workplacehomepage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Document> getAllFOAFWorkplacehomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, WORKPLACEHOMEPAGE, Document.class);
	}
	
    /**
     * Get all values of property Workplacehomepage as a ReactorResult of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Document> getAllFOAFWorkplacehomepage_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, WORKPLACEHOMEPAGE, Document.class);
	}

    /**
     * Get all values of property Workplacehomepage     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Document> getAllFOAFWorkplacehomepage() {
		return Base.getAll(this.model, this.getResource(), WORKPLACEHOMEPAGE, Document.class);
	}

    /**
     * Get all values of property Workplacehomepage as a ReactorResult of Document 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Document> getAllFOAFWorkplacehomepage_as() {
		return Base.getAll_as(this.model, this.getResource(), WORKPLACEHOMEPAGE, Document.class);
	}
 
    /**
     * Adds a value to property Workplacehomepage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFWorkplacehomepage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, WORKPLACEHOMEPAGE, value);
	}
	
    /**
     * Adds a value to property Workplacehomepage as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFWorkplacehomepage( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), WORKPLACEHOMEPAGE, value);
	}
    /**
     * Adds a value to property Workplacehomepage from an instance of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFWorkplacehomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.add(model, instanceResource, WORKPLACEHOMEPAGE, value);
	}
	
    /**
     * Adds a value to property Workplacehomepage from an instance of Document 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFWorkplacehomepage(Document value) {
		Base.add(this.model, this.getResource(), WORKPLACEHOMEPAGE, value);
	}
  

    /**
     * Sets a value of property Workplacehomepage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFWorkplacehomepage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, WORKPLACEHOMEPAGE, value);
	}
	
    /**
     * Sets a value of property Workplacehomepage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFWorkplacehomepage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), WORKPLACEHOMEPAGE, value);
	}
    /**
     * Sets a value of property Workplacehomepage from an instance of Document 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFWorkplacehomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.set(model, instanceResource, WORKPLACEHOMEPAGE, value);
	}
	
    /**
     * Sets a value of property Workplacehomepage from an instance of Document 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFWorkplacehomepage(Document value) {
		Base.set(this.model, this.getResource(), WORKPLACEHOMEPAGE, value);
	}
  


    /**
     * Removes a value of property Workplacehomepage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFWorkplacehomepage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, WORKPLACEHOMEPAGE, value);
	}
	
    /**
     * Removes a value of property Workplacehomepage as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFWorkplacehomepage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), WORKPLACEHOMEPAGE, value);
	}
    /**
     * Removes a value of property Workplacehomepage given as an instance of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFWorkplacehomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.remove(model, instanceResource, WORKPLACEHOMEPAGE, value);
	}
	
    /**
     * Removes a value of property Workplacehomepage given as an instance of Document 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFWorkplacehomepage(Document value) {
		Base.remove(this.model, this.getResource(), WORKPLACEHOMEPAGE, value);
	}
  
    /**
     * Removes all values of property Workplacehomepage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFWorkplacehomepage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, WORKPLACEHOMEPAGE);
	}
	
    /**
     * Removes all values of property Workplacehomepage	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFWorkplacehomepage() {
		Base.removeAll(this.model, this.getResource(), WORKPLACEHOMEPAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3cf7366d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFComment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, COMMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3cf7366d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFComment() {
		return Base.has(this.model, this.getResource(), COMMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3cf7366d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFComment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, COMMENT, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3cf7366d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFComment( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), COMMENT, value);
	}

     /**
     * Get all values of property Comment as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFComment_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, COMMENT);
	}
	
    /**
     * Get all values of property Comment as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFComment_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COMMENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Comment as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFComment_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), COMMENT);
	}

    /**
     * Get all values of property Comment as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFComment_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), COMMENT, org.ontoware.rdf2go.model.node.Node.class);
	}
      /**
     * Get all values of property Comment     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Document> getAllFOAFComment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, COMMENT, Document.class);
	}
	
    /**
     * Get all values of property Comment as a ReactorResult of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Document> getAllFOAFComment_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, COMMENT, Document.class);
	}

    /**
     * Get all values of property Comment     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Document> getAllFOAFComment() {
		return Base.getAll(this.model, this.getResource(), COMMENT, Document.class);
	}

    /**
     * Get all values of property Comment as a ReactorResult of Document 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Document> getAllFOAFComment_as() {
		return Base.getAll_as(this.model, this.getResource(), COMMENT, Document.class);
	}
 
    /**
     * Adds a value to property Comment as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFComment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, COMMENT, value);
	}
	
    /**
     * Adds a value to property Comment as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFComment( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), COMMENT, value);
	}
  

    /**
     * Sets a value of property Comment from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFComment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, COMMENT, value);
	}
	
    /**
     * Sets a value of property Comment from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFComment( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), COMMENT, value);
	}
  


    /**
     * Removes a value of property Comment as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFComment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, COMMENT, value);
	}
	
    /**
     * Removes a value of property Comment as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFComment( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), COMMENT, value);
	}
  
    /**
     * Removes all values of property Comment     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFComment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, COMMENT);
	}
	
    /**
     * Removes all values of property Comment	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFComment() {
		Base.removeAll(this.model, this.getResource(), COMMENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@354a6983 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LABEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@354a6983 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFLabel() {
		return Base.has(this.model, this.getResource(), LABEL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@354a6983 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LABEL, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@354a6983 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFLabel( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LABEL, value);
	}

     /**
     * Get all values of property Label as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFLabel_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LABEL);
	}
	
    /**
     * Get all values of property Label as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFLabel_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LABEL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Label as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFLabel_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LABEL);
	}

    /**
     * Get all values of property Label as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFLabel_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LABEL, org.ontoware.rdf2go.model.node.Node.class);
	}
      /**
     * Get all values of property Label     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Document> getAllFOAFLabel(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LABEL, Document.class);
	}
	
    /**
     * Get all values of property Label as a ReactorResult of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Document> getAllFOAFLabel_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LABEL, Document.class);
	}

    /**
     * Get all values of property Label     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Document> getAllFOAFLabel() {
		return Base.getAll(this.model, this.getResource(), LABEL, Document.class);
	}

    /**
     * Get all values of property Label as a ReactorResult of Document 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Document> getAllFOAFLabel_as() {
		return Base.getAll_as(this.model, this.getResource(), LABEL, Document.class);
	}
 
    /**
     * Adds a value to property Label as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFLabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LABEL, value);
	}
	
    /**
     * Adds a value to property Label as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFLabel( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LABEL, value);
	}
  

    /**
     * Sets a value of property Label from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFLabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LABEL, value);
	}
	
    /**
     * Sets a value of property Label from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFLabel( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LABEL, value);
	}
  


    /**
     * Removes a value of property Label as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFLabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LABEL, value);
	}
	
    /**
     * Removes a value of property Label as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFLabel( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LABEL, value);
	}
  
    /**
     * Removes all values of property Label     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFLabel( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LABEL);
	}
	
    /**
     * Removes all values of property Label	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFLabel() {
		Base.removeAll(this.model, this.getResource(), LABEL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3291ec31 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFMember(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MEMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3291ec31 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFMember() {
		return Base.has(this.model, this.getResource(), MEMBER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3291ec31 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFMember(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MEMBER, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3291ec31 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFMember( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MEMBER, value);
	}

     /**
     * Get all values of property Member as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFMember_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MEMBER);
	}
	
    /**
     * Get all values of property Member as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFMember_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MEMBER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Member as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFMember_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MEMBER);
	}

    /**
     * Get all values of property Member as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFMember_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MEMBER, org.ontoware.rdf2go.model.node.Node.class);
	}
      /**
     * Get all values of property Member     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Document> getAllFOAFMember(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MEMBER, Document.class);
	}
	
    /**
     * Get all values of property Member as a ReactorResult of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Document> getAllFOAFMember_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MEMBER, Document.class);
	}

    /**
     * Get all values of property Member     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Document> getAllFOAFMember() {
		return Base.getAll(this.model, this.getResource(), MEMBER, Document.class);
	}

    /**
     * Get all values of property Member as a ReactorResult of Document 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Document> getAllFOAFMember_as() {
		return Base.getAll_as(this.model, this.getResource(), MEMBER, Document.class);
	}
 
    /**
     * Adds a value to property Member as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFMember( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MEMBER, value);
	}
	
    /**
     * Adds a value to property Member as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFMember( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MEMBER, value);
	}
  

    /**
     * Sets a value of property Member from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFMember( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MEMBER, value);
	}
	
    /**
     * Sets a value of property Member from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFMember( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MEMBER, value);
	}
  


    /**
     * Removes a value of property Member as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFMember( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MEMBER, value);
	}
	
    /**
     * Removes a value of property Member as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFMember( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MEMBER, value);
	}
  
    /**
     * Removes all values of property Member     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFMember( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MEMBER);
	}
	
    /**
     * Removes all values of property Member	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFMember() {
		Base.removeAll(this.model, this.getResource(), MEMBER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4f928a17 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4f928a17 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFType() {
		return Base.has(this.model, this.getResource(), TYPE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4f928a17 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TYPE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4f928a17 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFType( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TYPE, value);
	}

     /**
     * Get all values of property Type as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFType_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TYPE);
	}
	
    /**
     * Get all values of property Type as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFType_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TYPE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Type as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFType_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TYPE);
	}

    /**
     * Get all values of property Type as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFType_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TYPE, org.ontoware.rdf2go.model.node.Node.class);
	}
      /**
     * Get all values of property Type     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Document> getAllFOAFType(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TYPE, Document.class);
	}
	
    /**
     * Get all values of property Type as a ReactorResult of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Document> getAllFOAFType_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TYPE, Document.class);
	}

    /**
     * Get all values of property Type     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Document> getAllFOAFType() {
		return Base.getAll(this.model, this.getResource(), TYPE, Document.class);
	}

    /**
     * Get all values of property Type as a ReactorResult of Document 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Document> getAllFOAFType_as() {
		return Base.getAll_as(this.model, this.getResource(), TYPE, Document.class);
	}
 
    /**
     * Adds a value to property Type as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TYPE, value);
	}
	
    /**
     * Adds a value to property Type as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFType( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TYPE, value);
	}
  

    /**
     * Sets a value of property Type from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TYPE, value);
	}
	
    /**
     * Sets a value of property Type from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFType( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TYPE, value);
	}
  


    /**
     * Removes a value of property Type as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TYPE, value);
	}
	
    /**
     * Removes a value of property Type as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFType( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TYPE, value);
	}
  
    /**
     * Removes all values of property Type     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFType( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TYPE);
	}
	
    /**
     * Removes all values of property Type	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFType() {
		Base.removeAll(this.model, this.getResource(), TYPE);
	}
 }