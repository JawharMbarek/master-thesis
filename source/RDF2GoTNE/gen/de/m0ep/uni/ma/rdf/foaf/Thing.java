/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) on 21.12.12 17:00
 */
package de.m0ep.uni.ma.rdf.foaf;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> DNAchecksum </li>
 *   <li> Depiction </li>
 *   <li> Description </li>
 *   <li> DisjointWith </li>
 *   <li> Elements1_1Title </li>
 *   <li> EquivalentClass </li>
 *   <li> EquivalentProperty </li>
 *   <li> FoafGivenname </li>
 *   <li> Fundedby </li>
 *   <li> Givenname </li>
 *   <li> Homepage </li>
 *   <li> InverseOf </li>
 *   <li> Logo </li>
 *   <li> Maker </li>
 *   <li> MembershipClass </li>
 *   <li> Name </li>
 *   <li> Nickname </li>
 *   <li> Page </li>
 *   <li> Phone </li>
 *   <li> Primarytopicof </li>
 *   <li> Termstatus </li>
 *   <li> Theme </li>
 *   <li> Title </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 21.12.12 17:00
 */
public class Thing extends org.ontoware.rdfreactor.schema.rdfs.Class {

    /** http://www.w3.org/2000/01/rdf-schema#Class */
	@SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2000/01/rdf-schema#Class", false);

    /** http://xmlns.com/foaf/0.1/dnaChecksum */
	public static final URI DNACHECKSUM = new URIImpl("http://xmlns.com/foaf/0.1/dnaChecksum",false);

    /** http://xmlns.com/foaf/0.1/depiction */
	public static final URI DEPICTION = new URIImpl("http://xmlns.com/foaf/0.1/depiction",false);

    /** http://purl.org/dc/elements/1.1/description */
	public static final URI DESCRIPTION = new URIImpl("http://purl.org/dc/elements/1.1/description",false);

    /** http://www.w3.org/2002/07/owl#disjointWith */
	public static final URI DISJOINTWITH = new URIImpl("http://www.w3.org/2002/07/owl#disjointWith",false);

    /** http://purl.org/dc/elements/1.1/title */
	public static final URI ELEMENTS1_1TITLE = new URIImpl("http://purl.org/dc/elements/1.1/title",false);

    /** http://www.w3.org/2002/07/owl#equivalentClass */
	public static final URI EQUIVALENTCLASS = new URIImpl("http://www.w3.org/2002/07/owl#equivalentClass",false);

    /** http://www.w3.org/2002/07/owl#equivalentProperty */
	public static final URI EQUIVALENTPROPERTY = new URIImpl("http://www.w3.org/2002/07/owl#equivalentProperty",false);

    /** http://xmlns.com/foaf/0.1/givenname */
	public static final URI FOAFGIVENNAME = new URIImpl("http://xmlns.com/foaf/0.1/givenname",false);

    /** http://xmlns.com/foaf/0.1/fundedBy */
	public static final URI FUNDEDBY = new URIImpl("http://xmlns.com/foaf/0.1/fundedBy",false);

    /** http://xmlns.com/foaf/0.1/givenName */
	public static final URI GIVENNAME = new URIImpl("http://xmlns.com/foaf/0.1/givenName",false);

    /** http://xmlns.com/foaf/0.1/homepage */
	public static final URI HOMEPAGE = new URIImpl("http://xmlns.com/foaf/0.1/homepage",false);

    /** http://www.w3.org/2002/07/owl#inverseOf */
	public static final URI INVERSEOF = new URIImpl("http://www.w3.org/2002/07/owl#inverseOf",false);

    /** http://xmlns.com/foaf/0.1/logo */
	public static final URI LOGO = new URIImpl("http://xmlns.com/foaf/0.1/logo",false);

    /** http://xmlns.com/foaf/0.1/maker */
	public static final URI MAKER = new URIImpl("http://xmlns.com/foaf/0.1/maker",false);

    /** http://xmlns.com/foaf/0.1/membershipClass */
	public static final URI MEMBERSHIPCLASS = new URIImpl("http://xmlns.com/foaf/0.1/membershipClass",false);

    /** http://xmlns.com/foaf/0.1/name */
	public static final URI NAME = new URIImpl("http://xmlns.com/foaf/0.1/name",false);

    /** http://xmlns.com/foaf/0.1/nick */
	public static final URI NICKNAME = new URIImpl("http://xmlns.com/foaf/0.1/nick",false);

    /** http://xmlns.com/foaf/0.1/page */
	public static final URI PAGE = new URIImpl("http://xmlns.com/foaf/0.1/page",false);

    /** http://xmlns.com/foaf/0.1/phone */
	public static final URI PHONE = new URIImpl("http://xmlns.com/foaf/0.1/phone",false);

    /** http://xmlns.com/foaf/0.1/isPrimaryTopicOf */
	public static final URI PRIMARYTOPICOF = new URIImpl("http://xmlns.com/foaf/0.1/isPrimaryTopicOf",false);

    /** http://www.w3.org/2003/06/sw-vocab-status/ns#term_status */
	public static final URI TERMSTATUS = new URIImpl("http://www.w3.org/2003/06/sw-vocab-status/ns#term_status",false);

    /** http://xmlns.com/foaf/0.1/theme */
	public static final URI THEME = new URIImpl("http://xmlns.com/foaf/0.1/theme",false);

    /** http://xmlns.com/foaf/0.1/title */
	public static final URI TITLE = new URIImpl("http://xmlns.com/foaf/0.1/title",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
	@SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://xmlns.com/foaf/0.1/dnaChecksum",false),
      new URIImpl("http://xmlns.com/foaf/0.1/depiction",false),
      new URIImpl("http://purl.org/dc/elements/1.1/description",false),
      new URIImpl("http://www.w3.org/2002/07/owl#disjointWith",false),
      new URIImpl("http://purl.org/dc/elements/1.1/title",false),
      new URIImpl("http://www.w3.org/2002/07/owl#equivalentClass",false),
      new URIImpl("http://www.w3.org/2002/07/owl#equivalentProperty",false),
      new URIImpl("http://xmlns.com/foaf/0.1/givenname",false),
      new URIImpl("http://xmlns.com/foaf/0.1/fundedBy",false),
      new URIImpl("http://xmlns.com/foaf/0.1/givenName",false),
      new URIImpl("http://xmlns.com/foaf/0.1/homepage",false),
      new URIImpl("http://www.w3.org/2002/07/owl#inverseOf",false),
      new URIImpl("http://xmlns.com/foaf/0.1/logo",false),
      new URIImpl("http://xmlns.com/foaf/0.1/maker",false),
      new URIImpl("http://xmlns.com/foaf/0.1/membershipClass",false),
      new URIImpl("http://xmlns.com/foaf/0.1/name",false),
      new URIImpl("http://xmlns.com/foaf/0.1/nick",false),
      new URIImpl("http://xmlns.com/foaf/0.1/page",false),
      new URIImpl("http://xmlns.com/foaf/0.1/phone",false),
      new URIImpl("http://xmlns.com/foaf/0.1/isPrimaryTopicOf",false),
      new URIImpl("http://www.w3.org/2003/06/sw-vocab-status/ns#term_status",false),
      new URIImpl("http://xmlns.com/foaf/0.1/theme",false),
      new URIImpl("http://xmlns.com/foaf/0.1/title",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Thing ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Thing ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Thing ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Thing ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Thing ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Thing  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Thing  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Thing.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.w3.org/2000/01/rdf-schema#Class).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Thing> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Thing.class );
	}

    /**
	 * Remove rdf:type Thing from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Description' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFDescription_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.DESCRIPTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Description' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFDescription_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.DESCRIPTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Description' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllFOAFDescription_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.DESCRIPTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'DisjointWith' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFDisjointWith_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.DISJOINTWITH, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'DisjointWith' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFDisjointWith_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.DISJOINTWITH, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'DisjointWith' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllFOAFDisjointWith_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.DISJOINTWITH, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Title' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFElements1_1Title_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.ELEMENTS1_1TITLE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Elements1_1Title' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFElements1_1Title_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.ELEMENTS1_1TITLE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Elements1_1Title' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllFOAFElements1_1Title_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.ELEMENTS1_1TITLE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'EquivalentClass' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFEquivalentClass_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.EQUIVALENTCLASS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'EquivalentClass' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFEquivalentClass_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.EQUIVALENTCLASS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'EquivalentClass' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllFOAFEquivalentClass_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.EQUIVALENTCLASS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'EquivalentProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFEquivalentProperty_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.EQUIVALENTPROPERTY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'EquivalentProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFEquivalentProperty_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.EQUIVALENTPROPERTY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'EquivalentProperty' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllFOAFEquivalentProperty_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.EQUIVALENTPROPERTY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'FoafGivenname' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFFoafGivenname_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.FOAFGIVENNAME, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'FoafGivenname' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFFoafGivenname_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.FOAFGIVENNAME, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'FoafGivenname' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllFOAFFoafGivenname_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.FOAFGIVENNAME, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Givenname' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFGivenname_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.GIVENNAME, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Givenname' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFGivenname_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.GIVENNAME, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Givenname' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllFOAFGivenname_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.GIVENNAME, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'InverseOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFInverseOf_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.INVERSEOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'InverseOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFInverseOf_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.INVERSEOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'InverseOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllFOAFInverseOf_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.INVERSEOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'MembershipClass' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFMembershipClass_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.MEMBERSHIPCLASS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'MembershipClass' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFMembershipClass_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.MEMBERSHIPCLASS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'MembershipClass' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllFOAFMembershipClass_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.MEMBERSHIPCLASS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Nickname' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFNickname_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.NICKNAME, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Nickname' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFNickname_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.NICKNAME, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Nickname' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllFOAFNickname_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.NICKNAME, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Phone' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFPhone_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.PHONE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Phone' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFPhone_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.PHONE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Phone' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllFOAFPhone_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.PHONE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Termstatus' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFTermstatus_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.TERMSTATUS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Termstatus' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFTermstatus_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.TERMSTATUS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Termstatus' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllFOAFTermstatus_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.TERMSTATUS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Title' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFTitle_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.TITLE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Title' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFTitle_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.TITLE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Title' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllFOAFTitle_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.TITLE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Sha1sum_hex_' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFSha1sum_hex__Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Document.SHA1SUM_HEX_, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Sha1sum_hex_' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFSha1sum_hex__Inverse() {
		return Base.getAll_Inverse(this.model, Document.SHA1SUM_HEX_, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Sha1sum_hex_' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllFOAFSha1sum_hex__Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Document.SHA1SUM_HEX_, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fff31e1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFDNAchecksum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DNACHECKSUM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fff31e1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFDNAchecksum() {
		return Base.has(this.model, this.getResource(), DNACHECKSUM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fff31e1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFDNAchecksum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DNACHECKSUM, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fff31e1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFDNAchecksum( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DNACHECKSUM, value);
	}

     /**
     * Get all values of property DNAchecksum as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFDNAchecksum_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DNACHECKSUM);
	}
	
    /**
     * Get all values of property DNAchecksum as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFDNAchecksum_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DNACHECKSUM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property DNAchecksum as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFDNAchecksum_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DNACHECKSUM);
	}

    /**
     * Get all values of property DNAchecksum as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFDNAchecksum_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DNACHECKSUM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property DNAchecksum     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllFOAFDNAchecksum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DNACHECKSUM, java.lang.String.class);
	}
	
    /**
     * Get all values of property DNAchecksum as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllFOAFDNAchecksum_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DNACHECKSUM, java.lang.String.class);
	}

    /**
     * Get all values of property DNAchecksum     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllFOAFDNAchecksum() {
		return Base.getAll(this.model, this.getResource(), DNACHECKSUM, java.lang.String.class);
	}

    /**
     * Get all values of property DNAchecksum as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllFOAFDNAchecksum_as() {
		return Base.getAll_as(this.model, this.getResource(), DNACHECKSUM, java.lang.String.class);
	}
 
    /**
     * Adds a value to property DNAchecksum as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFDNAchecksum( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DNACHECKSUM, value);
	}
	
    /**
     * Adds a value to property DNAchecksum as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFDNAchecksum( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DNACHECKSUM, value);
	}
    /**
     * Adds a value to property DNAchecksum from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFDNAchecksum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, DNACHECKSUM, value);
	}
	
    /**
     * Adds a value to property DNAchecksum from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFDNAchecksum(java.lang.String value) {
		Base.add(this.model, this.getResource(), DNACHECKSUM, value);
	}
  

    /**
     * Sets a value of property DNAchecksum from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFDNAchecksum( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DNACHECKSUM, value);
	}
	
    /**
     * Sets a value of property DNAchecksum from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFDNAchecksum( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DNACHECKSUM, value);
	}
    /**
     * Sets a value of property DNAchecksum from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFDNAchecksum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, DNACHECKSUM, value);
	}
	
    /**
     * Sets a value of property DNAchecksum from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFDNAchecksum(java.lang.String value) {
		Base.set(this.model, this.getResource(), DNACHECKSUM, value);
	}
  


    /**
     * Removes a value of property DNAchecksum as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFDNAchecksum( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DNACHECKSUM, value);
	}
	
    /**
     * Removes a value of property DNAchecksum as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFDNAchecksum( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DNACHECKSUM, value);
	}
    /**
     * Removes a value of property DNAchecksum given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFDNAchecksum(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, DNACHECKSUM, value);
	}
	
    /**
     * Removes a value of property DNAchecksum given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFDNAchecksum(java.lang.String value) {
		Base.remove(this.model, this.getResource(), DNACHECKSUM, value);
	}
  
    /**
     * Removes all values of property DNAchecksum     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFDNAchecksum( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DNACHECKSUM);
	}
	
    /**
     * Removes all values of property DNAchecksum	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFDNAchecksum() {
		Base.removeAll(this.model, this.getResource(), DNACHECKSUM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f72eaa2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFDepiction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DEPICTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f72eaa2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFDepiction() {
		return Base.has(this.model, this.getResource(), DEPICTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f72eaa2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFDepiction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DEPICTION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f72eaa2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFDepiction( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DEPICTION, value);
	}

     /**
     * Get all values of property Depiction as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFDepiction_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DEPICTION);
	}
	
    /**
     * Get all values of property Depiction as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFDepiction_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DEPICTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Depiction as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFDepiction_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DEPICTION);
	}

    /**
     * Get all values of property Depiction as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFDepiction_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DEPICTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Depiction     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Image> getAllFOAFDepiction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DEPICTION, Image.class);
	}
	
    /**
     * Get all values of property Depiction as a ReactorResult of Image 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Image> getAllFOAFDepiction_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DEPICTION, Image.class);
	}

    /**
     * Get all values of property Depiction     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Image> getAllFOAFDepiction() {
		return Base.getAll(this.model, this.getResource(), DEPICTION, Image.class);
	}

    /**
     * Get all values of property Depiction as a ReactorResult of Image 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Image> getAllFOAFDepiction_as() {
		return Base.getAll_as(this.model, this.getResource(), DEPICTION, Image.class);
	}
 
    /**
     * Adds a value to property Depiction as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFDepiction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DEPICTION, value);
	}
	
    /**
     * Adds a value to property Depiction as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFDepiction( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DEPICTION, value);
	}
    /**
     * Adds a value to property Depiction from an instance of Image 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFDepiction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Image value) {
		Base.add(model, instanceResource, DEPICTION, value);
	}
	
    /**
     * Adds a value to property Depiction from an instance of Image 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFDepiction(Image value) {
		Base.add(this.model, this.getResource(), DEPICTION, value);
	}
  

    /**
     * Sets a value of property Depiction from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFDepiction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DEPICTION, value);
	}
	
    /**
     * Sets a value of property Depiction from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFDepiction( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DEPICTION, value);
	}
    /**
     * Sets a value of property Depiction from an instance of Image 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFDepiction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Image value) {
		Base.set(model, instanceResource, DEPICTION, value);
	}
	
    /**
     * Sets a value of property Depiction from an instance of Image 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFDepiction(Image value) {
		Base.set(this.model, this.getResource(), DEPICTION, value);
	}
  


    /**
     * Removes a value of property Depiction as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFDepiction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DEPICTION, value);
	}
	
    /**
     * Removes a value of property Depiction as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFDepiction( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DEPICTION, value);
	}
    /**
     * Removes a value of property Depiction given as an instance of Image 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFDepiction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Image value) {
		Base.remove(model, instanceResource, DEPICTION, value);
	}
	
    /**
     * Removes a value of property Depiction given as an instance of Image 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFDepiction(Image value) {
		Base.remove(this.model, this.getResource(), DEPICTION, value);
	}
  
    /**
     * Removes all values of property Depiction     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFDepiction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DEPICTION);
	}
	
    /**
     * Removes all values of property Depiction	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFDepiction() {
		Base.removeAll(this.model, this.getResource(), DEPICTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7865657e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7865657e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFDescription() {
		return Base.has(this.model, this.getResource(), DESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7865657e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DESCRIPTION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7865657e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFDescription( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DESCRIPTION, value);
	}

     /**
     * Get all values of property Description as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFDescription_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DESCRIPTION);
	}
	
    /**
     * Get all values of property Description as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFDescription_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Description as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFDescription_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DESCRIPTION);
	}

    /**
     * Get all values of property Description as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFDescription_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Description     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllFOAFDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DESCRIPTION, Thing.class);
	}
	
    /**
     * Get all values of property Description as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllFOAFDescription_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DESCRIPTION, Thing.class);
	}

    /**
     * Get all values of property Description     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllFOAFDescription() {
		return Base.getAll(this.model, this.getResource(), DESCRIPTION, Thing.class);
	}

    /**
     * Get all values of property Description as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllFOAFDescription_as() {
		return Base.getAll_as(this.model, this.getResource(), DESCRIPTION, Thing.class);
	}
 
    /**
     * Adds a value to property Description as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Adds a value to property Description as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DESCRIPTION, value);
	}
    /**
     * Adds a value to property Description from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Adds a value to property Description from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFDescription(Thing value) {
		Base.add(this.model, this.getResource(), DESCRIPTION, value);
	}
  

    /**
     * Sets a value of property Description from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Sets a value of property Description from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DESCRIPTION, value);
	}
    /**
     * Sets a value of property Description from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Sets a value of property Description from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFDescription(Thing value) {
		Base.set(this.model, this.getResource(), DESCRIPTION, value);
	}
  


    /**
     * Removes a value of property Description as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Removes a value of property Description as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DESCRIPTION, value);
	}
    /**
     * Removes a value of property Description given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Removes a value of property Description given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFDescription(Thing value) {
		Base.remove(this.model, this.getResource(), DESCRIPTION, value);
	}
  
    /**
     * Removes all values of property Description     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DESCRIPTION);
	}
	
    /**
     * Removes all values of property Description	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFDescription() {
		Base.removeAll(this.model, this.getResource(), DESCRIPTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5ee0c078 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFDisjointWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DISJOINTWITH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5ee0c078 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFDisjointWith() {
		return Base.has(this.model, this.getResource(), DISJOINTWITH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5ee0c078 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFDisjointWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DISJOINTWITH, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5ee0c078 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFDisjointWith( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DISJOINTWITH, value);
	}

     /**
     * Get all values of property DisjointWith as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFDisjointWith_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DISJOINTWITH);
	}
	
    /**
     * Get all values of property DisjointWith as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFDisjointWith_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DISJOINTWITH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property DisjointWith as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFDisjointWith_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DISJOINTWITH);
	}

    /**
     * Get all values of property DisjointWith as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFDisjointWith_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DISJOINTWITH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property DisjointWith     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllFOAFDisjointWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DISJOINTWITH, Thing.class);
	}
	
    /**
     * Get all values of property DisjointWith as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllFOAFDisjointWith_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DISJOINTWITH, Thing.class);
	}

    /**
     * Get all values of property DisjointWith     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllFOAFDisjointWith() {
		return Base.getAll(this.model, this.getResource(), DISJOINTWITH, Thing.class);
	}

    /**
     * Get all values of property DisjointWith as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllFOAFDisjointWith_as() {
		return Base.getAll_as(this.model, this.getResource(), DISJOINTWITH, Thing.class);
	}
 
    /**
     * Adds a value to property DisjointWith as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFDisjointWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Adds a value to property DisjointWith as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFDisjointWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DISJOINTWITH, value);
	}
    /**
     * Adds a value to property DisjointWith from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFDisjointWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Adds a value to property DisjointWith from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFDisjointWith(Thing value) {
		Base.add(this.model, this.getResource(), DISJOINTWITH, value);
	}
  

    /**
     * Sets a value of property DisjointWith from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFDisjointWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Sets a value of property DisjointWith from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFDisjointWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DISJOINTWITH, value);
	}
    /**
     * Sets a value of property DisjointWith from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFDisjointWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Sets a value of property DisjointWith from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFDisjointWith(Thing value) {
		Base.set(this.model, this.getResource(), DISJOINTWITH, value);
	}
  


    /**
     * Removes a value of property DisjointWith as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFDisjointWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Removes a value of property DisjointWith as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFDisjointWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DISJOINTWITH, value);
	}
    /**
     * Removes a value of property DisjointWith given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFDisjointWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Removes a value of property DisjointWith given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFDisjointWith(Thing value) {
		Base.remove(this.model, this.getResource(), DISJOINTWITH, value);
	}
  
    /**
     * Removes all values of property DisjointWith     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFDisjointWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DISJOINTWITH);
	}
	
    /**
     * Removes all values of property DisjointWith	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFDisjointWith() {
		Base.removeAll(this.model, this.getResource(), DISJOINTWITH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@64115bbc has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFElements1_1Title(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ELEMENTS1_1TITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@64115bbc has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFElements1_1Title() {
		return Base.has(this.model, this.getResource(), ELEMENTS1_1TITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@64115bbc has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFElements1_1Title(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ELEMENTS1_1TITLE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@64115bbc has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFElements1_1Title( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ELEMENTS1_1TITLE, value);
	}

     /**
     * Get all values of property Elements1_1Title as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFElements1_1Title_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ELEMENTS1_1TITLE);
	}
	
    /**
     * Get all values of property Elements1_1Title as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFElements1_1Title_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1TITLE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Elements1_1Title as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFElements1_1Title_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ELEMENTS1_1TITLE);
	}

    /**
     * Get all values of property Elements1_1Title as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFElements1_1Title_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1TITLE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Elements1_1Title     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllFOAFElements1_1Title(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ELEMENTS1_1TITLE, Thing.class);
	}
	
    /**
     * Get all values of property Elements1_1Title as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllFOAFElements1_1Title_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ELEMENTS1_1TITLE, Thing.class);
	}

    /**
     * Get all values of property Elements1_1Title     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllFOAFElements1_1Title() {
		return Base.getAll(this.model, this.getResource(), ELEMENTS1_1TITLE, Thing.class);
	}

    /**
     * Get all values of property Elements1_1Title as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllFOAFElements1_1Title_as() {
		return Base.getAll_as(this.model, this.getResource(), ELEMENTS1_1TITLE, Thing.class);
	}
 
    /**
     * Adds a value to property Elements1_1Title as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFElements1_1Title( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ELEMENTS1_1TITLE, value);
	}
	
    /**
     * Adds a value to property Elements1_1Title as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFElements1_1Title( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1TITLE, value);
	}
    /**
     * Adds a value to property Elements1_1Title from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFElements1_1Title(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ELEMENTS1_1TITLE, value);
	}
	
    /**
     * Adds a value to property Elements1_1Title from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFElements1_1Title(Thing value) {
		Base.add(this.model, this.getResource(), ELEMENTS1_1TITLE, value);
	}
  

    /**
     * Sets a value of property Elements1_1Title from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFElements1_1Title( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ELEMENTS1_1TITLE, value);
	}
	
    /**
     * Sets a value of property Elements1_1Title from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFElements1_1Title( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1TITLE, value);
	}
    /**
     * Sets a value of property Elements1_1Title from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFElements1_1Title(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ELEMENTS1_1TITLE, value);
	}
	
    /**
     * Sets a value of property Elements1_1Title from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFElements1_1Title(Thing value) {
		Base.set(this.model, this.getResource(), ELEMENTS1_1TITLE, value);
	}
  


    /**
     * Removes a value of property Elements1_1Title as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFElements1_1Title( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ELEMENTS1_1TITLE, value);
	}
	
    /**
     * Removes a value of property Elements1_1Title as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFElements1_1Title( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1TITLE, value);
	}
    /**
     * Removes a value of property Elements1_1Title given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFElements1_1Title(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ELEMENTS1_1TITLE, value);
	}
	
    /**
     * Removes a value of property Elements1_1Title given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFElements1_1Title(Thing value) {
		Base.remove(this.model, this.getResource(), ELEMENTS1_1TITLE, value);
	}
  
    /**
     * Removes all values of property Elements1_1Title     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFElements1_1Title( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ELEMENTS1_1TITLE);
	}
	
    /**
     * Removes all values of property Elements1_1Title	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFElements1_1Title() {
		Base.removeAll(this.model, this.getResource(), ELEMENTS1_1TITLE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7ce28e77 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EQUIVALENTCLASS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7ce28e77 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFEquivalentClass() {
		return Base.has(this.model, this.getResource(), EQUIVALENTCLASS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7ce28e77 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EQUIVALENTCLASS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7ce28e77 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFEquivalentClass( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}

     /**
     * Get all values of property EquivalentClass as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFEquivalentClass_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EQUIVALENTCLASS);
	}
	
    /**
     * Get all values of property EquivalentClass as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFEquivalentClass_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EQUIVALENTCLASS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property EquivalentClass as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFEquivalentClass_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EQUIVALENTCLASS);
	}

    /**
     * Get all values of property EquivalentClass as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFEquivalentClass_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EQUIVALENTCLASS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property EquivalentClass     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllFOAFEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EQUIVALENTCLASS, Thing.class);
	}
	
    /**
     * Get all values of property EquivalentClass as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllFOAFEquivalentClass_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EQUIVALENTCLASS, Thing.class);
	}

    /**
     * Get all values of property EquivalentClass     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllFOAFEquivalentClass() {
		return Base.getAll(this.model, this.getResource(), EQUIVALENTCLASS, Thing.class);
	}

    /**
     * Get all values of property EquivalentClass as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllFOAFEquivalentClass_as() {
		return Base.getAll_as(this.model, this.getResource(), EQUIVALENTCLASS, Thing.class);
	}
 
    /**
     * Adds a value to property EquivalentClass as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFEquivalentClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Adds a value to property EquivalentClass as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFEquivalentClass( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
    /**
     * Adds a value to property EquivalentClass from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Adds a value to property EquivalentClass from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFEquivalentClass(Thing value) {
		Base.add(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
  

    /**
     * Sets a value of property EquivalentClass from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFEquivalentClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Sets a value of property EquivalentClass from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFEquivalentClass( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
    /**
     * Sets a value of property EquivalentClass from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Sets a value of property EquivalentClass from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFEquivalentClass(Thing value) {
		Base.set(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
  


    /**
     * Removes a value of property EquivalentClass as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFEquivalentClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Removes a value of property EquivalentClass as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFEquivalentClass( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
    /**
     * Removes a value of property EquivalentClass given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFEquivalentClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, EQUIVALENTCLASS, value);
	}
	
    /**
     * Removes a value of property EquivalentClass given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFEquivalentClass(Thing value) {
		Base.remove(this.model, this.getResource(), EQUIVALENTCLASS, value);
	}
  
    /**
     * Removes all values of property EquivalentClass     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFEquivalentClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EQUIVALENTCLASS);
	}
	
    /**
     * Removes all values of property EquivalentClass	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFEquivalentClass() {
		Base.removeAll(this.model, this.getResource(), EQUIVALENTCLASS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@34b88127 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFEquivalentProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EQUIVALENTPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@34b88127 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFEquivalentProperty() {
		return Base.has(this.model, this.getResource(), EQUIVALENTPROPERTY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@34b88127 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFEquivalentProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EQUIVALENTPROPERTY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@34b88127 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFEquivalentProperty( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EQUIVALENTPROPERTY, value);
	}

     /**
     * Get all values of property EquivalentProperty as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFEquivalentProperty_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EQUIVALENTPROPERTY);
	}
	
    /**
     * Get all values of property EquivalentProperty as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFEquivalentProperty_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EQUIVALENTPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property EquivalentProperty as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFEquivalentProperty_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EQUIVALENTPROPERTY);
	}

    /**
     * Get all values of property EquivalentProperty as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFEquivalentProperty_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EQUIVALENTPROPERTY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property EquivalentProperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllFOAFEquivalentProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EQUIVALENTPROPERTY, Thing.class);
	}
	
    /**
     * Get all values of property EquivalentProperty as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllFOAFEquivalentProperty_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EQUIVALENTPROPERTY, Thing.class);
	}

    /**
     * Get all values of property EquivalentProperty     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllFOAFEquivalentProperty() {
		return Base.getAll(this.model, this.getResource(), EQUIVALENTPROPERTY, Thing.class);
	}

    /**
     * Get all values of property EquivalentProperty as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllFOAFEquivalentProperty_as() {
		return Base.getAll_as(this.model, this.getResource(), EQUIVALENTPROPERTY, Thing.class);
	}
 
    /**
     * Adds a value to property EquivalentProperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFEquivalentProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EQUIVALENTPROPERTY, value);
	}
	
    /**
     * Adds a value to property EquivalentProperty as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFEquivalentProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EQUIVALENTPROPERTY, value);
	}
    /**
     * Adds a value to property EquivalentProperty from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFEquivalentProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, EQUIVALENTPROPERTY, value);
	}
	
    /**
     * Adds a value to property EquivalentProperty from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFEquivalentProperty(Thing value) {
		Base.add(this.model, this.getResource(), EQUIVALENTPROPERTY, value);
	}
  

    /**
     * Sets a value of property EquivalentProperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFEquivalentProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EQUIVALENTPROPERTY, value);
	}
	
    /**
     * Sets a value of property EquivalentProperty from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFEquivalentProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EQUIVALENTPROPERTY, value);
	}
    /**
     * Sets a value of property EquivalentProperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFEquivalentProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, EQUIVALENTPROPERTY, value);
	}
	
    /**
     * Sets a value of property EquivalentProperty from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFEquivalentProperty(Thing value) {
		Base.set(this.model, this.getResource(), EQUIVALENTPROPERTY, value);
	}
  


    /**
     * Removes a value of property EquivalentProperty as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFEquivalentProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EQUIVALENTPROPERTY, value);
	}
	
    /**
     * Removes a value of property EquivalentProperty as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFEquivalentProperty( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EQUIVALENTPROPERTY, value);
	}
    /**
     * Removes a value of property EquivalentProperty given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFEquivalentProperty(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, EQUIVALENTPROPERTY, value);
	}
	
    /**
     * Removes a value of property EquivalentProperty given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFEquivalentProperty(Thing value) {
		Base.remove(this.model, this.getResource(), EQUIVALENTPROPERTY, value);
	}
  
    /**
     * Removes all values of property EquivalentProperty     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFEquivalentProperty( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EQUIVALENTPROPERTY);
	}
	
    /**
     * Removes all values of property EquivalentProperty	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFEquivalentProperty() {
		Base.removeAll(this.model, this.getResource(), EQUIVALENTPROPERTY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4200de57 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFFoafGivenname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FOAFGIVENNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4200de57 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFFoafGivenname() {
		return Base.has(this.model, this.getResource(), FOAFGIVENNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4200de57 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFFoafGivenname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FOAFGIVENNAME, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4200de57 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFFoafGivenname( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FOAFGIVENNAME, value);
	}

     /**
     * Get all values of property FoafGivenname as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFFoafGivenname_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FOAFGIVENNAME);
	}
	
    /**
     * Get all values of property FoafGivenname as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFFoafGivenname_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FOAFGIVENNAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property FoafGivenname as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFFoafGivenname_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FOAFGIVENNAME);
	}

    /**
     * Get all values of property FoafGivenname as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFFoafGivenname_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FOAFGIVENNAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property FoafGivenname     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllFOAFFoafGivenname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FOAFGIVENNAME, Thing.class);
	}
	
    /**
     * Get all values of property FoafGivenname as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllFOAFFoafGivenname_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FOAFGIVENNAME, Thing.class);
	}

    /**
     * Get all values of property FoafGivenname     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllFOAFFoafGivenname() {
		return Base.getAll(this.model, this.getResource(), FOAFGIVENNAME, Thing.class);
	}

    /**
     * Get all values of property FoafGivenname as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllFOAFFoafGivenname_as() {
		return Base.getAll_as(this.model, this.getResource(), FOAFGIVENNAME, Thing.class);
	}
 
    /**
     * Adds a value to property FoafGivenname as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFFoafGivenname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FOAFGIVENNAME, value);
	}
	
    /**
     * Adds a value to property FoafGivenname as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFFoafGivenname( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FOAFGIVENNAME, value);
	}
    /**
     * Adds a value to property FoafGivenname from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFFoafGivenname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, FOAFGIVENNAME, value);
	}
	
    /**
     * Adds a value to property FoafGivenname from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFFoafGivenname(Thing value) {
		Base.add(this.model, this.getResource(), FOAFGIVENNAME, value);
	}
  

    /**
     * Sets a value of property FoafGivenname from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFFoafGivenname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FOAFGIVENNAME, value);
	}
	
    /**
     * Sets a value of property FoafGivenname from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFFoafGivenname( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FOAFGIVENNAME, value);
	}
    /**
     * Sets a value of property FoafGivenname from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFFoafGivenname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, FOAFGIVENNAME, value);
	}
	
    /**
     * Sets a value of property FoafGivenname from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFFoafGivenname(Thing value) {
		Base.set(this.model, this.getResource(), FOAFGIVENNAME, value);
	}
  


    /**
     * Removes a value of property FoafGivenname as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFFoafGivenname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FOAFGIVENNAME, value);
	}
	
    /**
     * Removes a value of property FoafGivenname as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFFoafGivenname( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FOAFGIVENNAME, value);
	}
    /**
     * Removes a value of property FoafGivenname given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFFoafGivenname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, FOAFGIVENNAME, value);
	}
	
    /**
     * Removes a value of property FoafGivenname given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFFoafGivenname(Thing value) {
		Base.remove(this.model, this.getResource(), FOAFGIVENNAME, value);
	}
  
    /**
     * Removes all values of property FoafGivenname     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFFoafGivenname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FOAFGIVENNAME);
	}
	
    /**
     * Removes all values of property FoafGivenname	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFFoafGivenname() {
		Base.removeAll(this.model, this.getResource(), FOAFGIVENNAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@78fb787f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFFundedby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FUNDEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@78fb787f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFFundedby() {
		return Base.has(this.model, this.getResource(), FUNDEDBY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@78fb787f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFFundedby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FUNDEDBY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@78fb787f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFFundedby( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FUNDEDBY, value);
	}

     /**
     * Get all values of property Fundedby as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFFundedby_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FUNDEDBY);
	}
	
    /**
     * Get all values of property Fundedby as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFFundedby_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FUNDEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Fundedby as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFFundedby_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FUNDEDBY);
	}

    /**
     * Get all values of property Fundedby as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFFundedby_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FUNDEDBY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Fundedby     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.owl.Thing> getAllFOAFFundedby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FUNDEDBY, org.ontoware.rdfreactor.schema.owl.Thing.class);
	}
	
    /**
     * Get all values of property Fundedby as a ReactorResult of org.ontoware.rdfreactor.schema.owl.Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.owl.Thing> getAllFOAFFundedby_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FUNDEDBY, org.ontoware.rdfreactor.schema.owl.Thing.class);
	}

    /**
     * Get all values of property Fundedby     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.owl.Thing> getAllFOAFFundedby() {
		return Base.getAll(this.model, this.getResource(), FUNDEDBY, org.ontoware.rdfreactor.schema.owl.Thing.class);
	}

    /**
     * Get all values of property Fundedby as a ReactorResult of org.ontoware.rdfreactor.schema.owl.Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.owl.Thing> getAllFOAFFundedby_as() {
		return Base.getAll_as(this.model, this.getResource(), FUNDEDBY, org.ontoware.rdfreactor.schema.owl.Thing.class);
	}
 
    /**
     * Adds a value to property Fundedby as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFFundedby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FUNDEDBY, value);
	}
	
    /**
     * Adds a value to property Fundedby as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFFundedby( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FUNDEDBY, value);
	}
    /**
     * Adds a value to property Fundedby from an instance of org.ontoware.rdfreactor.schema.owl.Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFFundedby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.add(model, instanceResource, FUNDEDBY, value);
	}
	
    /**
     * Adds a value to property Fundedby from an instance of org.ontoware.rdfreactor.schema.owl.Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFFundedby(org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.add(this.model, this.getResource(), FUNDEDBY, value);
	}
  

    /**
     * Sets a value of property Fundedby from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFFundedby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FUNDEDBY, value);
	}
	
    /**
     * Sets a value of property Fundedby from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFFundedby( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FUNDEDBY, value);
	}
    /**
     * Sets a value of property Fundedby from an instance of org.ontoware.rdfreactor.schema.owl.Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFFundedby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.set(model, instanceResource, FUNDEDBY, value);
	}
	
    /**
     * Sets a value of property Fundedby from an instance of org.ontoware.rdfreactor.schema.owl.Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFFundedby(org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.set(this.model, this.getResource(), FUNDEDBY, value);
	}
  


    /**
     * Removes a value of property Fundedby as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFFundedby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FUNDEDBY, value);
	}
	
    /**
     * Removes a value of property Fundedby as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFFundedby( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FUNDEDBY, value);
	}
    /**
     * Removes a value of property Fundedby given as an instance of org.ontoware.rdfreactor.schema.owl.Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFFundedby(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.remove(model, instanceResource, FUNDEDBY, value);
	}
	
    /**
     * Removes a value of property Fundedby given as an instance of org.ontoware.rdfreactor.schema.owl.Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFFundedby(org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.remove(this.model, this.getResource(), FUNDEDBY, value);
	}
  
    /**
     * Removes all values of property Fundedby     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFFundedby( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FUNDEDBY);
	}
	
    /**
     * Removes all values of property Fundedby	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFFundedby() {
		Base.removeAll(this.model, this.getResource(), FUNDEDBY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57506502 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFGivenname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, GIVENNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57506502 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFGivenname() {
		return Base.has(this.model, this.getResource(), GIVENNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57506502 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFGivenname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, GIVENNAME, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57506502 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFGivenname( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), GIVENNAME, value);
	}

     /**
     * Get all values of property Givenname as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFGivenname_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, GIVENNAME);
	}
	
    /**
     * Get all values of property Givenname as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFGivenname_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GIVENNAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Givenname as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFGivenname_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), GIVENNAME);
	}

    /**
     * Get all values of property Givenname as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFGivenname_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), GIVENNAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Givenname     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllFOAFGivenname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, GIVENNAME, Thing.class);
	}
	
    /**
     * Get all values of property Givenname as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllFOAFGivenname_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, GIVENNAME, Thing.class);
	}

    /**
     * Get all values of property Givenname     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllFOAFGivenname() {
		return Base.getAll(this.model, this.getResource(), GIVENNAME, Thing.class);
	}

    /**
     * Get all values of property Givenname as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllFOAFGivenname_as() {
		return Base.getAll_as(this.model, this.getResource(), GIVENNAME, Thing.class);
	}
 
    /**
     * Adds a value to property Givenname as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFGivenname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, GIVENNAME, value);
	}
	
    /**
     * Adds a value to property Givenname as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFGivenname( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), GIVENNAME, value);
	}
    /**
     * Adds a value to property Givenname from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFGivenname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, GIVENNAME, value);
	}
	
    /**
     * Adds a value to property Givenname from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFGivenname(Thing value) {
		Base.add(this.model, this.getResource(), GIVENNAME, value);
	}
  

    /**
     * Sets a value of property Givenname from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFGivenname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, GIVENNAME, value);
	}
	
    /**
     * Sets a value of property Givenname from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFGivenname( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), GIVENNAME, value);
	}
    /**
     * Sets a value of property Givenname from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFGivenname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, GIVENNAME, value);
	}
	
    /**
     * Sets a value of property Givenname from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFGivenname(Thing value) {
		Base.set(this.model, this.getResource(), GIVENNAME, value);
	}
  


    /**
     * Removes a value of property Givenname as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFGivenname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, GIVENNAME, value);
	}
	
    /**
     * Removes a value of property Givenname as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFGivenname( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), GIVENNAME, value);
	}
    /**
     * Removes a value of property Givenname given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFGivenname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, GIVENNAME, value);
	}
	
    /**
     * Removes a value of property Givenname given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFGivenname(Thing value) {
		Base.remove(this.model, this.getResource(), GIVENNAME, value);
	}
  
    /**
     * Removes all values of property Givenname     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFGivenname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, GIVENNAME);
	}
	
    /**
     * Removes all values of property Givenname	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFGivenname() {
		Base.removeAll(this.model, this.getResource(), GIVENNAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@469b762c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFHomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HOMEPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@469b762c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFHomepage() {
		return Base.has(this.model, this.getResource(), HOMEPAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@469b762c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFHomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HOMEPAGE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@469b762c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFHomepage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HOMEPAGE, value);
	}

     /**
     * Get all values of property Homepage as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFHomepage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HOMEPAGE);
	}
	
    /**
     * Get all values of property Homepage as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFHomepage_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HOMEPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Homepage as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFHomepage_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HOMEPAGE);
	}

    /**
     * Get all values of property Homepage as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFHomepage_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HOMEPAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Homepage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Document> getAllFOAFHomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HOMEPAGE, Document.class);
	}
	
    /**
     * Get all values of property Homepage as a ReactorResult of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Document> getAllFOAFHomepage_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HOMEPAGE, Document.class);
	}

    /**
     * Get all values of property Homepage     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Document> getAllFOAFHomepage() {
		return Base.getAll(this.model, this.getResource(), HOMEPAGE, Document.class);
	}

    /**
     * Get all values of property Homepage as a ReactorResult of Document 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Document> getAllFOAFHomepage_as() {
		return Base.getAll_as(this.model, this.getResource(), HOMEPAGE, Document.class);
	}
 
    /**
     * Adds a value to property Homepage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFHomepage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HOMEPAGE, value);
	}
	
    /**
     * Adds a value to property Homepage as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFHomepage( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HOMEPAGE, value);
	}
    /**
     * Adds a value to property Homepage from an instance of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFHomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.add(model, instanceResource, HOMEPAGE, value);
	}
	
    /**
     * Adds a value to property Homepage from an instance of Document 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFHomepage(Document value) {
		Base.add(this.model, this.getResource(), HOMEPAGE, value);
	}
  

    /**
     * Sets a value of property Homepage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFHomepage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HOMEPAGE, value);
	}
	
    /**
     * Sets a value of property Homepage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFHomepage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HOMEPAGE, value);
	}
    /**
     * Sets a value of property Homepage from an instance of Document 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFHomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.set(model, instanceResource, HOMEPAGE, value);
	}
	
    /**
     * Sets a value of property Homepage from an instance of Document 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFHomepage(Document value) {
		Base.set(this.model, this.getResource(), HOMEPAGE, value);
	}
  


    /**
     * Removes a value of property Homepage as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFHomepage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HOMEPAGE, value);
	}
	
    /**
     * Removes a value of property Homepage as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFHomepage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HOMEPAGE, value);
	}
    /**
     * Removes a value of property Homepage given as an instance of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFHomepage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.remove(model, instanceResource, HOMEPAGE, value);
	}
	
    /**
     * Removes a value of property Homepage given as an instance of Document 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFHomepage(Document value) {
		Base.remove(this.model, this.getResource(), HOMEPAGE, value);
	}
  
    /**
     * Removes all values of property Homepage     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFHomepage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HOMEPAGE);
	}
	
    /**
     * Removes all values of property Homepage	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFHomepage() {
		Base.removeAll(this.model, this.getResource(), HOMEPAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69ac536b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INVERSEOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69ac536b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFInverseOf() {
		return Base.has(this.model, this.getResource(), INVERSEOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69ac536b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INVERSEOF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69ac536b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFInverseOf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INVERSEOF, value);
	}

     /**
     * Get all values of property InverseOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFInverseOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INVERSEOF);
	}
	
    /**
     * Get all values of property InverseOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFInverseOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVERSEOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property InverseOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFInverseOf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INVERSEOF);
	}

    /**
     * Get all values of property InverseOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFInverseOf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INVERSEOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property InverseOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllFOAFInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INVERSEOF, Thing.class);
	}
	
    /**
     * Get all values of property InverseOf as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllFOAFInverseOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVERSEOF, Thing.class);
	}

    /**
     * Get all values of property InverseOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllFOAFInverseOf() {
		return Base.getAll(this.model, this.getResource(), INVERSEOF, Thing.class);
	}

    /**
     * Get all values of property InverseOf as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllFOAFInverseOf_as() {
		return Base.getAll_as(this.model, this.getResource(), INVERSEOF, Thing.class);
	}
 
    /**
     * Adds a value to property InverseOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFInverseOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Adds a value to property InverseOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFInverseOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INVERSEOF, value);
	}
    /**
     * Adds a value to property InverseOf from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Adds a value to property InverseOf from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFInverseOf(Thing value) {
		Base.add(this.model, this.getResource(), INVERSEOF, value);
	}
  

    /**
     * Sets a value of property InverseOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFInverseOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Sets a value of property InverseOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFInverseOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INVERSEOF, value);
	}
    /**
     * Sets a value of property InverseOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Sets a value of property InverseOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFInverseOf(Thing value) {
		Base.set(this.model, this.getResource(), INVERSEOF, value);
	}
  


    /**
     * Removes a value of property InverseOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFInverseOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Removes a value of property InverseOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFInverseOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INVERSEOF, value);
	}
    /**
     * Removes a value of property InverseOf given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Removes a value of property InverseOf given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFInverseOf(Thing value) {
		Base.remove(this.model, this.getResource(), INVERSEOF, value);
	}
  
    /**
     * Removes all values of property InverseOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFInverseOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INVERSEOF);
	}
	
    /**
     * Removes all values of property InverseOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFInverseOf() {
		Base.removeAll(this.model, this.getResource(), INVERSEOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5956c062 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFLogo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LOGO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5956c062 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFLogo() {
		return Base.has(this.model, this.getResource(), LOGO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5956c062 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFLogo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LOGO, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5956c062 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFLogo( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LOGO, value);
	}

     /**
     * Get all values of property Logo as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFLogo_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LOGO);
	}
	
    /**
     * Get all values of property Logo as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFLogo_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LOGO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Logo as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFLogo_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LOGO);
	}

    /**
     * Get all values of property Logo as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFLogo_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LOGO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Logo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.owl.Thing> getAllFOAFLogo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LOGO, org.ontoware.rdfreactor.schema.owl.Thing.class);
	}
	
    /**
     * Get all values of property Logo as a ReactorResult of org.ontoware.rdfreactor.schema.owl.Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.owl.Thing> getAllFOAFLogo_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LOGO, org.ontoware.rdfreactor.schema.owl.Thing.class);
	}

    /**
     * Get all values of property Logo     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.owl.Thing> getAllFOAFLogo() {
		return Base.getAll(this.model, this.getResource(), LOGO, org.ontoware.rdfreactor.schema.owl.Thing.class);
	}

    /**
     * Get all values of property Logo as a ReactorResult of org.ontoware.rdfreactor.schema.owl.Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.owl.Thing> getAllFOAFLogo_as() {
		return Base.getAll_as(this.model, this.getResource(), LOGO, org.ontoware.rdfreactor.schema.owl.Thing.class);
	}
 
    /**
     * Adds a value to property Logo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFLogo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LOGO, value);
	}
	
    /**
     * Adds a value to property Logo as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFLogo( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LOGO, value);
	}
    /**
     * Adds a value to property Logo from an instance of org.ontoware.rdfreactor.schema.owl.Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFLogo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.add(model, instanceResource, LOGO, value);
	}
	
    /**
     * Adds a value to property Logo from an instance of org.ontoware.rdfreactor.schema.owl.Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFLogo(org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.add(this.model, this.getResource(), LOGO, value);
	}
  

    /**
     * Sets a value of property Logo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFLogo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LOGO, value);
	}
	
    /**
     * Sets a value of property Logo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFLogo( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LOGO, value);
	}
    /**
     * Sets a value of property Logo from an instance of org.ontoware.rdfreactor.schema.owl.Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFLogo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.set(model, instanceResource, LOGO, value);
	}
	
    /**
     * Sets a value of property Logo from an instance of org.ontoware.rdfreactor.schema.owl.Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFLogo(org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.set(this.model, this.getResource(), LOGO, value);
	}
  


    /**
     * Removes a value of property Logo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFLogo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LOGO, value);
	}
	
    /**
     * Removes a value of property Logo as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFLogo( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LOGO, value);
	}
    /**
     * Removes a value of property Logo given as an instance of org.ontoware.rdfreactor.schema.owl.Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFLogo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.remove(model, instanceResource, LOGO, value);
	}
	
    /**
     * Removes a value of property Logo given as an instance of org.ontoware.rdfreactor.schema.owl.Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFLogo(org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.remove(this.model, this.getResource(), LOGO, value);
	}
  
    /**
     * Removes all values of property Logo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFLogo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LOGO);
	}
	
    /**
     * Removes all values of property Logo	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFLogo() {
		Base.removeAll(this.model, this.getResource(), LOGO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1275a539 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFMaker(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MAKER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1275a539 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFMaker() {
		return Base.has(this.model, this.getResource(), MAKER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1275a539 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFMaker(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MAKER, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1275a539 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFMaker( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MAKER, value);
	}

     /**
     * Get all values of property Maker as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFMaker_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MAKER);
	}
	
    /**
     * Get all values of property Maker as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFMaker_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MAKER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Maker as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFMaker_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MAKER);
	}

    /**
     * Get all values of property Maker as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFMaker_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MAKER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Maker     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Agent> getAllFOAFMaker(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MAKER, Agent.class);
	}
	
    /**
     * Get all values of property Maker as a ReactorResult of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Agent> getAllFOAFMaker_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MAKER, Agent.class);
	}

    /**
     * Get all values of property Maker     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Agent> getAllFOAFMaker() {
		return Base.getAll(this.model, this.getResource(), MAKER, Agent.class);
	}

    /**
     * Get all values of property Maker as a ReactorResult of Agent 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Agent> getAllFOAFMaker_as() {
		return Base.getAll_as(this.model, this.getResource(), MAKER, Agent.class);
	}
 
    /**
     * Adds a value to property Maker as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFMaker( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MAKER, value);
	}
	
    /**
     * Adds a value to property Maker as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFMaker( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MAKER, value);
	}
    /**
     * Adds a value to property Maker from an instance of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFMaker(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Agent value) {
		Base.add(model, instanceResource, MAKER, value);
	}
	
    /**
     * Adds a value to property Maker from an instance of Agent 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFMaker(Agent value) {
		Base.add(this.model, this.getResource(), MAKER, value);
	}
  

    /**
     * Sets a value of property Maker from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFMaker( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MAKER, value);
	}
	
    /**
     * Sets a value of property Maker from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFMaker( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MAKER, value);
	}
    /**
     * Sets a value of property Maker from an instance of Agent 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFMaker(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Agent value) {
		Base.set(model, instanceResource, MAKER, value);
	}
	
    /**
     * Sets a value of property Maker from an instance of Agent 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFMaker(Agent value) {
		Base.set(this.model, this.getResource(), MAKER, value);
	}
  


    /**
     * Removes a value of property Maker as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFMaker( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MAKER, value);
	}
	
    /**
     * Removes a value of property Maker as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFMaker( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MAKER, value);
	}
    /**
     * Removes a value of property Maker given as an instance of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFMaker(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Agent value) {
		Base.remove(model, instanceResource, MAKER, value);
	}
	
    /**
     * Removes a value of property Maker given as an instance of Agent 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFMaker(Agent value) {
		Base.remove(this.model, this.getResource(), MAKER, value);
	}
  
    /**
     * Removes all values of property Maker     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFMaker( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MAKER);
	}
	
    /**
     * Removes all values of property Maker	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFMaker() {
		Base.removeAll(this.model, this.getResource(), MAKER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31245703 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFMembershipClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MEMBERSHIPCLASS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31245703 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFMembershipClass() {
		return Base.has(this.model, this.getResource(), MEMBERSHIPCLASS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31245703 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFMembershipClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MEMBERSHIPCLASS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31245703 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFMembershipClass( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MEMBERSHIPCLASS, value);
	}

     /**
     * Get all values of property MembershipClass as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFMembershipClass_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MEMBERSHIPCLASS);
	}
	
    /**
     * Get all values of property MembershipClass as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFMembershipClass_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MEMBERSHIPCLASS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property MembershipClass as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFMembershipClass_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MEMBERSHIPCLASS);
	}

    /**
     * Get all values of property MembershipClass as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFMembershipClass_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MEMBERSHIPCLASS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property MembershipClass     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllFOAFMembershipClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MEMBERSHIPCLASS, Thing.class);
	}
	
    /**
     * Get all values of property MembershipClass as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllFOAFMembershipClass_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MEMBERSHIPCLASS, Thing.class);
	}

    /**
     * Get all values of property MembershipClass     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllFOAFMembershipClass() {
		return Base.getAll(this.model, this.getResource(), MEMBERSHIPCLASS, Thing.class);
	}

    /**
     * Get all values of property MembershipClass as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllFOAFMembershipClass_as() {
		return Base.getAll_as(this.model, this.getResource(), MEMBERSHIPCLASS, Thing.class);
	}
 
    /**
     * Adds a value to property MembershipClass as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFMembershipClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MEMBERSHIPCLASS, value);
	}
	
    /**
     * Adds a value to property MembershipClass as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFMembershipClass( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MEMBERSHIPCLASS, value);
	}
    /**
     * Adds a value to property MembershipClass from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFMembershipClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, MEMBERSHIPCLASS, value);
	}
	
    /**
     * Adds a value to property MembershipClass from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFMembershipClass(Thing value) {
		Base.add(this.model, this.getResource(), MEMBERSHIPCLASS, value);
	}
  

    /**
     * Sets a value of property MembershipClass from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFMembershipClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MEMBERSHIPCLASS, value);
	}
	
    /**
     * Sets a value of property MembershipClass from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFMembershipClass( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MEMBERSHIPCLASS, value);
	}
    /**
     * Sets a value of property MembershipClass from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFMembershipClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, MEMBERSHIPCLASS, value);
	}
	
    /**
     * Sets a value of property MembershipClass from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFMembershipClass(Thing value) {
		Base.set(this.model, this.getResource(), MEMBERSHIPCLASS, value);
	}
  


    /**
     * Removes a value of property MembershipClass as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFMembershipClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MEMBERSHIPCLASS, value);
	}
	
    /**
     * Removes a value of property MembershipClass as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFMembershipClass( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MEMBERSHIPCLASS, value);
	}
    /**
     * Removes a value of property MembershipClass given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFMembershipClass(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, MEMBERSHIPCLASS, value);
	}
	
    /**
     * Removes a value of property MembershipClass given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFMembershipClass(Thing value) {
		Base.remove(this.model, this.getResource(), MEMBERSHIPCLASS, value);
	}
  
    /**
     * Removes all values of property MembershipClass     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFMembershipClass( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MEMBERSHIPCLASS);
	}
	
    /**
     * Removes all values of property MembershipClass	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFMembershipClass() {
		Base.removeAll(this.model, this.getResource(), MEMBERSHIPCLASS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@272e6498 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@272e6498 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFName() {
		return Base.has(this.model, this.getResource(), NAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@272e6498 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NAME, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@272e6498 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFName( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NAME, value);
	}

     /**
     * Get all values of property Name as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFName_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NAME);
	}
	
    /**
     * Get all values of property Name as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFName_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Name as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFName_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NAME);
	}

    /**
     * Get all values of property Name as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFName_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Name     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllFOAFName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NAME, java.lang.String.class);
	}
	
    /**
     * Get all values of property Name as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllFOAFName_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NAME, java.lang.String.class);
	}

    /**
     * Get all values of property Name     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllFOAFName() {
		return Base.getAll(this.model, this.getResource(), NAME, java.lang.String.class);
	}

    /**
     * Get all values of property Name as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllFOAFName_as() {
		return Base.getAll_as(this.model, this.getResource(), NAME, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Name as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NAME, value);
	}
	
    /**
     * Adds a value to property Name as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFName( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NAME, value);
	}
    /**
     * Adds a value to property Name from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, NAME, value);
	}
	
    /**
     * Adds a value to property Name from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFName(java.lang.String value) {
		Base.add(this.model, this.getResource(), NAME, value);
	}
  

    /**
     * Sets a value of property Name from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NAME, value);
	}
	
    /**
     * Sets a value of property Name from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFName( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NAME, value);
	}
    /**
     * Sets a value of property Name from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, NAME, value);
	}
	
    /**
     * Sets a value of property Name from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFName(java.lang.String value) {
		Base.set(this.model, this.getResource(), NAME, value);
	}
  


    /**
     * Removes a value of property Name as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NAME, value);
	}
	
    /**
     * Removes a value of property Name as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFName( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NAME, value);
	}
    /**
     * Removes a value of property Name given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, NAME, value);
	}
	
    /**
     * Removes a value of property Name given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFName(java.lang.String value) {
		Base.remove(this.model, this.getResource(), NAME, value);
	}
  
    /**
     * Removes all values of property Name     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NAME);
	}
	
    /**
     * Removes all values of property Name	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFName() {
		Base.removeAll(this.model, this.getResource(), NAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@523ed23c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFNickname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NICKNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@523ed23c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFNickname() {
		return Base.has(this.model, this.getResource(), NICKNAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@523ed23c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFNickname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NICKNAME, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@523ed23c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFNickname( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NICKNAME, value);
	}

     /**
     * Get all values of property Nickname as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFNickname_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NICKNAME);
	}
	
    /**
     * Get all values of property Nickname as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFNickname_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NICKNAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Nickname as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFNickname_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NICKNAME);
	}

    /**
     * Get all values of property Nickname as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFNickname_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NICKNAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Nickname     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllFOAFNickname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NICKNAME, Thing.class);
	}
	
    /**
     * Get all values of property Nickname as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllFOAFNickname_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NICKNAME, Thing.class);
	}

    /**
     * Get all values of property Nickname     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllFOAFNickname() {
		return Base.getAll(this.model, this.getResource(), NICKNAME, Thing.class);
	}

    /**
     * Get all values of property Nickname as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllFOAFNickname_as() {
		return Base.getAll_as(this.model, this.getResource(), NICKNAME, Thing.class);
	}
 
    /**
     * Adds a value to property Nickname as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFNickname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NICKNAME, value);
	}
	
    /**
     * Adds a value to property Nickname as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFNickname( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NICKNAME, value);
	}
    /**
     * Adds a value to property Nickname from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFNickname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, NICKNAME, value);
	}
	
    /**
     * Adds a value to property Nickname from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFNickname(Thing value) {
		Base.add(this.model, this.getResource(), NICKNAME, value);
	}
  

    /**
     * Sets a value of property Nickname from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFNickname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NICKNAME, value);
	}
	
    /**
     * Sets a value of property Nickname from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFNickname( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NICKNAME, value);
	}
    /**
     * Sets a value of property Nickname from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFNickname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, NICKNAME, value);
	}
	
    /**
     * Sets a value of property Nickname from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFNickname(Thing value) {
		Base.set(this.model, this.getResource(), NICKNAME, value);
	}
  


    /**
     * Removes a value of property Nickname as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFNickname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NICKNAME, value);
	}
	
    /**
     * Removes a value of property Nickname as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFNickname( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NICKNAME, value);
	}
    /**
     * Removes a value of property Nickname given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFNickname(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, NICKNAME, value);
	}
	
    /**
     * Removes a value of property Nickname given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFNickname(Thing value) {
		Base.remove(this.model, this.getResource(), NICKNAME, value);
	}
  
    /**
     * Removes all values of property Nickname     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFNickname( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NICKNAME);
	}
	
    /**
     * Removes all values of property Nickname	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFNickname() {
		Base.removeAll(this.model, this.getResource(), NICKNAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47a89031 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47a89031 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFPage() {
		return Base.has(this.model, this.getResource(), PAGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47a89031 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PAGE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47a89031 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFPage( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PAGE, value);
	}

     /**
     * Get all values of property Page as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFPage_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PAGE);
	}
	
    /**
     * Get all values of property Page as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFPage_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PAGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Page as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFPage_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PAGE);
	}

    /**
     * Get all values of property Page as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFPage_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PAGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Page     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Document> getAllFOAFPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PAGE, Document.class);
	}
	
    /**
     * Get all values of property Page as a ReactorResult of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Document> getAllFOAFPage_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PAGE, Document.class);
	}

    /**
     * Get all values of property Page     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Document> getAllFOAFPage() {
		return Base.getAll(this.model, this.getResource(), PAGE, Document.class);
	}

    /**
     * Get all values of property Page as a ReactorResult of Document 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Document> getAllFOAFPage_as() {
		return Base.getAll_as(this.model, this.getResource(), PAGE, Document.class);
	}
 
    /**
     * Adds a value to property Page as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PAGE, value);
	}
	
    /**
     * Adds a value to property Page as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFPage( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PAGE, value);
	}
    /**
     * Adds a value to property Page from an instance of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.add(model, instanceResource, PAGE, value);
	}
	
    /**
     * Adds a value to property Page from an instance of Document 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFPage(Document value) {
		Base.add(this.model, this.getResource(), PAGE, value);
	}
  

    /**
     * Sets a value of property Page from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PAGE, value);
	}
	
    /**
     * Sets a value of property Page from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFPage( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PAGE, value);
	}
    /**
     * Sets a value of property Page from an instance of Document 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.set(model, instanceResource, PAGE, value);
	}
	
    /**
     * Sets a value of property Page from an instance of Document 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFPage(Document value) {
		Base.set(this.model, this.getResource(), PAGE, value);
	}
  


    /**
     * Removes a value of property Page as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PAGE, value);
	}
	
    /**
     * Removes a value of property Page as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFPage( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PAGE, value);
	}
    /**
     * Removes a value of property Page given as an instance of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFPage(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.remove(model, instanceResource, PAGE, value);
	}
	
    /**
     * Removes a value of property Page given as an instance of Document 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFPage(Document value) {
		Base.remove(this.model, this.getResource(), PAGE, value);
	}
  
    /**
     * Removes all values of property Page     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFPage( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PAGE);
	}
	
    /**
     * Removes all values of property Page	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFPage() {
		Base.removeAll(this.model, this.getResource(), PAGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49c3c8e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFPhone(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PHONE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49c3c8e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFPhone() {
		return Base.has(this.model, this.getResource(), PHONE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49c3c8e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFPhone(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PHONE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49c3c8e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFPhone( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PHONE, value);
	}

     /**
     * Get all values of property Phone as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFPhone_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PHONE);
	}
	
    /**
     * Get all values of property Phone as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFPhone_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PHONE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Phone as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFPhone_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PHONE);
	}

    /**
     * Get all values of property Phone as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFPhone_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PHONE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Phone     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllFOAFPhone(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PHONE, Thing.class);
	}
	
    /**
     * Get all values of property Phone as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllFOAFPhone_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PHONE, Thing.class);
	}

    /**
     * Get all values of property Phone     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllFOAFPhone() {
		return Base.getAll(this.model, this.getResource(), PHONE, Thing.class);
	}

    /**
     * Get all values of property Phone as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllFOAFPhone_as() {
		return Base.getAll_as(this.model, this.getResource(), PHONE, Thing.class);
	}
 
    /**
     * Adds a value to property Phone as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFPhone( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PHONE, value);
	}
	
    /**
     * Adds a value to property Phone as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFPhone( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PHONE, value);
	}
    /**
     * Adds a value to property Phone from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFPhone(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, PHONE, value);
	}
	
    /**
     * Adds a value to property Phone from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFPhone(Thing value) {
		Base.add(this.model, this.getResource(), PHONE, value);
	}
  

    /**
     * Sets a value of property Phone from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFPhone( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PHONE, value);
	}
	
    /**
     * Sets a value of property Phone from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFPhone( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PHONE, value);
	}
    /**
     * Sets a value of property Phone from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFPhone(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, PHONE, value);
	}
	
    /**
     * Sets a value of property Phone from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFPhone(Thing value) {
		Base.set(this.model, this.getResource(), PHONE, value);
	}
  


    /**
     * Removes a value of property Phone as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFPhone( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PHONE, value);
	}
	
    /**
     * Removes a value of property Phone as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFPhone( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PHONE, value);
	}
    /**
     * Removes a value of property Phone given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFPhone(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, PHONE, value);
	}
	
    /**
     * Removes a value of property Phone given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFPhone(Thing value) {
		Base.remove(this.model, this.getResource(), PHONE, value);
	}
  
    /**
     * Removes all values of property Phone     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFPhone( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PHONE);
	}
	
    /**
     * Removes all values of property Phone	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFPhone() {
		Base.removeAll(this.model, this.getResource(), PHONE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bd6075d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFPrimarytopicof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PRIMARYTOPICOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bd6075d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFPrimarytopicof() {
		return Base.has(this.model, this.getResource(), PRIMARYTOPICOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bd6075d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFPrimarytopicof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PRIMARYTOPICOF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bd6075d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFPrimarytopicof( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PRIMARYTOPICOF, value);
	}

     /**
     * Get all values of property Primarytopicof as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFPrimarytopicof_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PRIMARYTOPICOF);
	}
	
    /**
     * Get all values of property Primarytopicof as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFPrimarytopicof_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRIMARYTOPICOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Primarytopicof as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFPrimarytopicof_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PRIMARYTOPICOF);
	}

    /**
     * Get all values of property Primarytopicof as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFPrimarytopicof_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PRIMARYTOPICOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Primarytopicof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Document> getAllFOAFPrimarytopicof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PRIMARYTOPICOF, Document.class);
	}
	
    /**
     * Get all values of property Primarytopicof as a ReactorResult of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Document> getAllFOAFPrimarytopicof_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PRIMARYTOPICOF, Document.class);
	}

    /**
     * Get all values of property Primarytopicof     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Document> getAllFOAFPrimarytopicof() {
		return Base.getAll(this.model, this.getResource(), PRIMARYTOPICOF, Document.class);
	}

    /**
     * Get all values of property Primarytopicof as a ReactorResult of Document 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Document> getAllFOAFPrimarytopicof_as() {
		return Base.getAll_as(this.model, this.getResource(), PRIMARYTOPICOF, Document.class);
	}
 
    /**
     * Adds a value to property Primarytopicof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFPrimarytopicof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PRIMARYTOPICOF, value);
	}
	
    /**
     * Adds a value to property Primarytopicof as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFPrimarytopicof( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PRIMARYTOPICOF, value);
	}
    /**
     * Adds a value to property Primarytopicof from an instance of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFPrimarytopicof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.add(model, instanceResource, PRIMARYTOPICOF, value);
	}
	
    /**
     * Adds a value to property Primarytopicof from an instance of Document 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFPrimarytopicof(Document value) {
		Base.add(this.model, this.getResource(), PRIMARYTOPICOF, value);
	}
  

    /**
     * Sets a value of property Primarytopicof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFPrimarytopicof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PRIMARYTOPICOF, value);
	}
	
    /**
     * Sets a value of property Primarytopicof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFPrimarytopicof( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PRIMARYTOPICOF, value);
	}
    /**
     * Sets a value of property Primarytopicof from an instance of Document 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFPrimarytopicof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.set(model, instanceResource, PRIMARYTOPICOF, value);
	}
	
    /**
     * Sets a value of property Primarytopicof from an instance of Document 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFPrimarytopicof(Document value) {
		Base.set(this.model, this.getResource(), PRIMARYTOPICOF, value);
	}
  


    /**
     * Removes a value of property Primarytopicof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFPrimarytopicof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PRIMARYTOPICOF, value);
	}
	
    /**
     * Removes a value of property Primarytopicof as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFPrimarytopicof( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PRIMARYTOPICOF, value);
	}
    /**
     * Removes a value of property Primarytopicof given as an instance of Document 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFPrimarytopicof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Document value) {
		Base.remove(model, instanceResource, PRIMARYTOPICOF, value);
	}
	
    /**
     * Removes a value of property Primarytopicof given as an instance of Document 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFPrimarytopicof(Document value) {
		Base.remove(this.model, this.getResource(), PRIMARYTOPICOF, value);
	}
  
    /**
     * Removes all values of property Primarytopicof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFPrimarytopicof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PRIMARYTOPICOF);
	}
	
    /**
     * Removes all values of property Primarytopicof	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFPrimarytopicof() {
		Base.removeAll(this.model, this.getResource(), PRIMARYTOPICOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d5b68d5 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFTermstatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TERMSTATUS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d5b68d5 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFTermstatus() {
		return Base.has(this.model, this.getResource(), TERMSTATUS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d5b68d5 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFTermstatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TERMSTATUS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d5b68d5 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFTermstatus( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TERMSTATUS, value);
	}

     /**
     * Get all values of property Termstatus as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFTermstatus_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TERMSTATUS);
	}
	
    /**
     * Get all values of property Termstatus as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFTermstatus_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMSTATUS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Termstatus as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFTermstatus_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TERMSTATUS);
	}

    /**
     * Get all values of property Termstatus as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFTermstatus_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TERMSTATUS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Termstatus     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllFOAFTermstatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TERMSTATUS, Thing.class);
	}
	
    /**
     * Get all values of property Termstatus as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllFOAFTermstatus_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TERMSTATUS, Thing.class);
	}

    /**
     * Get all values of property Termstatus     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllFOAFTermstatus() {
		return Base.getAll(this.model, this.getResource(), TERMSTATUS, Thing.class);
	}

    /**
     * Get all values of property Termstatus as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllFOAFTermstatus_as() {
		return Base.getAll_as(this.model, this.getResource(), TERMSTATUS, Thing.class);
	}
 
    /**
     * Adds a value to property Termstatus as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFTermstatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TERMSTATUS, value);
	}
	
    /**
     * Adds a value to property Termstatus as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFTermstatus( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TERMSTATUS, value);
	}
    /**
     * Adds a value to property Termstatus from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFTermstatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, TERMSTATUS, value);
	}
	
    /**
     * Adds a value to property Termstatus from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFTermstatus(Thing value) {
		Base.add(this.model, this.getResource(), TERMSTATUS, value);
	}
  

    /**
     * Sets a value of property Termstatus from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFTermstatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TERMSTATUS, value);
	}
	
    /**
     * Sets a value of property Termstatus from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFTermstatus( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TERMSTATUS, value);
	}
    /**
     * Sets a value of property Termstatus from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFTermstatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, TERMSTATUS, value);
	}
	
    /**
     * Sets a value of property Termstatus from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFTermstatus(Thing value) {
		Base.set(this.model, this.getResource(), TERMSTATUS, value);
	}
  


    /**
     * Removes a value of property Termstatus as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFTermstatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TERMSTATUS, value);
	}
	
    /**
     * Removes a value of property Termstatus as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFTermstatus( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TERMSTATUS, value);
	}
    /**
     * Removes a value of property Termstatus given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFTermstatus(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, TERMSTATUS, value);
	}
	
    /**
     * Removes a value of property Termstatus given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFTermstatus(Thing value) {
		Base.remove(this.model, this.getResource(), TERMSTATUS, value);
	}
  
    /**
     * Removes all values of property Termstatus     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFTermstatus( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TERMSTATUS);
	}
	
    /**
     * Removes all values of property Termstatus	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFTermstatus() {
		Base.removeAll(this.model, this.getResource(), TERMSTATUS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c84d9d has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFTheme(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, THEME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c84d9d has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFTheme() {
		return Base.has(this.model, this.getResource(), THEME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c84d9d has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFTheme(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, THEME, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c84d9d has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFTheme( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), THEME, value);
	}

     /**
     * Get all values of property Theme as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFTheme_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, THEME);
	}
	
    /**
     * Get all values of property Theme as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFTheme_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, THEME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Theme as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFTheme_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), THEME);
	}

    /**
     * Get all values of property Theme as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFTheme_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), THEME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Theme     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.owl.Thing> getAllFOAFTheme(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, THEME, org.ontoware.rdfreactor.schema.owl.Thing.class);
	}
	
    /**
     * Get all values of property Theme as a ReactorResult of org.ontoware.rdfreactor.schema.owl.Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.owl.Thing> getAllFOAFTheme_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, THEME, org.ontoware.rdfreactor.schema.owl.Thing.class);
	}

    /**
     * Get all values of property Theme     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.owl.Thing> getAllFOAFTheme() {
		return Base.getAll(this.model, this.getResource(), THEME, org.ontoware.rdfreactor.schema.owl.Thing.class);
	}

    /**
     * Get all values of property Theme as a ReactorResult of org.ontoware.rdfreactor.schema.owl.Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.owl.Thing> getAllFOAFTheme_as() {
		return Base.getAll_as(this.model, this.getResource(), THEME, org.ontoware.rdfreactor.schema.owl.Thing.class);
	}
 
    /**
     * Adds a value to property Theme as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFTheme( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, THEME, value);
	}
	
    /**
     * Adds a value to property Theme as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFTheme( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), THEME, value);
	}
    /**
     * Adds a value to property Theme from an instance of org.ontoware.rdfreactor.schema.owl.Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFTheme(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.add(model, instanceResource, THEME, value);
	}
	
    /**
     * Adds a value to property Theme from an instance of org.ontoware.rdfreactor.schema.owl.Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFTheme(org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.add(this.model, this.getResource(), THEME, value);
	}
  

    /**
     * Sets a value of property Theme from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFTheme( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, THEME, value);
	}
	
    /**
     * Sets a value of property Theme from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFTheme( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), THEME, value);
	}
    /**
     * Sets a value of property Theme from an instance of org.ontoware.rdfreactor.schema.owl.Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFTheme(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.set(model, instanceResource, THEME, value);
	}
	
    /**
     * Sets a value of property Theme from an instance of org.ontoware.rdfreactor.schema.owl.Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFTheme(org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.set(this.model, this.getResource(), THEME, value);
	}
  


    /**
     * Removes a value of property Theme as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFTheme( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, THEME, value);
	}
	
    /**
     * Removes a value of property Theme as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFTheme( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), THEME, value);
	}
    /**
     * Removes a value of property Theme given as an instance of org.ontoware.rdfreactor.schema.owl.Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFTheme(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.remove(model, instanceResource, THEME, value);
	}
	
    /**
     * Removes a value of property Theme given as an instance of org.ontoware.rdfreactor.schema.owl.Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFTheme(org.ontoware.rdfreactor.schema.owl.Thing value) {
		Base.remove(this.model, this.getResource(), THEME, value);
	}
  
    /**
     * Removes all values of property Theme     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFTheme( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, THEME);
	}
	
    /**
     * Removes all values of property Theme	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFTheme() {
		Base.removeAll(this.model, this.getResource(), THEME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3bb69643 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasFOAFTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3bb69643 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasFOAFTitle() {
		return Base.has(this.model, this.getResource(), TITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3bb69643 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasFOAFTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TITLE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3bb69643 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasFOAFTitle( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TITLE, value);
	}

     /**
     * Get all values of property Title as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFTitle_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TITLE);
	}
	
    /**
     * Get all values of property Title as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFTitle_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TITLE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Title as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFTitle_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TITLE);
	}

    /**
     * Get all values of property Title as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFTitle_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TITLE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Title     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllFOAFTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TITLE, Thing.class);
	}
	
    /**
     * Get all values of property Title as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllFOAFTitle_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TITLE, Thing.class);
	}

    /**
     * Get all values of property Title     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllFOAFTitle() {
		return Base.getAll(this.model, this.getResource(), TITLE, Thing.class);
	}

    /**
     * Get all values of property Title as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllFOAFTitle_as() {
		return Base.getAll_as(this.model, this.getResource(), TITLE, Thing.class);
	}
 
    /**
     * Adds a value to property Title as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addFOAFTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TITLE, value);
	}
	
    /**
     * Adds a value to property Title as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addFOAFTitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TITLE, value);
	}
    /**
     * Adds a value to property Title from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addFOAFTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, TITLE, value);
	}
	
    /**
     * Adds a value to property Title from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addFOAFTitle(Thing value) {
		Base.add(this.model, this.getResource(), TITLE, value);
	}
  

    /**
     * Sets a value of property Title from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setFOAFTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TITLE, value);
	}
	
    /**
     * Sets a value of property Title from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setFOAFTitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TITLE, value);
	}
    /**
     * Sets a value of property Title from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setFOAFTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, TITLE, value);
	}
	
    /**
     * Sets a value of property Title from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setFOAFTitle(Thing value) {
		Base.set(this.model, this.getResource(), TITLE, value);
	}
  


    /**
     * Removes a value of property Title as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeFOAFTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TITLE, value);
	}
	
    /**
     * Removes a value of property Title as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeFOAFTitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TITLE, value);
	}
    /**
     * Removes a value of property Title given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeFOAFTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, TITLE, value);
	}
	
    /**
     * Removes a value of property Title given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeFOAFTitle(Thing value) {
		Base.remove(this.model, this.getResource(), TITLE, value);
	}
  
    /**
     * Removes all values of property Title     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllFOAFTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TITLE);
	}
	
    /**
     * Removes all values of property Title	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllFOAFTitle() {
		Base.removeAll(this.model, this.getResource(), TITLE);
	}
 }