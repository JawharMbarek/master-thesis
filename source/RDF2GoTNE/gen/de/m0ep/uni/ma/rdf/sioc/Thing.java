/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) on 21.12.12 17:00
 */
package de.m0ep.uni.ma.rdf.sioc;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> Creator </li>
 *   <li> Date </li>
 *   <li> Depiction </li>
 *   <li> Description </li>
 *   <li> DisjointWith </li>
 *   <li> Function </li>
 *   <li> Id </li>
 *   <li> InverseOf </li>
 *   <li> Lastactivitydate </li>
 *   <li> Lastreplydate </li>
 *   <li> Linksto </li>
 *   <li> Name </li>
 *   <li> Note </li>
 *   <li> Numauthors </li>
 *   <li> Numreplies </li>
 *   <li> Numviews </li>
 *   <li> Owner </li>
 *   <li> References </li>
 *   <li> Relatedto </li>
 *   <li> Scopeof </li>
 *   <li> Space </li>
 *   <li> Subject </li>
 *   <li> Title </li>
 *   <li> Topic </li>
 *   <li> VersionInfo </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 21.12.12 17:00
 */
public class Thing extends org.ontoware.rdfreactor.schema.rdfs.Class {

    /** http://www.w3.org/2000/01/rdf-schema#Class */
	@SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.w3.org/2000/01/rdf-schema#Class", false);

    /** http://rdfs.org/sioc/ns#has_creator */
	public static final URI CREATOR = new URIImpl("http://rdfs.org/sioc/ns#has_creator",false);

    /** http://purl.org/dc/terms/date */
	public static final URI DATE = new URIImpl("http://purl.org/dc/terms/date",false);

    /** http://xmlns.com/foaf/0.1/depiction */
	public static final URI DEPICTION = new URIImpl("http://xmlns.com/foaf/0.1/depiction",false);

    /** http://purl.org/dc/terms/description */
	public static final URI DESCRIPTION = new URIImpl("http://purl.org/dc/terms/description",false);

    /** http://www.w3.org/2002/07/owl#disjointWith */
	public static final URI DISJOINTWITH = new URIImpl("http://www.w3.org/2002/07/owl#disjointWith",false);

    /** http://rdfs.org/sioc/ns#has_function */
	public static final URI FUNCTION = new URIImpl("http://rdfs.org/sioc/ns#has_function",false);

    /** http://rdfs.org/sioc/ns#id */
	public static final URI ID = new URIImpl("http://rdfs.org/sioc/ns#id",false);

    /** http://www.w3.org/2002/07/owl#inverseOf */
	public static final URI INVERSEOF = new URIImpl("http://www.w3.org/2002/07/owl#inverseOf",false);

    /** http://rdfs.org/sioc/ns#last_activity_date */
	public static final URI LASTACTIVITYDATE = new URIImpl("http://rdfs.org/sioc/ns#last_activity_date",false);

    /** http://rdfs.org/sioc/ns#last_reply_date */
	public static final URI LASTREPLYDATE = new URIImpl("http://rdfs.org/sioc/ns#last_reply_date",false);

    /** http://rdfs.org/sioc/ns#links_to */
	public static final URI LINKSTO = new URIImpl("http://rdfs.org/sioc/ns#links_to",false);

    /** http://rdfs.org/sioc/ns#name */
	public static final URI NAME = new URIImpl("http://rdfs.org/sioc/ns#name",false);

    /** http://rdfs.org/sioc/ns#note */
	public static final URI NOTE = new URIImpl("http://rdfs.org/sioc/ns#note",false);

    /** http://rdfs.org/sioc/ns#num_authors */
	public static final URI NUMAUTHORS = new URIImpl("http://rdfs.org/sioc/ns#num_authors",false);

    /** http://rdfs.org/sioc/ns#num_replies */
	public static final URI NUMREPLIES = new URIImpl("http://rdfs.org/sioc/ns#num_replies",false);

    /** http://rdfs.org/sioc/ns#num_views */
	public static final URI NUMVIEWS = new URIImpl("http://rdfs.org/sioc/ns#num_views",false);

    /** http://rdfs.org/sioc/ns#has_owner */
	public static final URI OWNER = new URIImpl("http://rdfs.org/sioc/ns#has_owner",false);

    /** http://purl.org/dc/terms/references */
	public static final URI REFERENCES = new URIImpl("http://purl.org/dc/terms/references",false);

    /** http://rdfs.org/sioc/ns#related_to */
	public static final URI RELATEDTO = new URIImpl("http://rdfs.org/sioc/ns#related_to",false);

    /** http://rdfs.org/sioc/ns#scope_of */
	public static final URI SCOPEOF = new URIImpl("http://rdfs.org/sioc/ns#scope_of",false);

    /** http://rdfs.org/sioc/ns#has_space */
	public static final URI SPACE = new URIImpl("http://rdfs.org/sioc/ns#has_space",false);

    /** http://purl.org/dc/terms/subject */
	public static final URI SUBJECT = new URIImpl("http://purl.org/dc/terms/subject",false);

    /** http://purl.org/dc/terms/title */
	public static final URI TITLE = new URIImpl("http://purl.org/dc/terms/title",false);

    /** http://rdfs.org/sioc/ns#topic */
	public static final URI TOPIC = new URIImpl("http://rdfs.org/sioc/ns#topic",false);

    /** http://www.w3.org/2002/07/owl#versionInfo */
	public static final URI VERSIONINFO = new URIImpl("http://www.w3.org/2002/07/owl#versionInfo",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
	@SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://rdfs.org/sioc/ns#has_creator",false),
      new URIImpl("http://purl.org/dc/terms/date",false),
      new URIImpl("http://xmlns.com/foaf/0.1/depiction",false),
      new URIImpl("http://purl.org/dc/terms/description",false),
      new URIImpl("http://www.w3.org/2002/07/owl#disjointWith",false),
      new URIImpl("http://rdfs.org/sioc/ns#has_function",false),
      new URIImpl("http://rdfs.org/sioc/ns#id",false),
      new URIImpl("http://www.w3.org/2002/07/owl#inverseOf",false),
      new URIImpl("http://rdfs.org/sioc/ns#last_activity_date",false),
      new URIImpl("http://rdfs.org/sioc/ns#last_reply_date",false),
      new URIImpl("http://rdfs.org/sioc/ns#links_to",false),
      new URIImpl("http://rdfs.org/sioc/ns#name",false),
      new URIImpl("http://rdfs.org/sioc/ns#note",false),
      new URIImpl("http://rdfs.org/sioc/ns#num_authors",false),
      new URIImpl("http://rdfs.org/sioc/ns#num_replies",false),
      new URIImpl("http://rdfs.org/sioc/ns#num_views",false),
      new URIImpl("http://rdfs.org/sioc/ns#has_owner",false),
      new URIImpl("http://purl.org/dc/terms/references",false),
      new URIImpl("http://rdfs.org/sioc/ns#related_to",false),
      new URIImpl("http://rdfs.org/sioc/ns#scope_of",false),
      new URIImpl("http://rdfs.org/sioc/ns#has_space",false),
      new URIImpl("http://purl.org/dc/terms/subject",false),
      new URIImpl("http://purl.org/dc/terms/title",false),
      new URIImpl("http://rdfs.org/sioc/ns#topic",false),
      new URIImpl("http://www.w3.org/2002/07/owl#versionInfo",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Thing ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Thing ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Thing ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Thing ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Thing ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Thing  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Thing  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Thing.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.w3.org/2000/01/rdf-schema#Class).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Thing> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Thing.class );
	}

    /**
	 * Remove rdf:type Thing from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Date' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCDate_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.DATE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Date' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCDate_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.DATE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Date' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCDate_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.DATE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Depiction' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCDepiction_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.DEPICTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Depiction' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCDepiction_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.DEPICTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Depiction' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCDepiction_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.DEPICTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Description' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCDescription_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.DESCRIPTION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Description' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCDescription_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.DESCRIPTION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Description' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCDescription_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.DESCRIPTION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'DisjointWith' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCDisjointWith_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.DISJOINTWITH, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'DisjointWith' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCDisjointWith_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.DISJOINTWITH, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'DisjointWith' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCDisjointWith_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.DISJOINTWITH, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'InverseOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCInverseOf_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.INVERSEOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'InverseOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCInverseOf_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.INVERSEOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'InverseOf' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCInverseOf_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.INVERSEOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Linksto' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCLinksto_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.LINKSTO, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Linksto' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCLinksto_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.LINKSTO, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Linksto' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCLinksto_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.LINKSTO, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'References' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCReferences_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.REFERENCES, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'References' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCReferences_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.REFERENCES, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'References' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCReferences_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.REFERENCES, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Relatedto' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCRelatedto_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.RELATEDTO, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Relatedto' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCRelatedto_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.RELATEDTO, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Relatedto' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCRelatedto_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.RELATEDTO, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Subject' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCSubject_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.SUBJECT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Subject' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCSubject_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.SUBJECT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Subject' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCSubject_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.SUBJECT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Title' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCTitle_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.TITLE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Title' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCTitle_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.TITLE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Title' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCTitle_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.TITLE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Topic' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCTopic_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.TOPIC, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Topic' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCTopic_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.TOPIC, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Topic' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCTopic_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.TOPIC, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'VersionInfo' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCVersionInfo_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.VERSIONINFO, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'VersionInfo' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCVersionInfo_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.VERSIONINFO, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'VersionInfo' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCVersionInfo_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.VERSIONINFO, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Functionof' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCFunctionof_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Role.FUNCTIONOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Functionof' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCFunctionof_Inverse() {
		return Base.getAll_Inverse(this.model, Role.FUNCTIONOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Functionof' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCFunctionof_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Role.FUNCTIONOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Scope' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCScope_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Role.SCOPE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Scope' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCScope_Inverse() {
		return Base.getAll_Inverse(this.model, Role.SCOPE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Scope' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCScope_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Role.SCOPE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'About' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCAbout_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Item.ABOUT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'About' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCAbout_Inverse() {
		return Base.getAll_Inverse(this.model, Item.ABOUT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'About' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCAbout_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Item.ABOUT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Addressedto' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCAddressedto_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Item.ADDRESSEDTO, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Addressedto' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCAddressedto_Inverse() {
		return Base.getAll_Inverse(this.model, Item.ADDRESSEDTO, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Addressedto' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCAddressedto_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Item.ADDRESSEDTO, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Attachment' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCAttachment_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Item.ATTACHMENT, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Attachment' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCAttachment_Inverse() {
		return Base.getAll_Inverse(this.model, Item.ATTACHMENT, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Attachment' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCAttachment_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Item.ATTACHMENT, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Discussion' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCDiscussion_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Item.DISCUSSION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Discussion' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCDiscussion_Inverse() {
		return Base.getAll_Inverse(this.model, Item.DISCUSSION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Discussion' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCDiscussion_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Item.DISCUSSION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Avatar' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCAvatar_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, UserAccount.AVATAR, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Avatar' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCAvatar_Inverse() {
		return Base.getAll_Inverse(this.model, UserAccount.AVATAR, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Avatar' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCAvatar_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, UserAccount.AVATAR, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Creatorof' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCCreatorof_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, UserAccount.CREATOROF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Creatorof' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCCreatorof_Inverse() {
		return Base.getAll_Inverse(this.model, UserAccount.CREATOROF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Creatorof' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCCreatorof_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, UserAccount.CREATOROF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Email' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCEmail_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, UserAccount.EMAIL, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Email' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCEmail_Inverse() {
		return Base.getAll_Inverse(this.model, UserAccount.EMAIL, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Email' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCEmail_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, UserAccount.EMAIL, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Ownerof' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCOwnerof_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, UserAccount.OWNEROF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Ownerof' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCOwnerof_Inverse() {
		return Base.getAll_Inverse(this.model, UserAccount.OWNEROF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Ownerof' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCOwnerof_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, UserAccount.OWNEROF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Spaceof' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCSpaceof_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Space.SPACEOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Spaceof' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCSpaceof_Inverse() {
		return Base.getAll_Inverse(this.model, Space.SPACEOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Spaceof' to this Thing instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCSpaceof_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Space.SPACEOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3a7b4d34 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CREATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3a7b4d34 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCCreator() {
		return Base.has(this.model, this.getResource(), CREATOR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3a7b4d34 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CREATOR, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3a7b4d34 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCCreator( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CREATOR, value);
	}

     /**
     * Get all values of property Creator as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCCreator_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CREATOR);
	}
	
    /**
     * Get all values of property Creator as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCCreator_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CREATOR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Creator as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCCreator_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CREATOR);
	}

    /**
     * Get all values of property Creator as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCCreator_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CREATOR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Creator     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<UserAccount> getAllSIOCCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CREATOR, UserAccount.class);
	}
	
    /**
     * Get all values of property Creator as a ReactorResult of UserAccount 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<UserAccount> getAllSIOCCreator_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CREATOR, UserAccount.class);
	}

    /**
     * Get all values of property Creator     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<UserAccount> getAllSIOCCreator() {
		return Base.getAll(this.model, this.getResource(), CREATOR, UserAccount.class);
	}

    /**
     * Get all values of property Creator as a ReactorResult of UserAccount 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<UserAccount> getAllSIOCCreator_as() {
		return Base.getAll_as(this.model, this.getResource(), CREATOR, UserAccount.class);
	}
 
    /**
     * Adds a value to property Creator as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCCreator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CREATOR, value);
	}
	
    /**
     * Adds a value to property Creator as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCCreator( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CREATOR, value);
	}
    /**
     * Adds a value to property Creator from an instance of UserAccount 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, UserAccount value) {
		Base.add(model, instanceResource, CREATOR, value);
	}
	
    /**
     * Adds a value to property Creator from an instance of UserAccount 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCCreator(UserAccount value) {
		Base.add(this.model, this.getResource(), CREATOR, value);
	}
  

    /**
     * Sets a value of property Creator from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCCreator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CREATOR, value);
	}
	
    /**
     * Sets a value of property Creator from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCCreator( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CREATOR, value);
	}
    /**
     * Sets a value of property Creator from an instance of UserAccount 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, UserAccount value) {
		Base.set(model, instanceResource, CREATOR, value);
	}
	
    /**
     * Sets a value of property Creator from an instance of UserAccount 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCCreator(UserAccount value) {
		Base.set(this.model, this.getResource(), CREATOR, value);
	}
  


    /**
     * Removes a value of property Creator as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCCreator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CREATOR, value);
	}
	
    /**
     * Removes a value of property Creator as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCCreator( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CREATOR, value);
	}
    /**
     * Removes a value of property Creator given as an instance of UserAccount 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCCreator(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, UserAccount value) {
		Base.remove(model, instanceResource, CREATOR, value);
	}
	
    /**
     * Removes a value of property Creator given as an instance of UserAccount 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCCreator(UserAccount value) {
		Base.remove(this.model, this.getResource(), CREATOR, value);
	}
  
    /**
     * Removes all values of property Creator     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCCreator( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CREATOR);
	}
	
    /**
     * Removes all values of property Creator	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCCreator() {
		Base.removeAll(this.model, this.getResource(), CREATOR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389aee72 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389aee72 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCDate() {
		return Base.has(this.model, this.getResource(), DATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389aee72 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DATE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389aee72 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCDate( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DATE, value);
	}

     /**
     * Get all values of property Date as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCDate_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DATE);
	}
	
    /**
     * Get all values of property Date as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCDate_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DATE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Date as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCDate_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DATE);
	}

    /**
     * Get all values of property Date as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCDate_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DATE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Date     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSIOCDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DATE, Thing.class);
	}
	
    /**
     * Get all values of property Date as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSIOCDate_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DATE, Thing.class);
	}

    /**
     * Get all values of property Date     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSIOCDate() {
		return Base.getAll(this.model, this.getResource(), DATE, Thing.class);
	}

    /**
     * Get all values of property Date as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSIOCDate_as() {
		return Base.getAll_as(this.model, this.getResource(), DATE, Thing.class);
	}
 
    /**
     * Adds a value to property Date as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DATE, value);
	}
	
    /**
     * Adds a value to property Date as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DATE, value);
	}
    /**
     * Adds a value to property Date from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, DATE, value);
	}
	
    /**
     * Adds a value to property Date from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCDate(Thing value) {
		Base.add(this.model, this.getResource(), DATE, value);
	}
  

    /**
     * Sets a value of property Date from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DATE, value);
	}
	
    /**
     * Sets a value of property Date from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DATE, value);
	}
    /**
     * Sets a value of property Date from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, DATE, value);
	}
	
    /**
     * Sets a value of property Date from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCDate(Thing value) {
		Base.set(this.model, this.getResource(), DATE, value);
	}
  


    /**
     * Removes a value of property Date as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DATE, value);
	}
	
    /**
     * Removes a value of property Date as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCDate( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DATE, value);
	}
    /**
     * Removes a value of property Date given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCDate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, DATE, value);
	}
	
    /**
     * Removes a value of property Date given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCDate(Thing value) {
		Base.remove(this.model, this.getResource(), DATE, value);
	}
  
    /**
     * Removes all values of property Date     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCDate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DATE);
	}
	
    /**
     * Removes all values of property Date	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCDate() {
		Base.removeAll(this.model, this.getResource(), DATE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@37a98fa9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCDepiction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DEPICTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@37a98fa9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCDepiction() {
		return Base.has(this.model, this.getResource(), DEPICTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@37a98fa9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCDepiction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DEPICTION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@37a98fa9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCDepiction( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DEPICTION, value);
	}

     /**
     * Get all values of property Depiction as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCDepiction_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DEPICTION);
	}
	
    /**
     * Get all values of property Depiction as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCDepiction_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DEPICTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Depiction as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCDepiction_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DEPICTION);
	}

    /**
     * Get all values of property Depiction as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCDepiction_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DEPICTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Depiction     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSIOCDepiction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DEPICTION, Thing.class);
	}
	
    /**
     * Get all values of property Depiction as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSIOCDepiction_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DEPICTION, Thing.class);
	}

    /**
     * Get all values of property Depiction     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSIOCDepiction() {
		return Base.getAll(this.model, this.getResource(), DEPICTION, Thing.class);
	}

    /**
     * Get all values of property Depiction as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSIOCDepiction_as() {
		return Base.getAll_as(this.model, this.getResource(), DEPICTION, Thing.class);
	}
 
    /**
     * Adds a value to property Depiction as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCDepiction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DEPICTION, value);
	}
	
    /**
     * Adds a value to property Depiction as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCDepiction( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DEPICTION, value);
	}
    /**
     * Adds a value to property Depiction from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCDepiction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, DEPICTION, value);
	}
	
    /**
     * Adds a value to property Depiction from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCDepiction(Thing value) {
		Base.add(this.model, this.getResource(), DEPICTION, value);
	}
  

    /**
     * Sets a value of property Depiction from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCDepiction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DEPICTION, value);
	}
	
    /**
     * Sets a value of property Depiction from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCDepiction( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DEPICTION, value);
	}
    /**
     * Sets a value of property Depiction from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCDepiction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, DEPICTION, value);
	}
	
    /**
     * Sets a value of property Depiction from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCDepiction(Thing value) {
		Base.set(this.model, this.getResource(), DEPICTION, value);
	}
  


    /**
     * Removes a value of property Depiction as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCDepiction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DEPICTION, value);
	}
	
    /**
     * Removes a value of property Depiction as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCDepiction( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DEPICTION, value);
	}
    /**
     * Removes a value of property Depiction given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCDepiction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, DEPICTION, value);
	}
	
    /**
     * Removes a value of property Depiction given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCDepiction(Thing value) {
		Base.remove(this.model, this.getResource(), DEPICTION, value);
	}
  
    /**
     * Removes all values of property Depiction     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCDepiction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DEPICTION);
	}
	
    /**
     * Removes all values of property Depiction	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCDepiction() {
		Base.removeAll(this.model, this.getResource(), DEPICTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d41b16b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d41b16b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCDescription() {
		return Base.has(this.model, this.getResource(), DESCRIPTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d41b16b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DESCRIPTION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d41b16b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCDescription( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DESCRIPTION, value);
	}

     /**
     * Get all values of property Description as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCDescription_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DESCRIPTION);
	}
	
    /**
     * Get all values of property Description as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCDescription_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Description as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCDescription_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DESCRIPTION);
	}

    /**
     * Get all values of property Description as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCDescription_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DESCRIPTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Description     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSIOCDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DESCRIPTION, Thing.class);
	}
	
    /**
     * Get all values of property Description as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSIOCDescription_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DESCRIPTION, Thing.class);
	}

    /**
     * Get all values of property Description     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSIOCDescription() {
		return Base.getAll(this.model, this.getResource(), DESCRIPTION, Thing.class);
	}

    /**
     * Get all values of property Description as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSIOCDescription_as() {
		return Base.getAll_as(this.model, this.getResource(), DESCRIPTION, Thing.class);
	}
 
    /**
     * Adds a value to property Description as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Adds a value to property Description as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DESCRIPTION, value);
	}
    /**
     * Adds a value to property Description from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Adds a value to property Description from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCDescription(Thing value) {
		Base.add(this.model, this.getResource(), DESCRIPTION, value);
	}
  

    /**
     * Sets a value of property Description from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Sets a value of property Description from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DESCRIPTION, value);
	}
    /**
     * Sets a value of property Description from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Sets a value of property Description from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCDescription(Thing value) {
		Base.set(this.model, this.getResource(), DESCRIPTION, value);
	}
  


    /**
     * Removes a value of property Description as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Removes a value of property Description as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCDescription( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DESCRIPTION, value);
	}
    /**
     * Removes a value of property Description given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCDescription(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, DESCRIPTION, value);
	}
	
    /**
     * Removes a value of property Description given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCDescription(Thing value) {
		Base.remove(this.model, this.getResource(), DESCRIPTION, value);
	}
  
    /**
     * Removes all values of property Description     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCDescription( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DESCRIPTION);
	}
	
    /**
     * Removes all values of property Description	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCDescription() {
		Base.removeAll(this.model, this.getResource(), DESCRIPTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5c025ae1 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCDisjointWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DISJOINTWITH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5c025ae1 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCDisjointWith() {
		return Base.has(this.model, this.getResource(), DISJOINTWITH);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5c025ae1 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCDisjointWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DISJOINTWITH, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5c025ae1 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCDisjointWith( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DISJOINTWITH, value);
	}

     /**
     * Get all values of property DisjointWith as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCDisjointWith_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DISJOINTWITH);
	}
	
    /**
     * Get all values of property DisjointWith as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCDisjointWith_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DISJOINTWITH, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property DisjointWith as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCDisjointWith_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DISJOINTWITH);
	}

    /**
     * Get all values of property DisjointWith as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCDisjointWith_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DISJOINTWITH, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property DisjointWith     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSIOCDisjointWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DISJOINTWITH, Thing.class);
	}
	
    /**
     * Get all values of property DisjointWith as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSIOCDisjointWith_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DISJOINTWITH, Thing.class);
	}

    /**
     * Get all values of property DisjointWith     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSIOCDisjointWith() {
		return Base.getAll(this.model, this.getResource(), DISJOINTWITH, Thing.class);
	}

    /**
     * Get all values of property DisjointWith as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSIOCDisjointWith_as() {
		return Base.getAll_as(this.model, this.getResource(), DISJOINTWITH, Thing.class);
	}
 
    /**
     * Adds a value to property DisjointWith as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCDisjointWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Adds a value to property DisjointWith as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCDisjointWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DISJOINTWITH, value);
	}
    /**
     * Adds a value to property DisjointWith from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCDisjointWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Adds a value to property DisjointWith from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCDisjointWith(Thing value) {
		Base.add(this.model, this.getResource(), DISJOINTWITH, value);
	}
  

    /**
     * Sets a value of property DisjointWith from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCDisjointWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Sets a value of property DisjointWith from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCDisjointWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DISJOINTWITH, value);
	}
    /**
     * Sets a value of property DisjointWith from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCDisjointWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Sets a value of property DisjointWith from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCDisjointWith(Thing value) {
		Base.set(this.model, this.getResource(), DISJOINTWITH, value);
	}
  


    /**
     * Removes a value of property DisjointWith as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCDisjointWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Removes a value of property DisjointWith as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCDisjointWith( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DISJOINTWITH, value);
	}
    /**
     * Removes a value of property DisjointWith given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCDisjointWith(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, DISJOINTWITH, value);
	}
	
    /**
     * Removes a value of property DisjointWith given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCDisjointWith(Thing value) {
		Base.remove(this.model, this.getResource(), DISJOINTWITH, value);
	}
  
    /**
     * Removes all values of property DisjointWith     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCDisjointWith( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DISJOINTWITH);
	}
	
    /**
     * Removes all values of property DisjointWith	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCDisjointWith() {
		Base.removeAll(this.model, this.getResource(), DISJOINTWITH);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a5dae04 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FUNCTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a5dae04 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCFunction() {
		return Base.has(this.model, this.getResource(), FUNCTION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a5dae04 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FUNCTION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a5dae04 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCFunction( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FUNCTION, value);
	}

     /**
     * Get all values of property Function as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCFunction_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FUNCTION);
	}
	
    /**
     * Get all values of property Function as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCFunction_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FUNCTION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Function as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCFunction_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FUNCTION);
	}

    /**
     * Get all values of property Function as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCFunction_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FUNCTION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Function     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Role> getAllSIOCFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FUNCTION, Role.class);
	}
	
    /**
     * Get all values of property Function as a ReactorResult of Role 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Role> getAllSIOCFunction_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FUNCTION, Role.class);
	}

    /**
     * Get all values of property Function     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Role> getAllSIOCFunction() {
		return Base.getAll(this.model, this.getResource(), FUNCTION, Role.class);
	}

    /**
     * Get all values of property Function as a ReactorResult of Role 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Role> getAllSIOCFunction_as() {
		return Base.getAll_as(this.model, this.getResource(), FUNCTION, Role.class);
	}
 
    /**
     * Adds a value to property Function as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCFunction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FUNCTION, value);
	}
	
    /**
     * Adds a value to property Function as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCFunction( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FUNCTION, value);
	}
    /**
     * Adds a value to property Function from an instance of Role 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Role value) {
		Base.add(model, instanceResource, FUNCTION, value);
	}
	
    /**
     * Adds a value to property Function from an instance of Role 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCFunction(Role value) {
		Base.add(this.model, this.getResource(), FUNCTION, value);
	}
  

    /**
     * Sets a value of property Function from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCFunction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FUNCTION, value);
	}
	
    /**
     * Sets a value of property Function from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCFunction( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FUNCTION, value);
	}
    /**
     * Sets a value of property Function from an instance of Role 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Role value) {
		Base.set(model, instanceResource, FUNCTION, value);
	}
	
    /**
     * Sets a value of property Function from an instance of Role 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCFunction(Role value) {
		Base.set(this.model, this.getResource(), FUNCTION, value);
	}
  


    /**
     * Removes a value of property Function as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCFunction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FUNCTION, value);
	}
	
    /**
     * Removes a value of property Function as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCFunction( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FUNCTION, value);
	}
    /**
     * Removes a value of property Function given as an instance of Role 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCFunction(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Role value) {
		Base.remove(model, instanceResource, FUNCTION, value);
	}
	
    /**
     * Removes a value of property Function given as an instance of Role 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCFunction(Role value) {
		Base.remove(this.model, this.getResource(), FUNCTION, value);
	}
  
    /**
     * Removes all values of property Function     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCFunction( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FUNCTION);
	}
	
    /**
     * Removes all values of property Function	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCFunction() {
		Base.removeAll(this.model, this.getResource(), FUNCTION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27cd61b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27cd61b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCId() {
		return Base.has(this.model, this.getResource(), ID);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27cd61b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ID, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27cd61b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCId( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ID, value);
	}

     /**
     * Get all values of property Id as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCId_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ID);
	}
	
    /**
     * Get all values of property Id as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCId_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ID, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Id as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCId_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ID);
	}

    /**
     * Get all values of property Id as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCId_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ID, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Id     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllSIOCId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ID, java.lang.String.class);
	}
	
    /**
     * Get all values of property Id as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllSIOCId_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ID, java.lang.String.class);
	}

    /**
     * Get all values of property Id     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllSIOCId() {
		return Base.getAll(this.model, this.getResource(), ID, java.lang.String.class);
	}

    /**
     * Get all values of property Id as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllSIOCId_as() {
		return Base.getAll_as(this.model, this.getResource(), ID, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Id as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ID, value);
	}
	
    /**
     * Adds a value to property Id as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCId( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ID, value);
	}
    /**
     * Adds a value to property Id from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, ID, value);
	}
	
    /**
     * Adds a value to property Id from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCId(java.lang.String value) {
		Base.add(this.model, this.getResource(), ID, value);
	}
  

    /**
     * Sets a value of property Id from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ID, value);
	}
	
    /**
     * Sets a value of property Id from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCId( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ID, value);
	}
    /**
     * Sets a value of property Id from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, ID, value);
	}
	
    /**
     * Sets a value of property Id from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCId(java.lang.String value) {
		Base.set(this.model, this.getResource(), ID, value);
	}
  


    /**
     * Removes a value of property Id as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ID, value);
	}
	
    /**
     * Removes a value of property Id as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCId( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ID, value);
	}
    /**
     * Removes a value of property Id given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCId(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, ID, value);
	}
	
    /**
     * Removes a value of property Id given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCId(java.lang.String value) {
		Base.remove(this.model, this.getResource(), ID, value);
	}
  
    /**
     * Removes all values of property Id     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCId( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ID);
	}
	
    /**
     * Removes all values of property Id	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCId() {
		Base.removeAll(this.model, this.getResource(), ID);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7fa94f77 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, INVERSEOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7fa94f77 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCInverseOf() {
		return Base.has(this.model, this.getResource(), INVERSEOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7fa94f77 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, INVERSEOF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7fa94f77 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCInverseOf( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), INVERSEOF, value);
	}

     /**
     * Get all values of property InverseOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCInverseOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, INVERSEOF);
	}
	
    /**
     * Get all values of property InverseOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCInverseOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVERSEOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property InverseOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCInverseOf_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), INVERSEOF);
	}

    /**
     * Get all values of property InverseOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCInverseOf_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), INVERSEOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property InverseOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSIOCInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, INVERSEOF, Thing.class);
	}
	
    /**
     * Get all values of property InverseOf as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSIOCInverseOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, INVERSEOF, Thing.class);
	}

    /**
     * Get all values of property InverseOf     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSIOCInverseOf() {
		return Base.getAll(this.model, this.getResource(), INVERSEOF, Thing.class);
	}

    /**
     * Get all values of property InverseOf as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSIOCInverseOf_as() {
		return Base.getAll_as(this.model, this.getResource(), INVERSEOF, Thing.class);
	}
 
    /**
     * Adds a value to property InverseOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCInverseOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Adds a value to property InverseOf as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCInverseOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), INVERSEOF, value);
	}
    /**
     * Adds a value to property InverseOf from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Adds a value to property InverseOf from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCInverseOf(Thing value) {
		Base.add(this.model, this.getResource(), INVERSEOF, value);
	}
  

    /**
     * Sets a value of property InverseOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCInverseOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Sets a value of property InverseOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCInverseOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), INVERSEOF, value);
	}
    /**
     * Sets a value of property InverseOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Sets a value of property InverseOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCInverseOf(Thing value) {
		Base.set(this.model, this.getResource(), INVERSEOF, value);
	}
  


    /**
     * Removes a value of property InverseOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCInverseOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Removes a value of property InverseOf as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCInverseOf( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), INVERSEOF, value);
	}
    /**
     * Removes a value of property InverseOf given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCInverseOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, INVERSEOF, value);
	}
	
    /**
     * Removes a value of property InverseOf given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCInverseOf(Thing value) {
		Base.remove(this.model, this.getResource(), INVERSEOF, value);
	}
  
    /**
     * Removes all values of property InverseOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCInverseOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, INVERSEOF);
	}
	
    /**
     * Removes all values of property InverseOf	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCInverseOf() {
		Base.removeAll(this.model, this.getResource(), INVERSEOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b223cc6 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCLastactivitydate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LASTACTIVITYDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b223cc6 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCLastactivitydate() {
		return Base.has(this.model, this.getResource(), LASTACTIVITYDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b223cc6 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCLastactivitydate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LASTACTIVITYDATE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b223cc6 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCLastactivitydate( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LASTACTIVITYDATE, value);
	}

     /**
     * Get all values of property Lastactivitydate as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCLastactivitydate_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LASTACTIVITYDATE);
	}
	
    /**
     * Get all values of property Lastactivitydate as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCLastactivitydate_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LASTACTIVITYDATE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Lastactivitydate as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCLastactivitydate_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LASTACTIVITYDATE);
	}

    /**
     * Get all values of property Lastactivitydate as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCLastactivitydate_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LASTACTIVITYDATE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Lastactivitydate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllSIOCLastactivitydate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LASTACTIVITYDATE, java.lang.String.class);
	}
	
    /**
     * Get all values of property Lastactivitydate as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllSIOCLastactivitydate_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LASTACTIVITYDATE, java.lang.String.class);
	}

    /**
     * Get all values of property Lastactivitydate     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllSIOCLastactivitydate() {
		return Base.getAll(this.model, this.getResource(), LASTACTIVITYDATE, java.lang.String.class);
	}

    /**
     * Get all values of property Lastactivitydate as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllSIOCLastactivitydate_as() {
		return Base.getAll_as(this.model, this.getResource(), LASTACTIVITYDATE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Lastactivitydate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCLastactivitydate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LASTACTIVITYDATE, value);
	}
	
    /**
     * Adds a value to property Lastactivitydate as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCLastactivitydate( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LASTACTIVITYDATE, value);
	}
    /**
     * Adds a value to property Lastactivitydate from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCLastactivitydate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, LASTACTIVITYDATE, value);
	}
	
    /**
     * Adds a value to property Lastactivitydate from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCLastactivitydate(java.lang.String value) {
		Base.add(this.model, this.getResource(), LASTACTIVITYDATE, value);
	}
  

    /**
     * Sets a value of property Lastactivitydate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCLastactivitydate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LASTACTIVITYDATE, value);
	}
	
    /**
     * Sets a value of property Lastactivitydate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCLastactivitydate( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LASTACTIVITYDATE, value);
	}
    /**
     * Sets a value of property Lastactivitydate from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCLastactivitydate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, LASTACTIVITYDATE, value);
	}
	
    /**
     * Sets a value of property Lastactivitydate from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCLastactivitydate(java.lang.String value) {
		Base.set(this.model, this.getResource(), LASTACTIVITYDATE, value);
	}
  


    /**
     * Removes a value of property Lastactivitydate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCLastactivitydate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LASTACTIVITYDATE, value);
	}
	
    /**
     * Removes a value of property Lastactivitydate as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCLastactivitydate( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LASTACTIVITYDATE, value);
	}
    /**
     * Removes a value of property Lastactivitydate given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCLastactivitydate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, LASTACTIVITYDATE, value);
	}
	
    /**
     * Removes a value of property Lastactivitydate given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCLastactivitydate(java.lang.String value) {
		Base.remove(this.model, this.getResource(), LASTACTIVITYDATE, value);
	}
  
    /**
     * Removes all values of property Lastactivitydate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCLastactivitydate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LASTACTIVITYDATE);
	}
	
    /**
     * Removes all values of property Lastactivitydate	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCLastactivitydate() {
		Base.removeAll(this.model, this.getResource(), LASTACTIVITYDATE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4721e1bb has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCLastreplydate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LASTREPLYDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4721e1bb has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCLastreplydate() {
		return Base.has(this.model, this.getResource(), LASTREPLYDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4721e1bb has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCLastreplydate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LASTREPLYDATE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4721e1bb has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCLastreplydate( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LASTREPLYDATE, value);
	}

     /**
     * Get all values of property Lastreplydate as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCLastreplydate_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LASTREPLYDATE);
	}
	
    /**
     * Get all values of property Lastreplydate as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCLastreplydate_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LASTREPLYDATE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Lastreplydate as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCLastreplydate_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LASTREPLYDATE);
	}

    /**
     * Get all values of property Lastreplydate as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCLastreplydate_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LASTREPLYDATE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Lastreplydate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllSIOCLastreplydate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LASTREPLYDATE, java.lang.String.class);
	}
	
    /**
     * Get all values of property Lastreplydate as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllSIOCLastreplydate_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LASTREPLYDATE, java.lang.String.class);
	}

    /**
     * Get all values of property Lastreplydate     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllSIOCLastreplydate() {
		return Base.getAll(this.model, this.getResource(), LASTREPLYDATE, java.lang.String.class);
	}

    /**
     * Get all values of property Lastreplydate as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllSIOCLastreplydate_as() {
		return Base.getAll_as(this.model, this.getResource(), LASTREPLYDATE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Lastreplydate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCLastreplydate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LASTREPLYDATE, value);
	}
	
    /**
     * Adds a value to property Lastreplydate as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCLastreplydate( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LASTREPLYDATE, value);
	}
    /**
     * Adds a value to property Lastreplydate from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCLastreplydate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, LASTREPLYDATE, value);
	}
	
    /**
     * Adds a value to property Lastreplydate from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCLastreplydate(java.lang.String value) {
		Base.add(this.model, this.getResource(), LASTREPLYDATE, value);
	}
  

    /**
     * Sets a value of property Lastreplydate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCLastreplydate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LASTREPLYDATE, value);
	}
	
    /**
     * Sets a value of property Lastreplydate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCLastreplydate( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LASTREPLYDATE, value);
	}
    /**
     * Sets a value of property Lastreplydate from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCLastreplydate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, LASTREPLYDATE, value);
	}
	
    /**
     * Sets a value of property Lastreplydate from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCLastreplydate(java.lang.String value) {
		Base.set(this.model, this.getResource(), LASTREPLYDATE, value);
	}
  


    /**
     * Removes a value of property Lastreplydate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCLastreplydate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LASTREPLYDATE, value);
	}
	
    /**
     * Removes a value of property Lastreplydate as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCLastreplydate( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LASTREPLYDATE, value);
	}
    /**
     * Removes a value of property Lastreplydate given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCLastreplydate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, LASTREPLYDATE, value);
	}
	
    /**
     * Removes a value of property Lastreplydate given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCLastreplydate(java.lang.String value) {
		Base.remove(this.model, this.getResource(), LASTREPLYDATE, value);
	}
  
    /**
     * Removes all values of property Lastreplydate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCLastreplydate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LASTREPLYDATE);
	}
	
    /**
     * Removes all values of property Lastreplydate	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCLastreplydate() {
		Base.removeAll(this.model, this.getResource(), LASTREPLYDATE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3764253e has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCLinksto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LINKSTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3764253e has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCLinksto() {
		return Base.has(this.model, this.getResource(), LINKSTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3764253e has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCLinksto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LINKSTO, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3764253e has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCLinksto( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LINKSTO, value);
	}

     /**
     * Get all values of property Linksto as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCLinksto_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LINKSTO);
	}
	
    /**
     * Get all values of property Linksto as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCLinksto_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LINKSTO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Linksto as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCLinksto_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LINKSTO);
	}

    /**
     * Get all values of property Linksto as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCLinksto_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LINKSTO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Linksto     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSIOCLinksto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LINKSTO, Thing.class);
	}
	
    /**
     * Get all values of property Linksto as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSIOCLinksto_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LINKSTO, Thing.class);
	}

    /**
     * Get all values of property Linksto     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSIOCLinksto() {
		return Base.getAll(this.model, this.getResource(), LINKSTO, Thing.class);
	}

    /**
     * Get all values of property Linksto as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSIOCLinksto_as() {
		return Base.getAll_as(this.model, this.getResource(), LINKSTO, Thing.class);
	}
 
    /**
     * Adds a value to property Linksto as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCLinksto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LINKSTO, value);
	}
	
    /**
     * Adds a value to property Linksto as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCLinksto( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LINKSTO, value);
	}
    /**
     * Adds a value to property Linksto from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCLinksto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, LINKSTO, value);
	}
	
    /**
     * Adds a value to property Linksto from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCLinksto(Thing value) {
		Base.add(this.model, this.getResource(), LINKSTO, value);
	}
  

    /**
     * Sets a value of property Linksto from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCLinksto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LINKSTO, value);
	}
	
    /**
     * Sets a value of property Linksto from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCLinksto( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LINKSTO, value);
	}
    /**
     * Sets a value of property Linksto from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCLinksto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, LINKSTO, value);
	}
	
    /**
     * Sets a value of property Linksto from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCLinksto(Thing value) {
		Base.set(this.model, this.getResource(), LINKSTO, value);
	}
  


    /**
     * Removes a value of property Linksto as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCLinksto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LINKSTO, value);
	}
	
    /**
     * Removes a value of property Linksto as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCLinksto( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LINKSTO, value);
	}
    /**
     * Removes a value of property Linksto given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCLinksto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, LINKSTO, value);
	}
	
    /**
     * Removes a value of property Linksto given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCLinksto(Thing value) {
		Base.remove(this.model, this.getResource(), LINKSTO, value);
	}
  
    /**
     * Removes all values of property Linksto     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCLinksto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LINKSTO);
	}
	
    /**
     * Removes all values of property Linksto	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCLinksto() {
		Base.removeAll(this.model, this.getResource(), LINKSTO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c53a57a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c53a57a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCName() {
		return Base.has(this.model, this.getResource(), NAME);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c53a57a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NAME, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c53a57a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCName( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NAME, value);
	}

     /**
     * Get all values of property Name as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCName_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NAME);
	}
	
    /**
     * Get all values of property Name as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCName_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NAME, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Name as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCName_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NAME);
	}

    /**
     * Get all values of property Name as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCName_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NAME, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Name     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllSIOCName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NAME, java.lang.String.class);
	}
	
    /**
     * Get all values of property Name as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllSIOCName_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NAME, java.lang.String.class);
	}

    /**
     * Get all values of property Name     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllSIOCName() {
		return Base.getAll(this.model, this.getResource(), NAME, java.lang.String.class);
	}

    /**
     * Get all values of property Name as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllSIOCName_as() {
		return Base.getAll_as(this.model, this.getResource(), NAME, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Name as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NAME, value);
	}
	
    /**
     * Adds a value to property Name as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCName( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NAME, value);
	}
    /**
     * Adds a value to property Name from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, NAME, value);
	}
	
    /**
     * Adds a value to property Name from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCName(java.lang.String value) {
		Base.add(this.model, this.getResource(), NAME, value);
	}
  

    /**
     * Sets a value of property Name from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NAME, value);
	}
	
    /**
     * Sets a value of property Name from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCName( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NAME, value);
	}
    /**
     * Sets a value of property Name from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, NAME, value);
	}
	
    /**
     * Sets a value of property Name from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCName(java.lang.String value) {
		Base.set(this.model, this.getResource(), NAME, value);
	}
  


    /**
     * Removes a value of property Name as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NAME, value);
	}
	
    /**
     * Removes a value of property Name as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCName( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NAME, value);
	}
    /**
     * Removes a value of property Name given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCName(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, NAME, value);
	}
	
    /**
     * Removes a value of property Name given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCName(java.lang.String value) {
		Base.remove(this.model, this.getResource(), NAME, value);
	}
  
    /**
     * Removes all values of property Name     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCName( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NAME);
	}
	
    /**
     * Removes all values of property Name	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCName() {
		Base.removeAll(this.model, this.getResource(), NAME);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4e9fd887 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4e9fd887 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCNote() {
		return Base.has(this.model, this.getResource(), NOTE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4e9fd887 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NOTE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4e9fd887 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCNote( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NOTE, value);
	}

     /**
     * Get all values of property Note as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCNote_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NOTE);
	}
	
    /**
     * Get all values of property Note as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCNote_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NOTE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Note as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCNote_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NOTE);
	}

    /**
     * Get all values of property Note as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCNote_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NOTE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Note     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllSIOCNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NOTE, java.lang.String.class);
	}
	
    /**
     * Get all values of property Note as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllSIOCNote_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NOTE, java.lang.String.class);
	}

    /**
     * Get all values of property Note     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllSIOCNote() {
		return Base.getAll(this.model, this.getResource(), NOTE, java.lang.String.class);
	}

    /**
     * Get all values of property Note as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllSIOCNote_as() {
		return Base.getAll_as(this.model, this.getResource(), NOTE, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Note as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NOTE, value);
	}
	
    /**
     * Adds a value to property Note as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NOTE, value);
	}
    /**
     * Adds a value to property Note from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, NOTE, value);
	}
	
    /**
     * Adds a value to property Note from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCNote(java.lang.String value) {
		Base.add(this.model, this.getResource(), NOTE, value);
	}
  

    /**
     * Sets a value of property Note from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NOTE, value);
	}
	
    /**
     * Sets a value of property Note from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NOTE, value);
	}
    /**
     * Sets a value of property Note from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, NOTE, value);
	}
	
    /**
     * Sets a value of property Note from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCNote(java.lang.String value) {
		Base.set(this.model, this.getResource(), NOTE, value);
	}
  


    /**
     * Removes a value of property Note as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NOTE, value);
	}
	
    /**
     * Removes a value of property Note as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCNote( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NOTE, value);
	}
    /**
     * Removes a value of property Note given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCNote(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, NOTE, value);
	}
	
    /**
     * Removes a value of property Note given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCNote(java.lang.String value) {
		Base.remove(this.model, this.getResource(), NOTE, value);
	}
  
    /**
     * Removes all values of property Note     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCNote( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NOTE);
	}
	
    /**
     * Removes all values of property Note	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCNote() {
		Base.removeAll(this.model, this.getResource(), NOTE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14be60b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCNumauthors(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NUMAUTHORS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14be60b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCNumauthors() {
		return Base.has(this.model, this.getResource(), NUMAUTHORS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14be60b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCNumauthors(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NUMAUTHORS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14be60b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCNumauthors( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NUMAUTHORS, value);
	}

     /**
     * Get all values of property Numauthors as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCNumauthors_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NUMAUTHORS);
	}
	
    /**
     * Get all values of property Numauthors as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCNumauthors_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NUMAUTHORS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Numauthors as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCNumauthors_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NUMAUTHORS);
	}

    /**
     * Get all values of property Numauthors as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCNumauthors_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NUMAUTHORS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Numauthors     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllSIOCNumauthors(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NUMAUTHORS, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property Numauthors as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllSIOCNumauthors_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NUMAUTHORS, java.lang.Integer.class);
	}

    /**
     * Get all values of property Numauthors     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllSIOCNumauthors() {
		return Base.getAll(this.model, this.getResource(), NUMAUTHORS, java.lang.Integer.class);
	}

    /**
     * Get all values of property Numauthors as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllSIOCNumauthors_as() {
		return Base.getAll_as(this.model, this.getResource(), NUMAUTHORS, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property Numauthors as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCNumauthors( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NUMAUTHORS, value);
	}
	
    /**
     * Adds a value to property Numauthors as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCNumauthors( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NUMAUTHORS, value);
	}
    /**
     * Adds a value to property Numauthors from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCNumauthors(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, NUMAUTHORS, value);
	}
	
    /**
     * Adds a value to property Numauthors from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCNumauthors(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), NUMAUTHORS, value);
	}
  

    /**
     * Sets a value of property Numauthors from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCNumauthors( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NUMAUTHORS, value);
	}
	
    /**
     * Sets a value of property Numauthors from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCNumauthors( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NUMAUTHORS, value);
	}
    /**
     * Sets a value of property Numauthors from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCNumauthors(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, NUMAUTHORS, value);
	}
	
    /**
     * Sets a value of property Numauthors from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCNumauthors(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), NUMAUTHORS, value);
	}
  


    /**
     * Removes a value of property Numauthors as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCNumauthors( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NUMAUTHORS, value);
	}
	
    /**
     * Removes a value of property Numauthors as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCNumauthors( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NUMAUTHORS, value);
	}
    /**
     * Removes a value of property Numauthors given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCNumauthors(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, NUMAUTHORS, value);
	}
	
    /**
     * Removes a value of property Numauthors given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCNumauthors(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), NUMAUTHORS, value);
	}
  
    /**
     * Removes all values of property Numauthors     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCNumauthors( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NUMAUTHORS);
	}
	
    /**
     * Removes all values of property Numauthors	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCNumauthors() {
		Base.removeAll(this.model, this.getResource(), NUMAUTHORS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@452d9a56 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCNumreplies(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NUMREPLIES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@452d9a56 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCNumreplies() {
		return Base.has(this.model, this.getResource(), NUMREPLIES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@452d9a56 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCNumreplies(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NUMREPLIES, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@452d9a56 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCNumreplies( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NUMREPLIES, value);
	}

     /**
     * Get all values of property Numreplies as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCNumreplies_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NUMREPLIES);
	}
	
    /**
     * Get all values of property Numreplies as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCNumreplies_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NUMREPLIES, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Numreplies as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCNumreplies_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NUMREPLIES);
	}

    /**
     * Get all values of property Numreplies as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCNumreplies_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NUMREPLIES, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Numreplies     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllSIOCNumreplies(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NUMREPLIES, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property Numreplies as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllSIOCNumreplies_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NUMREPLIES, java.lang.Integer.class);
	}

    /**
     * Get all values of property Numreplies     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllSIOCNumreplies() {
		return Base.getAll(this.model, this.getResource(), NUMREPLIES, java.lang.Integer.class);
	}

    /**
     * Get all values of property Numreplies as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllSIOCNumreplies_as() {
		return Base.getAll_as(this.model, this.getResource(), NUMREPLIES, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property Numreplies as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCNumreplies( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NUMREPLIES, value);
	}
	
    /**
     * Adds a value to property Numreplies as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCNumreplies( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NUMREPLIES, value);
	}
    /**
     * Adds a value to property Numreplies from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCNumreplies(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, NUMREPLIES, value);
	}
	
    /**
     * Adds a value to property Numreplies from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCNumreplies(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), NUMREPLIES, value);
	}
  

    /**
     * Sets a value of property Numreplies from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCNumreplies( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NUMREPLIES, value);
	}
	
    /**
     * Sets a value of property Numreplies from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCNumreplies( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NUMREPLIES, value);
	}
    /**
     * Sets a value of property Numreplies from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCNumreplies(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, NUMREPLIES, value);
	}
	
    /**
     * Sets a value of property Numreplies from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCNumreplies(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), NUMREPLIES, value);
	}
  


    /**
     * Removes a value of property Numreplies as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCNumreplies( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NUMREPLIES, value);
	}
	
    /**
     * Removes a value of property Numreplies as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCNumreplies( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NUMREPLIES, value);
	}
    /**
     * Removes a value of property Numreplies given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCNumreplies(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, NUMREPLIES, value);
	}
	
    /**
     * Removes a value of property Numreplies given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCNumreplies(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), NUMREPLIES, value);
	}
  
    /**
     * Removes all values of property Numreplies     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCNumreplies( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NUMREPLIES);
	}
	
    /**
     * Removes all values of property Numreplies	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCNumreplies() {
		Base.removeAll(this.model, this.getResource(), NUMREPLIES);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61d7f705 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCNumviews(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NUMVIEWS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61d7f705 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCNumviews() {
		return Base.has(this.model, this.getResource(), NUMVIEWS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61d7f705 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCNumviews(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NUMVIEWS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61d7f705 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCNumviews( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NUMVIEWS, value);
	}

     /**
     * Get all values of property Numviews as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCNumviews_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NUMVIEWS);
	}
	
    /**
     * Get all values of property Numviews as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCNumviews_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NUMVIEWS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Numviews as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCNumviews_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NUMVIEWS);
	}

    /**
     * Get all values of property Numviews as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCNumviews_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NUMVIEWS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Numviews     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.Integer> getAllSIOCNumviews(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NUMVIEWS, java.lang.Integer.class);
	}
	
    /**
     * Get all values of property Numviews as a ReactorResult of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.Integer> getAllSIOCNumviews_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NUMVIEWS, java.lang.Integer.class);
	}

    /**
     * Get all values of property Numviews     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.Integer> getAllSIOCNumviews() {
		return Base.getAll(this.model, this.getResource(), NUMVIEWS, java.lang.Integer.class);
	}

    /**
     * Get all values of property Numviews as a ReactorResult of java.lang.Integer 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.Integer> getAllSIOCNumviews_as() {
		return Base.getAll_as(this.model, this.getResource(), NUMVIEWS, java.lang.Integer.class);
	}
 
    /**
     * Adds a value to property Numviews as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCNumviews( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NUMVIEWS, value);
	}
	
    /**
     * Adds a value to property Numviews as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCNumviews( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NUMVIEWS, value);
	}
    /**
     * Adds a value to property Numviews from an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCNumviews(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.add(model, instanceResource, NUMVIEWS, value);
	}
	
    /**
     * Adds a value to property Numviews from an instance of java.lang.Integer 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCNumviews(java.lang.Integer value) {
		Base.add(this.model, this.getResource(), NUMVIEWS, value);
	}
  

    /**
     * Sets a value of property Numviews from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCNumviews( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NUMVIEWS, value);
	}
	
    /**
     * Sets a value of property Numviews from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCNumviews( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NUMVIEWS, value);
	}
    /**
     * Sets a value of property Numviews from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCNumviews(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.set(model, instanceResource, NUMVIEWS, value);
	}
	
    /**
     * Sets a value of property Numviews from an instance of java.lang.Integer 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCNumviews(java.lang.Integer value) {
		Base.set(this.model, this.getResource(), NUMVIEWS, value);
	}
  


    /**
     * Removes a value of property Numviews as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCNumviews( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NUMVIEWS, value);
	}
	
    /**
     * Removes a value of property Numviews as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCNumviews( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NUMVIEWS, value);
	}
    /**
     * Removes a value of property Numviews given as an instance of java.lang.Integer 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCNumviews(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.Integer value) {
		Base.remove(model, instanceResource, NUMVIEWS, value);
	}
	
    /**
     * Removes a value of property Numviews given as an instance of java.lang.Integer 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCNumviews(java.lang.Integer value) {
		Base.remove(this.model, this.getResource(), NUMVIEWS, value);
	}
  
    /**
     * Removes all values of property Numviews     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCNumviews( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NUMVIEWS);
	}
	
    /**
     * Removes all values of property Numviews	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCNumviews() {
		Base.removeAll(this.model, this.getResource(), NUMVIEWS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@759bade4 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, OWNER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@759bade4 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCOwner() {
		return Base.has(this.model, this.getResource(), OWNER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@759bade4 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, OWNER, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@759bade4 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCOwner( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), OWNER, value);
	}

     /**
     * Get all values of property Owner as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCOwner_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, OWNER);
	}
	
    /**
     * Get all values of property Owner as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCOwner_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OWNER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Owner as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCOwner_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), OWNER);
	}

    /**
     * Get all values of property Owner as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCOwner_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), OWNER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Owner     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<UserAccount> getAllSIOCOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, OWNER, UserAccount.class);
	}
	
    /**
     * Get all values of property Owner as a ReactorResult of UserAccount 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<UserAccount> getAllSIOCOwner_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OWNER, UserAccount.class);
	}

    /**
     * Get all values of property Owner     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<UserAccount> getAllSIOCOwner() {
		return Base.getAll(this.model, this.getResource(), OWNER, UserAccount.class);
	}

    /**
     * Get all values of property Owner as a ReactorResult of UserAccount 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<UserAccount> getAllSIOCOwner_as() {
		return Base.getAll_as(this.model, this.getResource(), OWNER, UserAccount.class);
	}
 
    /**
     * Adds a value to property Owner as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCOwner( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, OWNER, value);
	}
	
    /**
     * Adds a value to property Owner as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCOwner( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), OWNER, value);
	}
    /**
     * Adds a value to property Owner from an instance of UserAccount 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, UserAccount value) {
		Base.add(model, instanceResource, OWNER, value);
	}
	
    /**
     * Adds a value to property Owner from an instance of UserAccount 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCOwner(UserAccount value) {
		Base.add(this.model, this.getResource(), OWNER, value);
	}
  

    /**
     * Sets a value of property Owner from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCOwner( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, OWNER, value);
	}
	
    /**
     * Sets a value of property Owner from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCOwner( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), OWNER, value);
	}
    /**
     * Sets a value of property Owner from an instance of UserAccount 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, UserAccount value) {
		Base.set(model, instanceResource, OWNER, value);
	}
	
    /**
     * Sets a value of property Owner from an instance of UserAccount 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCOwner(UserAccount value) {
		Base.set(this.model, this.getResource(), OWNER, value);
	}
  


    /**
     * Removes a value of property Owner as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCOwner( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, OWNER, value);
	}
	
    /**
     * Removes a value of property Owner as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCOwner( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), OWNER, value);
	}
    /**
     * Removes a value of property Owner given as an instance of UserAccount 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCOwner(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, UserAccount value) {
		Base.remove(model, instanceResource, OWNER, value);
	}
	
    /**
     * Removes a value of property Owner given as an instance of UserAccount 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCOwner(UserAccount value) {
		Base.remove(this.model, this.getResource(), OWNER, value);
	}
  
    /**
     * Removes all values of property Owner     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCOwner( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, OWNER);
	}
	
    /**
     * Removes all values of property Owner	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCOwner() {
		Base.removeAll(this.model, this.getResource(), OWNER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b01812b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCReferences(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, REFERENCES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b01812b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCReferences() {
		return Base.has(this.model, this.getResource(), REFERENCES);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b01812b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCReferences(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, REFERENCES, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b01812b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCReferences( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), REFERENCES, value);
	}

     /**
     * Get all values of property References as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCReferences_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, REFERENCES);
	}
	
    /**
     * Get all values of property References as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCReferences_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REFERENCES, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property References as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCReferences_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), REFERENCES);
	}

    /**
     * Get all values of property References as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCReferences_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), REFERENCES, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property References     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSIOCReferences(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, REFERENCES, Thing.class);
	}
	
    /**
     * Get all values of property References as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSIOCReferences_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REFERENCES, Thing.class);
	}

    /**
     * Get all values of property References     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSIOCReferences() {
		return Base.getAll(this.model, this.getResource(), REFERENCES, Thing.class);
	}

    /**
     * Get all values of property References as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSIOCReferences_as() {
		return Base.getAll_as(this.model, this.getResource(), REFERENCES, Thing.class);
	}
 
    /**
     * Adds a value to property References as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCReferences( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, REFERENCES, value);
	}
	
    /**
     * Adds a value to property References as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCReferences( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), REFERENCES, value);
	}
    /**
     * Adds a value to property References from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCReferences(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, REFERENCES, value);
	}
	
    /**
     * Adds a value to property References from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCReferences(Thing value) {
		Base.add(this.model, this.getResource(), REFERENCES, value);
	}
  

    /**
     * Sets a value of property References from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCReferences( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, REFERENCES, value);
	}
	
    /**
     * Sets a value of property References from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCReferences( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), REFERENCES, value);
	}
    /**
     * Sets a value of property References from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCReferences(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, REFERENCES, value);
	}
	
    /**
     * Sets a value of property References from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCReferences(Thing value) {
		Base.set(this.model, this.getResource(), REFERENCES, value);
	}
  


    /**
     * Removes a value of property References as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCReferences( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, REFERENCES, value);
	}
	
    /**
     * Removes a value of property References as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCReferences( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), REFERENCES, value);
	}
    /**
     * Removes a value of property References given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCReferences(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, REFERENCES, value);
	}
	
    /**
     * Removes a value of property References given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCReferences(Thing value) {
		Base.remove(this.model, this.getResource(), REFERENCES, value);
	}
  
    /**
     * Removes all values of property References     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCReferences( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, REFERENCES);
	}
	
    /**
     * Removes all values of property References	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCReferences() {
		Base.removeAll(this.model, this.getResource(), REFERENCES);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@194e65cf has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCRelatedto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, RELATEDTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@194e65cf has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCRelatedto() {
		return Base.has(this.model, this.getResource(), RELATEDTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@194e65cf has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCRelatedto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, RELATEDTO, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@194e65cf has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCRelatedto( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), RELATEDTO, value);
	}

     /**
     * Get all values of property Relatedto as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCRelatedto_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, RELATEDTO);
	}
	
    /**
     * Get all values of property Relatedto as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCRelatedto_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATEDTO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Relatedto as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCRelatedto_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), RELATEDTO);
	}

    /**
     * Get all values of property Relatedto as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCRelatedto_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), RELATEDTO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Relatedto     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSIOCRelatedto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, RELATEDTO, Thing.class);
	}
	
    /**
     * Get all values of property Relatedto as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSIOCRelatedto_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, RELATEDTO, Thing.class);
	}

    /**
     * Get all values of property Relatedto     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSIOCRelatedto() {
		return Base.getAll(this.model, this.getResource(), RELATEDTO, Thing.class);
	}

    /**
     * Get all values of property Relatedto as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSIOCRelatedto_as() {
		return Base.getAll_as(this.model, this.getResource(), RELATEDTO, Thing.class);
	}
 
    /**
     * Adds a value to property Relatedto as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCRelatedto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, RELATEDTO, value);
	}
	
    /**
     * Adds a value to property Relatedto as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCRelatedto( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), RELATEDTO, value);
	}
    /**
     * Adds a value to property Relatedto from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCRelatedto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, RELATEDTO, value);
	}
	
    /**
     * Adds a value to property Relatedto from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCRelatedto(Thing value) {
		Base.add(this.model, this.getResource(), RELATEDTO, value);
	}
  

    /**
     * Sets a value of property Relatedto from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCRelatedto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, RELATEDTO, value);
	}
	
    /**
     * Sets a value of property Relatedto from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCRelatedto( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), RELATEDTO, value);
	}
    /**
     * Sets a value of property Relatedto from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCRelatedto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, RELATEDTO, value);
	}
	
    /**
     * Sets a value of property Relatedto from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCRelatedto(Thing value) {
		Base.set(this.model, this.getResource(), RELATEDTO, value);
	}
  


    /**
     * Removes a value of property Relatedto as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCRelatedto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, RELATEDTO, value);
	}
	
    /**
     * Removes a value of property Relatedto as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCRelatedto( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), RELATEDTO, value);
	}
    /**
     * Removes a value of property Relatedto given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCRelatedto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, RELATEDTO, value);
	}
	
    /**
     * Removes a value of property Relatedto given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCRelatedto(Thing value) {
		Base.remove(this.model, this.getResource(), RELATEDTO, value);
	}
  
    /**
     * Removes all values of property Relatedto     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCRelatedto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, RELATEDTO);
	}
	
    /**
     * Removes all values of property Relatedto	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCRelatedto() {
		Base.removeAll(this.model, this.getResource(), RELATEDTO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c7f8123 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCScopeof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SCOPEOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c7f8123 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCScopeof() {
		return Base.has(this.model, this.getResource(), SCOPEOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c7f8123 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCScopeof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SCOPEOF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c7f8123 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCScopeof( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SCOPEOF, value);
	}

     /**
     * Get all values of property Scopeof as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCScopeof_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SCOPEOF);
	}
	
    /**
     * Get all values of property Scopeof as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCScopeof_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SCOPEOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Scopeof as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCScopeof_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SCOPEOF);
	}

    /**
     * Get all values of property Scopeof as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCScopeof_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SCOPEOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Scopeof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Role> getAllSIOCScopeof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SCOPEOF, Role.class);
	}
	
    /**
     * Get all values of property Scopeof as a ReactorResult of Role 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Role> getAllSIOCScopeof_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SCOPEOF, Role.class);
	}

    /**
     * Get all values of property Scopeof     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Role> getAllSIOCScopeof() {
		return Base.getAll(this.model, this.getResource(), SCOPEOF, Role.class);
	}

    /**
     * Get all values of property Scopeof as a ReactorResult of Role 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Role> getAllSIOCScopeof_as() {
		return Base.getAll_as(this.model, this.getResource(), SCOPEOF, Role.class);
	}
 
    /**
     * Adds a value to property Scopeof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCScopeof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SCOPEOF, value);
	}
	
    /**
     * Adds a value to property Scopeof as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCScopeof( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SCOPEOF, value);
	}
    /**
     * Adds a value to property Scopeof from an instance of Role 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCScopeof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Role value) {
		Base.add(model, instanceResource, SCOPEOF, value);
	}
	
    /**
     * Adds a value to property Scopeof from an instance of Role 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCScopeof(Role value) {
		Base.add(this.model, this.getResource(), SCOPEOF, value);
	}
  

    /**
     * Sets a value of property Scopeof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCScopeof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SCOPEOF, value);
	}
	
    /**
     * Sets a value of property Scopeof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCScopeof( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SCOPEOF, value);
	}
    /**
     * Sets a value of property Scopeof from an instance of Role 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCScopeof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Role value) {
		Base.set(model, instanceResource, SCOPEOF, value);
	}
	
    /**
     * Sets a value of property Scopeof from an instance of Role 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCScopeof(Role value) {
		Base.set(this.model, this.getResource(), SCOPEOF, value);
	}
  


    /**
     * Removes a value of property Scopeof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCScopeof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SCOPEOF, value);
	}
	
    /**
     * Removes a value of property Scopeof as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCScopeof( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SCOPEOF, value);
	}
    /**
     * Removes a value of property Scopeof given as an instance of Role 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCScopeof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Role value) {
		Base.remove(model, instanceResource, SCOPEOF, value);
	}
	
    /**
     * Removes a value of property Scopeof given as an instance of Role 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCScopeof(Role value) {
		Base.remove(this.model, this.getResource(), SCOPEOF, value);
	}
  
    /**
     * Removes all values of property Scopeof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCScopeof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SCOPEOF);
	}
	
    /**
     * Removes all values of property Scopeof	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCScopeof() {
		Base.removeAll(this.model, this.getResource(), SCOPEOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e71f06c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCSpace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SPACE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e71f06c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCSpace() {
		return Base.has(this.model, this.getResource(), SPACE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e71f06c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCSpace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SPACE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e71f06c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCSpace( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SPACE, value);
	}

     /**
     * Get all values of property Space as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCSpace_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SPACE);
	}
	
    /**
     * Get all values of property Space as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCSpace_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SPACE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Space as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCSpace_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SPACE);
	}

    /**
     * Get all values of property Space as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCSpace_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SPACE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Space     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Space> getAllSIOCSpace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SPACE, Space.class);
	}
	
    /**
     * Get all values of property Space as a ReactorResult of Space 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Space> getAllSIOCSpace_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SPACE, Space.class);
	}

    /**
     * Get all values of property Space     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Space> getAllSIOCSpace() {
		return Base.getAll(this.model, this.getResource(), SPACE, Space.class);
	}

    /**
     * Get all values of property Space as a ReactorResult of Space 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Space> getAllSIOCSpace_as() {
		return Base.getAll_as(this.model, this.getResource(), SPACE, Space.class);
	}
 
    /**
     * Adds a value to property Space as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCSpace( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SPACE, value);
	}
	
    /**
     * Adds a value to property Space as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCSpace( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SPACE, value);
	}
    /**
     * Adds a value to property Space from an instance of Space 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCSpace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Space value) {
		Base.add(model, instanceResource, SPACE, value);
	}
	
    /**
     * Adds a value to property Space from an instance of Space 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCSpace(Space value) {
		Base.add(this.model, this.getResource(), SPACE, value);
	}
  

    /**
     * Sets a value of property Space from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCSpace( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SPACE, value);
	}
	
    /**
     * Sets a value of property Space from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCSpace( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SPACE, value);
	}
    /**
     * Sets a value of property Space from an instance of Space 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCSpace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Space value) {
		Base.set(model, instanceResource, SPACE, value);
	}
	
    /**
     * Sets a value of property Space from an instance of Space 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCSpace(Space value) {
		Base.set(this.model, this.getResource(), SPACE, value);
	}
  


    /**
     * Removes a value of property Space as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCSpace( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SPACE, value);
	}
	
    /**
     * Removes a value of property Space as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCSpace( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SPACE, value);
	}
    /**
     * Removes a value of property Space given as an instance of Space 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCSpace(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Space value) {
		Base.remove(model, instanceResource, SPACE, value);
	}
	
    /**
     * Removes a value of property Space given as an instance of Space 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCSpace(Space value) {
		Base.remove(this.model, this.getResource(), SPACE, value);
	}
  
    /**
     * Removes all values of property Space     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCSpace( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SPACE);
	}
	
    /**
     * Removes all values of property Space	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCSpace() {
		Base.removeAll(this.model, this.getResource(), SPACE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3efc68a7 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SUBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3efc68a7 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCSubject() {
		return Base.has(this.model, this.getResource(), SUBJECT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3efc68a7 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SUBJECT, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3efc68a7 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCSubject( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUBJECT, value);
	}

     /**
     * Get all values of property Subject as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCSubject_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUBJECT);
	}
	
    /**
     * Get all values of property Subject as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCSubject_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBJECT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Subject as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCSubject_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUBJECT);
	}

    /**
     * Get all values of property Subject as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCSubject_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUBJECT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Subject     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSIOCSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUBJECT, Thing.class);
	}
	
    /**
     * Get all values of property Subject as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSIOCSubject_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBJECT, Thing.class);
	}

    /**
     * Get all values of property Subject     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSIOCSubject() {
		return Base.getAll(this.model, this.getResource(), SUBJECT, Thing.class);
	}

    /**
     * Get all values of property Subject as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSIOCSubject_as() {
		return Base.getAll_as(this.model, this.getResource(), SUBJECT, Thing.class);
	}
 
    /**
     * Adds a value to property Subject as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCSubject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SUBJECT, value);
	}
	
    /**
     * Adds a value to property Subject as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCSubject( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SUBJECT, value);
	}
    /**
     * Adds a value to property Subject from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, SUBJECT, value);
	}
	
    /**
     * Adds a value to property Subject from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCSubject(Thing value) {
		Base.add(this.model, this.getResource(), SUBJECT, value);
	}
  

    /**
     * Sets a value of property Subject from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCSubject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SUBJECT, value);
	}
	
    /**
     * Sets a value of property Subject from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCSubject( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SUBJECT, value);
	}
    /**
     * Sets a value of property Subject from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, SUBJECT, value);
	}
	
    /**
     * Sets a value of property Subject from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCSubject(Thing value) {
		Base.set(this.model, this.getResource(), SUBJECT, value);
	}
  


    /**
     * Removes a value of property Subject as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCSubject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SUBJECT, value);
	}
	
    /**
     * Removes a value of property Subject as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCSubject( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SUBJECT, value);
	}
    /**
     * Removes a value of property Subject given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCSubject(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, SUBJECT, value);
	}
	
    /**
     * Removes a value of property Subject given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCSubject(Thing value) {
		Base.remove(this.model, this.getResource(), SUBJECT, value);
	}
  
    /**
     * Removes all values of property Subject     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCSubject( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUBJECT);
	}
	
    /**
     * Removes all values of property Subject	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCSubject() {
		Base.removeAll(this.model, this.getResource(), SUBJECT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bbe2ed3 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bbe2ed3 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCTitle() {
		return Base.has(this.model, this.getResource(), TITLE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bbe2ed3 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TITLE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bbe2ed3 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCTitle( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TITLE, value);
	}

     /**
     * Get all values of property Title as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCTitle_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TITLE);
	}
	
    /**
     * Get all values of property Title as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCTitle_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TITLE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Title as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCTitle_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TITLE);
	}

    /**
     * Get all values of property Title as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCTitle_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TITLE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Title     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSIOCTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TITLE, Thing.class);
	}
	
    /**
     * Get all values of property Title as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSIOCTitle_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TITLE, Thing.class);
	}

    /**
     * Get all values of property Title     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSIOCTitle() {
		return Base.getAll(this.model, this.getResource(), TITLE, Thing.class);
	}

    /**
     * Get all values of property Title as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSIOCTitle_as() {
		return Base.getAll_as(this.model, this.getResource(), TITLE, Thing.class);
	}
 
    /**
     * Adds a value to property Title as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TITLE, value);
	}
	
    /**
     * Adds a value to property Title as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCTitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TITLE, value);
	}
    /**
     * Adds a value to property Title from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, TITLE, value);
	}
	
    /**
     * Adds a value to property Title from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCTitle(Thing value) {
		Base.add(this.model, this.getResource(), TITLE, value);
	}
  

    /**
     * Sets a value of property Title from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TITLE, value);
	}
	
    /**
     * Sets a value of property Title from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCTitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TITLE, value);
	}
    /**
     * Sets a value of property Title from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, TITLE, value);
	}
	
    /**
     * Sets a value of property Title from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCTitle(Thing value) {
		Base.set(this.model, this.getResource(), TITLE, value);
	}
  


    /**
     * Removes a value of property Title as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TITLE, value);
	}
	
    /**
     * Removes a value of property Title as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCTitle( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TITLE, value);
	}
    /**
     * Removes a value of property Title given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCTitle(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, TITLE, value);
	}
	
    /**
     * Removes a value of property Title given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCTitle(Thing value) {
		Base.remove(this.model, this.getResource(), TITLE, value);
	}
  
    /**
     * Removes all values of property Title     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCTitle( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TITLE);
	}
	
    /**
     * Removes all values of property Title	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCTitle() {
		Base.removeAll(this.model, this.getResource(), TITLE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@334d545c has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCTopic(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, TOPIC);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@334d545c has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCTopic() {
		return Base.has(this.model, this.getResource(), TOPIC);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@334d545c has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCTopic(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, TOPIC, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@334d545c has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCTopic( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), TOPIC, value);
	}

     /**
     * Get all values of property Topic as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCTopic_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, TOPIC);
	}
	
    /**
     * Get all values of property Topic as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCTopic_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TOPIC, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Topic as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCTopic_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), TOPIC);
	}

    /**
     * Get all values of property Topic as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCTopic_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), TOPIC, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Topic     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSIOCTopic(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, TOPIC, Thing.class);
	}
	
    /**
     * Get all values of property Topic as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSIOCTopic_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, TOPIC, Thing.class);
	}

    /**
     * Get all values of property Topic     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSIOCTopic() {
		return Base.getAll(this.model, this.getResource(), TOPIC, Thing.class);
	}

    /**
     * Get all values of property Topic as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSIOCTopic_as() {
		return Base.getAll_as(this.model, this.getResource(), TOPIC, Thing.class);
	}
 
    /**
     * Adds a value to property Topic as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCTopic( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, TOPIC, value);
	}
	
    /**
     * Adds a value to property Topic as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCTopic( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), TOPIC, value);
	}
    /**
     * Adds a value to property Topic from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCTopic(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, TOPIC, value);
	}
	
    /**
     * Adds a value to property Topic from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCTopic(Thing value) {
		Base.add(this.model, this.getResource(), TOPIC, value);
	}
  

    /**
     * Sets a value of property Topic from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCTopic( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, TOPIC, value);
	}
	
    /**
     * Sets a value of property Topic from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCTopic( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), TOPIC, value);
	}
    /**
     * Sets a value of property Topic from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCTopic(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, TOPIC, value);
	}
	
    /**
     * Sets a value of property Topic from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCTopic(Thing value) {
		Base.set(this.model, this.getResource(), TOPIC, value);
	}
  


    /**
     * Removes a value of property Topic as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCTopic( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, TOPIC, value);
	}
	
    /**
     * Removes a value of property Topic as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCTopic( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), TOPIC, value);
	}
    /**
     * Removes a value of property Topic given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCTopic(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, TOPIC, value);
	}
	
    /**
     * Removes a value of property Topic given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCTopic(Thing value) {
		Base.remove(this.model, this.getResource(), TOPIC, value);
	}
  
    /**
     * Removes all values of property Topic     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCTopic( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, TOPIC);
	}
	
    /**
     * Removes all values of property Topic	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCTopic() {
		Base.removeAll(this.model, this.getResource(), TOPIC);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@479a3682 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, VERSIONINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@479a3682 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCVersionInfo() {
		return Base.has(this.model, this.getResource(), VERSIONINFO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@479a3682 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, VERSIONINFO, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@479a3682 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCVersionInfo( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), VERSIONINFO, value);
	}

     /**
     * Get all values of property VersionInfo as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCVersionInfo_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, VERSIONINFO);
	}
	
    /**
     * Get all values of property VersionInfo as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCVersionInfo_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, VERSIONINFO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property VersionInfo as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCVersionInfo_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), VERSIONINFO);
	}

    /**
     * Get all values of property VersionInfo as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCVersionInfo_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), VERSIONINFO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property VersionInfo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSIOCVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, VERSIONINFO, Thing.class);
	}
	
    /**
     * Get all values of property VersionInfo as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSIOCVersionInfo_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, VERSIONINFO, Thing.class);
	}

    /**
     * Get all values of property VersionInfo     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSIOCVersionInfo() {
		return Base.getAll(this.model, this.getResource(), VERSIONINFO, Thing.class);
	}

    /**
     * Get all values of property VersionInfo as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSIOCVersionInfo_as() {
		return Base.getAll_as(this.model, this.getResource(), VERSIONINFO, Thing.class);
	}
 
    /**
     * Adds a value to property VersionInfo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCVersionInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Adds a value to property VersionInfo as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCVersionInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), VERSIONINFO, value);
	}
    /**
     * Adds a value to property VersionInfo from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Adds a value to property VersionInfo from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCVersionInfo(Thing value) {
		Base.add(this.model, this.getResource(), VERSIONINFO, value);
	}
  

    /**
     * Sets a value of property VersionInfo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCVersionInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Sets a value of property VersionInfo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCVersionInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), VERSIONINFO, value);
	}
    /**
     * Sets a value of property VersionInfo from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Sets a value of property VersionInfo from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCVersionInfo(Thing value) {
		Base.set(this.model, this.getResource(), VERSIONINFO, value);
	}
  


    /**
     * Removes a value of property VersionInfo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCVersionInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Removes a value of property VersionInfo as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCVersionInfo( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), VERSIONINFO, value);
	}
    /**
     * Removes a value of property VersionInfo given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCVersionInfo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, VERSIONINFO, value);
	}
	
    /**
     * Removes a value of property VersionInfo given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCVersionInfo(Thing value) {
		Base.remove(this.model, this.getResource(), VERSIONINFO, value);
	}
  
    /**
     * Removes all values of property VersionInfo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCVersionInfo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, VERSIONINFO);
	}
	
    /**
     * Removes all values of property VersionInfo	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCVersionInfo() {
		Base.removeAll(this.model, this.getResource(), VERSIONINFO);
	}
 }