/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765
 * 2010-02-11 09:51:13Z max.at.xam.de $) on 21.12.12 17:00
 */
package de.m0ep.uni.ma.rdf.owl;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

import de.m0ep.uni.ma.rdf.foaf.Agent;
import de.m0ep.uni.ma.rdf.foaf.Document;
import de.m0ep.uni.ma.rdf.foaf.Image;
import de.m0ep.uni.ma.rdf.sioc.Item;
import de.m0ep.uni.ma.rdf.sioc.Role;
import de.m0ep.uni.ma.rdf.sioc.Space;
import de.m0ep.uni.ma.rdf.sioc.UserAccount;

/**
 * This class manages access to these properties:
 * <ul>
 * <li>created</li>
 * <li>Creator</li>
 * <li>Date</li>
 * <li>Depiction</li>
 * <li>Description</li>
 * <li>Function</li>
 * <li>Id</li>
 * <li>Lastactivitydate</li>
 * <li>Lastreplydate</li>
 * <li>Linksto</li>
 * <li>modified</li>
 * <li>Name</li>
 * <li>Note</li>
 * <li>Numauthors</li>
 * <li>Numreplies</li>
 * <li>Numviews</li>
 * <li>Owner</li>
 * <li>part</li>
 * <li>References</li>
 * <li>Relatedto</li>
 * <li>Scopeof</li>
 * <li>Space</li>
 * <li>Subject</li>
 * <li>Title</li>
 * <li>Topic</li>
 * <li>DNAchecksum</li>
 * <li>Depiction</li>
 * <li>Description</li>
 * <li>Elements1_1Title</li>
 * <li>FoafGivenname</li>
 * <li>Fundedby</li>
 * <li>Givenname</li>
 * <li>Homepage</li>
 * <li>Logo</li>
 * <li>Maker</li>
 * <li>MembershipClass</li>
 * <li>Name</li>
 * <li>Nickname</li>
 * <li>Page</li>
 * <li>Phone</li>
 * <li>Primarytopicof</li>
 * <li>Theme</li>
 * <li>Title</li>
 * </ul>
 * 
 * This class was generated by <a
 * href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 21.12.12 17:00
 */
public class Thing extends org.ontoware.rdfreactor.schema.rdfs.Class {
    /**
     * 
     */
    private static final long serialVersionUID   = 9047324362517530425L;

    /** http://www.w3.org/2000/01/rdf-schema#Class */
    public static final URI   RDFS_CLASS         = new URIImpl(
                                                         "http://www.w3.org/2000/01/rdf-schema#Class",
                                                         false );

    /** http://purl.org/dc/terms/subject */
    public static final URI   SUBJECT            = new URIImpl(
                                                         "http://purl.org/dc/terms/subject",
                                                         false );

    /** http://purl.org/dc/terms/title */
    public static final URI   TITLE            = new URIImpl(
                                                         "http://purl.org/dc/terms/title",
                                                         false );

    /** http://purl.org/dc/terms/date */
    public static final URI   DATE               = new URIImpl(
                                                         "http://purl.org/dc/terms/date",
                                                         false );

    /** http://purl.org/dc/terms/created */
    public static final URI   CREATED          = new URIImpl(
                                                         "http://purl.org/dc/terms/created",
                                                         false );

    /** http://purl.org/dc/terms/modified */
    public static final URI   MODIFIED         = new URIImpl(
                                                         "http://purl.org/dc/terms/modified",
                                                         false );

    /** http://purl.org/dc/terms/hasPart */
    public static final URI   HASPART            = new URIImpl(
                                                         "http://purl.org/dc/terms/hasPart",
                                                         false );

    /** http://purl.org/dc/terms/isPartOf */
    public static final URI   ISPARTOF           = new URIImpl(
                                                         "http://purl.org/dc/terms/isPartOf",
                                                         false );

    /** http://purl.org/dc/terms/description */
    public static final URI   DESCRIPTION        = new URIImpl(
                                                         "http://purl.org/dc/terms/description",
                                                         false );

    /** http://purl.org/dc/terms/references */
    public static final URI   REFERENCES         = new URIImpl(
                                                         "http://purl.org/dc/terms/references",
                                                         false );

    /** http://rdfs.org/sioc/ns#has_creator */
    public static final URI   CREATOR            = new URIImpl(
                                                         "http://rdfs.org/sioc/ns#has_creator",
                                                         false );

    /** http://xmlns.com/foaf/0.1/depiction */
    public static final URI   DEPICTION          = new URIImpl(
                                                         "http://xmlns.com/foaf/0.1/depiction",
                                                         false );

    /** http://rdfs.org/sioc/ns#has_function */
    public static final URI   FUNCTION           = new URIImpl(
                                                         "http://rdfs.org/sioc/ns#has_function",
                                                         false );

    /** http://rdfs.org/sioc/ns#id */
    public static final URI   ID                 = new URIImpl(
                                                         "http://rdfs.org/sioc/ns#id",
                                                         false );

    /** http://rdfs.org/sioc/ns#last_activity_date */
    public static final URI   LASTACTIVITYDATE   = new URIImpl(
                                                         "http://rdfs.org/sioc/ns#last_activity_date",
                                                         false );

    /** http://rdfs.org/sioc/ns#last_reply_date */
    public static final URI   LASTREPLYDATE      = new URIImpl(
                                                         "http://rdfs.org/sioc/ns#last_reply_date",
                                                         false );

    /** http://rdfs.org/sioc/ns#links_to */
    public static final URI   LINKSTO            = new URIImpl(
                                                         "http://rdfs.org/sioc/ns#links_to",
                                                         false );

    /** http://rdfs.org/sioc/ns#name */
    public static final URI   SIOC_NAME          = new URIImpl(
                                                         "http://rdfs.org/sioc/ns#name",
                                                         false );

    /** http://rdfs.org/sioc/ns#note */
    public static final URI   NOTE               = new URIImpl(
                                                         "http://rdfs.org/sioc/ns#note",
                                                         false );

    /** http://rdfs.org/sioc/ns#num_authors */
    public static final URI   NUMAUTHORS         = new URIImpl(
                                                         "http://rdfs.org/sioc/ns#num_authors",
                                                         false );

    /** http://rdfs.org/sioc/ns#num_replies */
    public static final URI   NUMREPLIES         = new URIImpl(
                                                         "http://rdfs.org/sioc/ns#num_replies",
                                                         false );

    /** http://rdfs.org/sioc/ns#num_views */
    public static final URI   NUMVIEWS           = new URIImpl(
                                                         "http://rdfs.org/sioc/ns#num_views",
                                                         false );

    /** http://rdfs.org/sioc/ns#has_owner */
    public static final URI   OWNER              = new URIImpl(
                                                         "http://rdfs.org/sioc/ns#has_owner",
                                                         false );

    /** http://rdfs.org/sioc/ns#related_to */
    public static final URI   RELATEDTO          = new URIImpl(
                                                         "http://rdfs.org/sioc/ns#related_to",
                                                         false );

    /** http://rdfs.org/sioc/ns#scope_of */
    public static final URI   SCOPEOF            = new URIImpl(
                                                         "http://rdfs.org/sioc/ns#scope_of",
                                                         false );

    /** http://rdfs.org/sioc/ns#has_space */
    public static final URI   SPACE              = new URIImpl(
                                                         "http://rdfs.org/sioc/ns#has_space",
                                                         false );

    /** http://rdfs.org/sioc/ns#topic */
    public static final URI   TOPIC              = new URIImpl(
                                                         "http://rdfs.org/sioc/ns#topic",
                                                         false );

    /** http://xmlns.com/foaf/0.1/dnaChecksum */
    public static final URI   DNACHECKSUM        = new URIImpl(
                                                         "http://xmlns.com/foaf/0.1/dnaChecksum",
                                                         false );

    /** http://xmlns.com/foaf/0.1/fundedBy */
    public static final URI   FUNDEDBY           = new URIImpl(
                                                         "http://xmlns.com/foaf/0.1/fundedBy",
                                                         false );

    /** http://xmlns.com/foaf/0.1/givenName */
    public static final URI   GIVENNAME          = new URIImpl(
                                                         "http://xmlns.com/foaf/0.1/givenName",
                                                         false );

    /** http://xmlns.com/foaf/0.1/homepage */
    public static final URI   HOMEPAGE           = new URIImpl(
                                                         "http://xmlns.com/foaf/0.1/homepage",
                                                         false );

    /** http://xmlns.com/foaf/0.1/logo */
    public static final URI   LOGO               = new URIImpl(
                                                         "http://xmlns.com/foaf/0.1/logo",
                                                         false );

    /** http://xmlns.com/foaf/0.1/maker */
    public static final URI   MAKER              = new URIImpl(
                                                         "http://xmlns.com/foaf/0.1/maker",
                                                         false );

    /** http://xmlns.com/foaf/0.1/membershipClass */
    public static final URI   MEMBERSHIPCLASS    = new URIImpl(
                                                         "http://xmlns.com/foaf/0.1/membershipClass",
                                                         false );

    /** http://xmlns.com/foaf/0.1/name */
    public static final URI   NAME               = new URIImpl(
                                                         "http://xmlns.com/foaf/0.1/name",
                                                         false );

    /** http://xmlns.com/foaf/0.1/nick */
    public static final URI   NICKNAME           = new URIImpl(
                                                         "http://xmlns.com/foaf/0.1/nick",
                                                         false );

    /** http://xmlns.com/foaf/0.1/page */
    public static final URI   PAGE               = new URIImpl(
                                                         "http://xmlns.com/foaf/0.1/page",
                                                         false );

    /** http://xmlns.com/foaf/0.1/phone */
    public static final URI   PHONE              = new URIImpl(
                                                         "http://xmlns.com/foaf/0.1/phone",
                                                         false );

    /** http://xmlns.com/foaf/0.1/isPrimaryTopicOf */
    public static final URI   PRIMARYTOPICOF     = new URIImpl(
                                                         "http://xmlns.com/foaf/0.1/isPrimaryTopicOf",
                                                         false );

    /** http://xmlns.com/foaf/0.1/theme */
    public static final URI   THEME              = new URIImpl(
                                                         "http://xmlns.com/foaf/0.1/theme",
                                                         false );

    /**
     * All property-URIs with this class as domain. All properties of all
     * super-classes are also available.
     */
    public static final URI[] MANAGED_URIS       = {
            new URIImpl( "http://purl.org/dc/terms/subject", false ),
            new URIImpl( "http://purl.org/dc/terms/title", false ),
            new URIImpl( "http://purl.org/dc/terms/created", false ),
            new URIImpl( "http://purl.org/dc/terms/date", false ),
            new URIImpl( "http://purl.org/dc/terms/description", false ),
            new URIImpl( "http://purl.org/dc/terms/references", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#has_creator", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#has_function", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#id", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#last_activity_date", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#last_reply_date", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#links_to", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#name", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#note", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#num_authors", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#num_replies", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#num_views", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#has_owner", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#related_to", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#scope_of", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#has_space", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#topic", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/dnaChecksum", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/depiction", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/givenname", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/fundedBy", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/givenName", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/homepage", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/logo", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/maker", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/membershipClass", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/name", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/nick", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/page", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/phone", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/isPrimaryTopicOf", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/theme", false )
 };

    // protected constructors needed for inheritance

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.semweb4j.org
     * @param classURI
     *            URI of RDFS class
     * @param instanceIdentifier
     *            Resource that identifies this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c1]
     */
    protected Thing( Model model, URI classURI,
            org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
            boolean write ) {
        super( model, classURI, instanceIdentifier, write );
    }

    // public constructors

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param instanceIdentifier
     *            an RDF2Go Resource identifying this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c2]
     */
    public Thing( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
            boolean write ) {
        super( model, RDFS_CLASS, instanceIdentifier, write );
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a URI, given as
     * a String. Creating two wrappers for the same URI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param uriString
     *            a URI given as a String
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * @throws ModelRuntimeException
     *             if URI syntax is wrong
     * 
     *             [Generated from RDFReactor template rule #c7]
     */
    public Thing( Model model, String uriString, boolean write )
            throws ModelRuntimeException {
        super( model, RDFS_CLASS, new URIImpl( uriString, false ), write );
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a blank node.
     * Creating two wrappers for the same blank node is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param bnode
     *            BlankNode of this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c8]
     */
    public Thing( Model model, BlankNode bnode, boolean write ) {
        super( model, RDFS_CLASS, bnode, write );
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a randomly
     * generated URI. Creating two wrappers results in different URIs.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c9]
     */
    public Thing( Model model, boolean write ) {
        super( model, RDFS_CLASS, model.newRandomUniqueURI(), write );
    }

    // /////////////////////////////////////////////////////////////////
    // typing

    /**
     * Return an existing instance of this class in the model. No statements are
     * written.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return an instance of Thing or null if none existst
     * 
     *         [Generated from RDFReactor template rule #class0]
     */
    public static Thing getInstance( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getInstance( model, instanceResource, Thing.class );
    }

    /**
     * Create a new instance of this class in the model. That is, create the
     * statement (instanceResource, RDF.type,
     * http://www.w3.org/2000/01/rdf-schema#Class).
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class1]
     */
    public static void createInstance( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.createInstance( model, RDFS_CLASS, instanceResource );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return true if instanceResource is an instance of this class in the
     *         model
     * 
     *         [Generated from RDFReactor template rule #class2]
     */
    public static boolean hasInstance( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.hasInstance( model, RDFS_CLASS, instanceResource );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @return all instances of this class in Model 'model' as RDF resources
     * 
     *         [Generated from RDFReactor template rule #class3]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(
            Model model ) {
        return Base.getAllInstances( model, RDFS_CLASS,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @return all instances of this class in Model 'model' as a ReactorResult,
     *         which can conveniently be converted to iterator, list or array.
     * 
     *         [Generated from RDFReactor template rule #class3-as]
     */
    public static ReactorResult<? extends Thing> getAllInstances_as( Model model ) {
        return Base.getAllInstances_as( model, RDFS_CLASS, Thing.class );
    }

    /**
     * Remove rdf:type Thing from this instance. Other triples are not affected.
     * To delete more, use deleteAllProperties
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class4]
     */
    public static void deleteInstance( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.deleteInstance( model, RDFS_CLASS, instanceResource );
    }

    /**
     * Delete all (this, *, *), i.e. including rdf:type
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     */
    public static void deleteAllProperties( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.deleteAllProperties( model, instanceResource );
    }

    // /////////////////////////////////////////////////////////////////
    // property access methods

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'HasPart' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDCTermsHasPart_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Thing.HASPART, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'HasPart' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDCTermsHasPart_Inverse() {
        return Base.getAll_Inverse( this.model, Thing.HASPART,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'HasPart' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDCTermsHasPart_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Thing.HASPART, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'IsPartOf' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDCTermsIsPartOf_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Thing.ISPARTOF, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'IsPartOf' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDCTermsIsPartOf_Inverse() {
        return Base.getAll_Inverse( this.model, Thing.ISPARTOF,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'IsPartOf' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDCTermsIsPartOf_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Thing.ISPARTOF, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Date' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDCTermsDate_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Thing.DATE, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Date' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDCTermsDate_Inverse() {
        return Base.getAll_Inverse( this.model, Thing.DATE, this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Date' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDCTermsDate_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Thing.DATE, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Description' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDCTermsDescription_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Thing.DESCRIPTION, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Description' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDCTermsDescription_Inverse() {
        return Base.getAll_Inverse( this.model, Thing.DESCRIPTION,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Description' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDCTermsDescription_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Thing.DESCRIPTION, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Linksto' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCLinksto_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Thing.LINKSTO, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Linksto' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCLinksto_Inverse() {
        return Base.getAll_Inverse( this.model, Thing.LINKSTO,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Linksto' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCLinksto_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Thing.LINKSTO, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'References' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDCTermsReferences_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Thing.REFERENCES, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'References' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDCTermsReferences_Inverse() {
        return Base.getAll_Inverse( this.model, Thing.REFERENCES,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'References' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDCTermsReferences_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Thing.REFERENCES, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Relatedto' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCRelatedto_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Thing.RELATEDTO, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Relatedto' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCRelatedto_Inverse() {
        return Base.getAll_Inverse( this.model, Thing.RELATEDTO,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Relatedto' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCRelatedto_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Thing.RELATEDTO, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Subject' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDCTermsSubject_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Thing.SUBJECT, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Subject' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDCTermsSubject_Inverse() {
        return Base.getAll_Inverse( this.model, Thing.SUBJECT,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Subject' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDCTermsSubject_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Thing.SUBJECT, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Title' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDCTermsTitle_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Thing.TITLE, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Title' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDCTermsTitle_Inverse() {
        return Base
                .getAll_Inverse( this.model, Thing.TITLE,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Title' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllDCTermsTitle_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Thing.TITLE, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Topic' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCTopic_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Thing.TOPIC, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Topic' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCTopic_Inverse() {
        return Base
                .getAll_Inverse( this.model, Thing.TOPIC, this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Topic' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCTopic_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Thing.TOPIC, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Functionof' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCFunctionof_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Role.FUNCTIONOF, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Functionof' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCFunctionof_Inverse() {
        return Base.getAll_Inverse( this.model, Role.FUNCTIONOF,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Functionof' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCFunctionof_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Role.FUNCTIONOF, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Scope' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCScope_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Role.SCOPE, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Scope' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCScope_Inverse() {
        return Base.getAll_Inverse( this.model, Role.SCOPE, this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Scope' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCScope_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Role.SCOPE, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'About' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCAbout_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Item.ABOUT, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'About' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCAbout_Inverse() {
        return Base.getAll_Inverse( this.model, Item.ABOUT, this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'About' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCAbout_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Item.ABOUT, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Addressedto' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCAddressedto_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Item.ADDRESSEDTO, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Addressedto' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCAddressedto_Inverse() {
        return Base.getAll_Inverse( this.model, Item.ADDRESSEDTO,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Addressedto' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCAddressedto_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Item.ADDRESSEDTO, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Attachment' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCAttachment_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Item.ATTACHMENT, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Attachment' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCAttachment_Inverse() {
        return Base.getAll_Inverse( this.model, Item.ATTACHMENT,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Attachment' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCAttachment_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Item.ATTACHMENT, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Discussion' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCDiscussion_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Item.DISCUSSION, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Discussion' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCDiscussion_Inverse() {
        return Base.getAll_Inverse( this.model, Item.DISCUSSION,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Discussion' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCDiscussion_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Item.DISCUSSION, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Avatar' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCAvatar_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, UserAccount.AVATAR, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Avatar' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCAvatar_Inverse() {
        return Base.getAll_Inverse( this.model, UserAccount.AVATAR,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Avatar' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCAvatar_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, UserAccount.AVATAR, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Creatorof' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCCreatorof_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, UserAccount.CREATOROF, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Creatorof' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCCreatorof_Inverse() {
        return Base.getAll_Inverse( this.model, UserAccount.CREATOROF,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Creatorof' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCCreatorof_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, UserAccount.CREATOROF,
                objectValue, org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Email' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCEmail_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, UserAccount.EMAIL, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Email' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCEmail_Inverse() {
        return Base.getAll_Inverse( this.model, UserAccount.EMAIL,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Email' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCEmail_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, UserAccount.EMAIL, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Ownerof' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCOwnerof_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, UserAccount.OWNEROF, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Ownerof' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCOwnerof_Inverse() {
        return Base.getAll_Inverse( this.model, UserAccount.OWNEROF,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Ownerof' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCOwnerof_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, UserAccount.OWNEROF, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Spaceof' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCSpaceof_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Space.SPACEOF, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Spaceof' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCSpaceof_Inverse() {
        return Base.getAll_Inverse( this.model, Space.SPACEOF,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Spaceof' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCSpaceof_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Space.SPACEOF, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3a7b4d34 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSIOCCreator( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, CREATOR );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3a7b4d34 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSIOCCreator() {
        return Base.has( this.model, this.getResource(), CREATOR );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3a7b4d34 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSIOCCreator( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, CREATOR, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3a7b4d34 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasSIOCCreator( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), CREATOR, value );
    }

    /**
     * Get all values of property Creator as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCCreator_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, CREATOR );
    }

    /**
     * Get all values of property Creator as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCCreator_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, CREATOR,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Creator as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCCreator_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), CREATOR );
    }

    /**
     * Get all values of property Creator as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCCreator_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), CREATOR,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Creator * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<UserAccount> getAllSIOCCreator( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base
                .getAll( model, instanceResource, CREATOR, UserAccount.class );
    }

    /**
     * Get all values of property Creator as a ReactorResult of UserAccount
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<UserAccount> getAllSIOCCreator_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, CREATOR,
                UserAccount.class );
    }

    /**
     * Get all values of property Creator * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<UserAccount> getAllSIOCCreator() {
        return Base.getAll( this.model, this.getResource(), CREATOR,
                UserAccount.class );
    }

    /**
     * Get all values of property Creator as a ReactorResult of UserAccount
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<UserAccount> getAllSIOCCreator_as() {
        return Base.getAll_as( this.model, this.getResource(), CREATOR,
                UserAccount.class );
    }

    /**
     * Adds a value to property Creator as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSIOCCreator( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, CREATOR, value );
    }

    /**
     * Adds a value to property Creator as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSIOCCreator( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), CREATOR, value );
    }

    /**
     * Adds a value to property Creator from an instance of UserAccount
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSIOCCreator( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            UserAccount value ) {
        Base.add( model, instanceResource, CREATOR, value );
    }

    /**
     * Adds a value to property Creator from an instance of UserAccount
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSIOCCreator( UserAccount value ) {
        Base.add( this.model, this.getResource(), CREATOR, value );
    }

    /**
     * Sets a value of property Creator from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSIOCCreator( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, CREATOR, value );
    }

    /**
     * Sets a value of property Creator from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSIOCCreator( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), CREATOR, value );
    }

    /**
     * Sets a value of property Creator from an instance of UserAccount First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSIOCCreator( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            UserAccount value ) {
        Base.set( model, instanceResource, CREATOR, value );
    }

    /**
     * Sets a value of property Creator from an instance of UserAccount First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSIOCCreator( UserAccount value ) {
        Base.set( this.model, this.getResource(), CREATOR, value );
    }

    /**
     * Removes a value of property Creator as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSIOCCreator( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, CREATOR, value );
    }

    /**
     * Removes a value of property Creator as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeSIOCCreator( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), CREATOR, value );
    }

    /**
     * Removes a value of property Creator given as an instance of UserAccount
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSIOCCreator( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            UserAccount value ) {
        Base.remove( model, instanceResource, CREATOR, value );
    }

    /**
     * Removes a value of property Creator given as an instance of UserAccount
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSIOCCreator( UserAccount value ) {
        Base.remove( this.model, this.getResource(), CREATOR, value );
    }

    /**
     * Removes all values of property Creator * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSIOCCreator( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, CREATOR );
    }

    /**
     * Removes all values of property Creator * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllSIOCCreator() {
        Base.removeAll( this.model, this.getResource(), CREATOR );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389aee72 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasDCTermsDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, DATE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389aee72 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasDCTermsDate() {
        return Base.has( this.model, this.getResource(), DATE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389aee72 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasDCTermsDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, DATE, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389aee72 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasDCTermsDate( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), DATE, value );
    }

    /**
     * Get all values of property Date as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDCTermsDate_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, DATE );
    }

    /**
     * Get all values of property Date as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDCTermsDate_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, DATE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Date as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDCTermsDate_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), DATE );
    }

    /**
     * Get all values of property Date as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDCTermsDate_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), DATE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Date * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllDCTermsDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, DATE, Thing.class );
    }

    /**
     * Get all values of property Date as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllDCTermsDate_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, DATE, Thing.class );
    }

    /**
     * Get all values of property Date * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllDCTermsDate() {
        return Base.getAll( this.model, this.getResource(), DATE, Thing.class );
    }

    /**
     * Get all values of property Date as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllDCTermsDate_as() {
        return Base.getAll_as( this.model, this.getResource(), DATE,
                Thing.class );
    }

    /**
     * Adds a value to property Date as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addDCTermsDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, DATE, value );
    }

    /**
     * Adds a value to property Date as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addDCTermsDate( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), DATE, value );
    }

    /**
     * Adds a value to property Date from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addDCTermsDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.add( model, instanceResource, DATE, value );
    }

    /**
     * Adds a value to property Date from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addDCTermsDate( Thing value ) {
        Base.add( this.model, this.getResource(), DATE, value );
    }

    /**
     * Sets a value of property Date from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setDCTermsDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, DATE, value );
    }

    /**
     * Sets a value of property Date from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setDCTermsDate( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), DATE, value );
    }

    /**
     * Sets a value of property Date from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setDCTermsDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.set( model, instanceResource, DATE, value );
    }

    /**
     * Sets a value of property Date from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setDCTermsDate( Thing value ) {
        Base.set( this.model, this.getResource(), DATE, value );
    }

    /**
     * Removes a value of property Date as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeDCTermsDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, DATE, value );
    }

    /**
     * Removes a value of property Date as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeDCTermsDate( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), DATE, value );
    }

    /**
     * Removes a value of property Date given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeDCTermsDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.remove( model, instanceResource, DATE, value );
    }

    /**
     * Removes a value of property Date given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeDCTermsDate( Thing value ) {
        Base.remove( this.model, this.getResource(), DATE, value );
    }

    /**
     * Removes all values of property Date * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllDCTermsDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, DATE );
    }

    /**
     * Removes all values of property Date * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllDCTermsDate() {
        Base.removeAll( this.model, this.getResource(), DATE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d41b16b has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasDCTermsDescription( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, DESCRIPTION );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d41b16b has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasDCTermsDescription() {
        return Base.has( this.model, this.getResource(), DESCRIPTION );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d41b16b has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasDCTermsDescription( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, DESCRIPTION, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d41b16b has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasDCTermsDescription(
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), DESCRIPTION,
                value );
    }

    /**
     * Get all values of property Description as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDCTermsDescription_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, DESCRIPTION );
    }

    /**
     * Get all values of property Description as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDCTermsDescription_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, DESCRIPTION,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Description as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDCTermsDescription_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), DESCRIPTION );
    }

    /**
     * Get all values of property Description as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDCTermsDescription_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), DESCRIPTION,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Description * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllDCTermsDescription(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, DESCRIPTION, Thing.class );
    }

    /**
     * Get all values of property Description as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllDCTermsDescription_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, DESCRIPTION,
                Thing.class );
    }

    /**
     * Get all values of property Description * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllDCTermsDescription() {
        return Base.getAll( this.model, this.getResource(), DESCRIPTION,
                Thing.class );
    }

    /**
     * Get all values of property Description as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllDCTermsDescription_as() {
        return Base.getAll_as( this.model, this.getResource(), DESCRIPTION,
                Thing.class );
    }

    /**
     * Adds a value to property Description as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addDCTermsDescription( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, DESCRIPTION, value );
    }

    /**
     * Adds a value to property Description as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addDCTermsDescription( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), DESCRIPTION, value );
    }

    /**
     * Adds a value to property Description from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addDCTermsDescription( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.add( model, instanceResource, DESCRIPTION, value );
    }

    /**
     * Adds a value to property Description from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addDCTermsDescription( Thing value ) {
        Base.add( this.model, this.getResource(), DESCRIPTION, value );
    }

    /**
     * Sets a value of property Description from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setDCTermsDescription( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, DESCRIPTION, value );
    }

    /**
     * Sets a value of property Description from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setDCTermsDescription( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), DESCRIPTION, value );
    }

    /**
     * Sets a value of property Description from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setDCTermsDescription( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.set( model, instanceResource, DESCRIPTION, value );
    }

    /**
     * Sets a value of property Description from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setDCTermsDescription( Thing value ) {
        Base.set( this.model, this.getResource(), DESCRIPTION, value );
    }

    /**
     * Removes a value of property Description as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeDCTermsDescription( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, DESCRIPTION, value );
    }

    /**
     * Removes a value of property Description as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeDCTermsDescription(
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), DESCRIPTION, value );
    }

    /**
     * Removes a value of property Description given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeDCTermsDescription( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.remove( model, instanceResource, DESCRIPTION, value );
    }

    /**
     * Removes a value of property Description given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeDCTermsDescription( Thing value ) {
        Base.remove( this.model, this.getResource(), DESCRIPTION, value );
    }

    /**
     * Removes all values of property Description * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllDCTermsDescription( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, DESCRIPTION );
    }

    /**
     * Removes all values of property Description * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllDCTermsDescription() {
        Base.removeAll( this.model, this.getResource(), DESCRIPTION );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a5dae04 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSIOCFunction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, FUNCTION );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a5dae04 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSIOCFunction() {
        return Base.has( this.model, this.getResource(), FUNCTION );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a5dae04 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSIOCFunction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, FUNCTION, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a5dae04 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasSIOCFunction( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), FUNCTION, value );
    }

    /**
     * Get all values of property Function as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCFunction_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, FUNCTION );
    }

    /**
     * Get all values of property Function as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCFunction_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, FUNCTION,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Function as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCFunction_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), FUNCTION );
    }

    /**
     * Get all values of property Function as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCFunction_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), FUNCTION,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Function * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Role> getAllSIOCFunction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, FUNCTION, Role.class );
    }

    /**
     * Get all values of property Function as a ReactorResult of Role
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Role> getAllSIOCFunction_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, FUNCTION, Role.class );
    }

    /**
     * Get all values of property Function * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Role> getAllSIOCFunction() {
        return Base.getAll( this.model, this.getResource(), FUNCTION,
                Role.class );
    }

    /**
     * Get all values of property Function as a ReactorResult of Role
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Role> getAllSIOCFunction_as() {
        return Base.getAll_as( this.model, this.getResource(), FUNCTION,
                Role.class );
    }

    /**
     * Adds a value to property Function as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSIOCFunction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, FUNCTION, value );
    }

    /**
     * Adds a value to property Function as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSIOCFunction( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), FUNCTION, value );
    }

    /**
     * Adds a value to property Function from an instance of Role
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSIOCFunction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource, Role value ) {
        Base.add( model, instanceResource, FUNCTION, value );
    }

    /**
     * Adds a value to property Function from an instance of Role
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSIOCFunction( Role value ) {
        Base.add( this.model, this.getResource(), FUNCTION, value );
    }

    /**
     * Sets a value of property Function from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSIOCFunction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, FUNCTION, value );
    }

    /**
     * Sets a value of property Function from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSIOCFunction( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), FUNCTION, value );
    }

    /**
     * Sets a value of property Function from an instance of Role First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSIOCFunction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource, Role value ) {
        Base.set( model, instanceResource, FUNCTION, value );
    }

    /**
     * Sets a value of property Function from an instance of Role First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSIOCFunction( Role value ) {
        Base.set( this.model, this.getResource(), FUNCTION, value );
    }

    /**
     * Removes a value of property Function as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSIOCFunction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, FUNCTION, value );
    }

    /**
     * Removes a value of property Function as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeSIOCFunction( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), FUNCTION, value );
    }

    /**
     * Removes a value of property Function given as an instance of Role
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSIOCFunction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource, Role value ) {
        Base.remove( model, instanceResource, FUNCTION, value );
    }

    /**
     * Removes a value of property Function given as an instance of Role
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSIOCFunction( Role value ) {
        Base.remove( this.model, this.getResource(), FUNCTION, value );
    }

    /**
     * Removes all values of property Function * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSIOCFunction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, FUNCTION );
    }

    /**
     * Removes all values of property Function * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllSIOCFunction() {
        Base.removeAll( this.model, this.getResource(), FUNCTION );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27cd61b has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSIOCId( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, ID );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27cd61b has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSIOCId() {
        return Base.has( this.model, this.getResource(), ID );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27cd61b has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSIOCId( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, ID, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27cd61b has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasSIOCId( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), ID, value );
    }

    /**
     * Get all values of property Id as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCId_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, ID );
    }

    /**
     * Get all values of property Id as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCId_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, ID,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Id as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCId_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), ID );
    }

    /**
     * Get all values of property Id as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCId_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), ID,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Id * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllSIOCId( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base
                .getAll( model, instanceResource, ID, java.lang.String.class );
    }

    /**
     * Get all values of property Id as a ReactorResult of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllSIOCId_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, ID,
                java.lang.String.class );
    }

    /**
     * Get all values of property Id * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllSIOCId() {
        return Base.getAll( this.model, this.getResource(), ID,
                java.lang.String.class );
    }

    /**
     * Get all values of property Id as a ReactorResult of java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllSIOCId_as() {
        return Base.getAll_as( this.model, this.getResource(), ID,
                java.lang.String.class );
    }

    /**
     * Adds a value to property Id as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSIOCId( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, ID, value );
    }

    /**
     * Adds a value to property Id as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSIOCId( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), ID, value );
    }

    /**
     * Adds a value to property Id from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSIOCId( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.add( model, instanceResource, ID, value );
    }

    /**
     * Adds a value to property Id from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSIOCId( java.lang.String value ) {
        Base.add( this.model, this.getResource(), ID, value );
    }

    /**
     * Sets a value of property Id from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSIOCId( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, ID, value );
    }

    /**
     * Sets a value of property Id from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSIOCId( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), ID, value );
    }

    /**
     * Sets a value of property Id from an instance of java.lang.String First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSIOCId( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.set( model, instanceResource, ID, value );
    }

    /**
     * Sets a value of property Id from an instance of java.lang.String First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSIOCId( java.lang.String value ) {
        Base.set( this.model, this.getResource(), ID, value );
    }

    /**
     * Removes a value of property Id as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSIOCId( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, ID, value );
    }

    /**
     * Removes a value of property Id as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeSIOCId( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), ID, value );
    }

    /**
     * Removes a value of property Id given as an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSIOCId( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.remove( model, instanceResource, ID, value );
    }

    /**
     * Removes a value of property Id given as an instance of java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSIOCId( java.lang.String value ) {
        Base.remove( this.model, this.getResource(), ID, value );
    }

    /**
     * Removes all values of property Id * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSIOCId( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, ID );
    }

    /**
     * Removes all values of property Id * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllSIOCId() {
        Base.removeAll( this.model, this.getResource(), ID );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b223cc6 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSIOCLastactivitydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, LASTACTIVITYDATE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b223cc6 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSIOCLastactivitydate() {
        return Base.has( this.model, this.getResource(), LASTACTIVITYDATE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b223cc6 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSIOCLastactivitydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, LASTACTIVITYDATE, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b223cc6 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasSIOCLastactivitydate(
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), LASTACTIVITYDATE,
                value );
    }

    /**
     * Get all values of property Lastactivitydate as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCLastactivitydate_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, LASTACTIVITYDATE );
    }

    /**
     * Get all values of property Lastactivitydate as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCLastactivitydate_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, LASTACTIVITYDATE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Lastactivitydate as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCLastactivitydate_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(),
                LASTACTIVITYDATE );
    }

    /**
     * Get all values of property Lastactivitydate as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCLastactivitydate_asNode_() {
        return Base.getAll_as( this.model, this.getResource(),
                LASTACTIVITYDATE, org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Lastactivitydate * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllSIOCLastactivitydate(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, LASTACTIVITYDATE,
                java.lang.String.class );
    }

    /**
     * Get all values of property Lastactivitydate as a ReactorResult of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllSIOCLastactivitydate_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, LASTACTIVITYDATE,
                java.lang.String.class );
    }

    /**
     * Get all values of property Lastactivitydate * @return a ClosableIterator
     * of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllSIOCLastactivitydate() {
        return Base.getAll( this.model, this.getResource(), LASTACTIVITYDATE,
                java.lang.String.class );
    }

    /**
     * Get all values of property Lastactivitydate as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllSIOCLastactivitydate_as() {
        return Base.getAll_as( this.model, this.getResource(),
                LASTACTIVITYDATE, java.lang.String.class );
    }

    /**
     * Adds a value to property Lastactivitydate as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSIOCLastactivitydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, LASTACTIVITYDATE, value );
    }

    /**
     * Adds a value to property Lastactivitydate as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSIOCLastactivitydate(
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), LASTACTIVITYDATE, value );
    }

    /**
     * Adds a value to property Lastactivitydate from an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSIOCLastactivitydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.add( model, instanceResource, LASTACTIVITYDATE, value );
    }

    /**
     * Adds a value to property Lastactivitydate from an instance of
     * java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSIOCLastactivitydate( java.lang.String value ) {
        Base.add( this.model, this.getResource(), LASTACTIVITYDATE, value );
    }

    /**
     * Sets a value of property Lastactivitydate from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSIOCLastactivitydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, LASTACTIVITYDATE, value );
    }

    /**
     * Sets a value of property Lastactivitydate from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSIOCLastactivitydate(
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), LASTACTIVITYDATE, value );
    }

    /**
     * Sets a value of property Lastactivitydate from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSIOCLastactivitydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.set( model, instanceResource, LASTACTIVITYDATE, value );
    }

    /**
     * Sets a value of property Lastactivitydate from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSIOCLastactivitydate( java.lang.String value ) {
        Base.set( this.model, this.getResource(), LASTACTIVITYDATE, value );
    }

    /**
     * Removes a value of property Lastactivitydate as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSIOCLastactivitydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, LASTACTIVITYDATE, value );
    }

    /**
     * Removes a value of property Lastactivitydate as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeSIOCLastactivitydate(
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), LASTACTIVITYDATE, value );
    }

    /**
     * Removes a value of property Lastactivitydate given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSIOCLastactivitydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.remove( model, instanceResource, LASTACTIVITYDATE, value );
    }

    /**
     * Removes a value of property Lastactivitydate given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSIOCLastactivitydate( java.lang.String value ) {
        Base.remove( this.model, this.getResource(), LASTACTIVITYDATE, value );
    }

    /**
     * Removes all values of property Lastactivitydate * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSIOCLastactivitydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, LASTACTIVITYDATE );
    }

    /**
     * Removes all values of property Lastactivitydate * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllSIOCLastactivitydate() {
        Base.removeAll( this.model, this.getResource(), LASTACTIVITYDATE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4721e1bb has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSIOCLastreplydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, LASTREPLYDATE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4721e1bb has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSIOCLastreplydate() {
        return Base.has( this.model, this.getResource(), LASTREPLYDATE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4721e1bb has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSIOCLastreplydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, LASTREPLYDATE, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4721e1bb has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasSIOCLastreplydate(
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), LASTREPLYDATE,
                value );
    }

    /**
     * Get all values of property Lastreplydate as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCLastreplydate_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, LASTREPLYDATE );
    }

    /**
     * Get all values of property Lastreplydate as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCLastreplydate_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, LASTREPLYDATE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Lastreplydate as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCLastreplydate_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(),
                LASTREPLYDATE );
    }

    /**
     * Get all values of property Lastreplydate as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCLastreplydate_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), LASTREPLYDATE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Lastreplydate * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllSIOCLastreplydate(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, LASTREPLYDATE,
                java.lang.String.class );
    }

    /**
     * Get all values of property Lastreplydate as a ReactorResult of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllSIOCLastreplydate_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, LASTREPLYDATE,
                java.lang.String.class );
    }

    /**
     * Get all values of property Lastreplydate * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllSIOCLastreplydate() {
        return Base.getAll( this.model, this.getResource(), LASTREPLYDATE,
                java.lang.String.class );
    }

    /**
     * Get all values of property Lastreplydate as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllSIOCLastreplydate_as() {
        return Base.getAll_as( this.model, this.getResource(), LASTREPLYDATE,
                java.lang.String.class );
    }

    /**
     * Adds a value to property Lastreplydate as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSIOCLastreplydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, LASTREPLYDATE, value );
    }

    /**
     * Adds a value to property Lastreplydate as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSIOCLastreplydate( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), LASTREPLYDATE, value );
    }

    /**
     * Adds a value to property Lastreplydate from an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSIOCLastreplydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.add( model, instanceResource, LASTREPLYDATE, value );
    }

    /**
     * Adds a value to property Lastreplydate from an instance of
     * java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSIOCLastreplydate( java.lang.String value ) {
        Base.add( this.model, this.getResource(), LASTREPLYDATE, value );
    }

    /**
     * Sets a value of property Lastreplydate from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSIOCLastreplydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, LASTREPLYDATE, value );
    }

    /**
     * Sets a value of property Lastreplydate from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSIOCLastreplydate( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), LASTREPLYDATE, value );
    }

    /**
     * Sets a value of property Lastreplydate from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSIOCLastreplydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.set( model, instanceResource, LASTREPLYDATE, value );
    }

    /**
     * Sets a value of property Lastreplydate from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSIOCLastreplydate( java.lang.String value ) {
        Base.set( this.model, this.getResource(), LASTREPLYDATE, value );
    }

    /**
     * Removes a value of property Lastreplydate as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSIOCLastreplydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, LASTREPLYDATE, value );
    }

    /**
     * Removes a value of property Lastreplydate as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeSIOCLastreplydate(
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), LASTREPLYDATE, value );
    }

    /**
     * Removes a value of property Lastreplydate given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSIOCLastreplydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.remove( model, instanceResource, LASTREPLYDATE, value );
    }

    /**
     * Removes a value of property Lastreplydate given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSIOCLastreplydate( java.lang.String value ) {
        Base.remove( this.model, this.getResource(), LASTREPLYDATE, value );
    }

    /**
     * Removes all values of property Lastreplydate * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSIOCLastreplydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, LASTREPLYDATE );
    }

    /**
     * Removes all values of property Lastreplydate * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllSIOCLastreplydate() {
        Base.removeAll( this.model, this.getResource(), LASTREPLYDATE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3764253e has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSIOCLinksto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, LINKSTO );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3764253e has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSIOCLinksto() {
        return Base.has( this.model, this.getResource(), LINKSTO );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3764253e has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSIOCLinksto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, LINKSTO, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3764253e has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasSIOCLinksto( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), LINKSTO, value );
    }

    /**
     * Get all values of property Linksto as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCLinksto_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, LINKSTO );
    }

    /**
     * Get all values of property Linksto as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCLinksto_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, LINKSTO,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Linksto as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCLinksto_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), LINKSTO );
    }

    /**
     * Get all values of property Linksto as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCLinksto_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), LINKSTO,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Linksto * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllSIOCLinksto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, LINKSTO, Thing.class );
    }

    /**
     * Get all values of property Linksto as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllSIOCLinksto_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, LINKSTO, Thing.class );
    }

    /**
     * Get all values of property Linksto * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllSIOCLinksto() {
        return Base.getAll( this.model, this.getResource(), LINKSTO,
                Thing.class );
    }

    /**
     * Get all values of property Linksto as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllSIOCLinksto_as() {
        return Base.getAll_as( this.model, this.getResource(), LINKSTO,
                Thing.class );
    }

    /**
     * Adds a value to property Linksto as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSIOCLinksto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, LINKSTO, value );
    }

    /**
     * Adds a value to property Linksto as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSIOCLinksto( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), LINKSTO, value );
    }

    /**
     * Adds a value to property Linksto from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSIOCLinksto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.add( model, instanceResource, LINKSTO, value );
    }

    /**
     * Adds a value to property Linksto from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSIOCLinksto( Thing value ) {
        Base.add( this.model, this.getResource(), LINKSTO, value );
    }

    /**
     * Sets a value of property Linksto from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSIOCLinksto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, LINKSTO, value );
    }

    /**
     * Sets a value of property Linksto from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSIOCLinksto( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), LINKSTO, value );
    }

    /**
     * Sets a value of property Linksto from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSIOCLinksto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.set( model, instanceResource, LINKSTO, value );
    }

    /**
     * Sets a value of property Linksto from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSIOCLinksto( Thing value ) {
        Base.set( this.model, this.getResource(), LINKSTO, value );
    }

    /**
     * Removes a value of property Linksto as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSIOCLinksto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, LINKSTO, value );
    }

    /**
     * Removes a value of property Linksto as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeSIOCLinksto( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), LINKSTO, value );
    }

    /**
     * Removes a value of property Linksto given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSIOCLinksto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.remove( model, instanceResource, LINKSTO, value );
    }

    /**
     * Removes a value of property Linksto given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSIOCLinksto( Thing value ) {
        Base.remove( this.model, this.getResource(), LINKSTO, value );
    }

    /**
     * Removes all values of property Linksto * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSIOCLinksto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, LINKSTO );
    }

    /**
     * Removes all values of property Linksto * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllSIOCLinksto() {
        Base.removeAll( this.model, this.getResource(), LINKSTO );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c53a57a has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSIOCName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, SIOC_NAME );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c53a57a has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSIOCName() {
        return Base.has( this.model, this.getResource(), SIOC_NAME );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c53a57a has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSIOCName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, SIOC_NAME, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c53a57a has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasSIOCName( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), SIOC_NAME, value );
    }

    /**
     * Get all values of property Name as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCName_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, SIOC_NAME );
    }

    /**
     * Get all values of property Name as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCName_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, SIOC_NAME,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Name as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCName_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), SIOC_NAME );
    }

    /**
     * Get all values of property Name as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCName_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), SIOC_NAME,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Name * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllSIOCName(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, SIOC_NAME,
                java.lang.String.class );
    }

    /**
     * Get all values of property Name as a ReactorResult of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllSIOCName_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, SIOC_NAME,
                java.lang.String.class );
    }

    /**
     * Get all values of property Name * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllSIOCName() {
        return Base.getAll( this.model, this.getResource(), SIOC_NAME,
                java.lang.String.class );
    }

    /**
     * Get all values of property Name as a ReactorResult of java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllSIOCName_as() {
        return Base.getAll_as( this.model, this.getResource(), SIOC_NAME,
                java.lang.String.class );
    }

    /**
     * Adds a value to property Name as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSIOCName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, SIOC_NAME, value );
    }

    /**
     * Adds a value to property Name as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSIOCName( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), SIOC_NAME, value );
    }

    /**
     * Adds a value to property Name from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSIOCName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.add( model, instanceResource, SIOC_NAME, value );
    }

    /**
     * Adds a value to property Name from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSIOCName( java.lang.String value ) {
        Base.add( this.model, this.getResource(), SIOC_NAME, value );
    }

    /**
     * Sets a value of property Name from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSIOCName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, SIOC_NAME, value );
    }

    /**
     * Sets a value of property Name from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSIOCName( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), SIOC_NAME, value );
    }

    /**
     * Sets a value of property Name from an instance of java.lang.String First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSIOCName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.set( model, instanceResource, SIOC_NAME, value );
    }

    /**
     * Sets a value of property Name from an instance of java.lang.String First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSIOCName( java.lang.String value ) {
        Base.set( this.model, this.getResource(), SIOC_NAME, value );
    }

    /**
     * Removes a value of property Name as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSIOCName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, SIOC_NAME, value );
    }

    /**
     * Removes a value of property Name as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeSIOCName( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), SIOC_NAME, value );
    }

    /**
     * Removes a value of property Name given as an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSIOCName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.remove( model, instanceResource, SIOC_NAME, value );
    }

    /**
     * Removes a value of property Name given as an instance of java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSIOCName( java.lang.String value ) {
        Base.remove( this.model, this.getResource(), SIOC_NAME, value );
    }

    /**
     * Removes all values of property Name * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSIOCName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, SIOC_NAME );
    }

    /**
     * Removes all values of property Name * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllSIOCName() {
        Base.removeAll( this.model, this.getResource(), SIOC_NAME );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4e9fd887 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSIOCNote( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, NOTE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4e9fd887 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSIOCNote() {
        return Base.has( this.model, this.getResource(), NOTE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4e9fd887 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSIOCNote( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, NOTE, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4e9fd887 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasSIOCNote( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), NOTE, value );
    }

    /**
     * Get all values of property Note as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCNote_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, NOTE );
    }

    /**
     * Get all values of property Note as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCNote_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, NOTE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Note as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCNote_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), NOTE );
    }

    /**
     * Get all values of property Note as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCNote_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), NOTE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Note * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllSIOCNote(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, NOTE,
                java.lang.String.class );
    }

    /**
     * Get all values of property Note as a ReactorResult of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllSIOCNote_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, NOTE,
                java.lang.String.class );
    }

    /**
     * Get all values of property Note * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllSIOCNote() {
        return Base.getAll( this.model, this.getResource(), NOTE,
                java.lang.String.class );
    }

    /**
     * Get all values of property Note as a ReactorResult of java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllSIOCNote_as() {
        return Base.getAll_as( this.model, this.getResource(), NOTE,
                java.lang.String.class );
    }

    /**
     * Adds a value to property Note as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSIOCNote( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, NOTE, value );
    }

    /**
     * Adds a value to property Note as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSIOCNote( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), NOTE, value );
    }

    /**
     * Adds a value to property Note from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSIOCNote( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.add( model, instanceResource, NOTE, value );
    }

    /**
     * Adds a value to property Note from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSIOCNote( java.lang.String value ) {
        Base.add( this.model, this.getResource(), NOTE, value );
    }

    /**
     * Sets a value of property Note from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSIOCNote( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, NOTE, value );
    }

    /**
     * Sets a value of property Note from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSIOCNote( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), NOTE, value );
    }

    /**
     * Sets a value of property Note from an instance of java.lang.String First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSIOCNote( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.set( model, instanceResource, NOTE, value );
    }

    /**
     * Sets a value of property Note from an instance of java.lang.String First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSIOCNote( java.lang.String value ) {
        Base.set( this.model, this.getResource(), NOTE, value );
    }

    /**
     * Removes a value of property Note as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSIOCNote( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, NOTE, value );
    }

    /**
     * Removes a value of property Note as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeSIOCNote( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), NOTE, value );
    }

    /**
     * Removes a value of property Note given as an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSIOCNote( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.remove( model, instanceResource, NOTE, value );
    }

    /**
     * Removes a value of property Note given as an instance of java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSIOCNote( java.lang.String value ) {
        Base.remove( this.model, this.getResource(), NOTE, value );
    }

    /**
     * Removes all values of property Note * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSIOCNote( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, NOTE );
    }

    /**
     * Removes all values of property Note * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllSIOCNote() {
        Base.removeAll( this.model, this.getResource(), NOTE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14be60b has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSIOCNumauthors( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, NUMAUTHORS );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14be60b has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSIOCNumauthors() {
        return Base.has( this.model, this.getResource(), NUMAUTHORS );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14be60b has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSIOCNumauthors( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, NUMAUTHORS, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14be60b has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasSIOCNumauthors( org.ontoware.rdf2go.model.node.Node value ) {
        return Base
                .hasValue( this.model, this.getResource(), NUMAUTHORS, value );
    }

    /**
     * Get all values of property Numauthors as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCNumauthors_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, NUMAUTHORS );
    }

    /**
     * Get all values of property Numauthors as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCNumauthors_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, NUMAUTHORS,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Numauthors as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCNumauthors_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), NUMAUTHORS );
    }

    /**
     * Get all values of property Numauthors as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCNumauthors_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), NUMAUTHORS,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Numauthors * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.Integer> getAllSIOCNumauthors(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, NUMAUTHORS,
                java.lang.Integer.class );
    }

    /**
     * Get all values of property Numauthors as a ReactorResult of
     * java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.Integer> getAllSIOCNumauthors_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, NUMAUTHORS,
                java.lang.Integer.class );
    }

    /**
     * Get all values of property Numauthors * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.Integer> getAllSIOCNumauthors() {
        return Base.getAll( this.model, this.getResource(), NUMAUTHORS,
                java.lang.Integer.class );
    }

    /**
     * Get all values of property Numauthors as a ReactorResult of
     * java.lang.Integer
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.Integer> getAllSIOCNumauthors_as() {
        return Base.getAll_as( this.model, this.getResource(), NUMAUTHORS,
                java.lang.Integer.class );
    }

    /**
     * Adds a value to property Numauthors as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSIOCNumauthors( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, NUMAUTHORS, value );
    }

    /**
     * Adds a value to property Numauthors as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSIOCNumauthors( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), NUMAUTHORS, value );
    }

    /**
     * Adds a value to property Numauthors from an instance of java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSIOCNumauthors( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.Integer value ) {
        Base.add( model, instanceResource, NUMAUTHORS, value );
    }

    /**
     * Adds a value to property Numauthors from an instance of java.lang.Integer
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSIOCNumauthors( java.lang.Integer value ) {
        Base.add( this.model, this.getResource(), NUMAUTHORS, value );
    }

    /**
     * Sets a value of property Numauthors from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSIOCNumauthors( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, NUMAUTHORS, value );
    }

    /**
     * Sets a value of property Numauthors from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSIOCNumauthors( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), NUMAUTHORS, value );
    }

    /**
     * Sets a value of property Numauthors from an instance of java.lang.Integer
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSIOCNumauthors( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.Integer value ) {
        Base.set( model, instanceResource, NUMAUTHORS, value );
    }

    /**
     * Sets a value of property Numauthors from an instance of java.lang.Integer
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSIOCNumauthors( java.lang.Integer value ) {
        Base.set( this.model, this.getResource(), NUMAUTHORS, value );
    }

    /**
     * Removes a value of property Numauthors as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSIOCNumauthors( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, NUMAUTHORS, value );
    }

    /**
     * Removes a value of property Numauthors as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeSIOCNumauthors( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), NUMAUTHORS, value );
    }

    /**
     * Removes a value of property Numauthors given as an instance of
     * java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSIOCNumauthors( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.Integer value ) {
        Base.remove( model, instanceResource, NUMAUTHORS, value );
    }

    /**
     * Removes a value of property Numauthors given as an instance of
     * java.lang.Integer
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSIOCNumauthors( java.lang.Integer value ) {
        Base.remove( this.model, this.getResource(), NUMAUTHORS, value );
    }

    /**
     * Removes all values of property Numauthors * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSIOCNumauthors( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, NUMAUTHORS );
    }

    /**
     * Removes all values of property Numauthors * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllSIOCNumauthors() {
        Base.removeAll( this.model, this.getResource(), NUMAUTHORS );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@452d9a56 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSIOCNumreplies( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, NUMREPLIES );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@452d9a56 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSIOCNumreplies() {
        return Base.has( this.model, this.getResource(), NUMREPLIES );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@452d9a56 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSIOCNumreplies( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, NUMREPLIES, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@452d9a56 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasSIOCNumreplies( org.ontoware.rdf2go.model.node.Node value ) {
        return Base
                .hasValue( this.model, this.getResource(), NUMREPLIES, value );
    }

    /**
     * Get all values of property Numreplies as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCNumreplies_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, NUMREPLIES );
    }

    /**
     * Get all values of property Numreplies as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCNumreplies_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, NUMREPLIES,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Numreplies as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCNumreplies_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), NUMREPLIES );
    }

    /**
     * Get all values of property Numreplies as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCNumreplies_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), NUMREPLIES,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Numreplies * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.Integer> getAllSIOCNumreplies(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, NUMREPLIES,
                java.lang.Integer.class );
    }

    /**
     * Get all values of property Numreplies as a ReactorResult of
     * java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.Integer> getAllSIOCNumreplies_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, NUMREPLIES,
                java.lang.Integer.class );
    }

    /**
     * Get all values of property Numreplies * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.Integer> getAllSIOCNumreplies() {
        return Base.getAll( this.model, this.getResource(), NUMREPLIES,
                java.lang.Integer.class );
    }

    /**
     * Get all values of property Numreplies as a ReactorResult of
     * java.lang.Integer
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.Integer> getAllSIOCNumreplies_as() {
        return Base.getAll_as( this.model, this.getResource(), NUMREPLIES,
                java.lang.Integer.class );
    }

    /**
     * Adds a value to property Numreplies as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSIOCNumreplies( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, NUMREPLIES, value );
    }

    /**
     * Adds a value to property Numreplies as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSIOCNumreplies( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), NUMREPLIES, value );
    }

    /**
     * Adds a value to property Numreplies from an instance of java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSIOCNumreplies( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.Integer value ) {
        Base.add( model, instanceResource, NUMREPLIES, value );
    }

    /**
     * Adds a value to property Numreplies from an instance of java.lang.Integer
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSIOCNumreplies( java.lang.Integer value ) {
        Base.add( this.model, this.getResource(), NUMREPLIES, value );
    }

    /**
     * Sets a value of property Numreplies from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSIOCNumreplies( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, NUMREPLIES, value );
    }

    /**
     * Sets a value of property Numreplies from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSIOCNumreplies( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), NUMREPLIES, value );
    }

    /**
     * Sets a value of property Numreplies from an instance of java.lang.Integer
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSIOCNumreplies( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.Integer value ) {
        Base.set( model, instanceResource, NUMREPLIES, value );
    }

    /**
     * Sets a value of property Numreplies from an instance of java.lang.Integer
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSIOCNumreplies( java.lang.Integer value ) {
        Base.set( this.model, this.getResource(), NUMREPLIES, value );
    }

    /**
     * Removes a value of property Numreplies as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSIOCNumreplies( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, NUMREPLIES, value );
    }

    /**
     * Removes a value of property Numreplies as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeSIOCNumreplies( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), NUMREPLIES, value );
    }

    /**
     * Removes a value of property Numreplies given as an instance of
     * java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSIOCNumreplies( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.Integer value ) {
        Base.remove( model, instanceResource, NUMREPLIES, value );
    }

    /**
     * Removes a value of property Numreplies given as an instance of
     * java.lang.Integer
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSIOCNumreplies( java.lang.Integer value ) {
        Base.remove( this.model, this.getResource(), NUMREPLIES, value );
    }

    /**
     * Removes all values of property Numreplies * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSIOCNumreplies( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, NUMREPLIES );
    }

    /**
     * Removes all values of property Numreplies * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllSIOCNumreplies() {
        Base.removeAll( this.model, this.getResource(), NUMREPLIES );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61d7f705 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSIOCNumviews( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, NUMVIEWS );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61d7f705 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSIOCNumviews() {
        return Base.has( this.model, this.getResource(), NUMVIEWS );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61d7f705 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSIOCNumviews( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, NUMVIEWS, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61d7f705 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasSIOCNumviews( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), NUMVIEWS, value );
    }

    /**
     * Get all values of property Numviews as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCNumviews_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, NUMVIEWS );
    }

    /**
     * Get all values of property Numviews as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCNumviews_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, NUMVIEWS,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Numviews as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCNumviews_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), NUMVIEWS );
    }

    /**
     * Get all values of property Numviews as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCNumviews_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), NUMVIEWS,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Numviews * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.Integer> getAllSIOCNumviews(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, NUMVIEWS,
                java.lang.Integer.class );
    }

    /**
     * Get all values of property Numviews as a ReactorResult of
     * java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.Integer> getAllSIOCNumviews_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, NUMVIEWS,
                java.lang.Integer.class );
    }

    /**
     * Get all values of property Numviews * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.Integer> getAllSIOCNumviews() {
        return Base.getAll( this.model, this.getResource(), NUMVIEWS,
                java.lang.Integer.class );
    }

    /**
     * Get all values of property Numviews as a ReactorResult of
     * java.lang.Integer
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.Integer> getAllSIOCNumviews_as() {
        return Base.getAll_as( this.model, this.getResource(), NUMVIEWS,
                java.lang.Integer.class );
    }

    /**
     * Adds a value to property Numviews as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSIOCNumviews( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, NUMVIEWS, value );
    }

    /**
     * Adds a value to property Numviews as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSIOCNumviews( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), NUMVIEWS, value );
    }

    /**
     * Adds a value to property Numviews from an instance of java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSIOCNumviews( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.Integer value ) {
        Base.add( model, instanceResource, NUMVIEWS, value );
    }

    /**
     * Adds a value to property Numviews from an instance of java.lang.Integer
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSIOCNumviews( java.lang.Integer value ) {
        Base.add( this.model, this.getResource(), NUMVIEWS, value );
    }

    /**
     * Sets a value of property Numviews from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSIOCNumviews( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, NUMVIEWS, value );
    }

    /**
     * Sets a value of property Numviews from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSIOCNumviews( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), NUMVIEWS, value );
    }

    /**
     * Sets a value of property Numviews from an instance of java.lang.Integer
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSIOCNumviews( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.Integer value ) {
        Base.set( model, instanceResource, NUMVIEWS, value );
    }

    /**
     * Sets a value of property Numviews from an instance of java.lang.Integer
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSIOCNumviews( java.lang.Integer value ) {
        Base.set( this.model, this.getResource(), NUMVIEWS, value );
    }

    /**
     * Removes a value of property Numviews as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSIOCNumviews( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, NUMVIEWS, value );
    }

    /**
     * Removes a value of property Numviews as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeSIOCNumviews( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), NUMVIEWS, value );
    }

    /**
     * Removes a value of property Numviews given as an instance of
     * java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSIOCNumviews( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.Integer value ) {
        Base.remove( model, instanceResource, NUMVIEWS, value );
    }

    /**
     * Removes a value of property Numviews given as an instance of
     * java.lang.Integer
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSIOCNumviews( java.lang.Integer value ) {
        Base.remove( this.model, this.getResource(), NUMVIEWS, value );
    }

    /**
     * Removes all values of property Numviews * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSIOCNumviews( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, NUMVIEWS );
    }

    /**
     * Removes all values of property Numviews * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllSIOCNumviews() {
        Base.removeAll( this.model, this.getResource(), NUMVIEWS );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@759bade4 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSIOCOwner( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, OWNER );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@759bade4 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSIOCOwner() {
        return Base.has( this.model, this.getResource(), OWNER );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@759bade4 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSIOCOwner( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, OWNER, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@759bade4 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasSIOCOwner( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), OWNER, value );
    }

    /**
     * Get all values of property Owner as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCOwner_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, OWNER );
    }

    /**
     * Get all values of property Owner as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCOwner_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, OWNER,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Owner as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCOwner_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), OWNER );
    }

    /**
     * Get all values of property Owner as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCOwner_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), OWNER,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Owner * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<UserAccount> getAllSIOCOwner( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, OWNER, UserAccount.class );
    }

    /**
     * Get all values of property Owner as a ReactorResult of UserAccount
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<UserAccount> getAllSIOCOwner_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, OWNER,
                UserAccount.class );
    }

    /**
     * Get all values of property Owner * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<UserAccount> getAllSIOCOwner() {
        return Base.getAll( this.model, this.getResource(), OWNER,
                UserAccount.class );
    }

    /**
     * Get all values of property Owner as a ReactorResult of UserAccount
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<UserAccount> getAllSIOCOwner_as() {
        return Base.getAll_as( this.model, this.getResource(), OWNER,
                UserAccount.class );
    }

    /**
     * Adds a value to property Owner as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSIOCOwner( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, OWNER, value );
    }

    /**
     * Adds a value to property Owner as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSIOCOwner( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), OWNER, value );
    }

    /**
     * Adds a value to property Owner from an instance of UserAccount
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSIOCOwner( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            UserAccount value ) {
        Base.add( model, instanceResource, OWNER, value );
    }

    /**
     * Adds a value to property Owner from an instance of UserAccount
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSIOCOwner( UserAccount value ) {
        Base.add( this.model, this.getResource(), OWNER, value );
    }

    /**
     * Sets a value of property Owner from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSIOCOwner( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, OWNER, value );
    }

    /**
     * Sets a value of property Owner from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSIOCOwner( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), OWNER, value );
    }

    /**
     * Sets a value of property Owner from an instance of UserAccount First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSIOCOwner( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            UserAccount value ) {
        Base.set( model, instanceResource, OWNER, value );
    }

    /**
     * Sets a value of property Owner from an instance of UserAccount First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSIOCOwner( UserAccount value ) {
        Base.set( this.model, this.getResource(), OWNER, value );
    }

    /**
     * Removes a value of property Owner as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSIOCOwner( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, OWNER, value );
    }

    /**
     * Removes a value of property Owner as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeSIOCOwner( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), OWNER, value );
    }

    /**
     * Removes a value of property Owner given as an instance of UserAccount
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSIOCOwner( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            UserAccount value ) {
        Base.remove( model, instanceResource, OWNER, value );
    }

    /**
     * Removes a value of property Owner given as an instance of UserAccount
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSIOCOwner( UserAccount value ) {
        Base.remove( this.model, this.getResource(), OWNER, value );
    }

    /**
     * Removes all values of property Owner * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSIOCOwner( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, OWNER );
    }

    /**
     * Removes all values of property Owner * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllSIOCOwner() {
        Base.removeAll( this.model, this.getResource(), OWNER );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b01812b has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasDCTermsReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, REFERENCES );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b01812b has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasDCTermsReferences() {
        return Base.has( this.model, this.getResource(), REFERENCES );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b01812b has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasDCTermsReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, REFERENCES, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b01812b has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasDCTermsReferences(
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base
                .hasValue( this.model, this.getResource(), REFERENCES, value );
    }

    /**
     * Get all values of property References as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDCTermsReferences_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, REFERENCES );
    }

    /**
     * Get all values of property References as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDCTermsReferences_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, REFERENCES,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property References as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDCTermsReferences_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), REFERENCES );
    }

    /**
     * Get all values of property References as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDCTermsReferences_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), REFERENCES,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property References * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllDCTermsReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, REFERENCES, Thing.class );
    }

    /**
     * Get all values of property References as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllDCTermsReferences_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base
                .getAll_as( model, instanceResource, REFERENCES, Thing.class );
    }

    /**
     * Get all values of property References * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllDCTermsReferences() {
        return Base.getAll( this.model, this.getResource(), REFERENCES,
                Thing.class );
    }

    /**
     * Get all values of property References as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllDCTermsReferences_as() {
        return Base.getAll_as( this.model, this.getResource(), REFERENCES,
                Thing.class );
    }

    /**
     * Adds a value to property References as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addDCTermsReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, REFERENCES, value );
    }

    /**
     * Adds a value to property References as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addDCTermsReferences( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), REFERENCES, value );
    }

    /**
     * Adds a value to property References from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addDCTermsReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.add( model, instanceResource, REFERENCES, value );
    }

    /**
     * Adds a value to property References from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addDCTermsReferences( Thing value ) {
        Base.add( this.model, this.getResource(), REFERENCES, value );
    }

    /**
     * Sets a value of property References from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setDCTermsReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, REFERENCES, value );
    }

    /**
     * Sets a value of property References from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setDCTermsReferences( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), REFERENCES, value );
    }

    /**
     * Sets a value of property References from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setDCTermsReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.set( model, instanceResource, REFERENCES, value );
    }

    /**
     * Sets a value of property References from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setDCTermsReferences( Thing value ) {
        Base.set( this.model, this.getResource(), REFERENCES, value );
    }

    /**
     * Removes a value of property References as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeDCTermsReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, REFERENCES, value );
    }

    /**
     * Removes a value of property References as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeDCTermsReferences(
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), REFERENCES, value );
    }

    /**
     * Removes a value of property References given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeDCTermsReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.remove( model, instanceResource, REFERENCES, value );
    }

    /**
     * Removes a value of property References given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeDCTermsReferences( Thing value ) {
        Base.remove( this.model, this.getResource(), REFERENCES, value );
    }

    /**
     * Removes all values of property References * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllDCTermsReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, REFERENCES );
    }

    /**
     * Removes all values of property References * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllDCTermsReferences() {
        Base.removeAll( this.model, this.getResource(), REFERENCES );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@194e65cf has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSIOCRelatedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, RELATEDTO );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@194e65cf has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSIOCRelatedto() {
        return Base.has( this.model, this.getResource(), RELATEDTO );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@194e65cf has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSIOCRelatedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, RELATEDTO, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@194e65cf has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasSIOCRelatedto( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), RELATEDTO, value );
    }

    /**
     * Get all values of property Relatedto as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCRelatedto_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, RELATEDTO );
    }

    /**
     * Get all values of property Relatedto as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCRelatedto_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, RELATEDTO,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Relatedto as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCRelatedto_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), RELATEDTO );
    }

    /**
     * Get all values of property Relatedto as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCRelatedto_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), RELATEDTO,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Relatedto * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllSIOCRelatedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, RELATEDTO, Thing.class );
    }

    /**
     * Get all values of property Relatedto as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllSIOCRelatedto_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, RELATEDTO, Thing.class );
    }

    /**
     * Get all values of property Relatedto * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllSIOCRelatedto() {
        return Base.getAll( this.model, this.getResource(), RELATEDTO,
                Thing.class );
    }

    /**
     * Get all values of property Relatedto as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllSIOCRelatedto_as() {
        return Base.getAll_as( this.model, this.getResource(), RELATEDTO,
                Thing.class );
    }

    /**
     * Adds a value to property Relatedto as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSIOCRelatedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, RELATEDTO, value );
    }

    /**
     * Adds a value to property Relatedto as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSIOCRelatedto( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), RELATEDTO, value );
    }

    /**
     * Adds a value to property Relatedto from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSIOCRelatedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.add( model, instanceResource, RELATEDTO, value );
    }

    /**
     * Adds a value to property Relatedto from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSIOCRelatedto( Thing value ) {
        Base.add( this.model, this.getResource(), RELATEDTO, value );
    }

    /**
     * Sets a value of property Relatedto from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSIOCRelatedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, RELATEDTO, value );
    }

    /**
     * Sets a value of property Relatedto from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSIOCRelatedto( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), RELATEDTO, value );
    }

    /**
     * Sets a value of property Relatedto from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSIOCRelatedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.set( model, instanceResource, RELATEDTO, value );
    }

    /**
     * Sets a value of property Relatedto from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSIOCRelatedto( Thing value ) {
        Base.set( this.model, this.getResource(), RELATEDTO, value );
    }

    /**
     * Removes a value of property Relatedto as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSIOCRelatedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, RELATEDTO, value );
    }

    /**
     * Removes a value of property Relatedto as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeSIOCRelatedto( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), RELATEDTO, value );
    }

    /**
     * Removes a value of property Relatedto given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSIOCRelatedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.remove( model, instanceResource, RELATEDTO, value );
    }

    /**
     * Removes a value of property Relatedto given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSIOCRelatedto( Thing value ) {
        Base.remove( this.model, this.getResource(), RELATEDTO, value );
    }

    /**
     * Removes all values of property Relatedto * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSIOCRelatedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, RELATEDTO );
    }

    /**
     * Removes all values of property Relatedto * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllSIOCRelatedto() {
        Base.removeAll( this.model, this.getResource(), RELATEDTO );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c7f8123 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSIOCScopeof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, SCOPEOF );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c7f8123 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSIOCScopeof() {
        return Base.has( this.model, this.getResource(), SCOPEOF );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c7f8123 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSIOCScopeof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, SCOPEOF, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c7f8123 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasSIOCScopeof( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), SCOPEOF, value );
    }

    /**
     * Get all values of property Scopeof as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCScopeof_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, SCOPEOF );
    }

    /**
     * Get all values of property Scopeof as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCScopeof_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, SCOPEOF,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Scopeof as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCScopeof_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), SCOPEOF );
    }

    /**
     * Get all values of property Scopeof as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCScopeof_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), SCOPEOF,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Scopeof * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Role> getAllSIOCScopeof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, SCOPEOF, Role.class );
    }

    /**
     * Get all values of property Scopeof as a ReactorResult of Role
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Role> getAllSIOCScopeof_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, SCOPEOF, Role.class );
    }

    /**
     * Get all values of property Scopeof * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Role> getAllSIOCScopeof() {
        return Base
                .getAll( this.model, this.getResource(), SCOPEOF, Role.class );
    }

    /**
     * Get all values of property Scopeof as a ReactorResult of Role
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Role> getAllSIOCScopeof_as() {
        return Base.getAll_as( this.model, this.getResource(), SCOPEOF,
                Role.class );
    }

    /**
     * Adds a value to property Scopeof as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSIOCScopeof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, SCOPEOF, value );
    }

    /**
     * Adds a value to property Scopeof as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSIOCScopeof( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), SCOPEOF, value );
    }

    /**
     * Adds a value to property Scopeof from an instance of Role
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSIOCScopeof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource, Role value ) {
        Base.add( model, instanceResource, SCOPEOF, value );
    }

    /**
     * Adds a value to property Scopeof from an instance of Role
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSIOCScopeof( Role value ) {
        Base.add( this.model, this.getResource(), SCOPEOF, value );
    }

    /**
     * Sets a value of property Scopeof from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSIOCScopeof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, SCOPEOF, value );
    }

    /**
     * Sets a value of property Scopeof from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSIOCScopeof( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), SCOPEOF, value );
    }

    /**
     * Sets a value of property Scopeof from an instance of Role First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSIOCScopeof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource, Role value ) {
        Base.set( model, instanceResource, SCOPEOF, value );
    }

    /**
     * Sets a value of property Scopeof from an instance of Role First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSIOCScopeof( Role value ) {
        Base.set( this.model, this.getResource(), SCOPEOF, value );
    }

    /**
     * Removes a value of property Scopeof as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSIOCScopeof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, SCOPEOF, value );
    }

    /**
     * Removes a value of property Scopeof as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeSIOCScopeof( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), SCOPEOF, value );
    }

    /**
     * Removes a value of property Scopeof given as an instance of Role
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSIOCScopeof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource, Role value ) {
        Base.remove( model, instanceResource, SCOPEOF, value );
    }

    /**
     * Removes a value of property Scopeof given as an instance of Role
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSIOCScopeof( Role value ) {
        Base.remove( this.model, this.getResource(), SCOPEOF, value );
    }

    /**
     * Removes all values of property Scopeof * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSIOCScopeof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, SCOPEOF );
    }

    /**
     * Removes all values of property Scopeof * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllSIOCScopeof() {
        Base.removeAll( this.model, this.getResource(), SCOPEOF );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e71f06c has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSIOCSpace( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, SPACE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e71f06c has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSIOCSpace() {
        return Base.has( this.model, this.getResource(), SPACE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e71f06c has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSIOCSpace( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, SPACE, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e71f06c has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasSIOCSpace( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), SPACE, value );
    }

    /**
     * Get all values of property Space as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCSpace_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, SPACE );
    }

    /**
     * Get all values of property Space as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCSpace_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, SPACE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Space as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCSpace_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), SPACE );
    }

    /**
     * Get all values of property Space as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCSpace_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), SPACE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Space * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Space> getAllSIOCSpace( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, SPACE, Space.class );
    }

    /**
     * Get all values of property Space as a ReactorResult of Space
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Space> getAllSIOCSpace_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, SPACE, Space.class );
    }

    /**
     * Get all values of property Space * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Space> getAllSIOCSpace() {
        return Base.getAll( this.model, this.getResource(), SPACE, Space.class );
    }

    /**
     * Get all values of property Space as a ReactorResult of Space
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Space> getAllSIOCSpace_as() {
        return Base.getAll_as( this.model, this.getResource(), SPACE,
                Space.class );
    }

    /**
     * Adds a value to property Space as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSIOCSpace( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, SPACE, value );
    }

    /**
     * Adds a value to property Space as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSIOCSpace( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), SPACE, value );
    }

    /**
     * Adds a value to property Space from an instance of Space
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSIOCSpace( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Space value ) {
        Base.add( model, instanceResource, SPACE, value );
    }

    /**
     * Adds a value to property Space from an instance of Space
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSIOCSpace( Space value ) {
        Base.add( this.model, this.getResource(), SPACE, value );
    }

    /**
     * Sets a value of property Space from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSIOCSpace( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, SPACE, value );
    }

    /**
     * Sets a value of property Space from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSIOCSpace( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), SPACE, value );
    }

    /**
     * Sets a value of property Space from an instance of Space First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSIOCSpace( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Space value ) {
        Base.set( model, instanceResource, SPACE, value );
    }

    /**
     * Sets a value of property Space from an instance of Space First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSIOCSpace( Space value ) {
        Base.set( this.model, this.getResource(), SPACE, value );
    }

    /**
     * Removes a value of property Space as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSIOCSpace( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, SPACE, value );
    }

    /**
     * Removes a value of property Space as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeSIOCSpace( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), SPACE, value );
    }

    /**
     * Removes a value of property Space given as an instance of Space
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSIOCSpace( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Space value ) {
        Base.remove( model, instanceResource, SPACE, value );
    }

    /**
     * Removes a value of property Space given as an instance of Space
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSIOCSpace( Space value ) {
        Base.remove( this.model, this.getResource(), SPACE, value );
    }

    /**
     * Removes all values of property Space * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSIOCSpace( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, SPACE );
    }

    /**
     * Removes all values of property Space * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllSIOCSpace() {
        Base.removeAll( this.model, this.getResource(), SPACE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3efc68a7 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasDCTermsSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, SUBJECT );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3efc68a7 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasDCTermsSubject() {
        return Base.has( this.model, this.getResource(), SUBJECT );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3efc68a7 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasDCTermsSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, SUBJECT, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3efc68a7 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasDCTermsSubject( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), SUBJECT, value );
    }

    /**
     * Get all values of property Subject as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDCTermsSubject_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, SUBJECT );
    }

    /**
     * Get all values of property Subject as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDCTermsSubject_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, SUBJECT,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Subject as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDCTermsSubject_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), SUBJECT );
    }

    /**
     * Get all values of property Subject as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDCTermsSubject_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), SUBJECT,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Subject * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllDCTermsSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, SUBJECT, Thing.class );
    }

    /**
     * Get all values of property Subject as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllDCTermsSubject_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, SUBJECT, Thing.class );
    }

    /**
     * Get all values of property Subject * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllDCTermsSubject() {
        return Base.getAll( this.model, this.getResource(), SUBJECT,
                Thing.class );
    }

    /**
     * Get all values of property Subject as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllDCTermsSubject_as() {
        return Base.getAll_as( this.model, this.getResource(), SUBJECT,
                Thing.class );
    }

    /**
     * Adds a value to property Subject as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addDCTermsSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, SUBJECT, value );
    }

    /**
     * Adds a value to property Subject as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addDCTermsSubject( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), SUBJECT, value );
    }

    /**
     * Adds a value to property Subject from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addDCTermsSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.add( model, instanceResource, SUBJECT, value );
    }

    /**
     * Adds a value to property Subject from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addDCTermsSubject( Thing value ) {
        Base.add( this.model, this.getResource(), SUBJECT, value );
    }

    /**
     * Sets a value of property Subject from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setDCTermsSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, SUBJECT, value );
    }

    /**
     * Sets a value of property Subject from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setDCTermsSubject( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), SUBJECT, value );
    }

    /**
     * Sets a value of property Subject from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setDCTermsSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.set( model, instanceResource, SUBJECT, value );
    }

    /**
     * Sets a value of property Subject from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setDCTermsSubject( Thing value ) {
        Base.set( this.model, this.getResource(), SUBJECT, value );
    }

    /**
     * Removes a value of property Subject as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeDCTermsSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, SUBJECT, value );
    }

    /**
     * Removes a value of property Subject as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeDCTermsSubject( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), SUBJECT, value );
    }

    /**
     * Removes a value of property Subject given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeDCTermsSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.remove( model, instanceResource, SUBJECT, value );
    }

    /**
     * Removes a value of property Subject given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeDCTermsSubject( Thing value ) {
        Base.remove( this.model, this.getResource(), SUBJECT, value );
    }

    /**
     * Removes all values of property Subject * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllDCTermsSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, SUBJECT );
    }

    /**
     * Removes all values of property Subject * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllDCTermsSubject() {
        Base.removeAll( this.model, this.getResource(), SUBJECT );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bbe2ed3 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasDCTermsTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, TITLE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bbe2ed3 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasDCTermsTitle() {
        return Base.has( this.model, this.getResource(), TITLE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bbe2ed3 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasDCTermsTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, TITLE, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bbe2ed3 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasDCTermsTitle( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), TITLE, value );
    }

    /**
     * Get all values of property Title as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDCTermsTitle_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, TITLE );
    }

    /**
     * Get all values of property Title as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDCTermsTitle_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, TITLE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Title as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDCTermsTitle_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), TITLE );
    }

    /**
     * Get all values of property Title as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDCTermsTitle_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), TITLE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Title * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllDCTermsTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, TITLE, Thing.class );
    }

    /**
     * Get all values of property Title as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllDCTermsTitle_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, TITLE, Thing.class );
    }

    /**
     * Get all values of property Title * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllDCTermsTitle() {
        return Base.getAll( this.model, this.getResource(), TITLE,
                Thing.class );
    }

    /**
     * Get all values of property Title as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllDCTermsTitle_as() {
        return Base.getAll_as( this.model, this.getResource(), TITLE,
                Thing.class );
    }

    /**
     * Adds a value to property Title as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addDCTermsTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, TITLE, value );
    }

    /**
     * Adds a value to property Title as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addDCTermsTitle( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), TITLE, value );
    }

    /**
     * Adds a value to property Title from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addDCTermsTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.add( model, instanceResource, TITLE, value );
    }

    /**
     * Adds a value to property Title from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addDCTermsTitle( Thing value ) {
        Base.add( this.model, this.getResource(), TITLE, value );
    }

    /**
     * Sets a value of property Title from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setDCTermsTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, TITLE, value );
    }

    /**
     * Sets a value of property Title from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setDCTermsTitle( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), TITLE, value );
    }

    /**
     * Sets a value of property Title from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setDCTermsTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.set( model, instanceResource, TITLE, value );
    }

    /**
     * Sets a value of property Title from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setDCTermsTitle( Thing value ) {
        Base.set( this.model, this.getResource(), TITLE, value );
    }

    /**
     * Removes a value of property Title as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeDCTermsTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, TITLE, value );
    }

    /**
     * Removes a value of property Title as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeDCTermsTitle( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), TITLE, value );
    }

    /**
     * Removes a value of property Title given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeDCTermsTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.remove( model, instanceResource, TITLE, value );
    }

    /**
     * Removes a value of property Title given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeDCTermsTitle( Thing value ) {
        Base.remove( this.model, this.getResource(), TITLE, value );
    }

    /**
     * Removes all values of property Title * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllDCTermsTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, TITLE );
    }

    /**
     * Removes all values of property Title * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllDCTermsTitle() {
        Base.removeAll( this.model, this.getResource(), TITLE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@334d545c has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSIOCTopic( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, TITLE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@334d545c has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSIOCTopic() {
        return Base.has( this.model, this.getResource(), TOPIC );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@334d545c has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSIOCTopic( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, TOPIC, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@334d545c has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasSIOCTopic( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), TOPIC, value );
    }

    /**
     * Get all values of property Topic as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCTopic_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, TOPIC );
    }

    /**
     * Get all values of property Topic as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCTopic_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, TOPIC,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Topic as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCTopic_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), TOPIC );
    }

    /**
     * Get all values of property Topic as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCTopic_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), TOPIC,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Topic * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllSIOCTopic( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, TOPIC, Thing.class );
    }

    /**
     * Get all values of property Topic as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllSIOCTopic_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, TOPIC, Thing.class );
    }

    /**
     * Get all values of property Topic * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllSIOCTopic() {
        return Base.getAll( this.model, this.getResource(), TOPIC, Thing.class );
    }

    /**
     * Get all values of property Topic as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllSIOCTopic_as() {
        return Base.getAll_as( this.model, this.getResource(), TOPIC,
                Thing.class );
    }

    /**
     * Adds a value to property Topic as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSIOCTopic( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, TOPIC, value );
    }

    /**
     * Adds a value to property Topic as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSIOCTopic( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), TOPIC, value );
    }

    /**
     * Adds a value to property Topic from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSIOCTopic( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.add( model, instanceResource, TOPIC, value );
    }

    /**
     * Adds a value to property Topic from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSIOCTopic( Thing value ) {
        Base.add( this.model, this.getResource(), TOPIC, value );
    }

    /**
     * Sets a value of property Topic from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSIOCTopic( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, TOPIC, value );
    }

    /**
     * Sets a value of property Topic from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSIOCTopic( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), TOPIC, value );
    }

    /**
     * Sets a value of property Topic from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSIOCTopic( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.set( model, instanceResource, TOPIC, value );
    }

    /**
     * Sets a value of property Topic from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSIOCTopic( Thing value ) {
        Base.set( this.model, this.getResource(), TOPIC, value );
    }

    /**
     * Removes a value of property Topic as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSIOCTopic( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, TOPIC, value );
    }

    /**
     * Removes a value of property Topic as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeSIOCTopic( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), TOPIC, value );
    }

    /**
     * Removes a value of property Topic given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSIOCTopic( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.remove( model, instanceResource, TOPIC, value );
    }

    /**
     * Removes a value of property Topic given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSIOCTopic( Thing value ) {
        Base.remove( this.model, this.getResource(), TOPIC, value );
    }

    /**
     * Removes all values of property Topic * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSIOCTopic( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, TOPIC );
    }

    /**
     * Removes all values of property Topic * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllSIOCTopic() {
        Base.removeAll( this.model, this.getResource(), TOPIC );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Givenname' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFGivenname_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Thing.GIVENNAME, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Givenname' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFGivenname_Inverse() {
        return Base.getAll_Inverse( this.model, Thing.GIVENNAME,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Givenname' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllFOAFGivenname_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Thing.GIVENNAME, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'MembershipClass'
     *         to this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFMembershipClass_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Thing.MEMBERSHIPCLASS, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'MembershipClass'
     *         to this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFMembershipClass_Inverse() {
        return Base.getAll_Inverse( this.model, Thing.MEMBERSHIPCLASS,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation
     *         'MembershipClass' to this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllFOAFMembershipClass_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Thing.MEMBERSHIPCLASS,
                objectValue, org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Nickname' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFNickname_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Thing.NICKNAME, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Nickname' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFNickname_Inverse() {
        return Base.getAll_Inverse( this.model, Thing.NICKNAME,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Nickname' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllFOAFNickname_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Thing.NICKNAME, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Phone' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFPhone_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Thing.PHONE, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Phone' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFPhone_Inverse() {
        return Base
                .getAll_Inverse( this.model, Thing.PHONE, this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Phone' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllFOAFPhone_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Thing.PHONE, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Sha1sum_hex_' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFSha1sum_hex__Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Document.SHA1SUM_HEX_, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Sha1sum_hex_' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFOAFSha1sum_hex__Inverse() {
        return Base.getAll_Inverse( this.model, Document.SHA1SUM_HEX_,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Sha1sum_hex_'
     *         to this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllFOAFSha1sum_hex__Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Document.SHA1SUM_HEX_,
                objectValue, org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fff31e1 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasFOAFDNAchecksum( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, DNACHECKSUM );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fff31e1 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasFOAFDNAchecksum() {
        return Base.has( this.model, this.getResource(), DNACHECKSUM );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fff31e1 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasFOAFDNAchecksum( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, DNACHECKSUM, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fff31e1 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasFOAFDNAchecksum( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), DNACHECKSUM,
                value );
    }

    /**
     * Get all values of property DNAchecksum as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFDNAchecksum_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, DNACHECKSUM );
    }

    /**
     * Get all values of property DNAchecksum as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFDNAchecksum_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, DNACHECKSUM,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property DNAchecksum as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFDNAchecksum_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), DNACHECKSUM );
    }

    /**
     * Get all values of property DNAchecksum as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFDNAchecksum_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), DNACHECKSUM,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property DNAchecksum * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllFOAFDNAchecksum(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, DNACHECKSUM,
                java.lang.String.class );
    }

    /**
     * Get all values of property DNAchecksum as a ReactorResult of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllFOAFDNAchecksum_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, DNACHECKSUM,
                java.lang.String.class );
    }

    /**
     * Get all values of property DNAchecksum * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllFOAFDNAchecksum() {
        return Base.getAll( this.model, this.getResource(), DNACHECKSUM,
                java.lang.String.class );
    }

    /**
     * Get all values of property DNAchecksum as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllFOAFDNAchecksum_as() {
        return Base.getAll_as( this.model, this.getResource(), DNACHECKSUM,
                java.lang.String.class );
    }

    /**
     * Adds a value to property DNAchecksum as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addFOAFDNAchecksum( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, DNACHECKSUM, value );
    }

    /**
     * Adds a value to property DNAchecksum as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addFOAFDNAchecksum( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), DNACHECKSUM, value );
    }

    /**
     * Adds a value to property DNAchecksum from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addFOAFDNAchecksum( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.add( model, instanceResource, DNACHECKSUM, value );
    }

    /**
     * Adds a value to property DNAchecksum from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addFOAFDNAchecksum( java.lang.String value ) {
        Base.add( this.model, this.getResource(), DNACHECKSUM, value );
    }

    /**
     * Sets a value of property DNAchecksum from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setFOAFDNAchecksum( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, DNACHECKSUM, value );
    }

    /**
     * Sets a value of property DNAchecksum from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setFOAFDNAchecksum( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), DNACHECKSUM, value );
    }

    /**
     * Sets a value of property DNAchecksum from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setFOAFDNAchecksum( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.set( model, instanceResource, DNACHECKSUM, value );
    }

    /**
     * Sets a value of property DNAchecksum from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setFOAFDNAchecksum( java.lang.String value ) {
        Base.set( this.model, this.getResource(), DNACHECKSUM, value );
    }

    /**
     * Removes a value of property DNAchecksum as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeFOAFDNAchecksum( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, DNACHECKSUM, value );
    }

    /**
     * Removes a value of property DNAchecksum as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeFOAFDNAchecksum( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), DNACHECKSUM, value );
    }

    /**
     * Removes a value of property DNAchecksum given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeFOAFDNAchecksum( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.remove( model, instanceResource, DNACHECKSUM, value );
    }

    /**
     * Removes a value of property DNAchecksum given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeFOAFDNAchecksum( java.lang.String value ) {
        Base.remove( this.model, this.getResource(), DNACHECKSUM, value );
    }

    /**
     * Removes all values of property DNAchecksum * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllFOAFDNAchecksum( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, DNACHECKSUM );
    }

    /**
     * Removes all values of property DNAchecksum * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllFOAFDNAchecksum() {
        Base.removeAll( this.model, this.getResource(), DNACHECKSUM );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f72eaa2 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasFOAFDepiction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, DEPICTION );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f72eaa2 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasFOAFDepiction() {
        return Base.has( this.model, this.getResource(), DEPICTION );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f72eaa2 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasFOAFDepiction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, DEPICTION, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f72eaa2 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasFOAFDepiction( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), DEPICTION, value );
    }

    /**
     * Get all values of property Depiction as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFDepiction_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, DEPICTION );
    }

    /**
     * Get all values of property Depiction as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFDepiction_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, DEPICTION,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Depiction as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFDepiction_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), DEPICTION );
    }

    /**
     * Get all values of property Depiction as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFDepiction_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), DEPICTION,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Depiction * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Image> getAllFOAFDepiction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, DEPICTION, Image.class );
    }

    /**
     * Get all values of property Depiction as a ReactorResult of Image
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Image> getAllFOAFDepiction_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, DEPICTION, Image.class );
    }

    /**
     * Get all values of property Depiction * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Image> getAllFOAFDepiction() {
        return Base.getAll( this.model, this.getResource(), DEPICTION,
                Image.class );
    }

    /**
     * Get all values of property Depiction as a ReactorResult of Image
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Image> getAllFOAFDepiction_as() {
        return Base.getAll_as( this.model, this.getResource(), DEPICTION,
                Image.class );
    }

    /**
     * Adds a value to property Depiction as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addFOAFDepiction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, DEPICTION, value );
    }

    /**
     * Adds a value to property Depiction as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addFOAFDepiction( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), DEPICTION, value );
    }

    /**
     * Adds a value to property Depiction from an instance of Image
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addFOAFDepiction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Image value ) {
        Base.add( model, instanceResource, DEPICTION, value );
    }

    /**
     * Adds a value to property Depiction from an instance of Image
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addFOAFDepiction( Image value ) {
        Base.add( this.model, this.getResource(), DEPICTION, value );
    }

    /**
     * Sets a value of property Depiction from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setFOAFDepiction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, DEPICTION, value );
    }

    /**
     * Sets a value of property Depiction from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setFOAFDepiction( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), DEPICTION, value );
    }

    /**
     * Sets a value of property Depiction from an instance of Image First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setFOAFDepiction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Image value ) {
        Base.set( model, instanceResource, DEPICTION, value );
    }

    /**
     * Sets a value of property Depiction from an instance of Image First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setFOAFDepiction( Image value ) {
        Base.set( this.model, this.getResource(), DEPICTION, value );
    }

    /**
     * Removes a value of property Depiction as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeFOAFDepiction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, DEPICTION, value );
    }

    /**
     * Removes a value of property Depiction as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeFOAFDepiction( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), DEPICTION, value );
    }

    /**
     * Removes a value of property Depiction given as an instance of Image
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeFOAFDepiction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Image value ) {
        Base.remove( model, instanceResource, DEPICTION, value );
    }

    /**
     * Removes a value of property Depiction given as an instance of Image
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeFOAFDepiction( Image value ) {
        Base.remove( this.model, this.getResource(), DEPICTION, value );
    }

    /**
     * Removes all values of property Depiction * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllFOAFDepiction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, DEPICTION );
    }

    /**
     * Removes all values of property Depiction * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllFOAFDepiction() {
        Base.removeAll( this.model, this.getResource(), DEPICTION );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@78fb787f has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasFOAFFundedby( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, FUNDEDBY );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@78fb787f has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasFOAFFundedby() {
        return Base.has( this.model, this.getResource(), FUNDEDBY );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@78fb787f has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasFOAFFundedby( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, FUNDEDBY, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@78fb787f has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasFOAFFundedby( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), FUNDEDBY, value );
    }

    /**
     * Get all values of property Fundedby as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFFundedby_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, FUNDEDBY );
    }

    /**
     * Get all values of property Fundedby as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFFundedby_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, FUNDEDBY,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Fundedby as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFFundedby_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), FUNDEDBY );
    }

    /**
     * Get all values of property Fundedby as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFFundedby_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), FUNDEDBY,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Fundedby * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<org.ontoware.rdfreactor.schema.owl.OwlThing> getAllFOAFFundedby(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, FUNDEDBY,
                org.ontoware.rdfreactor.schema.owl.OwlThing.class );
    }

    /**
     * Get all values of property Fundedby as a ReactorResult of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<org.ontoware.rdfreactor.schema.owl.OwlThing> getAllFOAFFundedby_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, FUNDEDBY,
                org.ontoware.rdfreactor.schema.owl.OwlThing.class );
    }

    /**
     * Get all values of property Fundedby * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<org.ontoware.rdfreactor.schema.owl.OwlThing> getAllFOAFFundedby() {
        return Base.getAll( this.model, this.getResource(), FUNDEDBY,
                org.ontoware.rdfreactor.schema.owl.OwlThing.class );
    }

    /**
     * Get all values of property Fundedby as a ReactorResult of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<org.ontoware.rdfreactor.schema.owl.OwlThing> getAllFOAFFundedby_as() {
        return Base.getAll_as( this.model, this.getResource(), FUNDEDBY,
                org.ontoware.rdfreactor.schema.owl.OwlThing.class );
    }

    /**
     * Adds a value to property Fundedby as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addFOAFFundedby( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, FUNDEDBY, value );
    }

    /**
     * Adds a value to property Fundedby as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addFOAFFundedby( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), FUNDEDBY, value );
    }

    /**
     * Adds a value to property Fundedby from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addFOAFFundedby( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.add( model, instanceResource, FUNDEDBY, value );
    }

    /**
     * Adds a value to property Fundedby from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addFOAFFundedby(
            org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.add( this.model, this.getResource(), FUNDEDBY, value );
    }

    /**
     * Sets a value of property Fundedby from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setFOAFFundedby( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, FUNDEDBY, value );
    }

    /**
     * Sets a value of property Fundedby from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setFOAFFundedby( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), FUNDEDBY, value );
    }

    /**
     * Sets a value of property Fundedby from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing First, all existing values
     * are removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setFOAFFundedby( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.set( model, instanceResource, FUNDEDBY, value );
    }

    /**
     * Sets a value of property Fundedby from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing First, all existing values
     * are removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setFOAFFundedby(
            org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.set( this.model, this.getResource(), FUNDEDBY, value );
    }

    /**
     * Removes a value of property Fundedby as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeFOAFFundedby( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, FUNDEDBY, value );
    }

    /**
     * Removes a value of property Fundedby as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeFOAFFundedby( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), FUNDEDBY, value );
    }

    /**
     * Removes a value of property Fundedby given as an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeFOAFFundedby( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.remove( model, instanceResource, FUNDEDBY, value );
    }

    /**
     * Removes a value of property Fundedby given as an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeFOAFFundedby(
            org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.remove( this.model, this.getResource(), FUNDEDBY, value );
    }

    /**
     * Removes all values of property Fundedby * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllFOAFFundedby( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, FUNDEDBY );
    }

    /**
     * Removes all values of property Fundedby * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllFOAFFundedby() {
        Base.removeAll( this.model, this.getResource(), FUNDEDBY );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57506502 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasFOAFGivenname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, GIVENNAME );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57506502 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasFOAFGivenname() {
        return Base.has( this.model, this.getResource(), GIVENNAME );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57506502 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasFOAFGivenname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, GIVENNAME, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57506502 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasFOAFGivenname( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), GIVENNAME, value );
    }

    /**
     * Get all values of property Givenname as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFGivenname_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, GIVENNAME );
    }

    /**
     * Get all values of property Givenname as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFGivenname_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, GIVENNAME,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Givenname as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFGivenname_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), GIVENNAME );
    }

    /**
     * Get all values of property Givenname as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFGivenname_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), GIVENNAME,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Givenname * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllFOAFGivenname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, GIVENNAME, Thing.class );
    }

    /**
     * Get all values of property Givenname as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllFOAFGivenname_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, GIVENNAME, Thing.class );
    }

    /**
     * Get all values of property Givenname * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllFOAFGivenname() {
        return Base.getAll( this.model, this.getResource(), GIVENNAME,
                Thing.class );
    }

    /**
     * Get all values of property Givenname as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllFOAFGivenname_as() {
        return Base.getAll_as( this.model, this.getResource(), GIVENNAME,
                Thing.class );
    }

    /**
     * Adds a value to property Givenname as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addFOAFGivenname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, GIVENNAME, value );
    }

    /**
     * Adds a value to property Givenname as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addFOAFGivenname( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), GIVENNAME, value );
    }

    /**
     * Adds a value to property Givenname from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addFOAFGivenname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.add( model, instanceResource, GIVENNAME, value );
    }

    /**
     * Adds a value to property Givenname from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addFOAFGivenname( Thing value ) {
        Base.add( this.model, this.getResource(), GIVENNAME, value );
    }

    /**
     * Sets a value of property Givenname from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setFOAFGivenname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, GIVENNAME, value );
    }

    /**
     * Sets a value of property Givenname from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setFOAFGivenname( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), GIVENNAME, value );
    }

    /**
     * Sets a value of property Givenname from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setFOAFGivenname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.set( model, instanceResource, GIVENNAME, value );
    }

    /**
     * Sets a value of property Givenname from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setFOAFGivenname( Thing value ) {
        Base.set( this.model, this.getResource(), GIVENNAME, value );
    }

    /**
     * Removes a value of property Givenname as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeFOAFGivenname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, GIVENNAME, value );
    }

    /**
     * Removes a value of property Givenname as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeFOAFGivenname( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), GIVENNAME, value );
    }

    /**
     * Removes a value of property Givenname given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeFOAFGivenname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.remove( model, instanceResource, GIVENNAME, value );
    }

    /**
     * Removes a value of property Givenname given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeFOAFGivenname( Thing value ) {
        Base.remove( this.model, this.getResource(), GIVENNAME, value );
    }

    /**
     * Removes all values of property Givenname * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllFOAFGivenname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, GIVENNAME );
    }

    /**
     * Removes all values of property Givenname * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllFOAFGivenname() {
        Base.removeAll( this.model, this.getResource(), GIVENNAME );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@469b762c has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasFOAFHomepage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, HOMEPAGE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@469b762c has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasFOAFHomepage() {
        return Base.has( this.model, this.getResource(), HOMEPAGE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@469b762c has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasFOAFHomepage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, HOMEPAGE, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@469b762c has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasFOAFHomepage( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), HOMEPAGE, value );
    }

    /**
     * Get all values of property Homepage as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFHomepage_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, HOMEPAGE );
    }

    /**
     * Get all values of property Homepage as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFHomepage_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, HOMEPAGE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Homepage as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFHomepage_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), HOMEPAGE );
    }

    /**
     * Get all values of property Homepage as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFHomepage_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), HOMEPAGE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Homepage * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Document> getAllFOAFHomepage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, HOMEPAGE, Document.class );
    }

    /**
     * Get all values of property Homepage as a ReactorResult of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Document> getAllFOAFHomepage_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, HOMEPAGE,
                Document.class );
    }

    /**
     * Get all values of property Homepage * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Document> getAllFOAFHomepage() {
        return Base.getAll( this.model, this.getResource(), HOMEPAGE,
                Document.class );
    }

    /**
     * Get all values of property Homepage as a ReactorResult of Document
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Document> getAllFOAFHomepage_as() {
        return Base.getAll_as( this.model, this.getResource(), HOMEPAGE,
                Document.class );
    }

    /**
     * Adds a value to property Homepage as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addFOAFHomepage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, HOMEPAGE, value );
    }

    /**
     * Adds a value to property Homepage as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addFOAFHomepage( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), HOMEPAGE, value );
    }

    /**
     * Adds a value to property Homepage from an instance of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addFOAFHomepage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Document value ) {
        Base.add( model, instanceResource, HOMEPAGE, value );
    }

    /**
     * Adds a value to property Homepage from an instance of Document
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addFOAFHomepage( Document value ) {
        Base.add( this.model, this.getResource(), HOMEPAGE, value );
    }

    /**
     * Sets a value of property Homepage from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setFOAFHomepage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, HOMEPAGE, value );
    }

    /**
     * Sets a value of property Homepage from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setFOAFHomepage( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), HOMEPAGE, value );
    }

    /**
     * Sets a value of property Homepage from an instance of Document First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setFOAFHomepage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Document value ) {
        Base.set( model, instanceResource, HOMEPAGE, value );
    }

    /**
     * Sets a value of property Homepage from an instance of Document First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setFOAFHomepage( Document value ) {
        Base.set( this.model, this.getResource(), HOMEPAGE, value );
    }

    /**
     * Removes a value of property Homepage as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeFOAFHomepage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, HOMEPAGE, value );
    }

    /**
     * Removes a value of property Homepage as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeFOAFHomepage( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), HOMEPAGE, value );
    }

    /**
     * Removes a value of property Homepage given as an instance of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeFOAFHomepage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Document value ) {
        Base.remove( model, instanceResource, HOMEPAGE, value );
    }

    /**
     * Removes a value of property Homepage given as an instance of Document
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeFOAFHomepage( Document value ) {
        Base.remove( this.model, this.getResource(), HOMEPAGE, value );
    }

    /**
     * Removes all values of property Homepage * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllFOAFHomepage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, HOMEPAGE );
    }

    /**
     * Removes all values of property Homepage * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllFOAFHomepage() {
        Base.removeAll( this.model, this.getResource(), HOMEPAGE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5956c062 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasFOAFLogo( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, LOGO );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5956c062 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasFOAFLogo() {
        return Base.has( this.model, this.getResource(), LOGO );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5956c062 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasFOAFLogo( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, LOGO, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5956c062 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasFOAFLogo( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), LOGO, value );
    }

    /**
     * Get all values of property Logo as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFLogo_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, LOGO );
    }

    /**
     * Get all values of property Logo as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFLogo_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, LOGO,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Logo as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFLogo_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), LOGO );
    }

    /**
     * Get all values of property Logo as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFLogo_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), LOGO,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Logo * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<org.ontoware.rdfreactor.schema.owl.OwlThing> getAllFOAFLogo(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, LOGO,
                org.ontoware.rdfreactor.schema.owl.OwlThing.class );
    }

    /**
     * Get all values of property Logo as a ReactorResult of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<org.ontoware.rdfreactor.schema.owl.OwlThing> getAllFOAFLogo_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, LOGO,
                org.ontoware.rdfreactor.schema.owl.OwlThing.class );
    }

    /**
     * Get all values of property Logo * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<org.ontoware.rdfreactor.schema.owl.OwlThing> getAllFOAFLogo() {
        return Base.getAll( this.model, this.getResource(), LOGO,
                org.ontoware.rdfreactor.schema.owl.OwlThing.class );
    }

    /**
     * Get all values of property Logo as a ReactorResult of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<org.ontoware.rdfreactor.schema.owl.OwlThing> getAllFOAFLogo_as() {
        return Base.getAll_as( this.model, this.getResource(), LOGO,
                org.ontoware.rdfreactor.schema.owl.OwlThing.class );
    }

    /**
     * Adds a value to property Logo as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addFOAFLogo( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, LOGO, value );
    }

    /**
     * Adds a value to property Logo as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addFOAFLogo( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), LOGO, value );
    }

    /**
     * Adds a value to property Logo from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addFOAFLogo( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.add( model, instanceResource, LOGO, value );
    }

    /**
     * Adds a value to property Logo from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addFOAFLogo( org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.add( this.model, this.getResource(), LOGO, value );
    }

    /**
     * Sets a value of property Logo from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setFOAFLogo( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, LOGO, value );
    }

    /**
     * Sets a value of property Logo from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setFOAFLogo( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), LOGO, value );
    }

    /**
     * Sets a value of property Logo from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing First, all existing values
     * are removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setFOAFLogo( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.set( model, instanceResource, LOGO, value );
    }

    /**
     * Sets a value of property Logo from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing First, all existing values
     * are removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setFOAFLogo( org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.set( this.model, this.getResource(), LOGO, value );
    }

    /**
     * Removes a value of property Logo as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeFOAFLogo( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, LOGO, value );
    }

    /**
     * Removes a value of property Logo as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeFOAFLogo( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), LOGO, value );
    }

    /**
     * Removes a value of property Logo given as an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeFOAFLogo( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.remove( model, instanceResource, LOGO, value );
    }

    /**
     * Removes a value of property Logo given as an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeFOAFLogo(
            org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.remove( this.model, this.getResource(), LOGO, value );
    }

    /**
     * Removes all values of property Logo * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllFOAFLogo( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, LOGO );
    }

    /**
     * Removes all values of property Logo * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllFOAFLogo() {
        Base.removeAll( this.model, this.getResource(), LOGO );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1275a539 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasFOAFMaker( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, MAKER );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1275a539 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasFOAFMaker() {
        return Base.has( this.model, this.getResource(), MAKER );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1275a539 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasFOAFMaker( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, MAKER, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1275a539 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasFOAFMaker( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), MAKER, value );
    }

    /**
     * Get all values of property Maker as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFMaker_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, MAKER );
    }

    /**
     * Get all values of property Maker as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFMaker_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, MAKER,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Maker as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFMaker_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), MAKER );
    }

    /**
     * Get all values of property Maker as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFMaker_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), MAKER,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Maker * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Agent> getAllFOAFMaker( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, MAKER, Agent.class );
    }

    /**
     * Get all values of property Maker as a ReactorResult of Agent
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Agent> getAllFOAFMaker_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, MAKER, Agent.class );
    }

    /**
     * Get all values of property Maker * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Agent> getAllFOAFMaker() {
        return Base.getAll( this.model, this.getResource(), MAKER, Agent.class );
    }

    /**
     * Get all values of property Maker as a ReactorResult of Agent
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Agent> getAllFOAFMaker_as() {
        return Base.getAll_as( this.model, this.getResource(), MAKER,
                Agent.class );
    }

    /**
     * Adds a value to property Maker as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addFOAFMaker( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, MAKER, value );
    }

    /**
     * Adds a value to property Maker as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addFOAFMaker( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), MAKER, value );
    }

    /**
     * Adds a value to property Maker from an instance of Agent
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addFOAFMaker( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Agent value ) {
        Base.add( model, instanceResource, MAKER, value );
    }

    /**
     * Adds a value to property Maker from an instance of Agent
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addFOAFMaker( Agent value ) {
        Base.add( this.model, this.getResource(), MAKER, value );
    }

    /**
     * Sets a value of property Maker from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setFOAFMaker( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, MAKER, value );
    }

    /**
     * Sets a value of property Maker from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setFOAFMaker( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), MAKER, value );
    }

    /**
     * Sets a value of property Maker from an instance of Agent First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setFOAFMaker( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Agent value ) {
        Base.set( model, instanceResource, MAKER, value );
    }

    /**
     * Sets a value of property Maker from an instance of Agent First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setFOAFMaker( Agent value ) {
        Base.set( this.model, this.getResource(), MAKER, value );
    }

    /**
     * Removes a value of property Maker as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeFOAFMaker( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, MAKER, value );
    }

    /**
     * Removes a value of property Maker as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeFOAFMaker( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), MAKER, value );
    }

    /**
     * Removes a value of property Maker given as an instance of Agent
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeFOAFMaker( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Agent value ) {
        Base.remove( model, instanceResource, MAKER, value );
    }

    /**
     * Removes a value of property Maker given as an instance of Agent
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeFOAFMaker( Agent value ) {
        Base.remove( this.model, this.getResource(), MAKER, value );
    }

    /**
     * Removes all values of property Maker * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllFOAFMaker( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, MAKER );
    }

    /**
     * Removes all values of property Maker * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllFOAFMaker() {
        Base.removeAll( this.model, this.getResource(), MAKER );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31245703 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasFOAFMembershipClass( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, MEMBERSHIPCLASS );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31245703 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasFOAFMembershipClass() {
        return Base.has( this.model, this.getResource(), MEMBERSHIPCLASS );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31245703 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasFOAFMembershipClass( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, MEMBERSHIPCLASS, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31245703 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasFOAFMembershipClass(
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), MEMBERSHIPCLASS,
                value );
    }

    /**
     * Get all values of property MembershipClass as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFMembershipClass_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, MEMBERSHIPCLASS );
    }

    /**
     * Get all values of property MembershipClass as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFMembershipClass_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, MEMBERSHIPCLASS,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property MembershipClass as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFMembershipClass_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(),
                MEMBERSHIPCLASS );
    }

    /**
     * Get all values of property MembershipClass as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFMembershipClass_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), MEMBERSHIPCLASS,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property MembershipClass * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllFOAFMembershipClass(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, MEMBERSHIPCLASS,
                Thing.class );
    }

    /**
     * Get all values of property MembershipClass as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllFOAFMembershipClass_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, MEMBERSHIPCLASS,
                Thing.class );
    }

    /**
     * Get all values of property MembershipClass * @return a ClosableIterator
     * of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllFOAFMembershipClass() {
        return Base.getAll( this.model, this.getResource(), MEMBERSHIPCLASS,
                Thing.class );
    }

    /**
     * Get all values of property MembershipClass as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllFOAFMembershipClass_as() {
        return Base.getAll_as( this.model, this.getResource(), MEMBERSHIPCLASS,
                Thing.class );
    }

    /**
     * Adds a value to property MembershipClass as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addFOAFMembershipClass( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, MEMBERSHIPCLASS, value );
    }

    /**
     * Adds a value to property MembershipClass as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addFOAFMembershipClass(
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), MEMBERSHIPCLASS, value );
    }

    /**
     * Adds a value to property MembershipClass from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addFOAFMembershipClass( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.add( model, instanceResource, MEMBERSHIPCLASS, value );
    }

    /**
     * Adds a value to property MembershipClass from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addFOAFMembershipClass( Thing value ) {
        Base.add( this.model, this.getResource(), MEMBERSHIPCLASS, value );
    }

    /**
     * Sets a value of property MembershipClass from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setFOAFMembershipClass( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, MEMBERSHIPCLASS, value );
    }

    /**
     * Sets a value of property MembershipClass from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setFOAFMembershipClass(
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), MEMBERSHIPCLASS, value );
    }

    /**
     * Sets a value of property MembershipClass from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setFOAFMembershipClass( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.set( model, instanceResource, MEMBERSHIPCLASS, value );
    }

    /**
     * Sets a value of property MembershipClass from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setFOAFMembershipClass( Thing value ) {
        Base.set( this.model, this.getResource(), MEMBERSHIPCLASS, value );
    }

    /**
     * Removes a value of property MembershipClass as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeFOAFMembershipClass( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, MEMBERSHIPCLASS, value );
    }

    /**
     * Removes a value of property MembershipClass as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeFOAFMembershipClass(
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), MEMBERSHIPCLASS, value );
    }

    /**
     * Removes a value of property MembershipClass given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeFOAFMembershipClass( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.remove( model, instanceResource, MEMBERSHIPCLASS, value );
    }

    /**
     * Removes a value of property MembershipClass given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeFOAFMembershipClass( Thing value ) {
        Base.remove( this.model, this.getResource(), MEMBERSHIPCLASS, value );
    }

    /**
     * Removes all values of property MembershipClass * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllFOAFMembershipClass( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, MEMBERSHIPCLASS );
    }

    /**
     * Removes all values of property MembershipClass * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllFOAFMembershipClass() {
        Base.removeAll( this.model, this.getResource(), MEMBERSHIPCLASS );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@272e6498 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasFOAFName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, NAME );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@272e6498 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasFOAFName() {
        return Base.has( this.model, this.getResource(), NAME );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@272e6498 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasFOAFName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, NAME, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@272e6498 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasFOAFName( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), NAME, value );
    }

    /**
     * Get all values of property Name as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFName_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, NAME );
    }

    /**
     * Get all values of property Name as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFName_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, NAME,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Name as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFName_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), NAME );
    }

    /**
     * Get all values of property Name as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFName_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), NAME,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Name * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllFOAFName(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, NAME,
                java.lang.String.class );
    }

    /**
     * Get all values of property Name as a ReactorResult of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllFOAFName_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, NAME,
                java.lang.String.class );
    }

    /**
     * Get all values of property Name * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllFOAFName() {
        return Base.getAll( this.model, this.getResource(), NAME,
                java.lang.String.class );
    }

    /**
     * Get all values of property Name as a ReactorResult of java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllFOAFName_as() {
        return Base.getAll_as( this.model, this.getResource(), NAME,
                java.lang.String.class );
    }

    /**
     * Adds a value to property Name as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addFOAFName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, NAME, value );
    }

    /**
     * Adds a value to property Name as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addFOAFName( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), NAME, value );
    }

    /**
     * Adds a value to property Name from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addFOAFName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.add( model, instanceResource, NAME, value );
    }

    /**
     * Adds a value to property Name from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addFOAFName( java.lang.String value ) {
        Base.add( this.model, this.getResource(), NAME, value );
    }

    /**
     * Sets a value of property Name from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setFOAFName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, NAME, value );
    }

    /**
     * Sets a value of property Name from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setFOAFName( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), NAME, value );
    }

    /**
     * Sets a value of property Name from an instance of java.lang.String First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setFOAFName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.set( model, instanceResource, NAME, value );
    }

    /**
     * Sets a value of property Name from an instance of java.lang.String First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setFOAFName( java.lang.String value ) {
        Base.set( this.model, this.getResource(), NAME, value );
    }

    /**
     * Removes a value of property Name as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeFOAFName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, NAME, value );
    }

    /**
     * Removes a value of property Name as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeFOAFName( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), NAME, value );
    }

    /**
     * Removes a value of property Name given as an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeFOAFName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.remove( model, instanceResource, NAME, value );
    }

    /**
     * Removes a value of property Name given as an instance of java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeFOAFName( java.lang.String value ) {
        Base.remove( this.model, this.getResource(), NAME, value );
    }

    /**
     * Removes all values of property Name * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllFOAFName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, NAME );
    }

    /**
     * Removes all values of property Name * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllFOAFName() {
        Base.removeAll( this.model, this.getResource(), NAME );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@523ed23c has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasFOAFNickname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, NICKNAME );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@523ed23c has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasFOAFNickname() {
        return Base.has( this.model, this.getResource(), NICKNAME );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@523ed23c has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasFOAFNickname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, NICKNAME, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@523ed23c has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasFOAFNickname( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), NICKNAME, value );
    }

    /**
     * Get all values of property Nickname as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFNickname_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, NICKNAME );
    }

    /**
     * Get all values of property Nickname as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFNickname_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, NICKNAME,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Nickname as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFNickname_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), NICKNAME );
    }

    /**
     * Get all values of property Nickname as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFNickname_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), NICKNAME,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Nickname * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllFOAFNickname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, NICKNAME, Thing.class );
    }

    /**
     * Get all values of property Nickname as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllFOAFNickname_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, NICKNAME, Thing.class );
    }

    /**
     * Get all values of property Nickname * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllFOAFNickname() {
        return Base.getAll( this.model, this.getResource(), NICKNAME,
                Thing.class );
    }

    /**
     * Get all values of property Nickname as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllFOAFNickname_as() {
        return Base.getAll_as( this.model, this.getResource(), NICKNAME,
                Thing.class );
    }

    /**
     * Adds a value to property Nickname as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addFOAFNickname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, NICKNAME, value );
    }

    /**
     * Adds a value to property Nickname as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addFOAFNickname( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), NICKNAME, value );
    }

    /**
     * Adds a value to property Nickname from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addFOAFNickname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.add( model, instanceResource, NICKNAME, value );
    }

    /**
     * Adds a value to property Nickname from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addFOAFNickname( Thing value ) {
        Base.add( this.model, this.getResource(), NICKNAME, value );
    }

    /**
     * Sets a value of property Nickname from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setFOAFNickname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, NICKNAME, value );
    }

    /**
     * Sets a value of property Nickname from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setFOAFNickname( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), NICKNAME, value );
    }

    /**
     * Sets a value of property Nickname from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setFOAFNickname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.set( model, instanceResource, NICKNAME, value );
    }

    /**
     * Sets a value of property Nickname from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setFOAFNickname( Thing value ) {
        Base.set( this.model, this.getResource(), NICKNAME, value );
    }

    /**
     * Removes a value of property Nickname as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeFOAFNickname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, NICKNAME, value );
    }

    /**
     * Removes a value of property Nickname as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeFOAFNickname( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), NICKNAME, value );
    }

    /**
     * Removes a value of property Nickname given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeFOAFNickname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.remove( model, instanceResource, NICKNAME, value );
    }

    /**
     * Removes a value of property Nickname given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeFOAFNickname( Thing value ) {
        Base.remove( this.model, this.getResource(), NICKNAME, value );
    }

    /**
     * Removes all values of property Nickname * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllFOAFNickname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, NICKNAME );
    }

    /**
     * Removes all values of property Nickname * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllFOAFNickname() {
        Base.removeAll( this.model, this.getResource(), NICKNAME );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47a89031 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasFOAFPage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, PAGE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47a89031 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasFOAFPage() {
        return Base.has( this.model, this.getResource(), PAGE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47a89031 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasFOAFPage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, PAGE, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47a89031 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasFOAFPage( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), PAGE, value );
    }

    /**
     * Get all values of property Page as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFPage_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, PAGE );
    }

    /**
     * Get all values of property Page as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFPage_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, PAGE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Page as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFPage_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), PAGE );
    }

    /**
     * Get all values of property Page as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFPage_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), PAGE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Page * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Document> getAllFOAFPage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, PAGE, Document.class );
    }

    /**
     * Get all values of property Page as a ReactorResult of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Document> getAllFOAFPage_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, PAGE, Document.class );
    }

    /**
     * Get all values of property Page * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Document> getAllFOAFPage() {
        return Base.getAll( this.model, this.getResource(), PAGE,
                Document.class );
    }

    /**
     * Get all values of property Page as a ReactorResult of Document
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Document> getAllFOAFPage_as() {
        return Base.getAll_as( this.model, this.getResource(), PAGE,
                Document.class );
    }

    /**
     * Adds a value to property Page as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addFOAFPage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, PAGE, value );
    }

    /**
     * Adds a value to property Page as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addFOAFPage( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), PAGE, value );
    }

    /**
     * Adds a value to property Page from an instance of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addFOAFPage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Document value ) {
        Base.add( model, instanceResource, PAGE, value );
    }

    /**
     * Adds a value to property Page from an instance of Document
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addFOAFPage( Document value ) {
        Base.add( this.model, this.getResource(), PAGE, value );
    }

    /**
     * Sets a value of property Page from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setFOAFPage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, PAGE, value );
    }

    /**
     * Sets a value of property Page from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setFOAFPage( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), PAGE, value );
    }

    /**
     * Sets a value of property Page from an instance of Document First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setFOAFPage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Document value ) {
        Base.set( model, instanceResource, PAGE, value );
    }

    /**
     * Sets a value of property Page from an instance of Document First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setFOAFPage( Document value ) {
        Base.set( this.model, this.getResource(), PAGE, value );
    }

    /**
     * Removes a value of property Page as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeFOAFPage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, PAGE, value );
    }

    /**
     * Removes a value of property Page as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeFOAFPage( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), PAGE, value );
    }

    /**
     * Removes a value of property Page given as an instance of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeFOAFPage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Document value ) {
        Base.remove( model, instanceResource, PAGE, value );
    }

    /**
     * Removes a value of property Page given as an instance of Document
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeFOAFPage( Document value ) {
        Base.remove( this.model, this.getResource(), PAGE, value );
    }

    /**
     * Removes all values of property Page * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllFOAFPage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, PAGE );
    }

    /**
     * Removes all values of property Page * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllFOAFPage() {
        Base.removeAll( this.model, this.getResource(), PAGE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49c3c8e has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasFOAFPhone( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, PHONE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49c3c8e has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasFOAFPhone() {
        return Base.has( this.model, this.getResource(), PHONE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49c3c8e has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasFOAFPhone( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, PHONE, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49c3c8e has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasFOAFPhone( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), PHONE, value );
    }

    /**
     * Get all values of property Phone as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFPhone_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, PHONE );
    }

    /**
     * Get all values of property Phone as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFPhone_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, PHONE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Phone as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFPhone_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), PHONE );
    }

    /**
     * Get all values of property Phone as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFPhone_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), PHONE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Phone * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllFOAFPhone( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, PHONE, Thing.class );
    }

    /**
     * Get all values of property Phone as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Thing> getAllFOAFPhone_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, PHONE, Thing.class );
    }

    /**
     * Get all values of property Phone * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllFOAFPhone() {
        return Base.getAll( this.model, this.getResource(), PHONE, Thing.class );
    }

    /**
     * Get all values of property Phone as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Thing> getAllFOAFPhone_as() {
        return Base.getAll_as( this.model, this.getResource(), PHONE,
                Thing.class );
    }

    /**
     * Adds a value to property Phone as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addFOAFPhone( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, PHONE, value );
    }

    /**
     * Adds a value to property Phone as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addFOAFPhone( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), PHONE, value );
    }

    /**
     * Adds a value to property Phone from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addFOAFPhone( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.add( model, instanceResource, PHONE, value );
    }

    /**
     * Adds a value to property Phone from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addFOAFPhone( Thing value ) {
        Base.add( this.model, this.getResource(), PHONE, value );
    }

    /**
     * Sets a value of property Phone from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setFOAFPhone( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, PHONE, value );
    }

    /**
     * Sets a value of property Phone from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setFOAFPhone( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), PHONE, value );
    }

    /**
     * Sets a value of property Phone from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setFOAFPhone( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.set( model, instanceResource, PHONE, value );
    }

    /**
     * Sets a value of property Phone from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setFOAFPhone( Thing value ) {
        Base.set( this.model, this.getResource(), PHONE, value );
    }

    /**
     * Removes a value of property Phone as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeFOAFPhone( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, PHONE, value );
    }

    /**
     * Removes a value of property Phone as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeFOAFPhone( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), PHONE, value );
    }

    /**
     * Removes a value of property Phone given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeFOAFPhone( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value ) {
        Base.remove( model, instanceResource, PHONE, value );
    }

    /**
     * Removes a value of property Phone given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeFOAFPhone( Thing value ) {
        Base.remove( this.model, this.getResource(), PHONE, value );
    }

    /**
     * Removes all values of property Phone * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllFOAFPhone( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, PHONE );
    }

    /**
     * Removes all values of property Phone * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllFOAFPhone() {
        Base.removeAll( this.model, this.getResource(), PHONE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bd6075d has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasFOAFPrimarytopicof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, PRIMARYTOPICOF );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bd6075d has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasFOAFPrimarytopicof() {
        return Base.has( this.model, this.getResource(), PRIMARYTOPICOF );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bd6075d has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasFOAFPrimarytopicof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, PRIMARYTOPICOF, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bd6075d has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasFOAFPrimarytopicof(
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), PRIMARYTOPICOF,
                value );
    }

    /**
     * Get all values of property Primarytopicof as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFPrimarytopicof_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, PRIMARYTOPICOF );
    }

    /**
     * Get all values of property Primarytopicof as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFPrimarytopicof_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, PRIMARYTOPICOF,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Primarytopicof as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFPrimarytopicof_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(),
                PRIMARYTOPICOF );
    }

    /**
     * Get all values of property Primarytopicof as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFPrimarytopicof_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), PRIMARYTOPICOF,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Primarytopicof * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Document> getAllFOAFPrimarytopicof(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, PRIMARYTOPICOF,
                Document.class );
    }

    /**
     * Get all values of property Primarytopicof as a ReactorResult of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Document> getAllFOAFPrimarytopicof_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, PRIMARYTOPICOF,
                Document.class );
    }

    /**
     * Get all values of property Primarytopicof * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Document> getAllFOAFPrimarytopicof() {
        return Base.getAll( this.model, this.getResource(), PRIMARYTOPICOF,
                Document.class );
    }

    /**
     * Get all values of property Primarytopicof as a ReactorResult of Document
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Document> getAllFOAFPrimarytopicof_as() {
        return Base.getAll_as( this.model, this.getResource(), PRIMARYTOPICOF,
                Document.class );
    }

    /**
     * Adds a value to property Primarytopicof as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addFOAFPrimarytopicof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, PRIMARYTOPICOF, value );
    }

    /**
     * Adds a value to property Primarytopicof as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addFOAFPrimarytopicof( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), PRIMARYTOPICOF, value );
    }

    /**
     * Adds a value to property Primarytopicof from an instance of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addFOAFPrimarytopicof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Document value ) {
        Base.add( model, instanceResource, PRIMARYTOPICOF, value );
    }

    /**
     * Adds a value to property Primarytopicof from an instance of Document
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addFOAFPrimarytopicof( Document value ) {
        Base.add( this.model, this.getResource(), PRIMARYTOPICOF, value );
    }

    /**
     * Sets a value of property Primarytopicof from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setFOAFPrimarytopicof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, PRIMARYTOPICOF, value );
    }

    /**
     * Sets a value of property Primarytopicof from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setFOAFPrimarytopicof( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), PRIMARYTOPICOF, value );
    }

    /**
     * Sets a value of property Primarytopicof from an instance of Document
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setFOAFPrimarytopicof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Document value ) {
        Base.set( model, instanceResource, PRIMARYTOPICOF, value );
    }

    /**
     * Sets a value of property Primarytopicof from an instance of Document
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setFOAFPrimarytopicof( Document value ) {
        Base.set( this.model, this.getResource(), PRIMARYTOPICOF, value );
    }

    /**
     * Removes a value of property Primarytopicof as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeFOAFPrimarytopicof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, PRIMARYTOPICOF, value );
    }

    /**
     * Removes a value of property Primarytopicof as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeFOAFPrimarytopicof(
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), PRIMARYTOPICOF, value );
    }

    /**
     * Removes a value of property Primarytopicof given as an instance of
     * Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeFOAFPrimarytopicof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Document value ) {
        Base.remove( model, instanceResource, PRIMARYTOPICOF, value );
    }

    /**
     * Removes a value of property Primarytopicof given as an instance of
     * Document
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeFOAFPrimarytopicof( Document value ) {
        Base.remove( this.model, this.getResource(), PRIMARYTOPICOF, value );
    }

    /**
     * Removes all values of property Primarytopicof * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllFOAFPrimarytopicof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, PRIMARYTOPICOF );
    }

    /**
     * Removes all values of property Primarytopicof * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllFOAFPrimarytopicof() {
        Base.removeAll( this.model, this.getResource(), PRIMARYTOPICOF );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c84d9d has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasFOAFTheme( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, THEME );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c84d9d has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasFOAFTheme() {
        return Base.has( this.model, this.getResource(), THEME );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c84d9d has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasFOAFTheme( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, THEME, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c84d9d has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasFOAFTheme( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), THEME, value );
    }

    /**
     * Get all values of property Theme as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFTheme_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, THEME );
    }

    /**
     * Get all values of property Theme as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFTheme_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, THEME,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Theme as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFOAFTheme_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), THEME );
    }

    /**
     * Get all values of property Theme as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllFOAFTheme_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), THEME,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Theme * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<org.ontoware.rdfreactor.schema.owl.OwlThing> getAllFOAFTheme(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, THEME,
                org.ontoware.rdfreactor.schema.owl.OwlThing.class );
    }

    /**
     * Get all values of property Theme as a ReactorResult of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<org.ontoware.rdfreactor.schema.owl.OwlThing> getAllFOAFTheme_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, THEME,
                org.ontoware.rdfreactor.schema.owl.OwlThing.class );
    }

    /**
     * Get all values of property Theme * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<org.ontoware.rdfreactor.schema.owl.OwlThing> getAllFOAFTheme() {
        return Base.getAll( this.model, this.getResource(), THEME,
                org.ontoware.rdfreactor.schema.owl.OwlThing.class );
    }

    /**
     * Get all values of property Theme as a ReactorResult of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<org.ontoware.rdfreactor.schema.owl.OwlThing> getAllFOAFTheme_as() {
        return Base.getAll_as( this.model, this.getResource(), THEME,
                org.ontoware.rdfreactor.schema.owl.OwlThing.class );
    }

    /**
     * Adds a value to property Theme as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addFOAFTheme( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, THEME, value );
    }

    /**
     * Adds a value to property Theme as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addFOAFTheme( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), THEME, value );
    }

    /**
     * Adds a value to property Theme from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addFOAFTheme( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.add( model, instanceResource, THEME, value );
    }

    /**
     * Adds a value to property Theme from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addFOAFTheme( org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.add( this.model, this.getResource(), THEME, value );
    }

    /**
     * Sets a value of property Theme from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setFOAFTheme( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, THEME, value );
    }

    /**
     * Sets a value of property Theme from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setFOAFTheme( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), THEME, value );
    }

    /**
     * Sets a value of property Theme from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing First, all existing values
     * are removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setFOAFTheme( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.set( model, instanceResource, THEME, value );
    }

    /**
     * Sets a value of property Theme from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing First, all existing values
     * are removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setFOAFTheme( org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.set( this.model, this.getResource(), THEME, value );
    }

    /**
     * Removes a value of property Theme as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeFOAFTheme( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, THEME, value );
    }

    /**
     * Removes a value of property Theme as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeFOAFTheme( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), THEME, value );
    }

    /**
     * Removes a value of property Theme given as an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeFOAFTheme( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.remove( model, instanceResource, THEME, value );
    }

    /**
     * Removes a value of property Theme given as an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeFOAFTheme(
            org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.remove( this.model, this.getResource(), THEME, value );
    }

    /**
     * Removes all values of property Theme * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllFOAFTheme( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, THEME );
    }

    /**
     * Removes all values of property Theme * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllFOAFTheme() {
        Base.removeAll( this.model, this.getResource(), THEME );
    }


    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@121c77b has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasDCTermsModified( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, MODIFIED );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@121c77b has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasDCTermsModified() {
        return Base.has( this.model, this.getResource(), MODIFIED );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@121c77b has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasDCTermsModified( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, MODIFIED, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@121c77b has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasDCTermsModified(
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), MODIFIED,
                value );
    }

    /**
     * Get all values of property DateModified as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDCTermsModified_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, MODIFIED );
    }

    /**
     * Get all values of property DateModified as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDCTermsModified_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, MODIFIED,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property DateModified as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDCTermsModified_asNode() {
        return Base
.getAll_asNode( this.model, this.getResource(), MODIFIED );
    }

    /**
     * Get all values of property DateModified as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDCTermsModified_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), MODIFIED,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property DateModified * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllDCTermsModified(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, MODIFIED,
                java.lang.String.class );
    }

    /**
     * Get all values of property DateModified as a ReactorResult of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllDCTermsModified_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, MODIFIED,
                java.lang.String.class );
    }

    /**
     * Get all values of property DateModified * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllDCTermsModified() {
        return Base.getAll( this.model, this.getResource(), MODIFIED,
                java.lang.String.class );
    }

    /**
     * Get all values of property DateModified as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllDCTermsModified_as() {
        return Base.getAll_as( this.model, this.getResource(), MODIFIED,
                java.lang.String.class );
    }

    /**
     * Adds a value to property DateModified as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addDCTermsModified( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, MODIFIED, value );
    }

    /**
     * Adds a value to property DateModified as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addDCTermsModified(
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), MODIFIED, value );
    }

    /**
     * Adds a value to property DateModified from an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addDCTermsModified( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.add( model, instanceResource, MODIFIED, value );
    }

    /**
     * Adds a value to property DateModified from an instance of
     * java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addDCTermsModified( java.lang.String value ) {
        Base.add( this.model, this.getResource(), MODIFIED, value );
    }

    /**
     * Sets a value of property DateModified from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setDCTermsModified( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, MODIFIED, value );
    }

    /**
     * Sets a value of property DateModified from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setDCTermsModified(
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), MODIFIED, value );
    }

    /**
     * Sets a value of property DateModified from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setDCTermsModified( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.set( model, instanceResource, MODIFIED, value );
    }

    /**
     * Sets a value of property DateModified from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setDCTermsModified( java.lang.String value ) {
        Base.set( this.model, this.getResource(), MODIFIED, value );
    }

    /**
     * Removes a value of property DateModified as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeDCTermsModified( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, MODIFIED, value );
    }

    /**
     * Removes a value of property DateModified as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeDCTermsModified(
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), MODIFIED, value );
    }

    /**
     * Removes a value of property DateModified given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeDCTermsModified( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.remove( model, instanceResource, MODIFIED, value );
    }

    /**
     * Removes a value of property DateModified given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeDCTermsModified( java.lang.String value ) {
        Base.remove( this.model, this.getResource(), MODIFIED, value );
    }

    /**
     * Removes all values of property DateModified * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllDCTermsModified( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, MODIFIED );
    }

    /**
     * Removes all values of property DateModified * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllDCTermsModified() {
        Base.removeAll( this.model, this.getResource(), MODIFIED );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a56f0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
     *
     * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasDCTermsCreated( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, CREATED );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a56f0 has at least one value set 
     * @return true if this property has at least one value
     *
     * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasDCTermsCreated() {
        return Base.has( this.model, this.getResource(), CREATED );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a56f0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
     *
     * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasDCTermsCreated( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, CREATED, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a56f0 has the given value (maybe among other values).  
     * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
     *
     * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasDCTermsCreated( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), CREATED, value );
    }

    /**
     * Get all values of property DateCreated as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     *
     * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDCTermsCreated_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, CREATED );
    }

    /**
     * Get all values of property DateCreated as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
     *
     * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDCTermsCreated_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, CREATED,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property DateCreated as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
     *
     * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDCTermsCreated_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), CREATED );
    }

    /**
     * Get all values of property DateCreated as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
     *
     * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDCTermsCreated_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), CREATED,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property DateCreated     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
     *
     * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<java.lang.String> getAllDCTermsCreated(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, CREATED,
                java.lang.String.class );
    }

    /**
     * Get all values of property DateCreated as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
     *
     * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<java.lang.String> getAllDCTermsCreated_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, CREATED,
                java.lang.String.class );
    }

    /**
     * Get all values of property DateCreated     * @return a ClosableIterator of $type
     *
     * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<java.lang.String> getAllDCTermsCreated() {
        return Base.getAll( this.model, this.getResource(), CREATED,
                java.lang.String.class );
    }

    /**
     * Get all values of property DateCreated as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
     *
     * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<java.lang.String> getAllDCTermsCreated_as() {
        return Base.getAll_as( this.model, this.getResource(), CREATED,
                java.lang.String.class );
    }

    /**
     * Adds a value to property DateCreated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addDCTermsCreated( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, CREATED, value );
    }

    /**
     * Adds a value to property DateCreated as an RDF2Go node 
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addDCTermsCreated( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), CREATED, value );
    }

    /**
     * Adds a value to property DateCreated from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     *
     * [Generated from RDFReactor template rule #add3static] 
     */
    public static void addDCTermsCreated( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.add( model, instanceResource, CREATED, value );
    }

    /**
     * Adds a value to property DateCreated from an instance of java.lang.String 
     *
     * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addDCTermsCreated( java.lang.String value ) {
        Base.add( this.model, this.getResource(), CREATED, value );
    }

    /**
     * Sets a value of property DateCreated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be set
     *
     * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setDCTermsCreated( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, CREATED, value );
    }

    /**
     * Sets a value of property DateCreated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setDCTermsCreated( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), CREATED, value );
    }

    /**
     * Sets a value of property DateCreated from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #set3static] 
     */
    public static void setDCTermsCreated( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.set( model, instanceResource, CREATED, value );
    }

    /**
     * Sets a value of property DateCreated from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setDCTermsCreated( java.lang.String value ) {
        Base.set( this.model, this.getResource(), CREATED, value );
    }

    /**
     * Removes a value of property DateCreated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be removed
     *
     * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeDCTermsCreated( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, CREATED, value );
    }

    /**
     * Removes a value of property DateCreated as an RDF2Go node
     * @param value the value to be removed
     *
     * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeDCTermsCreated( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), CREATED, value );
    }

    /**
     * Removes a value of property DateCreated given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be removed
     *
     * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void removeDCTermsCreated( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.remove( model, instanceResource, CREATED, value );
    }

    /**
     * Removes a value of property DateCreated given as an instance of java.lang.String 
     * @param value the value to be removed
     *
     * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeDCTermsCreated( java.lang.String value ) {
        Base.remove( this.model, this.getResource(), CREATED, value );
    }

    /**
     * Removes all values of property DateCreated     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     *
     * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllDCTermsCreated( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, CREATED );
    }

    /**
     * Removes all values of property DateCreated	 *
     * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllDCTermsCreated() {
        Base.removeAll( this.model, this.getResource(), CREATED );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10a73bc has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
     *
     * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasDCTermsHasPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
    	return Base.has(model, instanceResource, HASPART);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10a73bc has at least one value set 
     * @return true if this property has at least one value
     *
     * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasDCTermsHasPart() {
    	return Base.has(this.model, this.getResource(), HASPART);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10a73bc has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
     *
     * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasDCTermsHasPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
    	return Base.hasValue(model, instanceResource, HASPART, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10a73bc has the given value (maybe among other values).  
     * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
     *
     * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasDCTermsHasPart( org.ontoware.rdf2go.model.node.Node value ) {
    	return Base.hasValue(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Get all values of property HasPart as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     *
     * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDCTermsHasPart_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
    	return Base.getAll_asNode(model, instanceResource, HASPART);
    }

    /**
     * Get all values of property HasPart as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
     *
     * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDCTermsHasPart_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
    	return Base.getAll_as(model, instanceResource, HASPART, org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property HasPart as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
     *
     * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDCTermsHasPart_asNode() {
    	return Base.getAll_asNode(this.model, this.getResource(), HASPART);
    }

    /**
     * Get all values of property HasPart as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
     *
     * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDCTermsHasPart_asNode_() {
    	return Base.getAll_as(this.model, this.getResource(), HASPART, org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property HasPart     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
     *
     * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<Thing> getAllDCTermsHasPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
    	return Base.getAll(model, instanceResource, HASPART, Thing.class);
    }

    /**
     * Get all values of property HasPart as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
     *
     * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<Thing> getAllDCTermsHasPart_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
    	return Base.getAll_as(model, instanceResource, HASPART, Thing.class);
    }

    /**
     * Get all values of property HasPart     * @return a ClosableIterator of $type
     *
     * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<Thing> getAllDCTermsHasPart() {
    	return Base.getAll(this.model, this.getResource(), HASPART, Thing.class);
    }

    /**
     * Get all values of property HasPart as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
     *
     * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<Thing> getAllDCTermsHasPart_as() {
    	return Base.getAll_as(this.model, this.getResource(), HASPART, Thing.class);
    }

    /**
     * Adds a value to property HasPart as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addDCTermsHasPart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
    	Base.add(model, instanceResource, HASPART, value);
    }

    /**
     * Adds a value to property HasPart as an RDF2Go node 
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addDCTermsHasPart( org.ontoware.rdf2go.model.node.Node value) {
    	Base.add(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Adds a value to property HasPart from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     *
     * [Generated from RDFReactor template rule #add3static] 
     */
    public static void addDCTermsHasPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
    	Base.add(model, instanceResource, HASPART, value);
    }

    /**
     * Adds a value to property HasPart from an instance of Thing 
     *
     * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addDCTermsHasPart(Thing value) {
    	Base.add(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Sets a value of property HasPart from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be set
     *
     * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setDCTermsHasPart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
    	Base.set(model, instanceResource, HASPART, value);
    }

    /**
     * Sets a value of property HasPart from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setDCTermsHasPart( org.ontoware.rdf2go.model.node.Node value) {
    	Base.set(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Sets a value of property HasPart from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #set3static] 
     */
    public static void setDCTermsHasPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
    	Base.set(model, instanceResource, HASPART, value);
    }

    /**
     * Sets a value of property HasPart from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setDCTermsHasPart(Thing value) {
    	Base.set(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Removes a value of property HasPart as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be removed
     *
     * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeDCTermsHasPart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
    	Base.remove(model, instanceResource, HASPART, value);
    }

    /**
     * Removes a value of property HasPart as an RDF2Go node
     * @param value the value to be removed
     *
     * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeDCTermsHasPart( org.ontoware.rdf2go.model.node.Node value) {
    	Base.remove(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Removes a value of property HasPart given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be removed
     *
     * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void removeDCTermsHasPart(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
    	Base.remove(model, instanceResource, HASPART, value);
    }

    /**
     * Removes a value of property HasPart given as an instance of Thing 
     * @param value the value to be removed
     *
     * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeDCTermsHasPart(Thing value) {
    	Base.remove(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Removes all values of property HasPart     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     *
     * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllDCTermsHasPart( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
    	Base.removeAll(model, instanceResource, HASPART);
    }

    /**
     * Removes all values of property HasPart	 *
     * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllDCTermsHasPart() {
    	Base.removeAll(this.model, this.getResource(), HASPART);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1391b1a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
     *
     * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasDCTermsIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
    	return Base.has(model, instanceResource, ISPARTOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1391b1a has at least one value set 
     * @return true if this property has at least one value
     *
     * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasDCTermsIsPartOf() {
    	return Base.has(this.model, this.getResource(), ISPARTOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1391b1a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
     *
     * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasDCTermsIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
    	return Base.hasValue(model, instanceResource, ISPARTOF, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1391b1a has the given value (maybe among other values).  
     * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
     *
     * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasDCTermsIsPartOf( org.ontoware.rdf2go.model.node.Node value ) {
    	return Base.hasValue(this.model, this.getResource(), ISPARTOF, value);
    }

    /**
     * Get all values of property IsPartOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     *
     * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDCTermsIsPartOf_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
    	return Base.getAll_asNode(model, instanceResource, ISPARTOF);
    }

    /**
     * Get all values of property IsPartOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
     *
     * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDCTermsIsPartOf_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
    	return Base.getAll_as(model, instanceResource, ISPARTOF, org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property IsPartOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
     *
     * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDCTermsIsPartOf_asNode() {
    	return Base.getAll_asNode(this.model, this.getResource(), ISPARTOF);
    }

    /**
     * Get all values of property IsPartOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
     *
     * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllDCTermsIsPartOf_asNode_() {
    	return Base.getAll_as(this.model, this.getResource(), ISPARTOF, org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property IsPartOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
     *
     * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<Thing> getAllDCTermsIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
    	return Base.getAll(model, instanceResource, ISPARTOF, Thing.class);
    }

    /**
     * Get all values of property IsPartOf as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
     *
     * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<Thing> getAllDCTermsIsPartOf_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
    	return Base.getAll_as(model, instanceResource, ISPARTOF, Thing.class);
    }

    /**
     * Get all values of property IsPartOf     * @return a ClosableIterator of $type
     *
     * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<Thing> getAllDCTermsIsPartOf() {
    	return Base.getAll(this.model, this.getResource(), ISPARTOF, Thing.class);
    }

    /**
     * Get all values of property IsPartOf as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
     *
     * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<Thing> getAllDCTermsIsPartOf_as() {
    	return Base.getAll_as(this.model, this.getResource(), ISPARTOF, Thing.class);
    }

    /**
     * Adds a value to property IsPartOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addDCTermsIsPartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
    	Base.add(model, instanceResource, ISPARTOF, value);
    }

    /**
     * Adds a value to property IsPartOf as an RDF2Go node 
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addDCTermsIsPartOf( org.ontoware.rdf2go.model.node.Node value) {
    	Base.add(this.model, this.getResource(), ISPARTOF, value);
    }

    /**
     * Adds a value to property IsPartOf from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     *
     * [Generated from RDFReactor template rule #add3static] 
     */
    public static void addDCTermsIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
    	Base.add(model, instanceResource, ISPARTOF, value);
    }

    /**
     * Adds a value to property IsPartOf from an instance of Thing 
     *
     * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addDCTermsIsPartOf(Thing value) {
    	Base.add(this.model, this.getResource(), ISPARTOF, value);
    }

    /**
     * Sets a value of property IsPartOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be set
     *
     * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setDCTermsIsPartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
    	Base.set(model, instanceResource, ISPARTOF, value);
    }

    /**
     * Sets a value of property IsPartOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setDCTermsIsPartOf( org.ontoware.rdf2go.model.node.Node value) {
    	Base.set(this.model, this.getResource(), ISPARTOF, value);
    }

    /**
     * Sets a value of property IsPartOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #set3static] 
     */
    public static void setDCTermsIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
    	Base.set(model, instanceResource, ISPARTOF, value);
    }

    /**
     * Sets a value of property IsPartOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setDCTermsIsPartOf(Thing value) {
    	Base.set(this.model, this.getResource(), ISPARTOF, value);
    }

    /**
     * Removes a value of property IsPartOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be removed
     *
     * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeDCTermsIsPartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
    	Base.remove(model, instanceResource, ISPARTOF, value);
    }

    /**
     * Removes a value of property IsPartOf as an RDF2Go node
     * @param value the value to be removed
     *
     * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeDCTermsIsPartOf( org.ontoware.rdf2go.model.node.Node value) {
    	Base.remove(this.model, this.getResource(), ISPARTOF, value);
    }

    /**
     * Removes a value of property IsPartOf given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be removed
     *
     * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void removeDCTermsIsPartOf(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
    	Base.remove(model, instanceResource, ISPARTOF, value);
    }

    /**
     * Removes a value of property IsPartOf given as an instance of Thing 
     * @param value the value to be removed
     *
     * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeDCTermsIsPartOf(Thing value) {
    	Base.remove(this.model, this.getResource(), ISPARTOF, value);
    }

    /**
     * Removes all values of property IsPartOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     *
     * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllDCTermsIsPartOf( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
    	Base.removeAll(model, instanceResource, ISPARTOF);
    }

    /**
     * Removes all values of property IsPartOf	 *
     * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllDCTermsIsPartOf() {
    	Base.removeAll(this.model, this.getResource(), ISPARTOF);
    }
}