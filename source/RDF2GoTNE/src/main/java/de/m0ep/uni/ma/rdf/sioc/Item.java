/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) on 21.12.12 17:00
 */
package de.m0ep.uni.ma.rdf.sioc;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

import de.m0ep.uni.ma.rdf.owl.Thing;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> About </li>
 *   <li> Addressedto </li>
 *   <li> Attachment </li>
 *   <li> Container </li>
 *   <li> Content </li>
 *   <li> Discussion </li>
 *   <li> Earlierversion </li>
 *   <li> Embedsknowledge </li>
 *   <li> Ipaddress </li>
 *   <li> Laterversion </li>
 *   <li> Latestversion </li>
 *   <li> Modifier </li>
 *   <li> Nextbydate </li>
 *   <li> Nextversion </li>
 *   <li> Previousbydate </li>
 *   <li> Previousversion </li>
 *   <li> Reply </li>
 *   <li> Replyof </li>
 *   <li> Sibling </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 21.12.12 17:00
 */
public class Item extends Thing {

    /**
     * 
     */
    private static final long serialVersionUID = -3861203006621654845L;

    /** http://rdfs.org/sioc/ns#Item */
	public static final URI RDFS_CLASS = new URIImpl("http://rdfs.org/sioc/ns#Item", false);

    /** http://rdfs.org/sioc/ns#about */
	public static final URI ABOUT = new URIImpl("http://rdfs.org/sioc/ns#about",false);

    /** http://rdfs.org/sioc/ns#addressed_to */
	public static final URI ADDRESSEDTO = new URIImpl("http://rdfs.org/sioc/ns#addressed_to",false);

    /** http://rdfs.org/sioc/ns#attachment */
	public static final URI ATTACHMENT = new URIImpl("http://rdfs.org/sioc/ns#attachment",false);

    /** http://rdfs.org/sioc/ns#has_container */
	public static final URI CONTAINER = new URIImpl("http://rdfs.org/sioc/ns#has_container",false);

    /** http://rdfs.org/sioc/ns#content */
	public static final URI CONTENT = new URIImpl("http://rdfs.org/sioc/ns#content",false);

    /** http://rdfs.org/sioc/ns#has_discussion */
	public static final URI DISCUSSION = new URIImpl("http://rdfs.org/sioc/ns#has_discussion",false);

    /** http://rdfs.org/sioc/ns#earlier_version */
	public static final URI EARLIERVERSION = new URIImpl("http://rdfs.org/sioc/ns#earlier_version",false);

    /** http://rdfs.org/sioc/ns#embeds_knowledge */
	public static final URI EMBEDSKNOWLEDGE = new URIImpl("http://rdfs.org/sioc/ns#embeds_knowledge",false);

    /** http://rdfs.org/sioc/ns#ip_address */
	public static final URI IPADDRESS = new URIImpl("http://rdfs.org/sioc/ns#ip_address",false);

    /** http://rdfs.org/sioc/ns#later_version */
	public static final URI LATERVERSION = new URIImpl("http://rdfs.org/sioc/ns#later_version",false);

    /** http://rdfs.org/sioc/ns#latest_version */
	public static final URI LATESTVERSION = new URIImpl("http://rdfs.org/sioc/ns#latest_version",false);

    /** http://rdfs.org/sioc/ns#has_modifier */
	public static final URI MODIFIER = new URIImpl("http://rdfs.org/sioc/ns#has_modifier",false);

    /** http://rdfs.org/sioc/ns#next_by_date */
	public static final URI NEXTBYDATE = new URIImpl("http://rdfs.org/sioc/ns#next_by_date",false);

    /** http://rdfs.org/sioc/ns#next_version */
	public static final URI NEXTVERSION = new URIImpl("http://rdfs.org/sioc/ns#next_version",false);

    /** http://rdfs.org/sioc/ns#previous_by_date */
	public static final URI PREVIOUSBYDATE = new URIImpl("http://rdfs.org/sioc/ns#previous_by_date",false);

    /** http://rdfs.org/sioc/ns#previous_version */
	public static final URI PREVIOUSVERSION = new URIImpl("http://rdfs.org/sioc/ns#previous_version",false);

    /** http://rdfs.org/sioc/ns#has_reply */
	public static final URI REPLY = new URIImpl("http://rdfs.org/sioc/ns#has_reply",false);

    /** http://rdfs.org/sioc/ns#reply_of */
	public static final URI REPLYOF = new URIImpl("http://rdfs.org/sioc/ns#reply_of",false);

    /** http://rdfs.org/sioc/ns#sibling */
	public static final URI SIBLING = new URIImpl("http://rdfs.org/sioc/ns#sibling",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://rdfs.org/sioc/ns#about",false),
      new URIImpl("http://rdfs.org/sioc/ns#addressed_to",false),
      new URIImpl("http://rdfs.org/sioc/ns#attachment",false),
      new URIImpl("http://rdfs.org/sioc/ns#has_container",false),
      new URIImpl("http://rdfs.org/sioc/ns#content",false),
      new URIImpl("http://rdfs.org/sioc/ns#has_discussion",false),
      new URIImpl("http://rdfs.org/sioc/ns#earlier_version",false),
      new URIImpl("http://rdfs.org/sioc/ns#embeds_knowledge",false),
      new URIImpl("http://rdfs.org/sioc/ns#ip_address",false),
      new URIImpl("http://rdfs.org/sioc/ns#later_version",false),
      new URIImpl("http://rdfs.org/sioc/ns#latest_version",false),
      new URIImpl("http://rdfs.org/sioc/ns#has_modifier",false),
      new URIImpl("http://rdfs.org/sioc/ns#next_by_date",false),
      new URIImpl("http://rdfs.org/sioc/ns#next_version",false),
      new URIImpl("http://rdfs.org/sioc/ns#previous_by_date",false),
      new URIImpl("http://rdfs.org/sioc/ns#previous_version",false),
      new URIImpl("http://rdfs.org/sioc/ns#has_reply",false),
      new URIImpl("http://rdfs.org/sioc/ns#reply_of",false),
      new URIImpl("http://rdfs.org/sioc/ns#sibling",false),
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Item ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Item ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Item ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Item ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Item ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Item  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Item  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Item.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://rdfs.org/sioc/ns#Item).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Item> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Item.class );
	}

    /**
	 * Remove rdf:type Item from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Containerof' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCContainerof_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Container.CONTAINEROF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Containerof' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCContainerof_Inverse() {
		return Base.getAll_Inverse(this.model, Container.CONTAINEROF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Containerof' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCContainerof_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Container.CONTAINEROF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Earlierversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCEarlierversion_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Item.EARLIERVERSION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Earlierversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCEarlierversion_Inverse() {
		return Base.getAll_Inverse(this.model, Item.EARLIERVERSION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Earlierversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCEarlierversion_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Item.EARLIERVERSION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Laterversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCLaterversion_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Item.LATERVERSION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Laterversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCLaterversion_Inverse() {
		return Base.getAll_Inverse(this.model, Item.LATERVERSION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Laterversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCLaterversion_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Item.LATERVERSION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Latestversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCLatestversion_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Item.LATESTVERSION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Latestversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCLatestversion_Inverse() {
		return Base.getAll_Inverse(this.model, Item.LATESTVERSION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Latestversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCLatestversion_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Item.LATESTVERSION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Nextbydate' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCNextbydate_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Item.NEXTBYDATE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Nextbydate' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCNextbydate_Inverse() {
		return Base.getAll_Inverse(this.model, Item.NEXTBYDATE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Nextbydate' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCNextbydate_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Item.NEXTBYDATE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Nextversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCNextversion_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Item.NEXTVERSION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Nextversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCNextversion_Inverse() {
		return Base.getAll_Inverse(this.model, Item.NEXTVERSION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Nextversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCNextversion_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Item.NEXTVERSION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Previousbydate' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCPreviousbydate_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Item.PREVIOUSBYDATE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Previousbydate' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCPreviousbydate_Inverse() {
		return Base.getAll_Inverse(this.model, Item.PREVIOUSBYDATE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Previousbydate' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCPreviousbydate_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Item.PREVIOUSBYDATE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Previousversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCPreviousversion_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Item.PREVIOUSVERSION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Previousversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCPreviousversion_Inverse() {
		return Base.getAll_Inverse(this.model, Item.PREVIOUSVERSION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Previousversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCPreviousversion_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Item.PREVIOUSVERSION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Reply' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCReply_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Item.REPLY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Reply' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCReply_Inverse() {
		return Base.getAll_Inverse(this.model, Item.REPLY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Reply' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCReply_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Item.REPLY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Replyof' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCReplyof_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Item.REPLYOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Replyof' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCReplyof_Inverse() {
		return Base.getAll_Inverse(this.model, Item.REPLYOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Replyof' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCReplyof_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Item.REPLYOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Sibling' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCSibling_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Item.SIBLING, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Sibling' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCSibling_Inverse() {
		return Base.getAll_Inverse(this.model, Item.SIBLING, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Sibling' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCSibling_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Item.SIBLING, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Modifierof' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCModifierof_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, UserAccount.MODIFIEROF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Modifierof' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCModifierof_Inverse() {
		return Base.getAll_Inverse(this.model, UserAccount.MODIFIEROF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Modifierof' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCModifierof_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, UserAccount.MODIFIEROF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@208ee9c9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCAbout(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ABOUT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@208ee9c9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCAbout() {
		return Base.has(this.model, this.getResource(), ABOUT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@208ee9c9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCAbout(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ABOUT, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@208ee9c9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCAbout( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ABOUT, value);
	}

     /**
     * Get all values of property About as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCAbout_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ABOUT);
	}
	
    /**
     * Get all values of property About as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCAbout_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ABOUT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property About as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCAbout_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ABOUT);
	}

    /**
     * Get all values of property About as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCAbout_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ABOUT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property About     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSIOCAbout(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ABOUT, Thing.class);
	}
	
    /**
     * Get all values of property About as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSIOCAbout_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ABOUT, Thing.class);
	}

    /**
     * Get all values of property About     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSIOCAbout() {
		return Base.getAll(this.model, this.getResource(), ABOUT, Thing.class);
	}

    /**
     * Get all values of property About as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSIOCAbout_as() {
		return Base.getAll_as(this.model, this.getResource(), ABOUT, Thing.class);
	}
 
    /**
     * Adds a value to property About as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCAbout( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ABOUT, value);
	}
	
    /**
     * Adds a value to property About as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCAbout( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ABOUT, value);
	}
    /**
     * Adds a value to property About from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCAbout(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ABOUT, value);
	}
	
    /**
     * Adds a value to property About from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCAbout(Thing value) {
		Base.add(this.model, this.getResource(), ABOUT, value);
	}
  

    /**
     * Sets a value of property About from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCAbout( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ABOUT, value);
	}
	
    /**
     * Sets a value of property About from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCAbout( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ABOUT, value);
	}
    /**
     * Sets a value of property About from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCAbout(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ABOUT, value);
	}
	
    /**
     * Sets a value of property About from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCAbout(Thing value) {
		Base.set(this.model, this.getResource(), ABOUT, value);
	}
  


    /**
     * Removes a value of property About as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCAbout( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ABOUT, value);
	}
	
    /**
     * Removes a value of property About as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCAbout( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ABOUT, value);
	}
    /**
     * Removes a value of property About given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCAbout(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ABOUT, value);
	}
	
    /**
     * Removes a value of property About given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCAbout(Thing value) {
		Base.remove(this.model, this.getResource(), ABOUT, value);
	}
  
    /**
     * Removes all values of property About     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCAbout( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ABOUT);
	}
	
    /**
     * Removes all values of property About	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCAbout() {
		Base.removeAll(this.model, this.getResource(), ABOUT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6e67a769 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCAddressedto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ADDRESSEDTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6e67a769 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCAddressedto() {
		return Base.has(this.model, this.getResource(), ADDRESSEDTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6e67a769 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCAddressedto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ADDRESSEDTO, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6e67a769 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCAddressedto( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ADDRESSEDTO, value);
	}

     /**
     * Get all values of property Addressedto as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCAddressedto_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ADDRESSEDTO);
	}
	
    /**
     * Get all values of property Addressedto as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCAddressedto_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ADDRESSEDTO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Addressedto as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCAddressedto_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ADDRESSEDTO);
	}

    /**
     * Get all values of property Addressedto as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCAddressedto_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ADDRESSEDTO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Addressedto     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSIOCAddressedto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ADDRESSEDTO, Thing.class);
	}
	
    /**
     * Get all values of property Addressedto as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSIOCAddressedto_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ADDRESSEDTO, Thing.class);
	}

    /**
     * Get all values of property Addressedto     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSIOCAddressedto() {
		return Base.getAll(this.model, this.getResource(), ADDRESSEDTO, Thing.class);
	}

    /**
     * Get all values of property Addressedto as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSIOCAddressedto_as() {
		return Base.getAll_as(this.model, this.getResource(), ADDRESSEDTO, Thing.class);
	}
 
    /**
     * Adds a value to property Addressedto as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCAddressedto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ADDRESSEDTO, value);
	}
	
    /**
     * Adds a value to property Addressedto as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCAddressedto( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ADDRESSEDTO, value);
	}
    /**
     * Adds a value to property Addressedto from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCAddressedto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ADDRESSEDTO, value);
	}
	
    /**
     * Adds a value to property Addressedto from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCAddressedto(Thing value) {
		Base.add(this.model, this.getResource(), ADDRESSEDTO, value);
	}
  

    /**
     * Sets a value of property Addressedto from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCAddressedto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ADDRESSEDTO, value);
	}
	
    /**
     * Sets a value of property Addressedto from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCAddressedto( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ADDRESSEDTO, value);
	}
    /**
     * Sets a value of property Addressedto from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCAddressedto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ADDRESSEDTO, value);
	}
	
    /**
     * Sets a value of property Addressedto from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCAddressedto(Thing value) {
		Base.set(this.model, this.getResource(), ADDRESSEDTO, value);
	}
  


    /**
     * Removes a value of property Addressedto as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCAddressedto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ADDRESSEDTO, value);
	}
	
    /**
     * Removes a value of property Addressedto as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCAddressedto( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ADDRESSEDTO, value);
	}
    /**
     * Removes a value of property Addressedto given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCAddressedto(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ADDRESSEDTO, value);
	}
	
    /**
     * Removes a value of property Addressedto given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCAddressedto(Thing value) {
		Base.remove(this.model, this.getResource(), ADDRESSEDTO, value);
	}
  
    /**
     * Removes all values of property Addressedto     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCAddressedto( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ADDRESSEDTO);
	}
	
    /**
     * Removes all values of property Addressedto	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCAddressedto() {
		Base.removeAll(this.model, this.getResource(), ADDRESSEDTO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70c44470 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCAttachment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ATTACHMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70c44470 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCAttachment() {
		return Base.has(this.model, this.getResource(), ATTACHMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70c44470 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCAttachment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ATTACHMENT, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70c44470 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCAttachment( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ATTACHMENT, value);
	}

     /**
     * Get all values of property Attachment as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCAttachment_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ATTACHMENT);
	}
	
    /**
     * Get all values of property Attachment as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCAttachment_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ATTACHMENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Attachment as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCAttachment_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ATTACHMENT);
	}

    /**
     * Get all values of property Attachment as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCAttachment_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ATTACHMENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Attachment     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSIOCAttachment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ATTACHMENT, Thing.class);
	}
	
    /**
     * Get all values of property Attachment as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSIOCAttachment_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ATTACHMENT, Thing.class);
	}

    /**
     * Get all values of property Attachment     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSIOCAttachment() {
		return Base.getAll(this.model, this.getResource(), ATTACHMENT, Thing.class);
	}

    /**
     * Get all values of property Attachment as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSIOCAttachment_as() {
		return Base.getAll_as(this.model, this.getResource(), ATTACHMENT, Thing.class);
	}
 
    /**
     * Adds a value to property Attachment as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCAttachment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ATTACHMENT, value);
	}
	
    /**
     * Adds a value to property Attachment as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCAttachment( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ATTACHMENT, value);
	}
    /**
     * Adds a value to property Attachment from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCAttachment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, ATTACHMENT, value);
	}
	
    /**
     * Adds a value to property Attachment from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCAttachment(Thing value) {
		Base.add(this.model, this.getResource(), ATTACHMENT, value);
	}
  

    /**
     * Sets a value of property Attachment from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCAttachment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ATTACHMENT, value);
	}
	
    /**
     * Sets a value of property Attachment from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCAttachment( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ATTACHMENT, value);
	}
    /**
     * Sets a value of property Attachment from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCAttachment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, ATTACHMENT, value);
	}
	
    /**
     * Sets a value of property Attachment from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCAttachment(Thing value) {
		Base.set(this.model, this.getResource(), ATTACHMENT, value);
	}
  


    /**
     * Removes a value of property Attachment as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCAttachment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ATTACHMENT, value);
	}
	
    /**
     * Removes a value of property Attachment as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCAttachment( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ATTACHMENT, value);
	}
    /**
     * Removes a value of property Attachment given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCAttachment(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, ATTACHMENT, value);
	}
	
    /**
     * Removes a value of property Attachment given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCAttachment(Thing value) {
		Base.remove(this.model, this.getResource(), ATTACHMENT, value);
	}
  
    /**
     * Removes all values of property Attachment     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCAttachment( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ATTACHMENT);
	}
	
    /**
     * Removes all values of property Attachment	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCAttachment() {
		Base.removeAll(this.model, this.getResource(), ATTACHMENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7394743b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCContainer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONTAINER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7394743b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCContainer() {
		return Base.has(this.model, this.getResource(), CONTAINER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7394743b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCContainer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONTAINER, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7394743b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCContainer( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTAINER, value);
	}

     /**
     * Get all values of property Container as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCContainer_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CONTAINER);
	}
	
    /**
     * Get all values of property Container as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCContainer_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTAINER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Container as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCContainer_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CONTAINER);
	}

    /**
     * Get all values of property Container as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCContainer_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CONTAINER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Container     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Container> getAllSIOCContainer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CONTAINER, Container.class);
	}
	
    /**
     * Get all values of property Container as a ReactorResult of Container 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Container> getAllSIOCContainer_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTAINER, Container.class);
	}

    /**
     * Get all values of property Container     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Container> getAllSIOCContainer() {
		return Base.getAll(this.model, this.getResource(), CONTAINER, Container.class);
	}

    /**
     * Get all values of property Container as a ReactorResult of Container 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Container> getAllSIOCContainer_as() {
		return Base.getAll_as(this.model, this.getResource(), CONTAINER, Container.class);
	}
 
    /**
     * Adds a value to property Container as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCContainer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CONTAINER, value);
	}
	
    /**
     * Adds a value to property Container as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCContainer( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CONTAINER, value);
	}
    /**
     * Adds a value to property Container from an instance of Container 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCContainer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Container value) {
		Base.add(model, instanceResource, CONTAINER, value);
	}
	
    /**
     * Adds a value to property Container from an instance of Container 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCContainer(Container value) {
		Base.add(this.model, this.getResource(), CONTAINER, value);
	}
  

    /**
     * Sets a value of property Container from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCContainer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONTAINER, value);
	}
	
    /**
     * Sets a value of property Container from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCContainer( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONTAINER, value);
	}
    /**
     * Sets a value of property Container from an instance of Container 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCContainer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Container value) {
		Base.set(model, instanceResource, CONTAINER, value);
	}
	
    /**
     * Sets a value of property Container from an instance of Container 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCContainer(Container value) {
		Base.set(this.model, this.getResource(), CONTAINER, value);
	}
  


    /**
     * Removes a value of property Container as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCContainer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONTAINER, value);
	}
	
    /**
     * Removes a value of property Container as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCContainer( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONTAINER, value);
	}
    /**
     * Removes a value of property Container given as an instance of Container 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCContainer(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Container value) {
		Base.remove(model, instanceResource, CONTAINER, value);
	}
	
    /**
     * Removes a value of property Container given as an instance of Container 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCContainer(Container value) {
		Base.remove(this.model, this.getResource(), CONTAINER, value);
	}
  
    /**
     * Removes all values of property Container     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCContainer( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTAINER);
	}
	
    /**
     * Removes all values of property Container	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCContainer() {
		Base.removeAll(this.model, this.getResource(), CONTAINER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e9384fb has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e9384fb has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCContent() {
		return Base.has(this.model, this.getResource(), CONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e9384fb has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONTENT, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e9384fb has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCContent( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTENT, value);
	}

     /**
     * Get all values of property Content as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCContent_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CONTENT);
	}
	
    /**
     * Get all values of property Content as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCContent_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Content as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCContent_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CONTENT);
	}

    /**
     * Get all values of property Content as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCContent_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CONTENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Content     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllSIOCContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CONTENT, java.lang.String.class);
	}
	
    /**
     * Get all values of property Content as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllSIOCContent_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CONTENT, java.lang.String.class);
	}

    /**
     * Get all values of property Content     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllSIOCContent() {
		return Base.getAll(this.model, this.getResource(), CONTENT, java.lang.String.class);
	}

    /**
     * Get all values of property Content as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllSIOCContent_as() {
		return Base.getAll_as(this.model, this.getResource(), CONTENT, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Content as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CONTENT, value);
	}
	
    /**
     * Adds a value to property Content as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCContent( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CONTENT, value);
	}
    /**
     * Adds a value to property Content from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, CONTENT, value);
	}
	
    /**
     * Adds a value to property Content from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCContent(java.lang.String value) {
		Base.add(this.model, this.getResource(), CONTENT, value);
	}
  

    /**
     * Sets a value of property Content from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CONTENT, value);
	}
	
    /**
     * Sets a value of property Content from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCContent( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CONTENT, value);
	}
    /**
     * Sets a value of property Content from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, CONTENT, value);
	}
	
    /**
     * Sets a value of property Content from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCContent(java.lang.String value) {
		Base.set(this.model, this.getResource(), CONTENT, value);
	}
  


    /**
     * Removes a value of property Content as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CONTENT, value);
	}
	
    /**
     * Removes a value of property Content as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCContent( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CONTENT, value);
	}
    /**
     * Removes a value of property Content given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCContent(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, CONTENT, value);
	}
	
    /**
     * Removes a value of property Content given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCContent(java.lang.String value) {
		Base.remove(this.model, this.getResource(), CONTENT, value);
	}
  
    /**
     * Removes all values of property Content     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCContent( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CONTENT);
	}
	
    /**
     * Removes all values of property Content	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCContent() {
		Base.removeAll(this.model, this.getResource(), CONTENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23dc51cb has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCDiscussion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, DISCUSSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23dc51cb has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCDiscussion() {
		return Base.has(this.model, this.getResource(), DISCUSSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23dc51cb has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCDiscussion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DISCUSSION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23dc51cb has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCDiscussion( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DISCUSSION, value);
	}

     /**
     * Get all values of property Discussion as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCDiscussion_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, DISCUSSION);
	}
	
    /**
     * Get all values of property Discussion as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCDiscussion_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DISCUSSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Discussion as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCDiscussion_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DISCUSSION);
	}

    /**
     * Get all values of property Discussion as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCDiscussion_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DISCUSSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Discussion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSIOCDiscussion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, DISCUSSION, Thing.class);
	}
	
    /**
     * Get all values of property Discussion as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSIOCDiscussion_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, DISCUSSION, Thing.class);
	}

    /**
     * Get all values of property Discussion     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSIOCDiscussion() {
		return Base.getAll(this.model, this.getResource(), DISCUSSION, Thing.class);
	}

    /**
     * Get all values of property Discussion as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSIOCDiscussion_as() {
		return Base.getAll_as(this.model, this.getResource(), DISCUSSION, Thing.class);
	}
 
    /**
     * Adds a value to property Discussion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCDiscussion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, DISCUSSION, value);
	}
	
    /**
     * Adds a value to property Discussion as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCDiscussion( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), DISCUSSION, value);
	}
    /**
     * Adds a value to property Discussion from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCDiscussion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, DISCUSSION, value);
	}
	
    /**
     * Adds a value to property Discussion from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCDiscussion(Thing value) {
		Base.add(this.model, this.getResource(), DISCUSSION, value);
	}
  

    /**
     * Sets a value of property Discussion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCDiscussion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, DISCUSSION, value);
	}
	
    /**
     * Sets a value of property Discussion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCDiscussion( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), DISCUSSION, value);
	}
    /**
     * Sets a value of property Discussion from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCDiscussion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, DISCUSSION, value);
	}
	
    /**
     * Sets a value of property Discussion from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCDiscussion(Thing value) {
		Base.set(this.model, this.getResource(), DISCUSSION, value);
	}
  


    /**
     * Removes a value of property Discussion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCDiscussion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, DISCUSSION, value);
	}
	
    /**
     * Removes a value of property Discussion as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCDiscussion( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), DISCUSSION, value);
	}
    /**
     * Removes a value of property Discussion given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCDiscussion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, DISCUSSION, value);
	}
	
    /**
     * Removes a value of property Discussion given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCDiscussion(Thing value) {
		Base.remove(this.model, this.getResource(), DISCUSSION, value);
	}
  
    /**
     * Removes all values of property Discussion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCDiscussion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, DISCUSSION);
	}
	
    /**
     * Removes all values of property Discussion	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCDiscussion() {
		Base.removeAll(this.model, this.getResource(), DISCUSSION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12911b4f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCEarlierversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EARLIERVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12911b4f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCEarlierversion() {
		return Base.has(this.model, this.getResource(), EARLIERVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12911b4f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCEarlierversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EARLIERVERSION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12911b4f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCEarlierversion( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EARLIERVERSION, value);
	}

     /**
     * Get all values of property Earlierversion as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCEarlierversion_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EARLIERVERSION);
	}
	
    /**
     * Get all values of property Earlierversion as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCEarlierversion_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EARLIERVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Earlierversion as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCEarlierversion_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EARLIERVERSION);
	}

    /**
     * Get all values of property Earlierversion as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCEarlierversion_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EARLIERVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Earlierversion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Item> getAllSIOCEarlierversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EARLIERVERSION, Item.class);
	}
	
    /**
     * Get all values of property Earlierversion as a ReactorResult of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Item> getAllSIOCEarlierversion_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EARLIERVERSION, Item.class);
	}

    /**
     * Get all values of property Earlierversion     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Item> getAllSIOCEarlierversion() {
		return Base.getAll(this.model, this.getResource(), EARLIERVERSION, Item.class);
	}

    /**
     * Get all values of property Earlierversion as a ReactorResult of Item 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Item> getAllSIOCEarlierversion_as() {
		return Base.getAll_as(this.model, this.getResource(), EARLIERVERSION, Item.class);
	}
 
    /**
     * Adds a value to property Earlierversion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCEarlierversion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EARLIERVERSION, value);
	}
	
    /**
     * Adds a value to property Earlierversion as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCEarlierversion( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EARLIERVERSION, value);
	}
    /**
     * Adds a value to property Earlierversion from an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCEarlierversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.add(model, instanceResource, EARLIERVERSION, value);
	}
	
    /**
     * Adds a value to property Earlierversion from an instance of Item 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCEarlierversion(Item value) {
		Base.add(this.model, this.getResource(), EARLIERVERSION, value);
	}
  

    /**
     * Sets a value of property Earlierversion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCEarlierversion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EARLIERVERSION, value);
	}
	
    /**
     * Sets a value of property Earlierversion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCEarlierversion( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EARLIERVERSION, value);
	}
    /**
     * Sets a value of property Earlierversion from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCEarlierversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.set(model, instanceResource, EARLIERVERSION, value);
	}
	
    /**
     * Sets a value of property Earlierversion from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCEarlierversion(Item value) {
		Base.set(this.model, this.getResource(), EARLIERVERSION, value);
	}
  


    /**
     * Removes a value of property Earlierversion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCEarlierversion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EARLIERVERSION, value);
	}
	
    /**
     * Removes a value of property Earlierversion as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCEarlierversion( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EARLIERVERSION, value);
	}
    /**
     * Removes a value of property Earlierversion given as an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCEarlierversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.remove(model, instanceResource, EARLIERVERSION, value);
	}
	
    /**
     * Removes a value of property Earlierversion given as an instance of Item 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCEarlierversion(Item value) {
		Base.remove(this.model, this.getResource(), EARLIERVERSION, value);
	}
  
    /**
     * Removes all values of property Earlierversion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCEarlierversion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EARLIERVERSION);
	}
	
    /**
     * Removes all values of property Earlierversion	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCEarlierversion() {
		Base.removeAll(this.model, this.getResource(), EARLIERVERSION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2bce05fc has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCEmbedsknowledge(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EMBEDSKNOWLEDGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2bce05fc has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCEmbedsknowledge() {
		return Base.has(this.model, this.getResource(), EMBEDSKNOWLEDGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2bce05fc has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCEmbedsknowledge(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EMBEDSKNOWLEDGE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2bce05fc has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCEmbedsknowledge( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EMBEDSKNOWLEDGE, value);
	}

     /**
     * Get all values of property Embedsknowledge as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCEmbedsknowledge_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EMBEDSKNOWLEDGE);
	}
	
    /**
     * Get all values of property Embedsknowledge as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCEmbedsknowledge_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EMBEDSKNOWLEDGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Embedsknowledge as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCEmbedsknowledge_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EMBEDSKNOWLEDGE);
	}

    /**
     * Get all values of property Embedsknowledge as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCEmbedsknowledge_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EMBEDSKNOWLEDGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Embedsknowledge     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Graph> getAllSIOCEmbedsknowledge(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EMBEDSKNOWLEDGE, Graph.class);
	}
	
    /**
     * Get all values of property Embedsknowledge as a ReactorResult of Graph 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Graph> getAllSIOCEmbedsknowledge_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EMBEDSKNOWLEDGE, Graph.class);
	}

    /**
     * Get all values of property Embedsknowledge     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Graph> getAllSIOCEmbedsknowledge() {
		return Base.getAll(this.model, this.getResource(), EMBEDSKNOWLEDGE, Graph.class);
	}

    /**
     * Get all values of property Embedsknowledge as a ReactorResult of Graph 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Graph> getAllSIOCEmbedsknowledge_as() {
		return Base.getAll_as(this.model, this.getResource(), EMBEDSKNOWLEDGE, Graph.class);
	}
 
    /**
     * Adds a value to property Embedsknowledge as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCEmbedsknowledge( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EMBEDSKNOWLEDGE, value);
	}
	
    /**
     * Adds a value to property Embedsknowledge as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCEmbedsknowledge( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EMBEDSKNOWLEDGE, value);
	}
    /**
     * Adds a value to property Embedsknowledge from an instance of Graph 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCEmbedsknowledge(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Graph value) {
		Base.add(model, instanceResource, EMBEDSKNOWLEDGE, value);
	}
	
    /**
     * Adds a value to property Embedsknowledge from an instance of Graph 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCEmbedsknowledge(Graph value) {
		Base.add(this.model, this.getResource(), EMBEDSKNOWLEDGE, value);
	}
  

    /**
     * Sets a value of property Embedsknowledge from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCEmbedsknowledge( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EMBEDSKNOWLEDGE, value);
	}
	
    /**
     * Sets a value of property Embedsknowledge from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCEmbedsknowledge( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EMBEDSKNOWLEDGE, value);
	}
    /**
     * Sets a value of property Embedsknowledge from an instance of Graph 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCEmbedsknowledge(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Graph value) {
		Base.set(model, instanceResource, EMBEDSKNOWLEDGE, value);
	}
	
    /**
     * Sets a value of property Embedsknowledge from an instance of Graph 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCEmbedsknowledge(Graph value) {
		Base.set(this.model, this.getResource(), EMBEDSKNOWLEDGE, value);
	}
  


    /**
     * Removes a value of property Embedsknowledge as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCEmbedsknowledge( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EMBEDSKNOWLEDGE, value);
	}
	
    /**
     * Removes a value of property Embedsknowledge as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCEmbedsknowledge( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EMBEDSKNOWLEDGE, value);
	}
    /**
     * Removes a value of property Embedsknowledge given as an instance of Graph 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCEmbedsknowledge(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Graph value) {
		Base.remove(model, instanceResource, EMBEDSKNOWLEDGE, value);
	}
	
    /**
     * Removes a value of property Embedsknowledge given as an instance of Graph 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCEmbedsknowledge(Graph value) {
		Base.remove(this.model, this.getResource(), EMBEDSKNOWLEDGE, value);
	}
  
    /**
     * Removes all values of property Embedsknowledge     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCEmbedsknowledge( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EMBEDSKNOWLEDGE);
	}
	
    /**
     * Removes all values of property Embedsknowledge	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCEmbedsknowledge() {
		Base.removeAll(this.model, this.getResource(), EMBEDSKNOWLEDGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4792cf37 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCIpaddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, IPADDRESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4792cf37 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCIpaddress() {
		return Base.has(this.model, this.getResource(), IPADDRESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4792cf37 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCIpaddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, IPADDRESS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4792cf37 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCIpaddress( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), IPADDRESS, value);
	}

     /**
     * Get all values of property Ipaddress as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCIpaddress_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, IPADDRESS);
	}
	
    /**
     * Get all values of property Ipaddress as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCIpaddress_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IPADDRESS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Ipaddress as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCIpaddress_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), IPADDRESS);
	}

    /**
     * Get all values of property Ipaddress as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCIpaddress_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), IPADDRESS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Ipaddress     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllSIOCIpaddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, IPADDRESS, java.lang.String.class);
	}
	
    /**
     * Get all values of property Ipaddress as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllSIOCIpaddress_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, IPADDRESS, java.lang.String.class);
	}

    /**
     * Get all values of property Ipaddress     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllSIOCIpaddress() {
		return Base.getAll(this.model, this.getResource(), IPADDRESS, java.lang.String.class);
	}

    /**
     * Get all values of property Ipaddress as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllSIOCIpaddress_as() {
		return Base.getAll_as(this.model, this.getResource(), IPADDRESS, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Ipaddress as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCIpaddress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, IPADDRESS, value);
	}
	
    /**
     * Adds a value to property Ipaddress as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCIpaddress( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), IPADDRESS, value);
	}
    /**
     * Adds a value to property Ipaddress from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCIpaddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, IPADDRESS, value);
	}
	
    /**
     * Adds a value to property Ipaddress from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCIpaddress(java.lang.String value) {
		Base.add(this.model, this.getResource(), IPADDRESS, value);
	}
  

    /**
     * Sets a value of property Ipaddress from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCIpaddress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, IPADDRESS, value);
	}
	
    /**
     * Sets a value of property Ipaddress from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCIpaddress( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), IPADDRESS, value);
	}
    /**
     * Sets a value of property Ipaddress from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCIpaddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, IPADDRESS, value);
	}
	
    /**
     * Sets a value of property Ipaddress from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCIpaddress(java.lang.String value) {
		Base.set(this.model, this.getResource(), IPADDRESS, value);
	}
  


    /**
     * Removes a value of property Ipaddress as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCIpaddress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, IPADDRESS, value);
	}
	
    /**
     * Removes a value of property Ipaddress as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCIpaddress( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), IPADDRESS, value);
	}
    /**
     * Removes a value of property Ipaddress given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCIpaddress(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, IPADDRESS, value);
	}
	
    /**
     * Removes a value of property Ipaddress given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCIpaddress(java.lang.String value) {
		Base.remove(this.model, this.getResource(), IPADDRESS, value);
	}
  
    /**
     * Removes all values of property Ipaddress     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCIpaddress( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, IPADDRESS);
	}
	
    /**
     * Removes all values of property Ipaddress	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCIpaddress() {
		Base.removeAll(this.model, this.getResource(), IPADDRESS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f9e0e7b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCLaterversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LATERVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f9e0e7b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCLaterversion() {
		return Base.has(this.model, this.getResource(), LATERVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f9e0e7b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCLaterversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LATERVERSION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f9e0e7b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCLaterversion( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LATERVERSION, value);
	}

     /**
     * Get all values of property Laterversion as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCLaterversion_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LATERVERSION);
	}
	
    /**
     * Get all values of property Laterversion as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCLaterversion_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LATERVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Laterversion as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCLaterversion_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LATERVERSION);
	}

    /**
     * Get all values of property Laterversion as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCLaterversion_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LATERVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Laterversion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Item> getAllSIOCLaterversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LATERVERSION, Item.class);
	}
	
    /**
     * Get all values of property Laterversion as a ReactorResult of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Item> getAllSIOCLaterversion_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LATERVERSION, Item.class);
	}

    /**
     * Get all values of property Laterversion     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Item> getAllSIOCLaterversion() {
		return Base.getAll(this.model, this.getResource(), LATERVERSION, Item.class);
	}

    /**
     * Get all values of property Laterversion as a ReactorResult of Item 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Item> getAllSIOCLaterversion_as() {
		return Base.getAll_as(this.model, this.getResource(), LATERVERSION, Item.class);
	}
 
    /**
     * Adds a value to property Laterversion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCLaterversion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LATERVERSION, value);
	}
	
    /**
     * Adds a value to property Laterversion as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCLaterversion( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LATERVERSION, value);
	}
    /**
     * Adds a value to property Laterversion from an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCLaterversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.add(model, instanceResource, LATERVERSION, value);
	}
	
    /**
     * Adds a value to property Laterversion from an instance of Item 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCLaterversion(Item value) {
		Base.add(this.model, this.getResource(), LATERVERSION, value);
	}
  

    /**
     * Sets a value of property Laterversion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCLaterversion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LATERVERSION, value);
	}
	
    /**
     * Sets a value of property Laterversion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCLaterversion( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LATERVERSION, value);
	}
    /**
     * Sets a value of property Laterversion from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCLaterversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.set(model, instanceResource, LATERVERSION, value);
	}
	
    /**
     * Sets a value of property Laterversion from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCLaterversion(Item value) {
		Base.set(this.model, this.getResource(), LATERVERSION, value);
	}
  


    /**
     * Removes a value of property Laterversion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCLaterversion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LATERVERSION, value);
	}
	
    /**
     * Removes a value of property Laterversion as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCLaterversion( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LATERVERSION, value);
	}
    /**
     * Removes a value of property Laterversion given as an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCLaterversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.remove(model, instanceResource, LATERVERSION, value);
	}
	
    /**
     * Removes a value of property Laterversion given as an instance of Item 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCLaterversion(Item value) {
		Base.remove(this.model, this.getResource(), LATERVERSION, value);
	}
  
    /**
     * Removes all values of property Laterversion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCLaterversion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LATERVERSION);
	}
	
    /**
     * Removes all values of property Laterversion	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCLaterversion() {
		Base.removeAll(this.model, this.getResource(), LATERVERSION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@234b74fd has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCLatestversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, LATESTVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@234b74fd has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCLatestversion() {
		return Base.has(this.model, this.getResource(), LATESTVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@234b74fd has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCLatestversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LATESTVERSION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@234b74fd has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCLatestversion( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LATESTVERSION, value);
	}

     /**
     * Get all values of property Latestversion as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCLatestversion_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, LATESTVERSION);
	}
	
    /**
     * Get all values of property Latestversion as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCLatestversion_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LATESTVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Latestversion as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCLatestversion_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LATESTVERSION);
	}

    /**
     * Get all values of property Latestversion as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCLatestversion_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LATESTVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Latestversion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Item> getAllSIOCLatestversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, LATESTVERSION, Item.class);
	}
	
    /**
     * Get all values of property Latestversion as a ReactorResult of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Item> getAllSIOCLatestversion_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, LATESTVERSION, Item.class);
	}

    /**
     * Get all values of property Latestversion     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Item> getAllSIOCLatestversion() {
		return Base.getAll(this.model, this.getResource(), LATESTVERSION, Item.class);
	}

    /**
     * Get all values of property Latestversion as a ReactorResult of Item 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Item> getAllSIOCLatestversion_as() {
		return Base.getAll_as(this.model, this.getResource(), LATESTVERSION, Item.class);
	}
 
    /**
     * Adds a value to property Latestversion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCLatestversion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, LATESTVERSION, value);
	}
	
    /**
     * Adds a value to property Latestversion as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCLatestversion( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), LATESTVERSION, value);
	}
    /**
     * Adds a value to property Latestversion from an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCLatestversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.add(model, instanceResource, LATESTVERSION, value);
	}
	
    /**
     * Adds a value to property Latestversion from an instance of Item 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCLatestversion(Item value) {
		Base.add(this.model, this.getResource(), LATESTVERSION, value);
	}
  

    /**
     * Sets a value of property Latestversion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCLatestversion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, LATESTVERSION, value);
	}
	
    /**
     * Sets a value of property Latestversion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCLatestversion( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), LATESTVERSION, value);
	}
    /**
     * Sets a value of property Latestversion from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCLatestversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.set(model, instanceResource, LATESTVERSION, value);
	}
	
    /**
     * Sets a value of property Latestversion from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCLatestversion(Item value) {
		Base.set(this.model, this.getResource(), LATESTVERSION, value);
	}
  


    /**
     * Removes a value of property Latestversion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCLatestversion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, LATESTVERSION, value);
	}
	
    /**
     * Removes a value of property Latestversion as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCLatestversion( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), LATESTVERSION, value);
	}
    /**
     * Removes a value of property Latestversion given as an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCLatestversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.remove(model, instanceResource, LATESTVERSION, value);
	}
	
    /**
     * Removes a value of property Latestversion given as an instance of Item 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCLatestversion(Item value) {
		Base.remove(this.model, this.getResource(), LATESTVERSION, value);
	}
  
    /**
     * Removes all values of property Latestversion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCLatestversion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, LATESTVERSION);
	}
	
    /**
     * Removes all values of property Latestversion	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCLatestversion() {
		Base.removeAll(this.model, this.getResource(), LATESTVERSION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d1fa1ed has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCModifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MODIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d1fa1ed has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCModifier() {
		return Base.has(this.model, this.getResource(), MODIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d1fa1ed has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCModifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MODIFIER, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d1fa1ed has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCModifier( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MODIFIER, value);
	}

     /**
     * Get all values of property Modifier as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCModifier_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MODIFIER);
	}
	
    /**
     * Get all values of property Modifier as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCModifier_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MODIFIER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Modifier as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCModifier_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MODIFIER);
	}

    /**
     * Get all values of property Modifier as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCModifier_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MODIFIER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Modifier     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<UserAccount> getAllSIOCModifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MODIFIER, UserAccount.class);
	}
	
    /**
     * Get all values of property Modifier as a ReactorResult of UserAccount 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<UserAccount> getAllSIOCModifier_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MODIFIER, UserAccount.class);
	}

    /**
     * Get all values of property Modifier     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<UserAccount> getAllSIOCModifier() {
		return Base.getAll(this.model, this.getResource(), MODIFIER, UserAccount.class);
	}

    /**
     * Get all values of property Modifier as a ReactorResult of UserAccount 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<UserAccount> getAllSIOCModifier_as() {
		return Base.getAll_as(this.model, this.getResource(), MODIFIER, UserAccount.class);
	}
 
    /**
     * Adds a value to property Modifier as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCModifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MODIFIER, value);
	}
	
    /**
     * Adds a value to property Modifier as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCModifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MODIFIER, value);
	}
    /**
     * Adds a value to property Modifier from an instance of UserAccount 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCModifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, UserAccount value) {
		Base.add(model, instanceResource, MODIFIER, value);
	}
	
    /**
     * Adds a value to property Modifier from an instance of UserAccount 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCModifier(UserAccount value) {
		Base.add(this.model, this.getResource(), MODIFIER, value);
	}
  

    /**
     * Sets a value of property Modifier from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCModifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MODIFIER, value);
	}
	
    /**
     * Sets a value of property Modifier from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCModifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MODIFIER, value);
	}
    /**
     * Sets a value of property Modifier from an instance of UserAccount 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCModifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, UserAccount value) {
		Base.set(model, instanceResource, MODIFIER, value);
	}
	
    /**
     * Sets a value of property Modifier from an instance of UserAccount 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCModifier(UserAccount value) {
		Base.set(this.model, this.getResource(), MODIFIER, value);
	}
  


    /**
     * Removes a value of property Modifier as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCModifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MODIFIER, value);
	}
	
    /**
     * Removes a value of property Modifier as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCModifier( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MODIFIER, value);
	}
    /**
     * Removes a value of property Modifier given as an instance of UserAccount 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCModifier(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, UserAccount value) {
		Base.remove(model, instanceResource, MODIFIER, value);
	}
	
    /**
     * Removes a value of property Modifier given as an instance of UserAccount 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCModifier(UserAccount value) {
		Base.remove(this.model, this.getResource(), MODIFIER, value);
	}
  
    /**
     * Removes all values of property Modifier     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCModifier( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MODIFIER);
	}
	
    /**
     * Removes all values of property Modifier	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCModifier() {
		Base.removeAll(this.model, this.getResource(), MODIFIER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23541e79 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCNextbydate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NEXTBYDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23541e79 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCNextbydate() {
		return Base.has(this.model, this.getResource(), NEXTBYDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23541e79 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCNextbydate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NEXTBYDATE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23541e79 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCNextbydate( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NEXTBYDATE, value);
	}

     /**
     * Get all values of property Nextbydate as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCNextbydate_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NEXTBYDATE);
	}
	
    /**
     * Get all values of property Nextbydate as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCNextbydate_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NEXTBYDATE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Nextbydate as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCNextbydate_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NEXTBYDATE);
	}

    /**
     * Get all values of property Nextbydate as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCNextbydate_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NEXTBYDATE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Nextbydate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Item> getAllSIOCNextbydate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NEXTBYDATE, Item.class);
	}
	
    /**
     * Get all values of property Nextbydate as a ReactorResult of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Item> getAllSIOCNextbydate_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NEXTBYDATE, Item.class);
	}

    /**
     * Get all values of property Nextbydate     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Item> getAllSIOCNextbydate() {
		return Base.getAll(this.model, this.getResource(), NEXTBYDATE, Item.class);
	}

    /**
     * Get all values of property Nextbydate as a ReactorResult of Item 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Item> getAllSIOCNextbydate_as() {
		return Base.getAll_as(this.model, this.getResource(), NEXTBYDATE, Item.class);
	}
 
    /**
     * Adds a value to property Nextbydate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCNextbydate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NEXTBYDATE, value);
	}
	
    /**
     * Adds a value to property Nextbydate as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCNextbydate( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NEXTBYDATE, value);
	}
    /**
     * Adds a value to property Nextbydate from an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCNextbydate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.add(model, instanceResource, NEXTBYDATE, value);
	}
	
    /**
     * Adds a value to property Nextbydate from an instance of Item 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCNextbydate(Item value) {
		Base.add(this.model, this.getResource(), NEXTBYDATE, value);
	}
  

    /**
     * Sets a value of property Nextbydate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCNextbydate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NEXTBYDATE, value);
	}
	
    /**
     * Sets a value of property Nextbydate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCNextbydate( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NEXTBYDATE, value);
	}
    /**
     * Sets a value of property Nextbydate from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCNextbydate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.set(model, instanceResource, NEXTBYDATE, value);
	}
	
    /**
     * Sets a value of property Nextbydate from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCNextbydate(Item value) {
		Base.set(this.model, this.getResource(), NEXTBYDATE, value);
	}
  


    /**
     * Removes a value of property Nextbydate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCNextbydate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NEXTBYDATE, value);
	}
	
    /**
     * Removes a value of property Nextbydate as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCNextbydate( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NEXTBYDATE, value);
	}
    /**
     * Removes a value of property Nextbydate given as an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCNextbydate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.remove(model, instanceResource, NEXTBYDATE, value);
	}
	
    /**
     * Removes a value of property Nextbydate given as an instance of Item 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCNextbydate(Item value) {
		Base.remove(this.model, this.getResource(), NEXTBYDATE, value);
	}
  
    /**
     * Removes all values of property Nextbydate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCNextbydate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NEXTBYDATE);
	}
	
    /**
     * Removes all values of property Nextbydate	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCNextbydate() {
		Base.removeAll(this.model, this.getResource(), NEXTBYDATE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5629fbc9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCNextversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, NEXTVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5629fbc9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCNextversion() {
		return Base.has(this.model, this.getResource(), NEXTVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5629fbc9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCNextversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NEXTVERSION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5629fbc9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCNextversion( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NEXTVERSION, value);
	}

     /**
     * Get all values of property Nextversion as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCNextversion_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, NEXTVERSION);
	}
	
    /**
     * Get all values of property Nextversion as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCNextversion_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NEXTVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Nextversion as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCNextversion_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NEXTVERSION);
	}

    /**
     * Get all values of property Nextversion as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCNextversion_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NEXTVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Nextversion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Item> getAllSIOCNextversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, NEXTVERSION, Item.class);
	}
	
    /**
     * Get all values of property Nextversion as a ReactorResult of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Item> getAllSIOCNextversion_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, NEXTVERSION, Item.class);
	}

    /**
     * Get all values of property Nextversion     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Item> getAllSIOCNextversion() {
		return Base.getAll(this.model, this.getResource(), NEXTVERSION, Item.class);
	}

    /**
     * Get all values of property Nextversion as a ReactorResult of Item 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Item> getAllSIOCNextversion_as() {
		return Base.getAll_as(this.model, this.getResource(), NEXTVERSION, Item.class);
	}
 
    /**
     * Adds a value to property Nextversion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCNextversion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, NEXTVERSION, value);
	}
	
    /**
     * Adds a value to property Nextversion as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCNextversion( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), NEXTVERSION, value);
	}
    /**
     * Adds a value to property Nextversion from an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCNextversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.add(model, instanceResource, NEXTVERSION, value);
	}
	
    /**
     * Adds a value to property Nextversion from an instance of Item 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCNextversion(Item value) {
		Base.add(this.model, this.getResource(), NEXTVERSION, value);
	}
  

    /**
     * Sets a value of property Nextversion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCNextversion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, NEXTVERSION, value);
	}
	
    /**
     * Sets a value of property Nextversion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCNextversion( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), NEXTVERSION, value);
	}
    /**
     * Sets a value of property Nextversion from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCNextversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.set(model, instanceResource, NEXTVERSION, value);
	}
	
    /**
     * Sets a value of property Nextversion from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCNextversion(Item value) {
		Base.set(this.model, this.getResource(), NEXTVERSION, value);
	}
  


    /**
     * Removes a value of property Nextversion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCNextversion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, NEXTVERSION, value);
	}
	
    /**
     * Removes a value of property Nextversion as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCNextversion( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), NEXTVERSION, value);
	}
    /**
     * Removes a value of property Nextversion given as an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCNextversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.remove(model, instanceResource, NEXTVERSION, value);
	}
	
    /**
     * Removes a value of property Nextversion given as an instance of Item 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCNextversion(Item value) {
		Base.remove(this.model, this.getResource(), NEXTVERSION, value);
	}
  
    /**
     * Removes all values of property Nextversion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCNextversion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, NEXTVERSION);
	}
	
    /**
     * Removes all values of property Nextversion	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCNextversion() {
		Base.removeAll(this.model, this.getResource(), NEXTVERSION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@90f2b4a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCPreviousbydate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PREVIOUSBYDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@90f2b4a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCPreviousbydate() {
		return Base.has(this.model, this.getResource(), PREVIOUSBYDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@90f2b4a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCPreviousbydate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PREVIOUSBYDATE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@90f2b4a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCPreviousbydate( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PREVIOUSBYDATE, value);
	}

     /**
     * Get all values of property Previousbydate as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCPreviousbydate_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PREVIOUSBYDATE);
	}
	
    /**
     * Get all values of property Previousbydate as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCPreviousbydate_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PREVIOUSBYDATE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Previousbydate as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCPreviousbydate_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PREVIOUSBYDATE);
	}

    /**
     * Get all values of property Previousbydate as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCPreviousbydate_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PREVIOUSBYDATE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Previousbydate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Item> getAllSIOCPreviousbydate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PREVIOUSBYDATE, Item.class);
	}
	
    /**
     * Get all values of property Previousbydate as a ReactorResult of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Item> getAllSIOCPreviousbydate_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PREVIOUSBYDATE, Item.class);
	}

    /**
     * Get all values of property Previousbydate     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Item> getAllSIOCPreviousbydate() {
		return Base.getAll(this.model, this.getResource(), PREVIOUSBYDATE, Item.class);
	}

    /**
     * Get all values of property Previousbydate as a ReactorResult of Item 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Item> getAllSIOCPreviousbydate_as() {
		return Base.getAll_as(this.model, this.getResource(), PREVIOUSBYDATE, Item.class);
	}
 
    /**
     * Adds a value to property Previousbydate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCPreviousbydate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PREVIOUSBYDATE, value);
	}
	
    /**
     * Adds a value to property Previousbydate as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCPreviousbydate( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PREVIOUSBYDATE, value);
	}
    /**
     * Adds a value to property Previousbydate from an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCPreviousbydate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.add(model, instanceResource, PREVIOUSBYDATE, value);
	}
	
    /**
     * Adds a value to property Previousbydate from an instance of Item 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCPreviousbydate(Item value) {
		Base.add(this.model, this.getResource(), PREVIOUSBYDATE, value);
	}
  

    /**
     * Sets a value of property Previousbydate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCPreviousbydate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PREVIOUSBYDATE, value);
	}
	
    /**
     * Sets a value of property Previousbydate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCPreviousbydate( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PREVIOUSBYDATE, value);
	}
    /**
     * Sets a value of property Previousbydate from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCPreviousbydate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.set(model, instanceResource, PREVIOUSBYDATE, value);
	}
	
    /**
     * Sets a value of property Previousbydate from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCPreviousbydate(Item value) {
		Base.set(this.model, this.getResource(), PREVIOUSBYDATE, value);
	}
  


    /**
     * Removes a value of property Previousbydate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCPreviousbydate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PREVIOUSBYDATE, value);
	}
	
    /**
     * Removes a value of property Previousbydate as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCPreviousbydate( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PREVIOUSBYDATE, value);
	}
    /**
     * Removes a value of property Previousbydate given as an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCPreviousbydate(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.remove(model, instanceResource, PREVIOUSBYDATE, value);
	}
	
    /**
     * Removes a value of property Previousbydate given as an instance of Item 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCPreviousbydate(Item value) {
		Base.remove(this.model, this.getResource(), PREVIOUSBYDATE, value);
	}
  
    /**
     * Removes all values of property Previousbydate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCPreviousbydate( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PREVIOUSBYDATE);
	}
	
    /**
     * Removes all values of property Previousbydate	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCPreviousbydate() {
		Base.removeAll(this.model, this.getResource(), PREVIOUSBYDATE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@39f46204 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCPreviousversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, PREVIOUSVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@39f46204 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCPreviousversion() {
		return Base.has(this.model, this.getResource(), PREVIOUSVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@39f46204 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCPreviousversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PREVIOUSVERSION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@39f46204 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCPreviousversion( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PREVIOUSVERSION, value);
	}

     /**
     * Get all values of property Previousversion as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCPreviousversion_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, PREVIOUSVERSION);
	}
	
    /**
     * Get all values of property Previousversion as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCPreviousversion_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PREVIOUSVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Previousversion as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCPreviousversion_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PREVIOUSVERSION);
	}

    /**
     * Get all values of property Previousversion as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCPreviousversion_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PREVIOUSVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Previousversion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Item> getAllSIOCPreviousversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, PREVIOUSVERSION, Item.class);
	}
	
    /**
     * Get all values of property Previousversion as a ReactorResult of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Item> getAllSIOCPreviousversion_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, PREVIOUSVERSION, Item.class);
	}

    /**
     * Get all values of property Previousversion     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Item> getAllSIOCPreviousversion() {
		return Base.getAll(this.model, this.getResource(), PREVIOUSVERSION, Item.class);
	}

    /**
     * Get all values of property Previousversion as a ReactorResult of Item 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Item> getAllSIOCPreviousversion_as() {
		return Base.getAll_as(this.model, this.getResource(), PREVIOUSVERSION, Item.class);
	}
 
    /**
     * Adds a value to property Previousversion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCPreviousversion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, PREVIOUSVERSION, value);
	}
	
    /**
     * Adds a value to property Previousversion as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCPreviousversion( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), PREVIOUSVERSION, value);
	}
    /**
     * Adds a value to property Previousversion from an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCPreviousversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.add(model, instanceResource, PREVIOUSVERSION, value);
	}
	
    /**
     * Adds a value to property Previousversion from an instance of Item 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCPreviousversion(Item value) {
		Base.add(this.model, this.getResource(), PREVIOUSVERSION, value);
	}
  

    /**
     * Sets a value of property Previousversion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCPreviousversion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, PREVIOUSVERSION, value);
	}
	
    /**
     * Sets a value of property Previousversion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCPreviousversion( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), PREVIOUSVERSION, value);
	}
    /**
     * Sets a value of property Previousversion from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCPreviousversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.set(model, instanceResource, PREVIOUSVERSION, value);
	}
	
    /**
     * Sets a value of property Previousversion from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCPreviousversion(Item value) {
		Base.set(this.model, this.getResource(), PREVIOUSVERSION, value);
	}
  


    /**
     * Removes a value of property Previousversion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCPreviousversion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, PREVIOUSVERSION, value);
	}
	
    /**
     * Removes a value of property Previousversion as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCPreviousversion( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), PREVIOUSVERSION, value);
	}
    /**
     * Removes a value of property Previousversion given as an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCPreviousversion(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.remove(model, instanceResource, PREVIOUSVERSION, value);
	}
	
    /**
     * Removes a value of property Previousversion given as an instance of Item 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCPreviousversion(Item value) {
		Base.remove(this.model, this.getResource(), PREVIOUSVERSION, value);
	}
  
    /**
     * Removes all values of property Previousversion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCPreviousversion( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, PREVIOUSVERSION);
	}
	
    /**
     * Removes all values of property Previousversion	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCPreviousversion() {
		Base.removeAll(this.model, this.getResource(), PREVIOUSVERSION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4bdacf2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCReply(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, REPLY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4bdacf2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCReply() {
		return Base.has(this.model, this.getResource(), REPLY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4bdacf2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCReply(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, REPLY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4bdacf2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCReply( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), REPLY, value);
	}

     /**
     * Get all values of property Reply as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCReply_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, REPLY);
	}
	
    /**
     * Get all values of property Reply as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCReply_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REPLY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Reply as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCReply_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), REPLY);
	}

    /**
     * Get all values of property Reply as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCReply_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), REPLY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Reply     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Item> getAllSIOCReply(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, REPLY, Item.class);
	}
	
    /**
     * Get all values of property Reply as a ReactorResult of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Item> getAllSIOCReply_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REPLY, Item.class);
	}

    /**
     * Get all values of property Reply     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Item> getAllSIOCReply() {
		return Base.getAll(this.model, this.getResource(), REPLY, Item.class);
	}

    /**
     * Get all values of property Reply as a ReactorResult of Item 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Item> getAllSIOCReply_as() {
		return Base.getAll_as(this.model, this.getResource(), REPLY, Item.class);
	}
 
    /**
     * Adds a value to property Reply as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCReply( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, REPLY, value);
	}
	
    /**
     * Adds a value to property Reply as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCReply( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), REPLY, value);
	}
    /**
     * Adds a value to property Reply from an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCReply(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.add(model, instanceResource, REPLY, value);
	}
	
    /**
     * Adds a value to property Reply from an instance of Item 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCReply(Item value) {
		Base.add(this.model, this.getResource(), REPLY, value);
	}
  

    /**
     * Sets a value of property Reply from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCReply( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, REPLY, value);
	}
	
    /**
     * Sets a value of property Reply from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCReply( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), REPLY, value);
	}
    /**
     * Sets a value of property Reply from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCReply(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.set(model, instanceResource, REPLY, value);
	}
	
    /**
     * Sets a value of property Reply from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCReply(Item value) {
		Base.set(this.model, this.getResource(), REPLY, value);
	}
  


    /**
     * Removes a value of property Reply as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCReply( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, REPLY, value);
	}
	
    /**
     * Removes a value of property Reply as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCReply( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), REPLY, value);
	}
    /**
     * Removes a value of property Reply given as an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCReply(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.remove(model, instanceResource, REPLY, value);
	}
	
    /**
     * Removes a value of property Reply given as an instance of Item 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCReply(Item value) {
		Base.remove(this.model, this.getResource(), REPLY, value);
	}
  
    /**
     * Removes all values of property Reply     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCReply( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, REPLY);
	}
	
    /**
     * Removes all values of property Reply	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCReply() {
		Base.removeAll(this.model, this.getResource(), REPLY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2fb8c90 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCReplyof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, REPLYOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2fb8c90 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCReplyof() {
		return Base.has(this.model, this.getResource(), REPLYOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2fb8c90 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCReplyof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, REPLYOF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2fb8c90 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCReplyof( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), REPLYOF, value);
	}

     /**
     * Get all values of property Replyof as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCReplyof_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, REPLYOF);
	}
	
    /**
     * Get all values of property Replyof as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCReplyof_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REPLYOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Replyof as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCReplyof_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), REPLYOF);
	}

    /**
     * Get all values of property Replyof as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCReplyof_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), REPLYOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Replyof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Item> getAllSIOCReplyof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, REPLYOF, Item.class);
	}
	
    /**
     * Get all values of property Replyof as a ReactorResult of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Item> getAllSIOCReplyof_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REPLYOF, Item.class);
	}

    /**
     * Get all values of property Replyof     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Item> getAllSIOCReplyof() {
		return Base.getAll(this.model, this.getResource(), REPLYOF, Item.class);
	}

    /**
     * Get all values of property Replyof as a ReactorResult of Item 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Item> getAllSIOCReplyof_as() {
		return Base.getAll_as(this.model, this.getResource(), REPLYOF, Item.class);
	}
 
    /**
     * Adds a value to property Replyof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCReplyof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, REPLYOF, value);
	}
	
    /**
     * Adds a value to property Replyof as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCReplyof( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), REPLYOF, value);
	}
    /**
     * Adds a value to property Replyof from an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCReplyof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.add(model, instanceResource, REPLYOF, value);
	}
	
    /**
     * Adds a value to property Replyof from an instance of Item 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCReplyof(Item value) {
		Base.add(this.model, this.getResource(), REPLYOF, value);
	}
  

    /**
     * Sets a value of property Replyof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCReplyof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, REPLYOF, value);
	}
	
    /**
     * Sets a value of property Replyof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCReplyof( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), REPLYOF, value);
	}
    /**
     * Sets a value of property Replyof from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCReplyof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.set(model, instanceResource, REPLYOF, value);
	}
	
    /**
     * Sets a value of property Replyof from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCReplyof(Item value) {
		Base.set(this.model, this.getResource(), REPLYOF, value);
	}
  


    /**
     * Removes a value of property Replyof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCReplyof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, REPLYOF, value);
	}
	
    /**
     * Removes a value of property Replyof as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCReplyof( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), REPLYOF, value);
	}
    /**
     * Removes a value of property Replyof given as an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCReplyof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.remove(model, instanceResource, REPLYOF, value);
	}
	
    /**
     * Removes a value of property Replyof given as an instance of Item 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCReplyof(Item value) {
		Base.remove(this.model, this.getResource(), REPLYOF, value);
	}
  
    /**
     * Removes all values of property Replyof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCReplyof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, REPLYOF);
	}
	
    /**
     * Removes all values of property Replyof	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCReplyof() {
		Base.removeAll(this.model, this.getResource(), REPLYOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d2f7354 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCSibling(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SIBLING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d2f7354 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCSibling() {
		return Base.has(this.model, this.getResource(), SIBLING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d2f7354 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCSibling(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SIBLING, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d2f7354 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCSibling( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SIBLING, value);
	}

     /**
     * Get all values of property Sibling as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCSibling_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SIBLING);
	}
	
    /**
     * Get all values of property Sibling as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCSibling_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SIBLING, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Sibling as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCSibling_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SIBLING);
	}

    /**
     * Get all values of property Sibling as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCSibling_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SIBLING, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Sibling     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Item> getAllSIOCSibling(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SIBLING, Item.class);
	}
	
    /**
     * Get all values of property Sibling as a ReactorResult of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Item> getAllSIOCSibling_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SIBLING, Item.class);
	}

    /**
     * Get all values of property Sibling     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Item> getAllSIOCSibling() {
		return Base.getAll(this.model, this.getResource(), SIBLING, Item.class);
	}

    /**
     * Get all values of property Sibling as a ReactorResult of Item 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Item> getAllSIOCSibling_as() {
		return Base.getAll_as(this.model, this.getResource(), SIBLING, Item.class);
	}
 
    /**
     * Adds a value to property Sibling as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCSibling( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SIBLING, value);
	}
	
    /**
     * Adds a value to property Sibling as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCSibling( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SIBLING, value);
	}
    /**
     * Adds a value to property Sibling from an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCSibling(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.add(model, instanceResource, SIBLING, value);
	}
	
    /**
     * Adds a value to property Sibling from an instance of Item 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCSibling(Item value) {
		Base.add(this.model, this.getResource(), SIBLING, value);
	}
  

    /**
     * Sets a value of property Sibling from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCSibling( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SIBLING, value);
	}
	
    /**
     * Sets a value of property Sibling from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCSibling( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SIBLING, value);
	}
    /**
     * Sets a value of property Sibling from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCSibling(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.set(model, instanceResource, SIBLING, value);
	}
	
    /**
     * Sets a value of property Sibling from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCSibling(Item value) {
		Base.set(this.model, this.getResource(), SIBLING, value);
	}
  


    /**
     * Removes a value of property Sibling as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCSibling( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SIBLING, value);
	}
	
    /**
     * Removes a value of property Sibling as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCSibling( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SIBLING, value);
	}
    /**
     * Removes a value of property Sibling given as an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCSibling(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.remove(model, instanceResource, SIBLING, value);
	}
	
    /**
     * Removes a value of property Sibling given as an instance of Item 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCSibling(Item value) {
		Base.remove(this.model, this.getResource(), SIBLING, value);
	}
  
    /**
     * Removes all values of property Sibling     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCSibling( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SIBLING);
	}
	
    /**
     * Removes all values of property Sibling	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCSibling() {
		Base.removeAll(this.model, this.getResource(), SIBLING);
	}
 }