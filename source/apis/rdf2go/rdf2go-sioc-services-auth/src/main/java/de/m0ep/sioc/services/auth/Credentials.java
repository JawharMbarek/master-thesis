/*
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1895 2013-02-09 17:39:56Z 
 * max.at.xam.de@gmail.com $) on 8/8/13 12:01 PM
 */

package de.m0ep.sioc.services.auth;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.Resource;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdf2go.vocabulary.RDF;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;
import org.ontoware.rdfreactor.schema.owl.OwlThing;

/**
 * 
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 8/8/13
 * 12:01 PM
 */
public class Credentials extends OwlThing {

    private static final long serialVersionUID = 7308153694617149041L;

    /** http://purl.oclc.org/NET/WebApiAuthentication#Credentials */
    public static final URI RDFS_CLASS = new URIImpl(
            "http://purl.oclc.org/NET/WebApiAuthentication#Credentials", false );

    /**
     * All property-URIs with this class as domain. All properties of all super-classes are also
     * available.
     */
    public static final URI[] MANAGED_URIS = {
            RDF.value
    };

    // protected constructors needed for inheritance

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating two wrappers for the
     * same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.semweb4j.org
     * @param classURI
     *            URI of RDFS class
     * @param instanceIdentifier
     *            Resource that identifies this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to the model
     * 
     *            [Generated from RDFReactor template rule #c1]
     */
    protected Credentials( Model model, URI classURI, Resource instanceIdentifier, boolean write ) {
        super( model, classURI, instanceIdentifier, write );
    }

    // public constructors

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating two wrappers for the
     * same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param instanceIdentifier
     *            an RDF2Go Resource identifying this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to the model
     * 
     *            [Generated from RDFReactor template rule #c2]
     */
    public Credentials( Model model, Resource instanceIdentifier, boolean write ) {
        super( model, RDFS_CLASS, instanceIdentifier, write );
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a URI, given as a String. Creating
     * two wrappers for the same URI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param uriString
     *            a URI given as a String
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to the model
     * @throws ModelRuntimeException
     *             if URI syntax is wrong
     * 
     *             [Generated from RDFReactor template rule #c7]
     */
    public Credentials( Model model, String uriString, boolean write ) throws ModelRuntimeException {
        super( model, RDFS_CLASS, new URIImpl( uriString, false ), write );
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a blank node. Creating two wrappers
     * for the same blank node is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param bnode
     *            BlankNode of this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to the model
     * 
     *            [Generated from RDFReactor template rule #c8]
     */
    public Credentials( Model model, BlankNode bnode, boolean write ) {
        super( model, RDFS_CLASS, bnode, write );
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a randomly generated URI. Creating
     * two wrappers results in different URIs.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to the model
     * 
     *            [Generated from RDFReactor template rule #c9]
     */
    public Credentials( Model model, boolean write ) {
        super( model, RDFS_CLASS, model.newRandomUniqueURI(), write );
    }

    ///////////////////////////////////////////////////////////////////
    // typing

    /**
     * Return an existing instance of this class in the model. No statements are written.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return an instance of Credentials or null if none exists
     * 
     *         [Generated from RDFReactor template rule #class0]
     */
    public static Credentials getInstance( Model model, Resource instanceResource ) {
        return Base.getInstance( model, instanceResource, Credentials.class );
    }

    /**
     * Create a new instance of this class in the model. That is, create the statement
     * (instanceResource, RDF.type, http://purl.oclc.org/NET/WebApiAuthentication#Credentials).
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class1]
     */
    public static void createInstance( Model model, Resource instanceResource ) {
        Base.createInstance( model, RDFS_CLASS, instanceResource );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return true if instanceResource is an instance of this class in the model
     * 
     *         [Generated from RDFReactor template rule #class2]
     */
    public static boolean hasInstance( Model model, Resource instanceResource ) {
        return Base.hasInstance( model, RDFS_CLASS, instanceResource );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @return all instances of this class in Model 'model' as RDF resources
     * 
     *         [Generated from RDFReactor template rule #class3]
     */
    public static ClosableIterator<Resource> getAllInstances( Model model ) {
        return Base.getAllInstances( model, RDFS_CLASS, Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @return all instances of this class in Model 'model' as a ReactorResult, which can
     *         conveniently be converted to iterator, list or array.
     * 
     *         [Generated from RDFReactor template rule #class3-as]
     */
    public static ReactorResult<? extends Credentials> getAllInstances_as( Model model ) {
        return Base.getAllInstances_as( model, RDFS_CLASS, Credentials.class );
    }

    /**
     * Remove triple {@code (this, rdf:type, Credentials)} from this instance. Other triples are not
     * affected. To delete more, use deleteAllProperties
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class4]
     */
    public static void deleteInstance( Model model, Resource instanceResource ) {
        Base.deleteInstance( model, RDFS_CLASS, instanceResource );
    }

    /**
     * Delete all triples {@code (this, *, *)}, i.e. including {@code rdf:type}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class5]
     */
    public static void deleteAllProperties( Model model, Resource instanceResource ) {
        Base.deleteAllProperties( model, instanceResource );
    }

    ///////////////////////////////////////////////////////////////////
    // property access methods

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Credentials' to this Credentials
     *         instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<Resource> getAllCredentials_Inverse( Model model,
            Object objectValue ) {
        return Base.getAll_Inverse( model, AuthenticationMechanism.CREDENTIALS, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Credentials' to this Credentials
     *         instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<Resource> getAllCredentials_Inverse() {
        return Base.getAll_Inverse( this.model, AuthenticationMechanism.CREDENTIALS, this
                .getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Credentials' to this Credentials
     *         instance
     * 
     *         [Generated from RDFReactor template rule #getallInverse-as1static]
     */
    public static ReactorResult<Resource> getAllCredentials_Inverse_as( Model model,
            Object objectValue ) {
        return Base.getAll_Inverse_as( model, AuthenticationMechanism.CREDENTIALS, objectValue,
                Resource.class );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c53a57a has at least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasValue() {
        return Base.has( this.model, this.getResource(), RDF.value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c53a57a has the given value (maybe
     * among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasValue( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, RDF.value, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c53a57a has the given value (maybe
     * among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasValue( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), RDF.value, value );
    }

    /**
     * Get all values of property Value as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllValues_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, RDF.value );
    }

    /**
     * Get all values of property Value as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllValues_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), RDF.value );
    }

    /**
     * Get all values of property Value * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<String> getAllValues( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, RDF.value, String.class );
    }

    /**
     * Get all values of property Value * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<String> getAllValues() {
        return Base.getAll( this.model, this.getResource(), RDF.value,
                String.class );
    }

    /**
     * Get all values of property Value as a ReactorResult of java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or
     *         array
     * 
     *         [Generated from RDFReactor template rule #get12dynamic-reactorresult]
     */
    public String getValue() {
        return Base.getAll_as( this.model, this.getResource(), RDF.value,
                java.lang.String.class ).firstValue();
    }

    /**
     * Adds a value to property Value as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addValue( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, RDF.value, value );
    }

    /**
     * Adds a value to property Value as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addValue( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), RDF.value, value );
    }

    /**
     * Adds a value to property Value from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addValue( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.add( model, instanceResource, RDF.value, value );
    }

    /**
     * Adds a value to property Value from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addValue( java.lang.String value ) {
        Base.add( this.model, this.getResource(), RDF.value, value );
    }

    /**
     * Sets a value of property Value from an RDF2Go node. First, all existing values are removed,
     * then this value is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setValue( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, RDF.value, value );
    }

    /**
     * Sets a value of property Value from an RDF2Go node. First, all existing values are removed,
     * then this value is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setValue( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), RDF.value, value );
    }

    /**
     * Sets a value of property Value from an instance of java.lang.String First, all existing
     * values are removed, then this value is added. Cardinality constraints are not checked, but
     * this method exists only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setValue( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.set( model, instanceResource, RDF.value, value );
    }

    /**
     * Sets a value of property Value from an instance of java.lang.String First, all existing
     * values are removed, then this value is added. Cardinality constraints are not checked, but
     * this method exists only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setValue( java.lang.String value ) {
        Base.set( this.model, this.getResource(), RDF.value, value );
    }

    /**
     * Removes a value of property Value as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeValue( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, RDF.value, value );
    }

    /**
     * Removes a value of property Value as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeValue( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), RDF.value, value );
    }

    /**
     * Removes a value of property Value given as an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeValue( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.remove( model, instanceResource, RDF.value, value );
    }

    /**
     * Removes a value of property Value given as an instance of java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeValue( java.lang.String value ) {
        Base.remove( this.model, this.getResource(), RDF.value, value );
    }

    /**
     * Removes all values of property Value * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllValue( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, RDF.value );
    }

    /**
     * Removes all values of property Value * [Generated from RDFReactor template rule
     * #removeall1dynamic]
     */
    public void removeAllValue() {
        Base.removeAll( this.model, this.getResource(), RDF.value );
    }

}
