/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) on 21.12.12 17:00
 */
package com.xmlns.foaf;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;

/**
 * This class manages access to these properties:
 * <ul>
 * <li>AIMChatID</li>
 * <li>Account</li>
 * <li>Age</li>
 * <li>Birthday</li>
 * <li>Gender</li>
 * <li>HoldsAccount</li>
 * <li>ICQChatID</li>
 * <li>Interest</li>
 * <li>JabberID</li>
 * <li>MSNChatID</li>
 * <li>Made</li>
 * <li>OpenID</li>
 * <li>PersonalMailbox</li>
 * <li>Sha1sumofapersonalmailboxURIname</li>
 * <li>SkypeID</li>
 * <li>Status</li>
 * <li>Tipjar</li>
 * <li>TopicInterest</li>
 * <li>Weblog</li>
 * <li>YahooChatID</li>
 * </ul>
 * 
 * This class was generated by <a
 * href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 21.12.12 17:00
 */
public class Agent extends FOAFThing {

    /**
     * 
     */
    private static final long serialVersionUID = 2207976873398897032L;

    /** http://xmlns.com/foaf/0.1/Agent */
    public static final URI RDFS_CLASS = new URIImpl(
	    "http://xmlns.com/foaf/0.1/Agent", false);

    /** http://xmlns.com/foaf/0.1/aimChatID */
    public static final URI AIMCHATID = new URIImpl(
	    "http://xmlns.com/foaf/0.1/aimChatID", false);

    /** http://xmlns.com/foaf/0.1/account */
    public static final URI ACCOUNT = new URIImpl(
	    "http://xmlns.com/foaf/0.1/account", false);

    /** http://xmlns.com/foaf/0.1/age */
    public static final URI AGE = new URIImpl("http://xmlns.com/foaf/0.1/age",
	    false);

    /** http://xmlns.com/foaf/0.1/birthday */
    public static final URI BIRTHDAY = new URIImpl(
	    "http://xmlns.com/foaf/0.1/birthday", false);

    /** http://xmlns.com/foaf/0.1/gender */
    public static final URI GENDER = new URIImpl(
	    "http://xmlns.com/foaf/0.1/gender", false);

    /** http://xmlns.com/foaf/0.1/holdsAccount */
    public static final URI HOLDSACCOUNT = new URIImpl(
	    "http://xmlns.com/foaf/0.1/holdsAccount", false);

    /** http://xmlns.com/foaf/0.1/icqChatID */
    public static final URI ICQCHATID = new URIImpl(
	    "http://xmlns.com/foaf/0.1/icqChatID", false);

    /** http://xmlns.com/foaf/0.1/interest */
    public static final URI INTEREST = new URIImpl(
	    "http://xmlns.com/foaf/0.1/interest", false);

    /** http://xmlns.com/foaf/0.1/jabberID */
    public static final URI JABBERID = new URIImpl(
	    "http://xmlns.com/foaf/0.1/jabberID", false);

    /** http://xmlns.com/foaf/0.1/msnChatID */
    public static final URI MSNCHATID = new URIImpl(
	    "http://xmlns.com/foaf/0.1/msnChatID", false);

    /** http://xmlns.com/foaf/0.1/made */
    public static final URI MADE = new URIImpl(
	    "http://xmlns.com/foaf/0.1/made", false);

    /** http://xmlns.com/foaf/0.1/openid */
    public static final URI OPENID = new URIImpl(
	    "http://xmlns.com/foaf/0.1/openid", false);

    /** http://xmlns.com/foaf/0.1/mbox */
    public static final URI PERSONALMAILBOX = new URIImpl(
	    "http://xmlns.com/foaf/0.1/mbox", false);

    /** http://xmlns.com/foaf/0.1/mbox_sha1sum */
    public static final URI SHA1SUMOFAPERSONALMAILBOXURINAME = new URIImpl(
	    "http://xmlns.com/foaf/0.1/mbox_sha1sum", false);

    /** http://xmlns.com/foaf/0.1/skypeID */
    public static final URI SKYPEID = new URIImpl(
	    "http://xmlns.com/foaf/0.1/skypeID", false);

    /** http://xmlns.com/foaf/0.1/status */
    public static final URI STATUS = new URIImpl(
	    "http://xmlns.com/foaf/0.1/status", false);

    /** http://xmlns.com/foaf/0.1/tipjar */
    public static final URI TIPJAR = new URIImpl(
	    "http://xmlns.com/foaf/0.1/tipjar", false);

    /** http://xmlns.com/foaf/0.1/topic_interest */
    public static final URI TOPICINTEREST = new URIImpl(
	    "http://xmlns.com/foaf/0.1/topic_interest", false);

    /** http://xmlns.com/foaf/0.1/weblog */
    public static final URI WEBLOG = new URIImpl(
	    "http://xmlns.com/foaf/0.1/weblog", false);

    /** http://xmlns.com/foaf/0.1/yahooChatID */
    public static final URI YAHOOCHATID = new URIImpl(
	    "http://xmlns.com/foaf/0.1/yahooChatID", false);

    /**
     * All property-URIs with this class as domain. All properties of all
     * super-classes are also available.
     */
    public static final URI[] MANAGED_URIS = {
	    new URIImpl("http://xmlns.com/foaf/0.1/aimChatID", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/account", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/age", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/birthday", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/gender", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/holdsAccount", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/icqChatID", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/interest", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/jabberID", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/msnChatID", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/made", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/openid", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/mbox", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/mbox_sha1sum", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/skypeID", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/status", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/tipjar", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/topic_interest", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/weblog", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/yahooChatID", false), };

    // protected constructors needed for inheritance

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.semweb4j.org
     * @param classURI
     *            URI of RDFS class
     * @param instanceIdentifier
     *            Resource that identifies this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c1]
     */
    protected Agent(Model model, URI classURI,
	    org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
	    boolean write) {
	super(model, classURI, instanceIdentifier, write);
    }

    // public constructors

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param instanceIdentifier
     *            an RDF2Go Resource identifying this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c2]
     */
    public Agent(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
	    boolean write) {
	super(model, RDFS_CLASS, instanceIdentifier, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a URI, given as
     * a String. Creating two wrappers for the same URI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param uriString
     *            a URI given as a String
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * @throws ModelRuntimeException
     *             if URI syntax is wrong
     * 
     *             [Generated from RDFReactor template rule #c7]
     */
    public Agent(Model model, String uriString, boolean write)
	    throws ModelRuntimeException {
	super(model, RDFS_CLASS, new URIImpl(uriString, false), write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a blank node.
     * Creating two wrappers for the same blank node is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param bnode
     *            BlankNode of this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c8]
     */
    public Agent(Model model, BlankNode bnode, boolean write) {
	super(model, RDFS_CLASS, bnode, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a randomly
     * generated URI. Creating two wrappers results in different URIs.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c9]
     */
    public Agent(Model model, boolean write) {
	super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
    }

    // /////////////////////////////////////////////////////////////////
    // typing

    /**
     * Return an existing instance of this class in the model. No statements are
     * written.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return an instance of Agent or null if none existst
     * 
     *         [Generated from RDFReactor template rule #class0]
     */
    public static Agent getInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getInstance(model, instanceResource, Agent.class);
    }

    /**
     * Create a new instance of this class in the model. That is, create the
     * statement (instanceResource, RDF.type, http://xmlns.com/foaf/0.1/Agent).
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class1]
     */
    public static void createInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.createInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return true if instanceResource is an instance of this class in the
     *         model
     * 
     *         [Generated from RDFReactor template rule #class2]
     */
    public static boolean hasInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.hasInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @return all instances of this class in Model 'model' as RDF resources
     * 
     *         [Generated from RDFReactor template rule #class3]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(
	    Model model) {
	return Base.getAllInstances(model, RDFS_CLASS,
		org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * Remove rdf:type Agent from this instance. Other triples are not affected.
     * To delete more, use deleteAllProperties
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class4]
     */
    public static void deleteInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.deleteInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * Delete all (this, *, *), i.e. including rdf:type
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     */
    public static void deleteAllProperties(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.deleteAllProperties(model, instanceResource);
    }

    // /////////////////////////////////////////////////////////////////
    // property access methods

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Maker' to this
     *         Agent instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMakers_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, FOAFThing.MAKER, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Maker' to this
     *         Agent instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMakers_Inverse() {
	return Base.getAll_Inverse(this.model, FOAFThing.MAKER,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Member' to this
     *         Agent instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMembers_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Group.MEMBER, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Member' to this
     *         Agent instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMembers_Inverse() {
	return Base
		.getAll_Inverse(this.model, Group.MEMBER, this.getResource());
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5fff4631 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasAIMChatIDs(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, AIMCHATID);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5fff4631 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasAIMChatIDs() {
	return Base.has(this.model, this.getResource(), AIMCHATID);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5fff4631 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasAIMChatID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	return Base.hasValue(model, instanceResource, AIMCHATID, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5fff4631 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasAIMChatID(String value) {
	return Base.hasValue(this.model, this.getResource(), AIMCHATID, value);
    }

    /**
     * Get all values of property AIMChatID as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAIMChatIDs_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, AIMCHATID);
    }

    /**
     * Get all values of property AIMChatID as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAIMChatIDs_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), AIMCHATID);
    }

    /**
     * Get all values of property AIMChatID * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllAIMChatIDs(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, AIMCHATID,
		java.lang.String.class);
    }

    /**
     * Get first value of property AIMChatID as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public String getAIMChatID() {
	return Base.getAll_as(this.model, this.getResource(), AIMCHATID,
		String.class).firstValue();
    }

    /**
     * Get all values of property AIMChatID * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllAIMChatIDs() {
	return Base.getAll(this.model, this.getResource(), AIMCHATID,
		java.lang.String.class);
    }

    /**
     * Adds a value to property AIMChatID as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addAIMChatID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, AIMCHATID, value);
    }

    /**
     * Adds a value to property AIMChatID as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addAIMChatID(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), AIMCHATID, value);
    }

    /**
     * Adds a value to property AIMChatID from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addAIMChatID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, AIMCHATID, value);
    }

    /**
     * Adds a value to property AIMChatID from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addAIMChatID(java.lang.String value) {
	Base.add(this.model, this.getResource(), AIMCHATID, value);
    }

    /**
     * Sets a value of property AIMChatID from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setAIMChatID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, AIMCHATID, value);
    }

    /**
     * Sets a value of property AIMChatID from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setAIMChatID(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), AIMCHATID, value);
    }

    /**
     * Sets a value of property AIMChatID from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setAIMChatID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, AIMCHATID, value);
    }

    /**
     * Sets a value of property AIMChatID from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setAIMChatID(java.lang.String value) {
	Base.set(this.model, this.getResource(), AIMCHATID, value);
    }

    /**
     * Removes a value of property AIMChatID as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeAIMChatID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, AIMCHATID, value);
    }

    /**
     * Removes a value of property AIMChatID as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeAIMChatID(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), AIMCHATID, value);
    }

    /**
     * Removes a value of property AIMChatID given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeAIMChatID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, AIMCHATID, value);
    }

    /**
     * Removes a value of property AIMChatID given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeAIMChatID(java.lang.String value) {
	Base.remove(this.model, this.getResource(), AIMCHATID, value);
    }

    /**
     * Removes all values of property AIMChatID * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllAIMChatIDs(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, AIMCHATID);
    }

    /**
     * Removes all values of property AIMChatID * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllAIMChatIDs() {
	Base.removeAll(this.model, this.getResource(), AIMCHATID);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2354e586 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasAccounts(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, ACCOUNT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2354e586 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasAccounts() {
	return Base.has(this.model, this.getResource(), ACCOUNT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2354e586 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasAccount(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, ACCOUNT, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2354e586 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasAccount(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), ACCOUNT, value);
    }

    /**
     * Get all values of property Account as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAccounts_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, ACCOUNT);
    }

    /**
     * Get all values of property Account as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAccounts_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), ACCOUNT);
    }

    /**
     * Get all values of property Account * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<OnlineAccount> getAllAccounts(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, ACCOUNT,
		OnlineAccount.class);
    }

    /**
     * Get all values of property Account * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<OnlineAccount> getAllAccounts() {
	return Base.getAll(this.model, this.getResource(), ACCOUNT,
		OnlineAccount.class);
    }

    /**
     * Get all values of property Account as a ReactorResult of OnlineAccount
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public OnlineAccount getAccount() {
	return Base.getAll_as(this.model, this.getResource(), ACCOUNT,
		OnlineAccount.class).firstValue();
    }

    /**
     * Adds a value to property Account as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addAccount(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, ACCOUNT, value);
    }

    /**
     * Adds a value to property Account as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addAccount(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), ACCOUNT, value);
    }

    /**
     * Adds a value to property Account from an instance of OnlineAccount
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addAccount(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    OnlineAccount value) {
	Base.add(model, instanceResource, ACCOUNT, value);
    }

    /**
     * Adds a value to property Account from an instance of OnlineAccount
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addAccount(OnlineAccount value) {
	Base.add(this.model, this.getResource(), ACCOUNT, value);
    }

    /**
     * Sets a value of property Account from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setAccount(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, ACCOUNT, value);
    }

    /**
     * Sets a value of property Account from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setAccount(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), ACCOUNT, value);
    }

    /**
     * Sets a value of property Account from an instance of OnlineAccount First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setAccount(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    OnlineAccount value) {
	Base.set(model, instanceResource, ACCOUNT, value);
    }

    /**
     * Sets a value of property Account from an instance of OnlineAccount First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setAccount(OnlineAccount value) {
	Base.set(this.model, this.getResource(), ACCOUNT, value);
    }

    /**
     * Removes a value of property Account as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeAccount(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, ACCOUNT, value);
    }

    /**
     * Removes a value of property Account as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeAccount(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), ACCOUNT, value);
    }

    /**
     * Removes a value of property Account given as an instance of OnlineAccount
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeAccount(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    OnlineAccount value) {
	Base.remove(model, instanceResource, ACCOUNT, value);
    }

    /**
     * Removes a value of property Account given as an instance of OnlineAccount
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeAccount(OnlineAccount value) {
	Base.remove(this.model, this.getResource(), ACCOUNT, value);
    }

    /**
     * Removes all values of property Account * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllAccounts(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, ACCOUNT);
    }

    /**
     * Removes all values of property Account * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllAccounts() {
	Base.removeAll(this.model, this.getResource(), ACCOUNT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1311cccd has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasAge(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, AGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1311cccd has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasAge() {
	return Base.has(this.model, this.getResource(), AGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1311cccd has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasAge(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	return Base.hasValue(model, instanceResource, AGE, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1311cccd has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasAge(String value) {
	return Base.hasValue(this.model, this.getResource(), AGE, value);
    }

    /**
     * Get all values of property Age as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAges_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, AGE);
    }

    /**
     * Get all values of property Age as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAges_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), AGE);
    }

    /**
     * Get all values of property Age * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllAges(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base
		.getAll(model, instanceResource, AGE, java.lang.String.class);
    }

    /**
     * Get all values of property Age * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllAges() {
	return Base.getAll(this.model, this.getResource(), AGE,
		java.lang.String.class);
    }

    /**
     * Get all values of property Age as a ReactorResult of java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getAge() {
	return Base.getAll_as(this.model, this.getResource(), AGE,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property Age as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addAge(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, AGE, value);
    }

    /**
     * Adds a value to property Age as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addAge(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), AGE, value);
    }

    /**
     * Adds a value to property Age from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addAge(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, AGE, value);
    }

    /**
     * Adds a value to property Age from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addAge(java.lang.String value) {
	Base.add(this.model, this.getResource(), AGE, value);
    }

    /**
     * Sets a value of property Age from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setAge(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, AGE, value);
    }

    /**
     * Sets a value of property Age from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setAge(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), AGE, value);
    }

    /**
     * Sets a value of property Age from an instance of java.lang.String First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setAge(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, AGE, value);
    }

    /**
     * Sets a value of property Age from an instance of java.lang.String First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setAge(java.lang.String value) {
	Base.set(this.model, this.getResource(), AGE, value);
    }

    /**
     * Removes a value of property Age as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeAge(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, AGE, value);
    }

    /**
     * Removes a value of property Age as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeAge(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), AGE, value);
    }

    /**
     * Removes a value of property Age given as an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeAge(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, AGE, value);
    }

    /**
     * Removes a value of property Age given as an instance of java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeAge(java.lang.String value) {
	Base.remove(this.model, this.getResource(), AGE, value);
    }

    /**
     * Removes all values of property Age * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllAges(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, AGE);
    }

    /**
     * Removes all values of property Age * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllAges() {
	Base.removeAll(this.model, this.getResource(), AGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@38ae35d has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasBirthday(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, BIRTHDAY);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@38ae35d has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasBirthday() {
	return Base.has(this.model, this.getResource(), BIRTHDAY);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@38ae35d has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasBirthday(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, BIRTHDAY, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@38ae35d has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasBirthday(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), BIRTHDAY, value);
    }

    /**
     * Get all values of property Birthday as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBirthdays_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, BIRTHDAY);
    }

    /**
     * Get all values of property Birthday as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBirthdays_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), BIRTHDAY);
    }

    /**
     * Get all values of property Birthday * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllBirthdays(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, BIRTHDAY,
		java.lang.String.class);
    }

    /**
     * Get all values of property Birthday * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllBirthdays() {
	return Base.getAll(this.model, this.getResource(), BIRTHDAY,
		java.lang.String.class);
    }

    /**
     * Get all values of property Birthday as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getBirthday() {
	return Base.getAll_as(this.model, this.getResource(), BIRTHDAY,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property Birthday as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addBirthday(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, BIRTHDAY, value);
    }

    /**
     * Adds a value to property Birthday as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addBirthday(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), BIRTHDAY, value);
    }

    /**
     * Adds a value to property Birthday from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addBirthday(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, BIRTHDAY, value);
    }

    /**
     * Adds a value to property Birthday from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addBirthday(java.lang.String value) {
	Base.add(this.model, this.getResource(), BIRTHDAY, value);
    }

    /**
     * Sets a value of property Birthday from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setBirthday(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, BIRTHDAY, value);
    }

    /**
     * Sets a value of property Birthday from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setBirthday(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), BIRTHDAY, value);
    }

    /**
     * Sets a value of property Birthday from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setBirthday(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, BIRTHDAY, value);
    }

    /**
     * Sets a value of property Birthday from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setBirthday(java.lang.String value) {
	Base.set(this.model, this.getResource(), BIRTHDAY, value);
    }

    /**
     * Removes a value of property Birthday as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeBirthday(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, BIRTHDAY, value);
    }

    /**
     * Removes a value of property Birthday as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeBirthday(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), BIRTHDAY, value);
    }

    /**
     * Removes a value of property Birthday given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeBirthday(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, BIRTHDAY, value);
    }

    /**
     * Removes a value of property Birthday given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeBirthday(java.lang.String value) {
	Base.remove(this.model, this.getResource(), BIRTHDAY, value);
    }

    /**
     * Removes all values of property Birthday * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllBirthdays(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, BIRTHDAY);
    }

    /**
     * Removes all values of property Birthday * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllBirthdays() {
	Base.removeAll(this.model, this.getResource(), BIRTHDAY);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@154575ea has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasGender(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, GENDER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@154575ea has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasGender() {
	return Base.has(this.model, this.getResource(), GENDER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@154575ea has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasGender(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	return Base.hasValue(model, instanceResource, GENDER, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@154575ea has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasGender(String value) {
	return Base.hasValue(this.model, this.getResource(), GENDER, value);
    }

    /**
     * Get all values of property Gender as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGenders_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, GENDER);
    }

    /**
     * Get all values of property Gender as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGenders_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), GENDER);
    }

    /**
     * Get all values of property Gender * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllGenders(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, GENDER,
		java.lang.String.class);
    }

    /**
     * Get all values of property Gender * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllGenders() {
	return Base.getAll(this.model, this.getResource(), GENDER,
		java.lang.String.class);
    }

    /**
     * Get first values of property Gender as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getGender() {
	return Base.getAll_as(this.model, this.getResource(), GENDER,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property Gender as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addGender(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, GENDER, value);
    }

    /**
     * Adds a value to property Gender as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addGender(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), GENDER, value);
    }

    /**
     * Adds a value to property Gender from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addGender(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, GENDER, value);
    }

    /**
     * Adds a value to property Gender from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addGender(java.lang.String value) {
	Base.add(this.model, this.getResource(), GENDER, value);
    }

    /**
     * Sets a value of property Gender from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setGender(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, GENDER, value);
    }

    /**
     * Sets a value of property Gender from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setGender(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), GENDER, value);
    }

    /**
     * Sets a value of property Gender from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setGender(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, GENDER, value);
    }

    /**
     * Sets a value of property Gender from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setGender(java.lang.String value) {
	Base.set(this.model, this.getResource(), GENDER, value);
    }

    /**
     * Removes a value of property Gender as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeGender(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, GENDER, value);
    }

    /**
     * Removes a value of property Gender as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeGender(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), GENDER, value);
    }

    /**
     * Removes a value of property Gender given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeGender(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, GENDER, value);
    }

    /**
     * Removes a value of property Gender given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeGender(java.lang.String value) {
	Base.remove(this.model, this.getResource(), GENDER, value);
    }

    /**
     * Removes all values of property Gender * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllGenders(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, GENDER);
    }

    /**
     * Removes all values of property Gender * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllGenders() {
	Base.removeAll(this.model, this.getResource(), GENDER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b1325d3 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasHoldsAccount(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, HOLDSACCOUNT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b1325d3 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasHoldsAccount() {
	return Base.has(this.model, this.getResource(), HOLDSACCOUNT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b1325d3 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasHoldsAccount(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, HOLDSACCOUNT, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b1325d3 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasHoldsAccount(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), HOLDSACCOUNT,
		value);
    }

    /**
     * Get all values of property HoldsAccount as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHoldsAccount_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, HOLDSACCOUNT);
    }

    /**
     * Get all values of property HoldsAccount as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHoldsAccount_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), HOLDSACCOUNT);
    }

    /**
     * Get all values of property HoldsAccount * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<OnlineAccount> getAllHoldsAccount(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, HOLDSACCOUNT,
		OnlineAccount.class);
    }

    /**
     * Get all values of property HoldsAccount * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<OnlineAccount> getAllHoldsAccount() {
	return Base.getAll(this.model, this.getResource(), HOLDSACCOUNT,
		OnlineAccount.class);
    }

    /**
     * Get all values of property HoldsAccount as a ReactorResult of
     * OnlineAccount
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public OnlineAccount getHoldsAccount() {
	return Base.getAll_as(this.model, this.getResource(), HOLDSACCOUNT,
		OnlineAccount.class).firstValue();
    }

    /**
     * Adds a value to property HoldsAccount as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addHoldsAccount(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, HOLDSACCOUNT, value);
    }

    /**
     * Adds a value to property HoldsAccount as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addHoldsAccount(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), HOLDSACCOUNT, value);
    }

    /**
     * Adds a value to property HoldsAccount from an instance of OnlineAccount
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addHoldsAccount(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    OnlineAccount value) {
	Base.add(model, instanceResource, HOLDSACCOUNT, value);
    }

    /**
     * Adds a value to property HoldsAccount from an instance of OnlineAccount
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addHoldsAccount(OnlineAccount value) {
	Base.add(this.model, this.getResource(), HOLDSACCOUNT, value);
    }

    /**
     * Sets a value of property HoldsAccount from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setHoldsAccount(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, HOLDSACCOUNT, value);
    }

    /**
     * Sets a value of property HoldsAccount from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setHoldsAccount(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), HOLDSACCOUNT, value);
    }

    /**
     * Sets a value of property HoldsAccount from an instance of OnlineAccount
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setHoldsAccount(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    OnlineAccount value) {
	Base.set(model, instanceResource, HOLDSACCOUNT, value);
    }

    /**
     * Sets a value of property HoldsAccount from an instance of OnlineAccount
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setHoldsAccount(OnlineAccount value) {
	Base.set(this.model, this.getResource(), HOLDSACCOUNT, value);
    }

    /**
     * Removes a value of property HoldsAccount as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeHoldsAccount(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, HOLDSACCOUNT, value);
    }

    /**
     * Removes a value of property HoldsAccount as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeHoldsAccount(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), HOLDSACCOUNT, value);
    }

    /**
     * Removes a value of property HoldsAccount given as an instance of
     * OnlineAccount
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeHoldsAccount(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    OnlineAccount value) {
	Base.remove(model, instanceResource, HOLDSACCOUNT, value);
    }

    /**
     * Removes a value of property HoldsAccount given as an instance of
     * OnlineAccount
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeHoldsAccount(OnlineAccount value) {
	Base.remove(this.model, this.getResource(), HOLDSACCOUNT, value);
    }

    /**
     * Removes all values of property HoldsAccount * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllHoldsAccount(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, HOLDSACCOUNT);
    }

    /**
     * Removes all values of property HoldsAccount * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllHoldsAccount() {
	Base.removeAll(this.model, this.getResource(), HOLDSACCOUNT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4d4987e8 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasICQChatIDs(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, ICQCHATID);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4d4987e8 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasICQChatIDs() {
	return Base.has(this.model, this.getResource(), ICQCHATID);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4d4987e8 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasICQChatID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	return Base.hasValue(model, instanceResource, ICQCHATID, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4d4987e8 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasICQChatID(String value) {
	return Base.hasValue(this.model, this.getResource(), ICQCHATID, value);
    }

    /**
     * Get all values of property ICQChatID as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllICQChatIDs_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, ICQCHATID);
    }

    /**
     * Get all values of property ICQChatID as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllICQChatIDs_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), ICQCHATID);
    }

    /**
     * Get all values of property ICQChatID * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllICQChatIDs(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, ICQCHATID,
		java.lang.String.class);
    }

    /**
     * Get all values of property ICQChatID * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllICQChatIDs() {
	return Base.getAll(this.model, this.getResource(), ICQCHATID,
		java.lang.String.class);
    }

    /**
     * Get all values of property ICQChatID as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getICQChatID() {
	return Base.getAll_as(this.model, this.getResource(), ICQCHATID,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property ICQChatID as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addICQChatID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, ICQCHATID, value);
    }

    /**
     * Adds a value to property ICQChatID as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addICQChatID(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), ICQCHATID, value);
    }

    /**
     * Adds a value to property ICQChatID from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addICQChatID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, ICQCHATID, value);
    }

    /**
     * Adds a value to property ICQChatID from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addICQChatID(java.lang.String value) {
	Base.add(this.model, this.getResource(), ICQCHATID, value);
    }

    /**
     * Sets a value of property ICQChatID from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setICQChatID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, ICQCHATID, value);
    }

    /**
     * Sets a value of property ICQChatID from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setICQChatID(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), ICQCHATID, value);
    }

    /**
     * Sets a value of property ICQChatID from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setICQChatID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, ICQCHATID, value);
    }

    /**
     * Sets a value of property ICQChatID from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setICQChatID(java.lang.String value) {
	Base.set(this.model, this.getResource(), ICQCHATID, value);
    }

    /**
     * Removes a value of property ICQChatID as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeICQChatID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, ICQCHATID, value);
    }

    /**
     * Removes a value of property ICQChatID as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeICQChatID(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), ICQCHATID, value);
    }

    /**
     * Removes a value of property ICQChatID given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeICQChatID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, ICQCHATID, value);
    }

    /**
     * Removes a value of property ICQChatID given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeICQChatID(java.lang.String value) {
	Base.remove(this.model, this.getResource(), ICQCHATID, value);
    }

    /**
     * Removes all values of property ICQChatID * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllICQChatIDs(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, ICQCHATID);
    }

    /**
     * Removes all values of property ICQChatID * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllICQChatIDs() {
	Base.removeAll(this.model, this.getResource(), ICQCHATID);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@110bc849 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasInterests(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, INTEREST);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@110bc849 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasInterests() {
	return Base.has(this.model, this.getResource(), INTEREST);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@110bc849 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasInterest(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	return Base.hasValue(model, instanceResource, INTEREST, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@110bc849 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasInterest(Document value) {
	return Base.hasValue(this.model, this.getResource(), INTEREST, value);
    }

    /**
     * Get all values of property Interest as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInterests_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, INTEREST);
    }

    /**
     * Get all values of property Interest as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllInterests_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), INTEREST);
    }

    /**
     * Get all values of property Interest * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Document> getAllInterests(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, INTEREST, Document.class);
    }

    /**
     * Get all values of property Interest * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Document> getAllInterests() {
	return Base.getAll(this.model, this.getResource(), INTEREST,
		Document.class);
    }

    /**
     * Get all values of property Interest as a ReactorResult of Document
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Document getInterest() {
	return Base.getAll_as(this.model, this.getResource(), INTEREST,
		Document.class).firstValue();
    }

    /**
     * Adds a value to property Interest as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addInterest(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, INTEREST, value);
    }

    /**
     * Adds a value to property Interest as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addInterest(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), INTEREST, value);
    }

    /**
     * Adds a value to property Interest from an instance of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addInterest(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.add(model, instanceResource, INTEREST, value);
    }

    /**
     * Adds a value to property Interest from an instance of Document
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addInterest(Document value) {
	Base.add(this.model, this.getResource(), INTEREST, value);
    }

    /**
     * Sets a value of property Interest from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setInterest(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, INTEREST, value);
    }

    /**
     * Sets a value of property Interest from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setInterest(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), INTEREST, value);
    }

    /**
     * Sets a value of property Interest from an instance of Document First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setInterest(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.set(model, instanceResource, INTEREST, value);
    }

    /**
     * Sets a value of property Interest from an instance of Document First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setInterest(Document value) {
	Base.set(this.model, this.getResource(), INTEREST, value);
    }

    /**
     * Removes a value of property Interest as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeInterest(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, INTEREST, value);
    }

    /**
     * Removes a value of property Interest as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeInterest(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), INTEREST, value);
    }

    /**
     * Removes a value of property Interest given as an instance of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeInterest(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.remove(model, instanceResource, INTEREST, value);
    }

    /**
     * Removes a value of property Interest given as an instance of Document
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeInterest(Document value) {
	Base.remove(this.model, this.getResource(), INTEREST, value);
    }

    /**
     * Removes all values of property Interest * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllInterests(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, INTEREST);
    }

    /**
     * Removes all values of property Interest * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllInterests() {
	Base.removeAll(this.model, this.getResource(), INTEREST);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3cecd278 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasJabberIDs(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, JABBERID);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3cecd278 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasJabberIDs() {
	return Base.has(this.model, this.getResource(), JABBERID);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3cecd278 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasJabberID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	return Base.hasValue(model, instanceResource, JABBERID, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3cecd278 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasJabberID(String value) {
	return Base.hasValue(this.model, this.getResource(), JABBERID, value);
    }

    /**
     * Get all values of property JabberID as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllJabberIDs_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, JABBERID);
    }

    /**
     * Get all values of property JabberID as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllJabberIDs_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), JABBERID);
    }

    /**
     * Get all values of property JabberID * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllJabberIDs(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, JABBERID,
		java.lang.String.class);
    }

    /**
     * Get all values of property JabberID * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllJabberIDs() {
	return Base.getAll(this.model, this.getResource(), JABBERID,
		java.lang.String.class);
    }

    /**
     * Get all values of property JabberID as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getJabberID() {
	return Base.getAll_as(this.model, this.getResource(), JABBERID,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property JabberID as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addJabberID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, JABBERID, value);
    }

    /**
     * Adds a value to property JabberID as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addJabberID(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), JABBERID, value);
    }

    /**
     * Adds a value to property JabberID from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addJabberID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, JABBERID, value);
    }

    /**
     * Adds a value to property JabberID from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addJabberID(java.lang.String value) {
	Base.add(this.model, this.getResource(), JABBERID, value);
    }

    /**
     * Sets a value of property JabberID from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setJabberID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, JABBERID, value);
    }

    /**
     * Sets a value of property JabberID from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setJabberID(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), JABBERID, value);
    }

    /**
     * Sets a value of property JabberID from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setJabberID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, JABBERID, value);
    }

    /**
     * Sets a value of property JabberID from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setJabberID(java.lang.String value) {
	Base.set(this.model, this.getResource(), JABBERID, value);
    }

    /**
     * Removes a value of property JabberID as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeJabberID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, JABBERID, value);
    }

    /**
     * Removes a value of property JabberID as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeJabberID(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), JABBERID, value);
    }

    /**
     * Removes a value of property JabberID given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeJabberID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, JABBERID, value);
    }

    /**
     * Removes a value of property JabberID given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeJabberID(java.lang.String value) {
	Base.remove(this.model, this.getResource(), JABBERID, value);
    }

    /**
     * Removes all values of property JabberID * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllJabberIDs(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, JABBERID);
    }

    /**
     * Removes all values of property JabberID * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllJabberIDs() {
	Base.removeAll(this.model, this.getResource(), JABBERID);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49dbfd5a has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasMSNChatIDs(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, MSNCHATID);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49dbfd5a has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasMSNChatIDs() {
	return Base.has(this.model, this.getResource(), MSNCHATID);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49dbfd5a has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasMSNChatID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	return Base.hasValue(model, instanceResource, MSNCHATID, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49dbfd5a has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasMSNChatID(String value) {
	return Base.hasValue(this.model, this.getResource(), MSNCHATID, value);
    }

    /**
     * Get all values of property MSNChatID as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMSNChatIDs_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, MSNCHATID);
    }

    /**
     * Get all values of property MSNChatID as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMSNChatIDs_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), MSNCHATID);
    }

    /**
     * Get all values of property MSNChatID * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllMSNChatIDs(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, MSNCHATID,
		java.lang.String.class);
    }

    /**
     * Get all values of property MSNChatID * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllMSNChatIDs() {
	return Base.getAll(this.model, this.getResource(), MSNCHATID,
		java.lang.String.class);
    }

    /**
     * Get all values of property MSNChatID as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getMSNChatID() {
	return Base.getAll_as(this.model, this.getResource(), MSNCHATID,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property MSNChatID as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addMSNChatID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, MSNCHATID, value);
    }

    /**
     * Adds a value to property MSNChatID as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addMSNChatID(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), MSNCHATID, value);
    }

    /**
     * Adds a value to property MSNChatID from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addMSNChatID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, MSNCHATID, value);
    }

    /**
     * Adds a value to property MSNChatID from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addMSNChatID(java.lang.String value) {
	Base.add(this.model, this.getResource(), MSNCHATID, value);
    }

    /**
     * Sets a value of property MSNChatID from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setMSNChatID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, MSNCHATID, value);
    }

    /**
     * Sets a value of property MSNChatID from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setMSNChatID(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), MSNCHATID, value);
    }

    /**
     * Sets a value of property MSNChatID from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setMSNChatID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, MSNCHATID, value);
    }

    /**
     * Sets a value of property MSNChatID from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setMSNChatID(java.lang.String value) {
	Base.set(this.model, this.getResource(), MSNCHATID, value);
    }

    /**
     * Removes a value of property MSNChatID as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeMSNChatID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, MSNCHATID, value);
    }

    /**
     * Removes a value of property MSNChatID as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeMSNChatID(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), MSNCHATID, value);
    }

    /**
     * Removes a value of property MSNChatID given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeMSNChatID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, MSNCHATID, value);
    }

    /**
     * Removes a value of property MSNChatID given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeMSNChatID(java.lang.String value) {
	Base.remove(this.model, this.getResource(), MSNCHATID, value);
    }

    /**
     * Removes all values of property MSNChatID * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllMSNChatIDs(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, MSNCHATID);
    }

    /**
     * Removes all values of property MSNChatID * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllMSNChatIDs() {
	Base.removeAll(this.model, this.getResource(), MSNCHATID);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@37d0df29 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasMade(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, MADE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@37d0df29 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasMade() {
	return Base.has(this.model, this.getResource(), MADE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@37d0df29 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasMade(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, MADE, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@37d0df29 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasMade(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), MADE, value);
    }

    /**
     * Get all values of property Made as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMade_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, MADE);
    }

    /**
     * Get all values of property Made as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMade_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), MADE);
    }

    /**
     * Get all values of property Made * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<FOAFThing> getAllMade(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, MADE, FOAFThing.class);
    }

    /**
     * Get all values of property Made * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<FOAFThing> getAllMade() {
	return Base.getAll(this.model, this.getResource(), MADE,
		FOAFThing.class);
    }

    /**
     * Get all values of property Made as a ReactorResult of FOAFThing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public FOAFThing getMade() {
	return Base.getAll_as(this.model, this.getResource(), MADE,
		FOAFThing.class).firstValue();
    }

    /**
     * Adds a value to property Made as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addMade(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, MADE, value);
    }

    /**
     * Adds a value to property Made as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addMade(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), MADE, value);
    }

    /**
     * Adds a value to property Made from an instance of FOAFThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addMade(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    FOAFThing value) {
	Base.add(model, instanceResource, MADE, value);
    }

    /**
     * Adds a value to property Made from an instance of FOAFThing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addMade(FOAFThing value) {
	Base.add(this.model, this.getResource(), MADE, value);
    }

    /**
     * Sets a value of property Made from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setMade(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, MADE, value);
    }

    /**
     * Sets a value of property Made from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setMade(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), MADE, value);
    }

    /**
     * Sets a value of property Made from an instance of FOAFThing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setMade(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    FOAFThing value) {
	Base.set(model, instanceResource, MADE, value);
    }

    /**
     * Sets a value of property Made from an instance of FOAFThing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setMade(FOAFThing value) {
	Base.set(this.model, this.getResource(), MADE, value);
    }

    /**
     * Removes a value of property Made as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeMade(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, MADE, value);
    }

    /**
     * Removes a value of property Made as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeMade(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), MADE, value);
    }

    /**
     * Removes a value of property Made given as an instance of FOAFThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeMade(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    FOAFThing value) {
	Base.remove(model, instanceResource, MADE, value);
    }

    /**
     * Removes a value of property Made given as an instance of FOAFThing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeMade(FOAFThing value) {
	Base.remove(this.model, this.getResource(), MADE, value);
    }

    /**
     * Removes all values of property Made * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllMade(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, MADE);
    }

    /**
     * Removes all values of property Made * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllMade() {
	Base.removeAll(this.model, this.getResource(), MADE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47cf7e4a has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasOpenIDs(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, OPENID);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47cf7e4a has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasOpenIDs() {
	return Base.has(this.model, this.getResource(), OPENID);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47cf7e4a has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasOpenID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, OPENID, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47cf7e4a has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasOpenID(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), OPENID, value);
    }

    /**
     * Get all values of property OpenID as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOpenIDs_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, OPENID);
    }

    /**
     * Get all values of property OpenID as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOpenIDs_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), OPENID);
    }

    /**
     * Get all values of property OpenID * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Document> getAllOpenIDs(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, OPENID, Document.class);
    }

    /**
     * Get all values of property OpenID * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Document> getAllOpenIDs() {
	return Base.getAll(this.model, this.getResource(), OPENID,
		Document.class);
    }

    /**
     * Get all values of property OpenID as a ReactorResult of Document
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Document getOpenID() {
	return Base.getAll_as(this.model, this.getResource(), OPENID,
		Document.class).firstValue();
    }

    /**
     * Adds a value to property OpenID as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addOpenID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, OPENID, value);
    }

    /**
     * Adds a value to property OpenID as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addOpenID(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), OPENID, value);
    }

    /**
     * Adds a value to property OpenID from an instance of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addOpenID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.add(model, instanceResource, OPENID, value);
    }

    /**
     * Adds a value to property OpenID from an instance of Document
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addOpenID(Document value) {
	Base.add(this.model, this.getResource(), OPENID, value);
    }

    /**
     * Sets a value of property OpenID from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setOpenID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, OPENID, value);
    }

    /**
     * Sets a value of property OpenID from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setOpenID(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), OPENID, value);
    }

    /**
     * Sets a value of property OpenID from an instance of Document First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setOpenID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.set(model, instanceResource, OPENID, value);
    }

    /**
     * Sets a value of property OpenID from an instance of Document First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setOpenID(Document value) {
	Base.set(this.model, this.getResource(), OPENID, value);
    }

    /**
     * Removes a value of property OpenID as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeOpenID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, OPENID, value);
    }

    /**
     * Removes a value of property OpenID as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeOpenID(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), OPENID, value);
    }

    /**
     * Removes a value of property OpenID given as an instance of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeOpenID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.remove(model, instanceResource, OPENID, value);
    }

    /**
     * Removes a value of property OpenID given as an instance of Document
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeOpenID(Document value) {
	Base.remove(this.model, this.getResource(), OPENID, value);
    }

    /**
     * Removes all values of property OpenID * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllOpenIDs(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, OPENID);
    }

    /**
     * Removes all values of property OpenID * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllOpenIDs() {
	Base.removeAll(this.model, this.getResource(), OPENID);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4af2f72c has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasPersonalMailboxes(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, PERSONALMAILBOX);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4af2f72c has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasPersonalMailboxes() {
	return Base.has(this.model, this.getResource(), PERSONALMAILBOX);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4af2f72c has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasPersonalMailbox(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, PERSONALMAILBOX, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4af2f72c has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasPersonalMailbox(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), PERSONALMAILBOX,
		value);
    }

    /**
     * Get all values of property PersonalMailbox as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPersonalMailboxes_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, PERSONALMAILBOX);
    }

    /**
     * Get all values of property PersonalMailbox as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPersonalMailboxes_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(),
		PERSONALMAILBOX);
    }

    /**
     * Get all values of property PersonalMailbox * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<FOAFThing> getAllPersonalMailboxes(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, PERSONALMAILBOX,
		FOAFThing.class);
    }

    /**
     * Get all values of property PersonalMailbox * @return a ClosableIterator
     * of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<FOAFThing> getAllPersonalMailboxes() {
	return Base.getAll(this.model, this.getResource(), PERSONALMAILBOX,
		FOAFThing.class);
    }

    /**
     * Get all values of property PersonalMailbox as a ReactorResult of
     * FOAFThing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public FOAFThing getPersonalMailbox() {
	return Base.getAll_as(this.model, this.getResource(), PERSONALMAILBOX,
		FOAFThing.class).firstValue();
    }

    /**
     * Adds a value to property PersonalMailbox as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addPersonalMailbox(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, PERSONALMAILBOX, value);
    }

    /**
     * Adds a value to property PersonalMailbox as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addPersonalMailbox(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), PERSONALMAILBOX, value);
    }

    /**
     * Adds a value to property PersonalMailbox from an instance of FOAFThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addPersonalMailbox(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    FOAFThing value) {
	Base.add(model, instanceResource, PERSONALMAILBOX, value);
    }

    /**
     * Adds a value to property PersonalMailbox from an instance of FOAFThing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addPersonalMailbox(FOAFThing value) {
	Base.add(this.model, this.getResource(), PERSONALMAILBOX, value);
    }

    /**
     * Sets a value of property PersonalMailbox from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setPersonalMailbox(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, PERSONALMAILBOX, value);
    }

    /**
     * Sets a value of property PersonalMailbox from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setPersonalMailbox(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), PERSONALMAILBOX, value);
    }

    /**
     * Sets a value of property PersonalMailbox from an instance of FOAFThing
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setPersonalMailbox(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    FOAFThing value) {
	Base.set(model, instanceResource, PERSONALMAILBOX, value);
    }

    /**
     * Sets a value of property PersonalMailbox from an instance of FOAFThing
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setPersonalMailbox(FOAFThing value) {
	Base.set(this.model, this.getResource(), PERSONALMAILBOX, value);
    }

    /**
     * Removes a value of property PersonalMailbox as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removePersonalMailbox(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, PERSONALMAILBOX, value);
    }

    /**
     * Removes a value of property PersonalMailbox as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removePersonalMailbox(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), PERSONALMAILBOX, value);
    }

    /**
     * Removes a value of property PersonalMailbox given as an instance of
     * FOAFThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removePersonalMailbox(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    FOAFThing value) {
	Base.remove(model, instanceResource, PERSONALMAILBOX, value);
    }

    /**
     * Removes a value of property PersonalMailbox given as an instance of
     * FOAFThing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removePersonalMailbox(FOAFThing value) {
	Base.remove(this.model, this.getResource(), PERSONALMAILBOX, value);
    }

    /**
     * Removes all values of property PersonalMailbox * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllPersonalMailboxes(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, PERSONALMAILBOX);
    }

    /**
     * Removes all values of property PersonalMailbox * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllPersonalMailboxes() {
	Base.removeAll(this.model, this.getResource(), PERSONALMAILBOX);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6dffcd26 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasPersonalMailboxSha1Sums(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource,
		SHA1SUMOFAPERSONALMAILBOXURINAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6dffcd26 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasPersonalMailboxSha1Sums() {
	return Base.has(this.model, this.getResource(),
		SHA1SUMOFAPERSONALMAILBOXURINAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6dffcd26 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasPersonalMailboxSha1Sum(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource,
		SHA1SUMOFAPERSONALMAILBOXURINAME, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6dffcd26 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasPersonalMailboxSha1Sum(
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(),
		SHA1SUMOFAPERSONALMAILBOXURINAME, value);
    }

    /**
     * Get all values of property Sha1sumofapersonalmailboxURIname as an
     * Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPersonalMailboxSha1Sums_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource,
		SHA1SUMOFAPERSONALMAILBOXURINAME);
    }

    /**
     * Get all values of property Sha1sumofapersonalmailboxURIname as an
     * Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPersonalMailboxSha1Sums_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(),
		SHA1SUMOFAPERSONALMAILBOXURINAME);
    }

    /**
     * Get all values of property Sha1sumofapersonalmailboxURIname * @param
     * model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllPersonalMailboxSha1Sums(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource,
		SHA1SUMOFAPERSONALMAILBOXURINAME, java.lang.String.class);
    }

    /**
     * Get all values of property Sha1sumofapersonalmailboxURIname * @return a
     * ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllPersonalMailboxSha1Sums() {
	return Base.getAll(this.model, this.getResource(),
		SHA1SUMOFAPERSONALMAILBOXURINAME, java.lang.String.class);
    }

    /**
     * Get all values of property Sha1sumofapersonalmailboxURIname as a
     * ReactorResult of java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getPersonalMailboxSha1Sum() {
	return Base.getAll_as(this.model, this.getResource(),
		SHA1SUMOFAPERSONALMAILBOXURINAME, java.lang.String.class)
		.firstValue();
    }

    /**
     * Adds a value to property Sha1sumofapersonalmailboxURIname as an RDF2Go
     * node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addPersonalMailboxSha1Sum(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, SHA1SUMOFAPERSONALMAILBOXURINAME,
		value);
    }

    /**
     * Adds a value to property Sha1sumofapersonalmailboxURIname as an RDF2Go
     * node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addPersonalMailboxSha1Sum(
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(),
		SHA1SUMOFAPERSONALMAILBOXURINAME, value);
    }

    /**
     * Adds a value to property Sha1sumofapersonalmailboxURIname from an
     * instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addPersonalMailboxSha1Sum(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, SHA1SUMOFAPERSONALMAILBOXURINAME,
		value);
    }

    /**
     * Adds a value to property Sha1sumofapersonalmailboxURIname from an
     * instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addPersonalMailboxSha1Sum(java.lang.String value) {
	Base.add(this.model, this.getResource(),
		SHA1SUMOFAPERSONALMAILBOXURINAME, value);
    }

    /**
     * Sets a value of property Sha1sumofapersonalmailboxURIname from an RDF2Go
     * node. First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setPersonalMailboxSha1Sum(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, SHA1SUMOFAPERSONALMAILBOXURINAME,
		value);
    }

    /**
     * Sets a value of property Sha1sumofapersonalmailboxURIname from an RDF2Go
     * node. First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setPersonalMailboxSha1Sum(
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(),
		SHA1SUMOFAPERSONALMAILBOXURINAME, value);
    }

    /**
     * Sets a value of property Sha1sumofapersonalmailboxURIname from an
     * instance of java.lang.String First, all existing values are removed, then
     * this value is added. Cardinality constraints are not checked, but this
     * method exists only for properties with no minCardinality or
     * minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setPersonalMailboxSha1Sum(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, SHA1SUMOFAPERSONALMAILBOXURINAME,
		value);
    }

    /**
     * Sets a value of property Sha1sumofapersonalmailboxURIname from an
     * instance of java.lang.String First, all existing values are removed, then
     * this value is added. Cardinality constraints are not checked, but this
     * method exists only for properties with no minCardinality or
     * minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setPersonalMailboxSha1Sum(java.lang.String value) {
	Base.set(this.model, this.getResource(),
		SHA1SUMOFAPERSONALMAILBOXURINAME, value);
    }

    /**
     * Removes a value of property Sha1sumofapersonalmailboxURIname as an RDF2Go
     * node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removePersonalMailboxSha1Sum(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, SHA1SUMOFAPERSONALMAILBOXURINAME,
		value);
    }

    /**
     * Removes a value of property Sha1sumofapersonalmailboxURIname as an RDF2Go
     * node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removePersonalMailboxSha1Sum(
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(),
		SHA1SUMOFAPERSONALMAILBOXURINAME, value);
    }

    /**
     * Removes a value of property Sha1sumofapersonalmailboxURIname given as an
     * instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removePersonalMailboxSha1Sum(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, SHA1SUMOFAPERSONALMAILBOXURINAME,
		value);
    }

    /**
     * Removes a value of property Sha1sumofapersonalmailboxURIname given as an
     * instance of java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removePersonalMailboxSha1Sum(java.lang.String value) {
	Base.remove(this.model, this.getResource(),
		SHA1SUMOFAPERSONALMAILBOXURINAME, value);
    }

    /**
     * Removes all values of property Sha1sumofapersonalmailboxURIname * @param
     * model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllPersonalMailboxSha1Sums(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource,
		SHA1SUMOFAPERSONALMAILBOXURINAME);
    }

    /**
     * Removes all values of property Sha1sumofapersonalmailboxURIname *
     * [Generated from RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllPersonalMailboxSha1Sums() {
	Base.removeAll(this.model, this.getResource(),
		SHA1SUMOFAPERSONALMAILBOXURINAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61b834b9 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSkypeIDs(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, SKYPEID);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61b834b9 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSkypeIDs() {
	return Base.has(this.model, this.getResource(), SKYPEID);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61b834b9 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSkypeID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	return Base.hasValue(model, instanceResource, SKYPEID, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61b834b9 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasSkypeID(String value) {
	return Base.hasValue(this.model, this.getResource(), SKYPEID, value);
    }

    /**
     * Get all values of property SkypeID as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSkypeIDs_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, SKYPEID);
    }

    /**
     * Get all values of property SkypeID as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSkypeIDs_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), SKYPEID);
    }

    /**
     * Get all values of property SkypeID * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllSkypeIDs(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, SKYPEID,
		java.lang.String.class);
    }

    /**
     * Get all values of property SkypeID * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllSkypeIDs() {
	return Base.getAll(this.model, this.getResource(), SKYPEID,
		java.lang.String.class);
    }

    /**
     * Get all values of property SkypeID as a ReactorResult of java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getSkypeID() {
	return Base.getAll_as(this.model, this.getResource(), SKYPEID,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property SkypeID as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSkypeID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, SKYPEID, value);
    }

    /**
     * Adds a value to property SkypeID as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSkypeID(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), SKYPEID, value);
    }

    /**
     * Adds a value to property SkypeID from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSkypeID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, SKYPEID, value);
    }

    /**
     * Adds a value to property SkypeID from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSkypeID(java.lang.String value) {
	Base.add(this.model, this.getResource(), SKYPEID, value);
    }

    /**
     * Sets a value of property SkypeID from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSkypeID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, SKYPEID, value);
    }

    /**
     * Sets a value of property SkypeID from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSkypeID(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), SKYPEID, value);
    }

    /**
     * Sets a value of property SkypeID from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSkypeID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, SKYPEID, value);
    }

    /**
     * Sets a value of property SkypeID from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSkypeID(java.lang.String value) {
	Base.set(this.model, this.getResource(), SKYPEID, value);
    }

    /**
     * Removes a value of property SkypeID as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSkypeID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, SKYPEID, value);
    }

    /**
     * Removes a value of property SkypeID as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeSkypeID(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), SKYPEID, value);
    }

    /**
     * Removes a value of property SkypeID given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSkypeID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, SKYPEID, value);
    }

    /**
     * Removes a value of property SkypeID given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSkypeID(java.lang.String value) {
	Base.remove(this.model, this.getResource(), SKYPEID, value);
    }

    /**
     * Removes all values of property SkypeID * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSkypeIDs(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, SKYPEID);
    }

    /**
     * Removes all values of property SkypeID * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllSkypeIDs() {
	Base.removeAll(this.model, this.getResource(), SKYPEID);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3fd770aa has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasStatuses(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, STATUS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3fd770aa has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasStatuses() {
	return Base.has(this.model, this.getResource(), STATUS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3fd770aa has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasStatus(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	return Base.hasValue(model, instanceResource, STATUS, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3fd770aa has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasStatus(String value) {
	return Base.hasValue(this.model, this.getResource(), STATUS, value);
    }

    /**
     * Get all values of property Status as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllStatuses_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, STATUS);
    }

    /**
     * Get all values of property Status as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllStatuses_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), STATUS);
    }

    /**
     * Get all values of property Status * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllStatuses(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, STATUS,
		java.lang.String.class);
    }

    /**
     * Get all values of property Status * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllStatuses() {
	return Base.getAll(this.model, this.getResource(), STATUS,
		java.lang.String.class);
    }

    /**
     * Get first values of property Status * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public String getStatus() {
	return Base.getAll_as(this.model, this.getResource(), STATUS,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property Status as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addStatus(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, STATUS, value);
    }

    /**
     * Adds a value to property Status as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addStatus(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), STATUS, value);
    }

    /**
     * Adds a value to property Status from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addStatus(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, STATUS, value);
    }

    /**
     * Adds a value to property Status from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addStatus(java.lang.String value) {
	Base.add(this.model, this.getResource(), STATUS, value);
    }

    /**
     * Sets a value of property Status from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setStatus(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, STATUS, value);
    }

    /**
     * Sets a value of property Status from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setStatus(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), STATUS, value);
    }

    /**
     * Sets a value of property Status from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setStatus(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, STATUS, value);
    }

    /**
     * Sets a value of property Status from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setStatus(java.lang.String value) {
	Base.set(this.model, this.getResource(), STATUS, value);
    }

    /**
     * Removes a value of property Status as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeStatus(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, STATUS, value);
    }

    /**
     * Removes a value of property Status as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeStatus(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), STATUS, value);
    }

    /**
     * Removes a value of property Status given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeStatus(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, STATUS, value);
    }

    /**
     * Removes a value of property Status given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeStatus(java.lang.String value) {
	Base.remove(this.model, this.getResource(), STATUS, value);
    }

    /**
     * Removes all values of property Status * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllStatuses(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, STATUS);
    }

    /**
     * Removes all values of property Status * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllStatuses() {
	Base.removeAll(this.model, this.getResource(), STATUS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c15d87c has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasTipjars(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, TIPJAR);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c15d87c has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasTipjars() {
	return Base.has(this.model, this.getResource(), TIPJAR);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c15d87c has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasTipjar(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, TIPJAR, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c15d87c has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasTipjar(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), TIPJAR, value);
    }

    /**
     * Get all values of property Tipjar as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTipjars_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, TIPJAR);
    }

    /**
     * Get all values of property Tipjar as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTipjars_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), TIPJAR);
    }

    /**
     * Get all values of property Tipjar * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Document> getAllTipjars(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, TIPJAR, Document.class);
    }

    /**
     * Get all values of property Tipjar * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Document> getAllTipjars() {
	return Base.getAll(this.model, this.getResource(), TIPJAR,
		Document.class);
    }

    /**
     * Get all values of property Tipjar as a ReactorResult of Document
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Document getTipjar() {
	return Base.getAll_as(this.model, this.getResource(), TIPJAR,
		Document.class).firstValue();
    }

    /**
     * Adds a value to property Tipjar as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addTipjar(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, TIPJAR, value);
    }

    /**
     * Adds a value to property Tipjar as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addTipjar(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), TIPJAR, value);
    }

    /**
     * Adds a value to property Tipjar from an instance of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addTipjar(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.add(model, instanceResource, TIPJAR, value);
    }

    /**
     * Adds a value to property Tipjar from an instance of Document
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addTipjar(Document value) {
	Base.add(this.model, this.getResource(), TIPJAR, value);
    }

    /**
     * Sets a value of property Tipjar from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setTipjar(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, TIPJAR, value);
    }

    /**
     * Sets a value of property Tipjar from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setTipjar(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), TIPJAR, value);
    }

    /**
     * Sets a value of property Tipjar from an instance of Document First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setTipjar(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.set(model, instanceResource, TIPJAR, value);
    }

    /**
     * Sets a value of property Tipjar from an instance of Document First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setTipjar(Document value) {
	Base.set(this.model, this.getResource(), TIPJAR, value);
    }

    /**
     * Removes a value of property Tipjar as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeTipjar(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, TIPJAR, value);
    }

    /**
     * Removes a value of property Tipjar as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeTipjar(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), TIPJAR, value);
    }

    /**
     * Removes a value of property Tipjar given as an instance of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeTipjar(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.remove(model, instanceResource, TIPJAR, value);
    }

    /**
     * Removes a value of property Tipjar given as an instance of Document
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeTipjar(Document value) {
	Base.remove(this.model, this.getResource(), TIPJAR, value);
    }

    /**
     * Removes all values of property Tipjar * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllTipjars(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, TIPJAR);
    }

    /**
     * Removes all values of property Tipjar * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllTipjars() {
	Base.removeAll(this.model, this.getResource(), TIPJAR);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@441b6bab has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasTopicInterests(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, TOPICINTEREST);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@441b6bab has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasTopicInterests() {
	return Base.has(this.model, this.getResource(), TOPICINTEREST);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@441b6bab has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasTopicInterest(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, TOPICINTEREST, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@441b6bab has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasTopicInterest(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), TOPICINTEREST,
		value);
    }

    /**
     * Get all values of property TopicInterest as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTopicInterests_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, TOPICINTEREST);
    }

    /**
     * Get all values of property TopicInterest as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTopicInterests_asNode() {
	return Base
		.getAll_asNode(this.model, this.getResource(), TOPICINTEREST);
    }

    /**
     * Get all values of property TopicInterest * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<FOAFThing> getAllTopicInterests(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, TOPICINTEREST,
		FOAFThing.class);
    }

    /**
     * Get all values of property TopicInterest * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<FOAFThing> getAllTopicInterests() {
	return Base.getAll(this.model, this.getResource(), TOPICINTEREST,
		FOAFThing.class);
    }

    /**
     * Get all values of property TopicInterest as a ReactorResult of FOAFThing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public FOAFThing getTopicInterest() {
	return Base.getAll_as(this.model, this.getResource(), TOPICINTEREST,
		FOAFThing.class).firstValue();
    }

    /**
     * Adds a value to property TopicInterest as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addTopicInterest(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, TOPICINTEREST, value);
    }

    /**
     * Adds a value to property TopicInterest as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addTopicInterest(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), TOPICINTEREST, value);
    }

    /**
     * Adds a value to property TopicInterest from an instance of FOAFThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addTopicInterest(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    FOAFThing value) {
	Base.add(model, instanceResource, TOPICINTEREST, value);
    }

    /**
     * Adds a value to property TopicInterest from an instance of FOAFThing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addTopicInterest(FOAFThing value) {
	Base.add(this.model, this.getResource(), TOPICINTEREST, value);
    }

    /**
     * Sets a value of property TopicInterest from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setTopicInterest(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, TOPICINTEREST, value);
    }

    /**
     * Sets a value of property TopicInterest from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setTopicInterest(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), TOPICINTEREST, value);
    }

    /**
     * Sets a value of property TopicInterest from an instance of FOAFThing
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setTopicInterest(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    FOAFThing value) {
	Base.set(model, instanceResource, TOPICINTEREST, value);
    }

    /**
     * Sets a value of property TopicInterest from an instance of FOAFThing
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setTopicInterest(FOAFThing value) {
	Base.set(this.model, this.getResource(), TOPICINTEREST, value);
    }

    /**
     * Removes a value of property TopicInterest as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeTopicInterest(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, TOPICINTEREST, value);
    }

    /**
     * Removes a value of property TopicInterest as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeTopicInterest(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), TOPICINTEREST, value);
    }

    /**
     * Removes a value of property TopicInterest given as an instance of
     * FOAFThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeTopicInterest(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    FOAFThing value) {
	Base.remove(model, instanceResource, TOPICINTEREST, value);
    }

    /**
     * Removes a value of property TopicInterest given as an instance of
     * FOAFThing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeTopicInterest(FOAFThing value) {
	Base.remove(this.model, this.getResource(), TOPICINTEREST, value);
    }

    /**
     * Removes all values of property TopicInterest * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllTopicInterests(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, TOPICINTEREST);
    }

    /**
     * Removes all values of property TopicInterest * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllTopicInterests() {
	Base.removeAll(this.model, this.getResource(), TOPICINTEREST);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@34af863e has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasWeblogs(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, WEBLOG);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@34af863e has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasWeblogs() {
	return Base.has(this.model, this.getResource(), WEBLOG);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@34af863e has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasWeblog(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, WEBLOG, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@34af863e has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasWeblog(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), WEBLOG, value);
    }

    /**
     * Get all values of property Weblog as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWeblogs_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, WEBLOG);
    }

    /**
     * Get all values of property Weblog as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWeblogs_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), WEBLOG);
    }

    /**
     * Get all values of property Weblog * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Document> getAllWeblogs(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, WEBLOG, Document.class);
    }

    /**
     * Get all values of property Weblog * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Document> getAllWeblogs() {
	return Base.getAll(this.model, this.getResource(), WEBLOG,
		Document.class);
    }

    /**
     * Get all values of property Weblog as a ReactorResult of Document
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Document getWeblog() {
	return Base.getAll_as(this.model, this.getResource(), WEBLOG,
		Document.class).firstValue();
    }

    /**
     * Adds a value to property Weblog as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addWeblog(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, WEBLOG, value);
    }

    /**
     * Adds a value to property Weblog as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addWeblog(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), WEBLOG, value);
    }

    /**
     * Adds a value to property Weblog from an instance of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addWeblog(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.add(model, instanceResource, WEBLOG, value);
    }

    /**
     * Adds a value to property Weblog from an instance of Document
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addWeblog(Document value) {
	Base.add(this.model, this.getResource(), WEBLOG, value);
    }

    /**
     * Sets a value of property Weblog from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setWeblog(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, WEBLOG, value);
    }

    /**
     * Sets a value of property Weblog from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setWeblog(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), WEBLOG, value);
    }

    /**
     * Sets a value of property Weblog from an instance of Document First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setWeblog(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.set(model, instanceResource, WEBLOG, value);
    }

    /**
     * Sets a value of property Weblog from an instance of Document First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setWeblog(Document value) {
	Base.set(this.model, this.getResource(), WEBLOG, value);
    }

    /**
     * Removes a value of property Weblog as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeWeblog(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, WEBLOG, value);
    }

    /**
     * Removes a value of property Weblog as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeWeblog(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), WEBLOG, value);
    }

    /**
     * Removes a value of property Weblog given as an instance of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeWeblog(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.remove(model, instanceResource, WEBLOG, value);
    }

    /**
     * Removes a value of property Weblog given as an instance of Document
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeWeblog(Document value) {
	Base.remove(this.model, this.getResource(), WEBLOG, value);
    }

    /**
     * Removes all values of property Weblog * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllWeblogs(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, WEBLOG);
    }

    /**
     * Removes all values of property Weblog * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllWeblogs() {
	Base.removeAll(this.model, this.getResource(), WEBLOG);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@586a5f89 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasYahooChatIDs(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, YAHOOCHATID);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@586a5f89 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasYahooChatIDs() {
	return Base.has(this.model, this.getResource(), YAHOOCHATID);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@586a5f89 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasYahooChatID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	return Base.hasValue(model, instanceResource, YAHOOCHATID, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@586a5f89 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasYahooChatID(String value) {
	return Base
		.hasValue(this.model, this.getResource(), YAHOOCHATID, value);
    }

    /**
     * Get all values of property YahooChatID as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllYahooChatIDs_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, YAHOOCHATID);
    }

    /**
     * Get all values of property YahooChatID as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllYahooChatIDs_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), YAHOOCHATID);
    }

    /**
     * Get all values of property YahooChatID * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllYahooChatIDs(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, YAHOOCHATID,
		java.lang.String.class);
    }

    /**
     * Get all values of property YahooChatID * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllYahooChatIDs() {
	return Base.getAll(this.model, this.getResource(), YAHOOCHATID,
		java.lang.String.class);
    }

    /**
     * Get all values of property YahooChatID as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getYahooChatID() {
	return Base.getAll_as(this.model, this.getResource(), YAHOOCHATID,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property YahooChatID as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addYahooChatID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, YAHOOCHATID, value);
    }

    /**
     * Adds a value to property YahooChatID as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addYahooChatID(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), YAHOOCHATID, value);
    }

    /**
     * Adds a value to property YahooChatID from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addYahooChatID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, YAHOOCHATID, value);
    }

    /**
     * Adds a value to property YahooChatID from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addYahooChatID(java.lang.String value) {
	Base.add(this.model, this.getResource(), YAHOOCHATID, value);
    }

    /**
     * Sets a value of property YahooChatID from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setYahooChatID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, YAHOOCHATID, value);
    }

    /**
     * Sets a value of property YahooChatID from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setYahooChatID(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), YAHOOCHATID, value);
    }

    /**
     * Sets a value of property YahooChatID from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setYahooChatID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, YAHOOCHATID, value);
    }

    /**
     * Sets a value of property YahooChatID from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setYahooChatID(java.lang.String value) {
	Base.set(this.model, this.getResource(), YAHOOCHATID, value);
    }

    /**
     * Removes a value of property YahooChatID as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeYahooChatID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, YAHOOCHATID, value);
    }

    /**
     * Removes a value of property YahooChatID as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeYahooChatID(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), YAHOOCHATID, value);
    }

    /**
     * Removes a value of property YahooChatID given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeYahooChatID(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, YAHOOCHATID, value);
    }

    /**
     * Removes a value of property YahooChatID given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeYahooChatID(java.lang.String value) {
	Base.remove(this.model, this.getResource(), YAHOOCHATID, value);
    }

    /**
     * Removes all values of property YahooChatID * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllYahooChatIDs(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, YAHOOCHATID);
    }

    /**
     * Removes all values of property YahooChatID * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllYahooChatIDs() {
	Base.removeAll(this.model, this.getResource(), YAHOOCHATID);
    }
}