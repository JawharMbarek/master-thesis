/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) on 21.12.12 17:00
 */
package com.xmlns.foaf;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;

/**
 * This class manages access to these properties:
 * <ul>
 * <li>PrimaryTopic</li>
 * <li>Sha1Sum</li>
 * <li>Topic</li>
 * </ul>
 * 
 * This class was generated by <a
 * href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 21.12.12 17:00
 */
public class Document extends FOAFThing {

    /**
     * 
     */
    private static final long serialVersionUID = 4402140953739742970L;

    /** http://xmlns.com/foaf/0.1/Document */
    public static final URI RDFS_CLASS = new URIImpl(
	    "http://xmlns.com/foaf/0.1/Document", false);

    /** http://xmlns.com/foaf/0.1/primaryTopic */
    public static final URI PRIMARYTOPIC = new URIImpl(
	    "http://xmlns.com/foaf/0.1/primaryTopic", false);

    /** http://xmlns.com/foaf/0.1/sha1 */
    public static final URI SHA1SUM = new URIImpl(
	    "http://xmlns.com/foaf/0.1/sha1", false);

    /** http://xmlns.com/foaf/0.1/topic */
    public static final URI TOPIC = new URIImpl(
	    "http://xmlns.com/foaf/0.1/topic", false);

    /** http://www.w3.org/2000/01/rdf-schema#comment */
    public static final URI COMMENT = new URIImpl(
	    "http://www.w3.org/2000/01/rdf-schema#comment", false);

    /** http://www.w3.org/2000/01/rdf-schema#label */
    public static final URI LABEL = new URIImpl(
	    "http://www.w3.org/2000/01/rdf-schema#label", false);

    /** http://www.w3.org/2000/01/rdf-schema#member */
    public static final URI MEMBER = new URIImpl(
	    "http://www.w3.org/2000/01/rdf-schema#member", false);

    /** http://www.w3.org/1999/02/22-rdf-syntax-ns#type */
    public static final URI TYPE = new URIImpl(
	    "http://www.w3.org/1999/02/22-rdf-syntax-ns#type", false);

    /**
     * All property-URIs with this class as domain. All properties of all
     * super-classes are also available.
     */
    public static final URI[] MANAGED_URIS = {
	    new URIImpl("http://xmlns.com/foaf/0.1/primaryTopic", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/sha1", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/topic", false), };

    // protected constructors needed for inheritance

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.semweb4j.org
     * @param classURI
     *            URI of RDFS class
     * @param instanceIdentifier
     *            Resource that identifies this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c1]
     */
    protected Document(Model model, URI classURI,
	    org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
	    boolean write) {
	super(model, classURI, instanceIdentifier, write);
    }

    // public constructors

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param instanceIdentifier
     *            an RDF2Go Resource identifying this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c2]
     */
    public Document(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
	    boolean write) {
	super(model, RDFS_CLASS, instanceIdentifier, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a URI, given as
     * a String. Creating two wrappers for the same URI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param uriString
     *            a URI given as a String
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * @throws ModelRuntimeException
     *             if URI syntax is wrong
     * 
     *             [Generated from RDFReactor template rule #c7]
     */
    public Document(Model model, String uriString, boolean write)
	    throws ModelRuntimeException {
	super(model, RDFS_CLASS, new URIImpl(uriString, false), write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a blank node.
     * Creating two wrappers for the same blank node is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param bnode
     *            BlankNode of this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c8]
     */
    public Document(Model model, BlankNode bnode, boolean write) {
	super(model, RDFS_CLASS, bnode, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a randomly
     * generated URI. Creating two wrappers results in different URIs.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c9]
     */
    public Document(Model model, boolean write) {
	super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
    }

    // /////////////////////////////////////////////////////////////////
    // typing

    /**
     * Return an existing instance of this class in the model. No statements are
     * written.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return an instance of Document or null if none existst
     * 
     *         [Generated from RDFReactor template rule #class0]
     */
    public static Document getInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getInstance(model, instanceResource, Document.class);
    }

    /**
     * Create a new instance of this class in the model. That is, create the
     * statement (instanceResource, RDF.type,
     * http://xmlns.com/foaf/0.1/Document).
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class1]
     */
    public static void createInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.createInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return true if instanceResource is an instance of this class in the
     *         model
     * 
     *         [Generated from RDFReactor template rule #class2]
     */
    public static boolean hasInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.hasInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @return all instances of this class in Model 'model' as RDF resources
     * 
     *         [Generated from RDFReactor template rule #class3]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(
	    Model model) {
	return Base.getAllInstances(model, RDFS_CLASS,
		org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * Remove rdf:type Document from this instance. Other triples are not
     * affected. To delete more, use deleteAllProperties
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class4]
     */
    public static void deleteInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.deleteInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * Delete all (this, *, *), i.e. including rdf:type
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     */
    public static void deleteAllProperties(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.deleteAllProperties(model, instanceResource);
    }

    // /////////////////////////////////////////////////////////////////
    // property access methods

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Homepage' to this
     *         Document instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHomepages_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, FOAFThing.HOMEPAGE, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Homepage' to this
     *         Document instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHomepages_Inverse() {
	return Base.getAll_Inverse(this.model, FOAFThing.HOMEPAGE,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Page' to this
     *         Document instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPages_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, FOAFThing.PAGE, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Page' to this
     *         Document instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPages_Inverse() {
	return Base.getAll_Inverse(this.model, FOAFThing.PAGE,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'PrimaryTopicof'
     *         to this Document instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPrimaryTopicOf_Inverse(
	    Model model, Object objectValue) {
	return Base
		.getAll_Inverse(model, FOAFThing.PRIMARYTOPICOF, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'PrimaryTopicof'
     *         to this Document instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPrimaryTopicOf_Inverse() {
	return Base.getAll_Inverse(this.model, FOAFThing.PRIMARYTOPICOF,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Publications' to
     *         this Document instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPublications_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Person.PUBLICATIONS, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Publications' to
     *         this Document instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPublications_Inverse() {
	return Base.getAll_Inverse(this.model, Person.PUBLICATIONS,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'SchoolHomepage'
     *         to this Document instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSchoolHomepages_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Person.SCHOOLHOMEPAGE, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'SchoolHomepage'
     *         to this Document instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSchoolHomepages_Inverse() {
	return Base.getAll_Inverse(this.model, Person.SCHOOLHOMEPAGE,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Workinfohomepage'
     *         to this Document instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWorkInfoHomepages_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Person.WORKINFOHOMEPAGE, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Workinfohomepage'
     *         to this Document instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWorkInfoHomepages_Inverse() {
	return Base.getAll_Inverse(this.model, Person.WORKINFOHOMEPAGE,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation
     *         'Workplacehomepage' to this Document instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWorkplaceHomepages_Inverse(
	    Model model, Object objectValue) {
	return Base
		.getAll_Inverse(model, Person.WORKPLACEHOMEPAGE, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation
     *         'Workplacehomepage' to this Document instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWorkplacHomepages_Inverse() {
	return Base.getAll_Inverse(this.model, Person.WORKPLACEHOMEPAGE,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Interest' to this
     *         Document instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInterests_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Agent.INTEREST, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Interest' to this
     *         Document instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInterests_Inverse() {
	return Base.getAll_Inverse(this.model, Agent.INTEREST,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Openid' to this
     *         Document instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOpenIDs_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Agent.OPENID, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Openid' to this
     *         Document instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOpenIDs_Inverse() {
	return Base
		.getAll_Inverse(this.model, Agent.OPENID, this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Tipjar' to this
     *         Document instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTipjars_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Agent.TIPJAR, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Tipjar' to this
     *         Document instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTipjars_Inverse() {
	return Base
		.getAll_Inverse(this.model, Agent.TIPJAR, this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Weblog' to this
     *         Document instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWeblogs_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Agent.WEBLOG, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Weblog' to this
     *         Document instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllWeblogs_Inverse() {
	return Base
		.getAll_Inverse(this.model, Agent.WEBLOG, this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation
     *         'Accountservicehomepage' to this Document instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAccountServiceHomepages_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, OnlineAccount.ACCOUNTSERVICEHOMEPAGE,
		objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation
     *         'Accountservicehomepage' to this Document instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAccountServiceHomepages_Inverse() {
	return Base.getAll_Inverse(this.model,
		OnlineAccount.ACCOUNTSERVICEHOMEPAGE, this.getResource());
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@43ae24e3 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasPrimaryTopics(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, PRIMARYTOPIC);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@43ae24e3 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasPrimaryTopics() {
	return Base.has(this.model, this.getResource(), PRIMARYTOPIC);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@43ae24e3 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasPrimaryTopic(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, PRIMARYTOPIC, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@43ae24e3 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasPrimaryTopic(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), PRIMARYTOPIC,
		value);
    }

    /**
     * Get all values of property PrimaryTopic as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrimaryTopics_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, PRIMARYTOPIC);
    }

    /**
     * Get all values of property PrimaryTopic as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrimaryTopics_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), PRIMARYTOPIC);
    }

    /**
     * Get all values of property PrimaryTopic * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<org.ontoware.rdfreactor.schema.owl.OwlThing> getAllPrimaryTopics(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, PRIMARYTOPIC,
		org.ontoware.rdfreactor.schema.owl.OwlThing.class);
    }

    /**
     * Get all values of property PrimaryTopic * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<org.ontoware.rdfreactor.schema.owl.OwlThing> getAllPrimaryTopics() {
	return Base.getAll(this.model, this.getResource(), PRIMARYTOPIC,
		org.ontoware.rdfreactor.schema.owl.OwlThing.class);
    }

    /**
     * Adds a value to property PrimaryTopic as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addPrimaryTopic(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, PRIMARYTOPIC, value);
    }

    /**
     * Adds a value to property PrimaryTopic as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addPrimaryTopic(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), PRIMARYTOPIC, value);
    }

    /**
     * Adds a value to property PrimaryTopic from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addPrimaryTopic(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.add(model, instanceResource, PRIMARYTOPIC, value);
    }

    /**
     * Adds a value to property PrimaryTopic from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addPrimaryTopic(
	    org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.add(this.model, this.getResource(), PRIMARYTOPIC, value);
    }

    /**
     * Sets a value of property PrimaryTopic from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setPrimaryTopic(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, PRIMARYTOPIC, value);
    }

    /**
     * Sets a value of property PrimaryTopic from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setPrimaryTopic(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), PRIMARYTOPIC, value);
    }

    /**
     * Sets a value of property PrimaryTopic from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing First, all existing values
     * are removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setPrimaryTopic(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.set(model, instanceResource, PRIMARYTOPIC, value);
    }

    /**
     * Sets a value of property PrimaryTopic from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing First, all existing values
     * are removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setPrimaryTopic(
	    org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.set(this.model, this.getResource(), PRIMARYTOPIC, value);
    }

    /**
     * Removes a value of property PrimaryTopic as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removePrimaryTopic(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, PRIMARYTOPIC, value);
    }

    /**
     * Removes a value of property PrimaryTopic as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removePrimaryTopic(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), PRIMARYTOPIC, value);
    }

    /**
     * Removes a value of property PrimaryTopic given as an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removePrimaryTopic(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.remove(model, instanceResource, PRIMARYTOPIC, value);
    }

    /**
     * Removes a value of property PrimaryTopic given as an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removePrimaryTopic(
	    org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.remove(this.model, this.getResource(), PRIMARYTOPIC, value);
    }

    /**
     * Removes all values of property PrimaryTopic * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllPrimaryTopics(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, PRIMARYTOPIC);
    }

    /**
     * Removes all values of property PrimaryTopic * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllPrimaryTopics() {
	Base.removeAll(this.model, this.getResource(), PRIMARYTOPIC);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@63edf119 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSha1Sums(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, SHA1SUM);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@63edf119 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSha1Sums() {
	return Base.has(this.model, this.getResource(), SHA1SUM);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@63edf119 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSha1Sum(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, SHA1SUM, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@63edf119 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasSha1Sum(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), SHA1SUM, value);
    }

    /**
     * Get all values of property Sha1Sum as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSha1Sums_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, SHA1SUM);
    }

    /**
     * Get all values of property Sha1Sum as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSha1Sums_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), SHA1SUM);
    }

    /**
     * Get all values of property Sha1Sum * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<FOAFThing> getAllSha1Sums(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, SHA1SUM, FOAFThing.class);
    }

    /**
     * Get all values of property Sha1Sum * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<FOAFThing> getAllSha1Sums() {
	return Base.getAll(this.model, this.getResource(), SHA1SUM,
		FOAFThing.class);
    }

    /**
     * Adds a value to property Sha1Sum as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSha1Sum(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, SHA1SUM, value);
    }

    /**
     * Adds a value to property Sha1Sum as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSha1Sum(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), SHA1SUM, value);
    }

    /**
     * Adds a value to property Sha1Sum from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSha1Sum(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    FOAFThing value) {
	Base.add(model, instanceResource, SHA1SUM, value);
    }

    /**
     * Adds a value to property Sha1Sum from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSha1Sum(FOAFThing value) {
	Base.add(this.model, this.getResource(), SHA1SUM, value);
    }

    /**
     * Sets a value of property Sha1Sum from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSha1Sum(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, SHA1SUM, value);
    }

    /**
     * Sets a value of property Sha1Sum from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSha1Sum(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), SHA1SUM, value);
    }

    /**
     * Sets a value of property Sha1Sum from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSha1Sum(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    FOAFThing value) {
	Base.set(model, instanceResource, SHA1SUM, value);
    }

    /**
     * Sets a value of property Sha1Sum from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSha1Sum(FOAFThing value) {
	Base.set(this.model, this.getResource(), SHA1SUM, value);
    }

    /**
     * Removes a value of property Sha1Sum as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSha1Sum(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, SHA1SUM, value);
    }

    /**
     * Removes a value of property Sha1Sum as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeSha1Sum(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), SHA1SUM, value);
    }

    /**
     * Removes a value of property Sha1Sum given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSha1Sum(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    FOAFThing value) {
	Base.remove(model, instanceResource, SHA1SUM, value);
    }

    /**
     * Removes a value of property Sha1Sum given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSha1Sum(FOAFThing value) {
	Base.remove(this.model, this.getResource(), SHA1SUM, value);
    }

    /**
     * Removes all values of property Sha1Sum * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSha1Sums(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, SHA1SUM);
    }

    /**
     * Removes all values of property Sha1Sum * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllSha1Sums() {
	Base.removeAll(this.model, this.getResource(), SHA1SUM);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@60bfd2f5 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasTopics(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, TOPIC);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@60bfd2f5 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasTopics() {
	return Base.has(this.model, this.getResource(), TOPIC);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@60bfd2f5 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasTopic(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, TOPIC, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@60bfd2f5 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasTopic(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), TOPIC, value);
    }

    /**
     * Get all values of property Topic as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTopics_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, TOPIC);
    }

    /**
     * Get all values of property Topic as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTopics_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), TOPIC);
    }

    /**
     * Get all values of property Topic * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<FOAFThing> getAllTopics(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, TOPIC, FOAFThing.class);
    }

    /**
     * Get all values of property Topic * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<FOAFThing> getAllTopics() {
	return Base.getAll(this.model, this.getResource(), TOPIC,
		FOAFThing.class);
    }

    /**
     * Adds a value to property Topic as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addTopic(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, TOPIC, value);
    }

    /**
     * Adds a value to property Topic as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addTopic(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), TOPIC, value);
    }

    /**
     * Adds a value to property Topic from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addTopic(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    FOAFThing value) {
	Base.add(model, instanceResource, TOPIC, value);
    }

    /**
     * Adds a value to property Topic from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addTopic(FOAFThing value) {
	Base.add(this.model, this.getResource(), TOPIC, value);
    }

    /**
     * Sets a value of property Topic from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setTopic(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, TOPIC, value);
    }

    /**
     * Sets a value of property Topic from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setTopic(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), TOPIC, value);
    }

    /**
     * Sets a value of property Topic from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing First, all existing values
     * are removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setTopic(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    FOAFThing value) {
	Base.set(model, instanceResource, TOPIC, value);
    }

    /**
     * Sets a value of property Topic from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing First, all existing values
     * are removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setTopic(org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.set(this.model, this.getResource(), TOPIC, value);
    }

    /**
     * Removes a value of property Topic as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeTopic(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, TOPIC, value);
    }

    /**
     * Removes a value of property Topic as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeTopic(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), TOPIC, value);
    }

    /**
     * Removes a value of property Topic given as an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeTopic(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    FOAFThing value) {
	Base.remove(model, instanceResource, TOPIC, value);
    }

    /**
     * Removes a value of property Topic given as an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeTopic(FOAFThing value) {
	Base.remove(this.model, this.getResource(), TOPIC, value);
    }

    /**
     * Removes all values of property Topic * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllTopics(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, TOPIC);
    }

    /**
     * Removes all values of property Topic * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllTopics() {
	Base.removeAll(this.model, this.getResource(), TOPIC);
    }
}