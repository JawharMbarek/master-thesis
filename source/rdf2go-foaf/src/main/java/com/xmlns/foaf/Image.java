/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) on 21.12.12 17:00
 */
package com.xmlns.foaf;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;

/**
 * This class manages access to these properties:
 * <ul>
 * <li>Depicts</li>
 * <li>Thumbnail</li>
 * </ul>
 * 
 * This class was generated by <a
 * href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 21.12.12 17:00
 */
public class Image extends Document {

    /**
     * 
     */
    private static final long serialVersionUID = 5568006818407354092L;

    /** http://xmlns.com/foaf/0.1/Image */
    public static final URI RDFS_CLASS = new URIImpl(
	    "http://xmlns.com/foaf/0.1/Image", false);

    /** http://xmlns.com/foaf/0.1/depicts */
    public static final URI DEPICTS = new URIImpl(
	    "http://xmlns.com/foaf/0.1/depicts", false);

    /** http://xmlns.com/foaf/0.1/thumbnail */
    public static final URI THUMBNAIL = new URIImpl(
	    "http://xmlns.com/foaf/0.1/thumbnail", false);

    /**
     * All property-URIs with this class as domain. All properties of all
     * super-classes are also available.
     */
    public static final URI[] MANAGED_URIS = {
	    new URIImpl("http://xmlns.com/foaf/0.1/depicts", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/thumbnail", false) };

    // protected constructors needed for inheritance

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.semweb4j.org
     * @param classURI
     *            URI of RDFS class
     * @param instanceIdentifier
     *            Resource that identifies this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c1]
     */
    protected Image(Model model, URI classURI,
	    org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
	    boolean write) {
	super(model, classURI, instanceIdentifier, write);
    }

    // public constructors

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param instanceIdentifier
     *            an RDF2Go Resource identifying this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c2]
     */
    public Image(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
	    boolean write) {
	super(model, RDFS_CLASS, instanceIdentifier, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a URI, given as
     * a String. Creating two wrappers for the same URI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param uriString
     *            a URI given as a String
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * @throws ModelRuntimeException
     *             if URI syntax is wrong
     * 
     *             [Generated from RDFReactor template rule #c7]
     */
    public Image(Model model, String uriString, boolean write)
	    throws ModelRuntimeException {
	super(model, RDFS_CLASS, new URIImpl(uriString, false), write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a blank node.
     * Creating two wrappers for the same blank node is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param bnode
     *            BlankNode of this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c8]
     */
    public Image(Model model, BlankNode bnode, boolean write) {
	super(model, RDFS_CLASS, bnode, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a randomly
     * generated URI. Creating two wrappers results in different URIs.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c9]
     */
    public Image(Model model, boolean write) {
	super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
    }

    // /////////////////////////////////////////////////////////////////
    // typing

    /**
     * Return an existing instance of this class in the model. No statements are
     * written.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return an instance of Image or null if none existst
     * 
     *         [Generated from RDFReactor template rule #class0]
     */
    public static Image getInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getInstance(model, instanceResource, Image.class);
    }

    /**
     * Create a new instance of this class in the model. That is, create the
     * statement (instanceResource, RDF.type, http://xmlns.com/foaf/0.1/Image).
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class1]
     */
    public static void createInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.createInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return true if instanceResource is an instance of this class in the
     *         model
     * 
     *         [Generated from RDFReactor template rule #class2]
     */
    public static boolean hasInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.hasInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @return all instances of this class in Model 'model' as RDF resources
     * 
     *         [Generated from RDFReactor template rule #class3]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(
	    Model model) {
	return Base.getAllInstances(model, RDFS_CLASS,
		org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * Remove rdf:type Image from this instance. Other triples are not affected.
     * To delete more, use deleteAllProperties
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class4]
     */
    public static void deleteInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.deleteInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * Delete all (this, *, *), i.e. including rdf:type
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     */
    public static void deleteAllProperties(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.deleteAllProperties(model, instanceResource);
    }

    // /////////////////////////////////////////////////////////////////
    // property access methods

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Depiction' to
     *         this Image instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDepictions_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Thing.DEPICTION, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Depiction' to
     *         this Image instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDepictions_Inverse() {
	return Base.getAll_Inverse(this.model, Thing.DEPICTION,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Image' to this
     *         Image instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllImages_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Person.IMAGE, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Image' to this
     *         Image instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllImages_Inverse() {
	return Base
		.getAll_Inverse(this.model, Person.IMAGE, this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Thumbnail' to
     *         this Image instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllThumbnails_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Image.THUMBNAIL, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Thumbnail' to
     *         this Image instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllThumbnails_Inverse() {
	return Base.getAll_Inverse(this.model, Image.THUMBNAIL,
		this.getResource());
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@30c0ef9 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasDepicts(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, DEPICTS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@30c0ef9 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasDepicts() {
	return Base.has(this.model, this.getResource(), DEPICTS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@30c0ef9 has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasDepicts(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, DEPICTS, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@30c0ef9 has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasDepicts(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), DEPICTS, value);
    }

    /**
     * Get all values of property Depicts as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDepicts_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, DEPICTS);
    }

    /**
     * Get all values of property Depicts as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDepicts_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), DEPICTS);
    }

    /**
     * Get all values of property Depicts * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<org.ontoware.rdfreactor.schema.owl.OwlThing> getAllDepicts(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, DEPICTS,
		org.ontoware.rdfreactor.schema.owl.OwlThing.class);
    }

    /**
     * Get all values of property Depicts * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<org.ontoware.rdfreactor.schema.owl.OwlThing> getAllDepicts() {
	return Base.getAll(this.model, this.getResource(), DEPICTS,
		org.ontoware.rdfreactor.schema.owl.OwlThing.class);
    }

    /**
     * Get all values of property Depicts * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public org.ontoware.rdfreactor.schema.owl.OwlThing getDepicts() {
	return Base.getAll_as(this.model, this.getResource(), DEPICTS,
		org.ontoware.rdfreactor.schema.owl.OwlThing.class).firstValue();
    }

    /**
     * Adds a value to property Depicts as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addDepicts(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, DEPICTS, value);
    }

    /**
     * Adds a value to property Depicts as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addDepicts(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), DEPICTS, value);
    }

    /**
     * Adds a value to property Depicts from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addDepicts(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.add(model, instanceResource, DEPICTS, value);
    }

    /**
     * Adds a value to property Depicts from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addDepicts(org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.add(this.model, this.getResource(), DEPICTS, value);
    }

    /**
     * Sets a value of property Depicts from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setDepicts(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, DEPICTS, value);
    }

    /**
     * Sets a value of property Depicts from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setDepicts(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), DEPICTS, value);
    }

    /**
     * Sets a value of property Depicts from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing First, all existing values
     * are removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setDepicts(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.set(model, instanceResource, DEPICTS, value);
    }

    /**
     * Sets a value of property Depicts from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing First, all existing values
     * are removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setDepicts(org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.set(this.model, this.getResource(), DEPICTS, value);
    }

    /**
     * Removes a value of property Depicts as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeDepicts(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, DEPICTS, value);
    }

    /**
     * Removes a value of property Depicts as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeDepicts(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), DEPICTS, value);
    }

    /**
     * Removes a value of property Depicts given as an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeDepicts(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.remove(model, instanceResource, DEPICTS, value);
    }

    /**
     * Removes a value of property Depicts given as an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeDepicts(org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.remove(this.model, this.getResource(), DEPICTS, value);
    }

    /**
     * Removes all values of property Depicts * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllDepicts(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, DEPICTS);
    }

    /**
     * Removes all values of property Depicts * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllDepicts() {
	Base.removeAll(this.model, this.getResource(), DEPICTS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ee1f114 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasThumbnails(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, THUMBNAIL);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ee1f114 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasThumbnails() {
	return Base.has(this.model, this.getResource(), THUMBNAIL);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ee1f114 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasThumbnail(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, THUMBNAIL, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1ee1f114 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasThumbnail(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), THUMBNAIL, value);
    }

    /**
     * Get all values of property Thumbnail as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllThumbnails_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, THUMBNAIL);
    }

    /**
     * Get all values of property Thumbnail as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllThumbnails_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), THUMBNAIL);
    }

    /**
     * Get all values of property Thumbnail * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Image> getAllThumbnails(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, THUMBNAIL, Image.class);
    }

    /**
     * Get all values of property Thumbnail * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Image> getAllThumbnails() {
	return Base.getAll(this.model, this.getResource(), THUMBNAIL,
		Image.class);
    }

    /**
     * Get all values of property Thumbnail * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public Image getThumbnail() {
	return Base.getAll_as(this.model, this.getResource(), THUMBNAIL,
		Image.class).firstValue();
    }

    /**
     * Adds a value to property Thumbnail as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addThumbnail(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, THUMBNAIL, value);
    }

    /**
     * Adds a value to property Thumbnail as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addThumbnail(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), THUMBNAIL, value);
    }

    /**
     * Adds a value to property Thumbnail from an instance of Image
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addThumbnail(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Image value) {
	Base.add(model, instanceResource, THUMBNAIL, value);
    }

    /**
     * Adds a value to property Thumbnail from an instance of Image
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addThumbnail(Image value) {
	Base.add(this.model, this.getResource(), THUMBNAIL, value);
    }

    /**
     * Sets a value of property Thumbnail from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setThumbnail(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, THUMBNAIL, value);
    }

    /**
     * Sets a value of property Thumbnail from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setThumbnail(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), THUMBNAIL, value);
    }

    /**
     * Sets a value of property Thumbnail from an instance of Image First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setThumbnail(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Image value) {
	Base.set(model, instanceResource, THUMBNAIL, value);
    }

    /**
     * Sets a value of property Thumbnail from an instance of Image First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setThumbnail(Image value) {
	Base.set(this.model, this.getResource(), THUMBNAIL, value);
    }

    /**
     * Removes a value of property Thumbnail as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeThumbnail(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, THUMBNAIL, value);
    }

    /**
     * Removes a value of property Thumbnail as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeThumbnail(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), THUMBNAIL, value);
    }

    /**
     * Removes a value of property Thumbnail given as an instance of Image
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeThumbnail(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Image value) {
	Base.remove(model, instanceResource, THUMBNAIL, value);
    }

    /**
     * Removes a value of property Thumbnail given as an instance of Image
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeThumbnail(Image value) {
	Base.remove(this.model, this.getResource(), THUMBNAIL, value);
    }

    /**
     * Removes all values of property Thumbnail * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllThumbnails(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, THUMBNAIL);
    }

    /**
     * Removes all values of property Thumbnail * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllThumbnails() {
	Base.removeAll(this.model, this.getResource(), THUMBNAIL);
    }
}