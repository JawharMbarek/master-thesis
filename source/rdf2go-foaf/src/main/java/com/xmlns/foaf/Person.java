/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) on 21.12.12 17:00
 */
package com.xmlns.foaf;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;

/**
 * This class manages access to these properties:
 * <ul>
 * <li>BasedNear</li>
 * <li>CurrentProject</li>
 * <li>FamilyName</li>
 * <li>Familyname</li>
 * <li>FirstName</li>
 * <li>GeekCode</li>
 * <li>Image</li>
 * <li>Knows</li>
 * <li>LastName</li>
 * <li>MyersBriggs</li>
 * <li>PastProject</li>
 * <li>Plan</li>
 * <li>Publications</li>
 * <li>SchoolHomepage</li>
 * <li>Surname</li>
 * <li>WorkInfoHomepage</li>
 * <li>WorkplaceHomepage</li>
 * </ul>
 * 
 * This class was generated by <a
 * href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 21.12.12 17:00
 */
public class Person extends Agent {

    /**
     * 
     */
    private static final long serialVersionUID = -7850523841145965710L;

    /** http://xmlns.com/foaf/0.1/Person */
    public static final URI RDFS_CLASS = new URIImpl(
	    "http://xmlns.com/foaf/0.1/Person", false);

    /** http://xmlns.com/foaf/0.1/based_near */
    public static final URI BASEDNEAR = new URIImpl(
	    "http://xmlns.com/foaf/0.1/based_near", false);

    /** http://xmlns.com/foaf/0.1/currentProject */
    public static final URI CURRENTPROJECT = new URIImpl(
	    "http://xmlns.com/foaf/0.1/currentProject", false);

    /** http://xmlns.com/foaf/0.1/familyName */
    public static final URI FAMILYNAME = new URIImpl(
	    "http://xmlns.com/foaf/0.1/familyName", false);

    /** http://xmlns.com/foaf/0.1/firstName */
    public static final URI FIRSTNAME = new URIImpl(
	    "http://xmlns.com/foaf/0.1/firstName", false);

    /** http://xmlns.com/foaf/0.1/geekcode */
    public static final URI GEEKCODE = new URIImpl(
	    "http://xmlns.com/foaf/0.1/geekcode", false);

    /** http://xmlns.com/foaf/0.1/img */
    public static final URI IMAGE = new URIImpl(
	    "http://xmlns.com/foaf/0.1/img", false);

    /** http://xmlns.com/foaf/0.1/knows */
    public static final URI KNOWS = new URIImpl(
	    "http://xmlns.com/foaf/0.1/knows", false);

    /** http://xmlns.com/foaf/0.1/lastName */
    public static final URI LASTNAME = new URIImpl(
	    "http://xmlns.com/foaf/0.1/lastName", false);

    /** http://xmlns.com/foaf/0.1/myersBriggs */
    public static final URI MYERSBRIGGS = new URIImpl(
	    "http://xmlns.com/foaf/0.1/myersBriggs", false);

    /** http://xmlns.com/foaf/0.1/pastProject */
    public static final URI PASTPROJECT = new URIImpl(
	    "http://xmlns.com/foaf/0.1/pastProject", false);

    /** http://xmlns.com/foaf/0.1/plan */
    public static final URI PLAN = new URIImpl(
	    "http://xmlns.com/foaf/0.1/plan", false);

    /** http://xmlns.com/foaf/0.1/publications */
    public static final URI PUBLICATIONS = new URIImpl(
	    "http://xmlns.com/foaf/0.1/publications", false);

    /** http://xmlns.com/foaf/0.1/schoolHomepage */
    public static final URI SCHOOLHOMEPAGE = new URIImpl(
	    "http://xmlns.com/foaf/0.1/schoolHomepage", false);

    /** http://xmlns.com/foaf/0.1/surname */
    public static final URI SURNAME = new URIImpl(
	    "http://xmlns.com/foaf/0.1/surname", false);

    /** http://xmlns.com/foaf/0.1/workInfoHomepage */
    public static final URI WORKINFOHOMEPAGE = new URIImpl(
	    "http://xmlns.com/foaf/0.1/workInfoHomepage", false);

    /** http://xmlns.com/foaf/0.1/workplaceHomepage */
    public static final URI WORKPLACEHOMEPAGE = new URIImpl(
	    "http://xmlns.com/foaf/0.1/workplaceHomepage", false);

    /**
     * All property-URIs with this class as domain. All properties of all
     * super-classes are also available.
     */
    public static final URI[] MANAGED_URIS = {
	    new URIImpl("http://xmlns.com/foaf/0.1/based_near", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/currentProject", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/familyName", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/firstName", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/geekcode", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/img", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/knows", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/lastName", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/myersBriggs", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/pastProject", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/plan", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/publications", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/schoolHomepage", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/surname", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/workInfoHomepage", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/workplaceHomepage", false), };

    // protected constructors needed for inheritance

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.semweb4j.org
     * @param classURI
     *            URI of RDFS class
     * @param instanceIdentifier
     *            Resource that identifies this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c1]
     */
    protected Person(Model model, URI classURI,
	    org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
	    boolean write) {
	super(model, classURI, instanceIdentifier, write);
    }

    // public constructors

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param instanceIdentifier
     *            an RDF2Go Resource identifying this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c2]
     */
    public Person(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
	    boolean write) {
	super(model, RDFS_CLASS, instanceIdentifier, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a URI, given as
     * a String. Creating two wrappers for the same URI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param uriString
     *            a URI given as a String
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * @throws ModelRuntimeException
     *             if URI syntax is wrong
     * 
     *             [Generated from RDFReactor template rule #c7]
     */
    public Person(Model model, String uriString, boolean write)
	    throws ModelRuntimeException {
	super(model, RDFS_CLASS, new URIImpl(uriString, false), write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a blank node.
     * Creating two wrappers for the same blank node is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param bnode
     *            BlankNode of this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c8]
     */
    public Person(Model model, BlankNode bnode, boolean write) {
	super(model, RDFS_CLASS, bnode, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a randomly
     * generated URI. Creating two wrappers results in different URIs.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c9]
     */
    public Person(Model model, boolean write) {
	super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
    }

    // /////////////////////////////////////////////////////////////////
    // typing

    /**
     * Return an existing instance of this class in the model. No statements are
     * written.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return an instance of Person or null if none existst
     * 
     *         [Generated from RDFReactor template rule #class0]
     */
    public static Person getInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getInstance(model, instanceResource, Person.class);
    }

    /**
     * Create a new instance of this class in the model. That is, create the
     * statement (instanceResource, RDF.type, http://xmlns.com/foaf/0.1/Person).
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class1]
     */
    public static void createInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.createInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return true if instanceResource is an instance of this class in the
     *         model
     * 
     *         [Generated from RDFReactor template rule #class2]
     */
    public static boolean hasInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.hasInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @return all instances of this class in Model 'model' as RDF resources
     * 
     *         [Generated from RDFReactor template rule #class3]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(
	    Model model) {
	return Base.getAllInstances(model, RDFS_CLASS,
		org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * Remove rdf:type Person from this instance. Other triples are not
     * affected. To delete more, use deleteAllProperties
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class4]
     */
    public static void deleteInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.deleteInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * Delete all (this, *, *), i.e. including rdf:type
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     */
    public static void deleteAllProperties(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.deleteAllProperties(model, instanceResource);
    }

    // /////////////////////////////////////////////////////////////////
    // property access methods

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Knows' to this
     *         Person instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllKnows_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Person.KNOWS, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Knows' to this
     *         Person instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllKnows_Inverse() {
	return Base
		.getAll_Inverse(this.model, Person.KNOWS, this.getResource());
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a95d12e has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasBasedNear(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, BASEDNEAR);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a95d12e has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasBasedNear() {
	return Base.has(this.model, this.getResource(), BASEDNEAR);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a95d12e has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasBasedNear(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, BASEDNEAR, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2a95d12e has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasBasedNear(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), BASEDNEAR, value);
    }

    /**
     * Get all values of property BasedNear as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBasedNear_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, BASEDNEAR);
    }

    /**
     * Get all values of property BasedNear as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllBasedNear_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), BASEDNEAR);
    }

    /**
     * Get all values of property BasedNear * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<SpatialThing> getAllBasedNear(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, BASEDNEAR,
		SpatialThing.class);
    }

    /**
     * Get all values of property BasedNear * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<SpatialThing> getAllBasedNear() {
	return Base.getAll(this.model, this.getResource(), BASEDNEAR,
		SpatialThing.class);
    }

    /**
     * Get all values of property BasedNear as a ReactorResult of SpatialThing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public SpatialThing getBasedNear() {
	return Base.getAll_as(this.model, this.getResource(), BASEDNEAR,
		SpatialThing.class).firstValue();
    }

    /**
     * Adds a value to property BasedNear as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addBasedNear(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, BASEDNEAR, value);
    }

    /**
     * Adds a value to property BasedNear as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addBasedNear(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), BASEDNEAR, value);
    }

    /**
     * Adds a value to property BasedNear from an instance of SpatialThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addBasedNear(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    SpatialThing value) {
	Base.add(model, instanceResource, BASEDNEAR, value);
    }

    /**
     * Adds a value to property BasedNear from an instance of SpatialThing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addBasedNear(SpatialThing value) {
	Base.add(this.model, this.getResource(), BASEDNEAR, value);
    }

    /**
     * Sets a value of property BasedNear from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setBasedNear(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, BASEDNEAR, value);
    }

    /**
     * Sets a value of property BasedNear from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setBasedNear(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), BASEDNEAR, value);
    }

    /**
     * Sets a value of property BasedNear from an instance of SpatialThing
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setBasedNear(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    SpatialThing value) {
	Base.set(model, instanceResource, BASEDNEAR, value);
    }

    /**
     * Sets a value of property BasedNear from an instance of SpatialThing
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setBasedNear(SpatialThing value) {
	Base.set(this.model, this.getResource(), BASEDNEAR, value);
    }

    /**
     * Removes a value of property BasedNear as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeBasedNear(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, BASEDNEAR, value);
    }

    /**
     * Removes a value of property BasedNear as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeBasedNear(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), BASEDNEAR, value);
    }

    /**
     * Removes a value of property BasedNear given as an instance of
     * SpatialThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeBasedNear(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    SpatialThing value) {
	Base.remove(model, instanceResource, BASEDNEAR, value);
    }

    /**
     * Removes a value of property BasedNear given as an instance of
     * SpatialThing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeBasedNear(SpatialThing value) {
	Base.remove(this.model, this.getResource(), BASEDNEAR, value);
    }

    /**
     * Removes all values of property BasedNear * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllBasedNear(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, BASEDNEAR);
    }

    /**
     * Removes all values of property BasedNear * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllBasedNear() {
	Base.removeAll(this.model, this.getResource(), BASEDNEAR);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b2fbba9 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasCurrentProjects(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, CURRENTPROJECT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b2fbba9 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasCurrentProjects() {
	return Base.has(this.model, this.getResource(), CURRENTPROJECT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b2fbba9 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasCurrentProject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, CURRENTPROJECT, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4b2fbba9 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasCurrentProject(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), CURRENTPROJECT,
		value);
    }

    /**
     * Get all values of property CurrentProject as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCurrentProjects_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, CURRENTPROJECT);
    }

    /**
     * Get all values of property CurrentProject as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCurrentProjects_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(),
		CURRENTPROJECT);
    }

    /**
     * Get all values of property CurrentProject * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<org.ontoware.rdfreactor.schema.owl.OwlThing> getAllCurrentProjects(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, CURRENTPROJECT,
		org.ontoware.rdfreactor.schema.owl.OwlThing.class);
    }

    /**
     * Get all values of property CurrentProject * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<org.ontoware.rdfreactor.schema.owl.OwlThing> getAllCurrentProjects() {
	return Base.getAll(this.model, this.getResource(), CURRENTPROJECT,
		org.ontoware.rdfreactor.schema.owl.OwlThing.class);
    }

    /**
     * Get all values of property CurrentProject as a ReactorResult of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public org.ontoware.rdfreactor.schema.owl.OwlThing getCurrentProject() {
	return Base.getAll_as(this.model, this.getResource(), CURRENTPROJECT,
		org.ontoware.rdfreactor.schema.owl.OwlThing.class).firstValue();
    }

    /**
     * Adds a value to property CurrentProject as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addCurrentProject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, CURRENTPROJECT, value);
    }

    /**
     * Adds a value to property CurrentProject as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addCurrentProject(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), CURRENTPROJECT, value);
    }

    /**
     * Adds a value to property CurrentProject from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addCurrentProject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.add(model, instanceResource, CURRENTPROJECT, value);
    }

    /**
     * Adds a value to property CurrentProject from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addCurrentProject(
	    org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.add(this.model, this.getResource(), CURRENTPROJECT, value);
    }

    /**
     * Sets a value of property CurrentProject from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setCurrentProject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, CURRENTPROJECT, value);
    }

    /**
     * Sets a value of property CurrentProject from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setCurrentProject(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), CURRENTPROJECT, value);
    }

    /**
     * Sets a value of property CurrentProject from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing First, all existing values
     * are removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setCurrentProject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.set(model, instanceResource, CURRENTPROJECT, value);
    }

    /**
     * Sets a value of property CurrentProject from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing First, all existing values
     * are removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setCurrentProject(
	    org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.set(this.model, this.getResource(), CURRENTPROJECT, value);
    }

    /**
     * Removes a value of property CurrentProject as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeCurrentProject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, CURRENTPROJECT, value);
    }

    /**
     * Removes a value of property CurrentProject as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeCurrentProject(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), CURRENTPROJECT, value);
    }

    /**
     * Removes a value of property CurrentProject given as an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeCurrentProject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.remove(model, instanceResource, CURRENTPROJECT, value);
    }

    /**
     * Removes a value of property CurrentProject given as an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeCurrentProject(
	    org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.remove(this.model, this.getResource(), CURRENTPROJECT, value);
    }

    /**
     * Removes all values of property CurrentProject * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllCurrentProjects(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, CURRENTPROJECT);
    }

    /**
     * Removes all values of property CurrentProject * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllCurrentProjects() {
	Base.removeAll(this.model, this.getResource(), CURRENTPROJECT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33ffb584 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasFamilyNames(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, FAMILYNAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33ffb584 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasFamilyNamess() {
	return Base.has(this.model, this.getResource(), FAMILYNAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33ffb584 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasFamilyName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	return Base.hasValue(model, instanceResource, FAMILYNAME, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33ffb584 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasFamilyName(String value) {
	return Base.hasValue(this.model, this.getResource(), FAMILYNAME, value);
    }

    /**
     * Get all values of property FamilyName as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFamilyNamess_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, FAMILYNAME);
    }

    /**
     * Get all values of property FamilyName as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFamilyNames_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), FAMILYNAME);
    }

    /**
     * Get all values of property FamilyName * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllFamilyNames(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, FAMILYNAME,
		java.lang.String.class);
    }

    /**
     * Get all values of property FamilyName * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllFamilyNames() {
	return Base.getAll(this.model, this.getResource(), FAMILYNAME,
		java.lang.String.class);
    }

    /**
     * Get all values of property FamilyName as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getFamilyName() {
	return Base.getAll_as(this.model, this.getResource(), FAMILYNAME,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property FamilyName as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addFamilyName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, FAMILYNAME, value);
    }

    /**
     * Adds a value to property FamilyName as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addFamilyName(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), FAMILYNAME, value);
    }

    /**
     * Adds a value to property FamilyName from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addFamilyName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, FAMILYNAME, value);
    }

    /**
     * Adds a value to property FamilyName from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addFamilyName(java.lang.String value) {
	Base.add(this.model, this.getResource(), FAMILYNAME, value);
    }

    /**
     * Sets a value of property FamilyName from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setFamilyName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, FAMILYNAME, value);
    }

    /**
     * Sets a value of property FamilyName from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setFamilyName(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), FAMILYNAME, value);
    }

    /**
     * Sets a value of property FamilyName from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setFamilyName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, FAMILYNAME, value);
    }

    /**
     * Sets a value of property FamilyName from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setFamilyName(java.lang.String value) {
	Base.set(this.model, this.getResource(), FAMILYNAME, value);
    }

    /**
     * Removes a value of property FamilyName as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeFamilyName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, FAMILYNAME, value);
    }

    /**
     * Removes a value of property FamilyName as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeFamilyName(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), FAMILYNAME, value);
    }

    /**
     * Removes a value of property FamilyName given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeFamilyName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, FAMILYNAME, value);
    }

    /**
     * Removes a value of property FamilyName given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeFamilyName(java.lang.String value) {
	Base.remove(this.model, this.getResource(), FAMILYNAME, value);
    }

    /**
     * Removes all values of property FamilyName * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllFamilyNames(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, FAMILYNAME);
    }

    /**
     * Removes all values of property FamilyName * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllFamilyNames() {
	Base.removeAll(this.model, this.getResource(), FAMILYNAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fe677c4 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasFirstNames(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, FIRSTNAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fe677c4 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasFirstNames() {
	return Base.has(this.model, this.getResource(), FIRSTNAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fe677c4 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasFirstName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	return Base.hasValue(model, instanceResource, FIRSTNAME, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fe677c4 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasFirstName(String value) {
	return Base.hasValue(this.model, this.getResource(), FIRSTNAME, value);
    }

    /**
     * Get all values of property FirstName as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFirstNames_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, FIRSTNAME);
    }

    /**
     * Get all values of property FirstName as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFirstNames_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), FIRSTNAME);
    }

    /**
     * Get all values of property FirstName * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllFirstNames(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, FIRSTNAME,
		java.lang.String.class);
    }

    /**
     * Get all values of property FirstName * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllFirstNames() {
	return Base.getAll(this.model, this.getResource(), FIRSTNAME,
		java.lang.String.class);
    }

    /**
     * Get all values of property FirstName as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getFirstName() {
	return Base.getAll_as(this.model, this.getResource(), FIRSTNAME,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property FirstName as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addFirstName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, FIRSTNAME, value);
    }

    /**
     * Adds a value to property FirstName as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addFirstName(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), FIRSTNAME, value);
    }

    /**
     * Adds a value to property FirstName from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addFirstName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, FIRSTNAME, value);
    }

    /**
     * Adds a value to property FirstName from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addFirstName(java.lang.String value) {
	Base.add(this.model, this.getResource(), FIRSTNAME, value);
    }

    /**
     * Sets a value of property FirstName from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setFirstName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, FIRSTNAME, value);
    }

    /**
     * Sets a value of property FirstName from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setFirstName(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), FIRSTNAME, value);
    }

    /**
     * Sets a value of property FirstName from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setFirstName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, FIRSTNAME, value);
    }

    /**
     * Sets a value of property FirstName from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setFirstName(java.lang.String value) {
	Base.set(this.model, this.getResource(), FIRSTNAME, value);
    }

    /**
     * Removes a value of property FirstName as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeFirstName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, FIRSTNAME, value);
    }

    /**
     * Removes a value of property FirstName as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeFirstName(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), FIRSTNAME, value);
    }

    /**
     * Removes a value of property FirstName given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeFirstName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, FIRSTNAME, value);
    }

    /**
     * Removes a value of property FirstName given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeFirstName(java.lang.String value) {
	Base.remove(this.model, this.getResource(), FIRSTNAME, value);
    }

    /**
     * Removes all values of property FirstName * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllFirstNamess(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, FIRSTNAME);
    }

    /**
     * Removes all values of property FirstName * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllFirstNames() {
	Base.removeAll(this.model, this.getResource(), FIRSTNAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@106df971 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasGeekCodess(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, GEEKCODE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@106df971 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasGeekCode() {
	return Base.has(this.model, this.getResource(), GEEKCODE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@106df971 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasGeekCode(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	return Base.hasValue(model, instanceResource, GEEKCODE, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@106df971 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasGeekCode(String value) {
	return Base.hasValue(this.model, this.getResource(), GEEKCODE, value);
    }

    /**
     * Get all values of property GeekCode as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGeekCodes_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, GEEKCODE);
    }

    /**
     * Get all values of property GeekCode as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGeekCodes_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), GEEKCODE);
    }

    /**
     * Get all values of property GeekCode * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllGeekCodes(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, GEEKCODE,
		java.lang.String.class);
    }

    /**
     * Get all values of property GeekCode * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllGeekCodes() {
	return Base.getAll(this.model, this.getResource(), GEEKCODE,
		java.lang.String.class);
    }

    /**
     * Get all values of property GeekCode as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getGeekCode() {
	return Base.getAll_as(this.model, this.getResource(), GEEKCODE,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property GeekCode as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addGeekCode(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, GEEKCODE, value);
    }

    /**
     * Adds a value to property GeekCode as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addGeekCode(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), GEEKCODE, value);
    }

    /**
     * Adds a value to property GeekCode from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addGeekCode(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, GEEKCODE, value);
    }

    /**
     * Adds a value to property GeekCode from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addGeekCode(java.lang.String value) {
	Base.add(this.model, this.getResource(), GEEKCODE, value);
    }

    /**
     * Sets a value of property GeekCode from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setGeekCode(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, GEEKCODE, value);
    }

    /**
     * Sets a value of property GeekCode from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setGeekCode(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), GEEKCODE, value);
    }

    /**
     * Sets a value of property GeekCode from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setGeekCode(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, GEEKCODE, value);
    }

    /**
     * Sets a value of property GeekCode from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setGeekCode(java.lang.String value) {
	Base.set(this.model, this.getResource(), GEEKCODE, value);
    }

    /**
     * Removes a value of property GeekCode as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeGeekCode(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, GEEKCODE, value);
    }

    /**
     * Removes a value of property GeekCode as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeGeekCode(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), GEEKCODE, value);
    }

    /**
     * Removes a value of property GeekCode given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeGeekCode(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, GEEKCODE, value);
    }

    /**
     * Removes a value of property GeekCode given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeGeekCode(java.lang.String value) {
	Base.remove(this.model, this.getResource(), GEEKCODE, value);
    }

    /**
     * Removes all values of property GeekCode * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllGeekCodes(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, GEEKCODE);
    }

    /**
     * Removes all values of property GeekCode * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllGeekCodes() {
	Base.removeAll(this.model, this.getResource(), GEEKCODE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69d13cb2 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasImages(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, IMAGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69d13cb2 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasImages() {
	return Base.has(this.model, this.getResource(), IMAGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69d13cb2 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasImage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, IMAGE, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@69d13cb2 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasImage(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), IMAGE, value);
    }

    /**
     * Get all values of property Image as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImages_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, IMAGE);
    }

    /**
     * Get all values of property Image as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllImages_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), IMAGE);
    }

    /**
     * Get all values of property Image * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Image> getAllImages(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, IMAGE, Image.class);
    }

    /**
     * Get all values of property Image * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Image> getAllImages() {
	return Base.getAll(this.model, this.getResource(), IMAGE, Image.class);
    }

    /**
     * Get all values of property Image as a ReactorResult of Image
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Image getImage() {
	return Base.getAll_as(this.model, this.getResource(), IMAGE,
		Image.class).firstValue();
    }

    /**
     * Adds a value to property Image as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addImage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, IMAGE, value);
    }

    /**
     * Adds a value to property Image as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addImage(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), IMAGE, value);
    }

    /**
     * Adds a value to property Image from an instance of Image
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addImage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Image value) {
	Base.add(model, instanceResource, IMAGE, value);
    }

    /**
     * Adds a value to property Image from an instance of Image
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addImage(Image value) {
	Base.add(this.model, this.getResource(), IMAGE, value);
    }

    /**
     * Sets a value of property Image from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setImage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, IMAGE, value);
    }

    /**
     * Sets a value of property Image from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setImage(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), IMAGE, value);
    }

    /**
     * Sets a value of property Image from an instance of Image First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setImage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Image value) {
	Base.set(model, instanceResource, IMAGE, value);
    }

    /**
     * Sets a value of property Image from an instance of Image First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setImage(Image value) {
	Base.set(this.model, this.getResource(), IMAGE, value);
    }

    /**
     * Removes a value of property Image as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeImage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, IMAGE, value);
    }

    /**
     * Removes a value of property Image as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeImage(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), IMAGE, value);
    }

    /**
     * Removes a value of property Image given as an instance of Image
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeImage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Image value) {
	Base.remove(model, instanceResource, IMAGE, value);
    }

    /**
     * Removes a value of property Image given as an instance of Image
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeImage(Image value) {
	Base.remove(this.model, this.getResource(), IMAGE, value);
    }

    /**
     * Removes all values of property Image * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllImages(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, IMAGE);
    }

    /**
     * Removes all values of property Image * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllImages() {
	Base.removeAll(this.model, this.getResource(), IMAGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a4da220 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasKnows(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, KNOWS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a4da220 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasKnows() {
	return Base.has(this.model, this.getResource(), KNOWS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a4da220 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasKnows(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, KNOWS, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a4da220 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasKnows(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), KNOWS, value);
    }

    /**
     * Get all values of property Knows as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllKnows_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, KNOWS);
    }

    /**
     * Get all values of property Knows as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllKnows_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), KNOWS);
    }

    /**
     * Get all values of property Knows * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Person> getAllKnows(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, KNOWS, Person.class);
    }

    /**
     * Get all values of property Knows * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Person> getAllKnows() {
	return Base.getAll(this.model, this.getResource(), KNOWS, Person.class);
    }

    /**
     * Get all values of property Knows as a ReactorResult of Person
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Person getKnows() {
	return Base.getAll_as(this.model, this.getResource(), KNOWS,
		Person.class).firstValue();
    }

    /**
     * Adds a value to property Knows as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addKnows(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, KNOWS, value);
    }

    /**
     * Adds a value to property Knows as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addKnows(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), KNOWS, value);
    }

    /**
     * Adds a value to property Knows from an instance of Person
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addKnows(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Person value) {
	Base.add(model, instanceResource, KNOWS, value);
    }

    /**
     * Adds a value to property Knows from an instance of Person
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addKnows(Person value) {
	Base.add(this.model, this.getResource(), KNOWS, value);
    }

    /**
     * Sets a value of property Knows from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setKnows(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, KNOWS, value);
    }

    /**
     * Sets a value of property Knows from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setKnows(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), KNOWS, value);
    }

    /**
     * Sets a value of property Knows from an instance of Person First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setKnows(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Person value) {
	Base.set(model, instanceResource, KNOWS, value);
    }

    /**
     * Sets a value of property Knows from an instance of Person First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setKnows(Person value) {
	Base.set(this.model, this.getResource(), KNOWS, value);
    }

    /**
     * Removes a value of property Knows as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeKnows(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, KNOWS, value);
    }

    /**
     * Removes a value of property Knows as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeKnows(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), KNOWS, value);
    }

    /**
     * Removes a value of property Knows given as an instance of Person
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeKnows(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Person value) {
	Base.remove(model, instanceResource, KNOWS, value);
    }

    /**
     * Removes a value of property Knows given as an instance of Person
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeKnows(Person value) {
	Base.remove(this.model, this.getResource(), KNOWS, value);
    }

    /**
     * Removes all values of property Knows * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllKnows(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, KNOWS);
    }

    /**
     * Removes all values of property Knows * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllKnows() {
	Base.removeAll(this.model, this.getResource(), KNOWS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@680112df has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasLastNames(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, LASTNAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@680112df has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasLastNames() {
	return Base.has(this.model, this.getResource(), LASTNAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@680112df has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasLastName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	return Base.hasValue(model, instanceResource, LASTNAME, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@680112df has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasLastName(String value) {
	return Base.hasValue(this.model, this.getResource(), LASTNAME, value);
    }

    /**
     * Get all values of property LastName as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLastNames_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, LASTNAME);
    }

    /**
     * Get all values of property LastName as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLastNames_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), LASTNAME);
    }

    /**
     * Get all values of property LastName * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllLastNames(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, LASTNAME,
		java.lang.String.class);
    }

    /**
     * Get all values of property LastName * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllLastNames() {
	return Base.getAll(this.model, this.getResource(), LASTNAME,
		java.lang.String.class);
    }

    /**
     * Get all values of property LastName as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getLastName() {
	return Base.getAll_as(this.model, this.getResource(), LASTNAME,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property LastName as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addLastName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, LASTNAME, value);
    }

    /**
     * Adds a value to property LastName as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addLastName(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), LASTNAME, value);
    }

    /**
     * Adds a value to property LastName from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addLastName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, LASTNAME, value);
    }

    /**
     * Adds a value to property LastName from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addLastName(java.lang.String value) {
	Base.add(this.model, this.getResource(), LASTNAME, value);
    }

    /**
     * Sets a value of property LastName from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setLastName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, LASTNAME, value);
    }

    /**
     * Sets a value of property LastName from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setLastName(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), LASTNAME, value);
    }

    /**
     * Sets a value of property LastName from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setLastName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, LASTNAME, value);
    }

    /**
     * Sets a value of property LastName from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setLastName(java.lang.String value) {
	Base.set(this.model, this.getResource(), LASTNAME, value);
    }

    /**
     * Removes a value of property LastName as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeLastName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, LASTNAME, value);
    }

    /**
     * Removes a value of property LastName as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeLastName(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), LASTNAME, value);
    }

    /**
     * Removes a value of property LastName given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeLastName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, LASTNAME, value);
    }

    /**
     * Removes a value of property LastName given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeLastName(java.lang.String value) {
	Base.remove(this.model, this.getResource(), LASTNAME, value);
    }

    /**
     * Removes all values of property LastName * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllLastNames(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, LASTNAME);
    }

    /**
     * Removes all values of property LastName * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllLastNames() {
	Base.removeAll(this.model, this.getResource(), LASTNAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55167e58 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasMyersBriggs(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, MYERSBRIGGS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55167e58 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasMyersBriggs() {
	return Base.has(this.model, this.getResource(), MYERSBRIGGS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55167e58 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasMyersBriggs(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	return Base.hasValue(model, instanceResource, MYERSBRIGGS, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55167e58 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasMyersBriggs(String value) {
	return Base
		.hasValue(this.model, this.getResource(), MYERSBRIGGS, value);
    }

    /**
     * Get all values of property MyersBriggs as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMyersBriggs_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, MYERSBRIGGS);
    }

    /**
     * Get all values of property MyersBriggs as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMyersBriggs_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), MYERSBRIGGS);
    }

    /**
     * Get all values of property MyersBriggs * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllMyersBriggs(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, MYERSBRIGGS,
		java.lang.String.class);
    }

    /**
     * Get all values of property MyersBriggs * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllMyersBriggs() {
	return Base.getAll(this.model, this.getResource(), MYERSBRIGGS,
		java.lang.String.class);
    }

    /**
     * Adds a value to property MyersBriggs as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addMyersBriggs(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, MYERSBRIGGS, value);
    }

    /**
     * Adds a value to property MyersBriggs as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addMyersBriggs(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), MYERSBRIGGS, value);
    }

    /**
     * Adds a value to property MyersBriggs from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addMyersBriggs(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, MYERSBRIGGS, value);
    }

    /**
     * Adds a value to property MyersBriggs from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addMyersBriggs(java.lang.String value) {
	Base.add(this.model, this.getResource(), MYERSBRIGGS, value);
    }

    /**
     * Sets a value of property MyersBriggs from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setMyersBriggs(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, MYERSBRIGGS, value);
    }

    /**
     * Sets a value of property MyersBriggs from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setMyersBriggs(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), MYERSBRIGGS, value);
    }

    /**
     * Sets a value of property MyersBriggs from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setMyersBriggs(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, MYERSBRIGGS, value);
    }

    /**
     * Sets a value of property MyersBriggs from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setMyersBriggs(java.lang.String value) {
	Base.set(this.model, this.getResource(), MYERSBRIGGS, value);
    }

    /**
     * Removes a value of property MyersBriggs as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeMyersBriggs(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, MYERSBRIGGS, value);
    }

    /**
     * Removes a value of property MyersBriggs as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeMyersBriggs(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), MYERSBRIGGS, value);
    }

    /**
     * Removes a value of property MyersBriggs given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeMyersBriggs(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, MYERSBRIGGS, value);
    }

    /**
     * Removes a value of property MyersBriggs given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeMyersBriggs(java.lang.String value) {
	Base.remove(this.model, this.getResource(), MYERSBRIGGS, value);
    }

    /**
     * Removes all values of property MyersBriggs * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllMyersBriggs(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, MYERSBRIGGS);
    }

    /**
     * Removes all values of property MyersBriggs * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllMyersBriggs() {
	Base.removeAll(this.model, this.getResource(), MYERSBRIGGS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73630a24 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasPastProjects(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, PASTPROJECT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73630a24 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasPastProjects() {
	return Base.has(this.model, this.getResource(), PASTPROJECT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73630a24 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasPastProject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, PASTPROJECT, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@73630a24 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasPastProject(org.ontoware.rdf2go.model.node.Node value) {
	return Base
		.hasValue(this.model, this.getResource(), PASTPROJECT, value);
    }

    /**
     * Get all values of property PastProject as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPastProjects_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, PASTPROJECT);
    }

    /**
     * Get all values of property PastProject as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPastProjects_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), PASTPROJECT);
    }

    /**
     * Get all values of property PastProject * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<org.ontoware.rdfreactor.schema.owl.OwlThing> getAllPastProjects(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, PASTPROJECT,
		org.ontoware.rdfreactor.schema.owl.OwlThing.class);
    }

    /**
     * Get all values of property PastProject * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<org.ontoware.rdfreactor.schema.owl.OwlThing> getAllPastProjects() {
	return Base.getAll(this.model, this.getResource(), PASTPROJECT,
		org.ontoware.rdfreactor.schema.owl.OwlThing.class);
    }

    /**
     * Get all values of property PastProject as a ReactorResult of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public org.ontoware.rdfreactor.schema.owl.OwlThing getPastProject() {
	return Base.getAll_as(this.model, this.getResource(), PASTPROJECT,
		org.ontoware.rdfreactor.schema.owl.OwlThing.class).firstValue();
    }

    /**
     * Adds a value to property PastProject as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addPastProject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, PASTPROJECT, value);
    }

    /**
     * Adds a value to property PastProject as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addPastProject(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), PASTPROJECT, value);
    }

    /**
     * Adds a value to property PastProject from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addPastProject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.add(model, instanceResource, PASTPROJECT, value);
    }

    /**
     * Adds a value to property PastProject from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addPastProject(org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.add(this.model, this.getResource(), PASTPROJECT, value);
    }

    /**
     * Sets a value of property PastProject from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setPastProject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, PASTPROJECT, value);
    }

    /**
     * Sets a value of property PastProject from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setPastProject(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), PASTPROJECT, value);
    }

    /**
     * Sets a value of property PastProject from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing First, all existing values
     * are removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setPastProject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.set(model, instanceResource, PASTPROJECT, value);
    }

    /**
     * Sets a value of property PastProject from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing First, all existing values
     * are removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setPastProject(org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.set(this.model, this.getResource(), PASTPROJECT, value);
    }

    /**
     * Removes a value of property PastProject as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removePastProject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, PASTPROJECT, value);
    }

    /**
     * Removes a value of property PastProject as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removePastProject(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), PASTPROJECT, value);
    }

    /**
     * Removes a value of property PastProject given as an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removePastProject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.remove(model, instanceResource, PASTPROJECT, value);
    }

    /**
     * Removes a value of property PastProject given as an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removePastProject(
	    org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.remove(this.model, this.getResource(), PASTPROJECT, value);
    }

    /**
     * Removes all values of property PastProject * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllPastProjects(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, PASTPROJECT);
    }

    /**
     * Removes all values of property PastProject * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllPastProjects() {
	Base.removeAll(this.model, this.getResource(), PASTPROJECT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c6fa3f3 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasPlans(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, PLAN);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c6fa3f3 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasPlans() {
	return Base.has(this.model, this.getResource(), PLAN);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c6fa3f3 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasPlan(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	return Base.hasValue(model, instanceResource, PLAN, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4c6fa3f3 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasPlan(String value) {
	return Base.hasValue(this.model, this.getResource(), PLAN, value);
    }

    /**
     * Get all values of property Plan as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPlans_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, PLAN);
    }

    /**
     * Get all values of property Plan as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPlans_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), PLAN);
    }

    /**
     * Get all values of property Plan * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllPlans(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, PLAN,
		java.lang.String.class);
    }

    /**
     * Get all values of property Plan * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllPlans() {
	return Base.getAll(this.model, this.getResource(), PLAN,
		java.lang.String.class);
    }

    /**
     * Get all values of property Plan as a ReactorResult of java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getPlan() {
	return Base.getAll_as(this.model, this.getResource(), PLAN,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property Plan as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addPlan(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, PLAN, value);
    }

    /**
     * Adds a value to property Plan as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addPlan(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), PLAN, value);
    }

    /**
     * Adds a value to property Plan from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addPlan(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, PLAN, value);
    }

    /**
     * Adds a value to property Plan from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addPlan(java.lang.String value) {
	Base.add(this.model, this.getResource(), PLAN, value);
    }

    /**
     * Sets a value of property Plan from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setPlan(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, PLAN, value);
    }

    /**
     * Sets a value of property Plan from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setPlan(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), PLAN, value);
    }

    /**
     * Sets a value of property Plan from an instance of java.lang.String First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setPlan(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, PLAN, value);
    }

    /**
     * Sets a value of property Plan from an instance of java.lang.String First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setPlan(java.lang.String value) {
	Base.set(this.model, this.getResource(), PLAN, value);
    }

    /**
     * Removes a value of property Plan as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removePlan(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, PLAN, value);
    }

    /**
     * Removes a value of property Plan as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removePlan(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), PLAN, value);
    }

    /**
     * Removes a value of property Plan given as an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removePlan(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, PLAN, value);
    }

    /**
     * Removes a value of property Plan given as an instance of java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removePlan(java.lang.String value) {
	Base.remove(this.model, this.getResource(), PLAN, value);
    }

    /**
     * Removes all values of property Plan * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllPlans(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, PLAN);
    }

    /**
     * Removes all values of property Plan * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllPlans() {
	Base.removeAll(this.model, this.getResource(), PLAN);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c79b12a has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasPublications(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, PUBLICATIONS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c79b12a has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasPublications() {
	return Base.has(this.model, this.getResource(), PUBLICATIONS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c79b12a has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasPublications(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, PUBLICATIONS, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c79b12a has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasPublications(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), PUBLICATIONS,
		value);
    }

    /**
     * Get all values of property Publications as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPublications_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, PUBLICATIONS);
    }

    /**
     * Get all values of property Publications as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPublications_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), PUBLICATIONS);
    }

    /**
     * Get all values of property Publications * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Document> getAllPublications(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, PUBLICATIONS,
		Document.class);
    }

    /**
     * Get all values of property Publications * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Document> getAllPublications() {
	return Base.getAll(this.model, this.getResource(), PUBLICATIONS,
		Document.class);
    }

    /**
     * Get all values of property Publications as a ReactorResult of Document
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Document getPublication() {
	return Base.getAll_as(this.model, this.getResource(), PUBLICATIONS,
		Document.class).firstValue();
    }

    /**
     * Adds a value to property Publications as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addPublications(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, PUBLICATIONS, value);
    }

    /**
     * Adds a value to property Publications as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addPublications(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), PUBLICATIONS, value);
    }

    /**
     * Adds a value to property Publications from an instance of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addPublications(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.add(model, instanceResource, PUBLICATIONS, value);
    }

    /**
     * Adds a value to property Publications from an instance of Document
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addPublications(Document value) {
	Base.add(this.model, this.getResource(), PUBLICATIONS, value);
    }

    /**
     * Sets a value of property Publications from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setPublications(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, PUBLICATIONS, value);
    }

    /**
     * Sets a value of property Publications from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setPublications(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), PUBLICATIONS, value);
    }

    /**
     * Sets a value of property Publications from an instance of Document First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setPublications(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.set(model, instanceResource, PUBLICATIONS, value);
    }

    /**
     * Sets a value of property Publications from an instance of Document First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setPublications(Document value) {
	Base.set(this.model, this.getResource(), PUBLICATIONS, value);
    }

    /**
     * Removes a value of property Publications as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removePublications(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, PUBLICATIONS, value);
    }

    /**
     * Removes a value of property Publications as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removePublications(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), PUBLICATIONS, value);
    }

    /**
     * Removes a value of property Publications given as an instance of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removePublications(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.remove(model, instanceResource, PUBLICATIONS, value);
    }

    /**
     * Removes a value of property Publications given as an instance of Document
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removePublications(Document value) {
	Base.remove(this.model, this.getResource(), PUBLICATIONS, value);
    }

    /**
     * Removes all values of property Publications * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllPublications(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, PUBLICATIONS);
    }

    /**
     * Removes all values of property Publications * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllPublications() {
	Base.removeAll(this.model, this.getResource(), PUBLICATIONS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29e31934 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSchoolHomepages(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, SCHOOLHOMEPAGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29e31934 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSchoolHomepages() {
	return Base.has(this.model, this.getResource(), SCHOOLHOMEPAGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29e31934 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSchoolHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, SCHOOLHOMEPAGE, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@29e31934 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasSchoolHomepage(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), SCHOOLHOMEPAGE,
		value);
    }

    /**
     * Get all values of property SchoolHomepage as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSchoolHomepages_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, SCHOOLHOMEPAGE);
    }

    /**
     * Get all values of property SchoolHomepage as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSchoolHomepages_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(),
		SCHOOLHOMEPAGE);
    }

    /**
     * Get all values of property SchoolHomepage * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Document> getAllSchoolHomepages(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, SCHOOLHOMEPAGE,
		Document.class);
    }

    /**
     * Get all values of property SchoolHomepage * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Document> getAllSchoolHomepages() {
	return Base.getAll(this.model, this.getResource(), SCHOOLHOMEPAGE,
		Document.class);
    }

    /**
     * Get all values of property SchoolHomepage as a ReactorResult of Document
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Document getSchoolHomepage() {
	return Base.getAll_as(this.model, this.getResource(), SCHOOLHOMEPAGE,
		Document.class).firstValue();
    }

    /**
     * Adds a value to property SchoolHomepage as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSchoolHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, SCHOOLHOMEPAGE, value);
    }

    /**
     * Adds a value to property SchoolHomepage as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSchoolHomepage(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), SCHOOLHOMEPAGE, value);
    }

    /**
     * Adds a value to property SchoolHomepage from an instance of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSchoolHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.add(model, instanceResource, SCHOOLHOMEPAGE, value);
    }

    /**
     * Adds a value to property SchoolHomepage from an instance of Document
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSchoolHomepage(Document value) {
	Base.add(this.model, this.getResource(), SCHOOLHOMEPAGE, value);
    }

    /**
     * Sets a value of property SchoolHomepage from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSchoolHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, SCHOOLHOMEPAGE, value);
    }

    /**
     * Sets a value of property SchoolHomepage from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSchoolHomepage(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), SCHOOLHOMEPAGE, value);
    }

    /**
     * Sets a value of property SchoolHomepage from an instance of Document
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSchoolHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.set(model, instanceResource, SCHOOLHOMEPAGE, value);
    }

    /**
     * Sets a value of property SchoolHomepage from an instance of Document
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSchoolHomepage(Document value) {
	Base.set(this.model, this.getResource(), SCHOOLHOMEPAGE, value);
    }

    /**
     * Removes a value of property SchoolHomepage as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSchoolHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, SCHOOLHOMEPAGE, value);
    }

    /**
     * Removes a value of property SchoolHomepage as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeSchoolHomepage(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), SCHOOLHOMEPAGE, value);
    }

    /**
     * Removes a value of property SchoolHomepage given as an instance of
     * Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSchoolHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.remove(model, instanceResource, SCHOOLHOMEPAGE, value);
    }

    /**
     * Removes a value of property SchoolHomepage given as an instance of
     * Document
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSchoolHomepage(Document value) {
	Base.remove(this.model, this.getResource(), SCHOOLHOMEPAGE, value);
    }

    /**
     * Removes all values of property SchoolHomepage * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSchoolHomepages(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, SCHOOLHOMEPAGE);
    }

    /**
     * Removes all values of property SchoolHomepage * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllSchoolHomepages() {
	Base.removeAll(this.model, this.getResource(), SCHOOLHOMEPAGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@66b3b2c4 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSurnames(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, SURNAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@66b3b2c4 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSurnames() {
	return Base.has(this.model, this.getResource(), SURNAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@66b3b2c4 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSurname(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	return Base.hasValue(model, instanceResource, SURNAME, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@66b3b2c4 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasSurname(String value) {
	return Base.hasValue(this.model, this.getResource(), SURNAME, value);
    }

    /**
     * Get all values of property Surname as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSurnames_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, SURNAME);
    }

    /**
     * Get all values of property Surname as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSurnames_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), SURNAME);
    }

    /**
     * Get all values of property Surname * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllSurnames(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, SURNAME,
		java.lang.String.class);
    }

    /**
     * Get all values of property Surname * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllSurnames() {
	return Base.getAll(this.model, this.getResource(), SURNAME,
		java.lang.String.class);
    }

    /**
     * Get all values of property Surname as a ReactorResult of java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getSurname() {
	return Base.getAll_as(this.model, this.getResource(), SURNAME,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property Surname as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSurname(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, SURNAME, value);
    }

    /**
     * Adds a value to property Surname as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSurname(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), SURNAME, value);
    }

    /**
     * Adds a value to property Surname from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSurname(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, SURNAME, value);
    }

    /**
     * Adds a value to property Surname from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSurname(java.lang.String value) {
	Base.add(this.model, this.getResource(), SURNAME, value);
    }

    /**
     * Sets a value of property Surname from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSurname(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, SURNAME, value);
    }

    /**
     * Sets a value of property Surname from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSurname(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), SURNAME, value);
    }

    /**
     * Sets a value of property Surname from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSurname(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, SURNAME, value);
    }

    /**
     * Sets a value of property Surname from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSurname(java.lang.String value) {
	Base.set(this.model, this.getResource(), SURNAME, value);
    }

    /**
     * Removes a value of property Surname as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSurname(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, SURNAME, value);
    }

    /**
     * Removes a value of property Surname as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeSurname(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), SURNAME, value);
    }

    /**
     * Removes a value of property Surname given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSurname(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, SURNAME, value);
    }

    /**
     * Removes a value of property Surname given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSurname(java.lang.String value) {
	Base.remove(this.model, this.getResource(), SURNAME, value);
    }

    /**
     * Removes all values of property Surname * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSurnames(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, SURNAME);
    }

    /**
     * Removes all values of property Surname * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllSurnames() {
	Base.removeAll(this.model, this.getResource(), SURNAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23fbf047 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasWorkInfoHomepages(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, WORKINFOHOMEPAGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23fbf047 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasWorkInfoHomepages() {
	return Base.has(this.model, this.getResource(), WORKINFOHOMEPAGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23fbf047 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasWorkInfoHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, WORKINFOHOMEPAGE, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23fbf047 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasWorkInfoHomepage(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), WORKINFOHOMEPAGE,
		value);
    }

    /**
     * Get all values of property WorkInfoHomepage as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWorkInfoHomepages_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, WORKINFOHOMEPAGE);
    }

    /**
     * Get all values of property WorkInfoHomepage as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWorkInfoHomepages_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(),
		WORKINFOHOMEPAGE);
    }

    /**
     * Get all values of property WorkInfoHomepage * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Document> getAllWorkInfoHomepages(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, WORKINFOHOMEPAGE,
		Document.class);
    }

    /**
     * Get all values of property WorkInfoHomepage * @return a ClosableIterator
     * of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Document> getAllWorkInfoHomepages() {
	return Base.getAll(this.model, this.getResource(), WORKINFOHOMEPAGE,
		Document.class);
    }

    /**
     * Get all values of property WorkInfoHomepage as a ReactorResult of
     * Document
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Document getWorkInfoHomepage() {
	return Base.getAll_as(this.model, this.getResource(), WORKINFOHOMEPAGE,
		Document.class).firstValue();
    }

    /**
     * Adds a value to property WorkInfoHomepage as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addWorkInfoHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, WORKINFOHOMEPAGE, value);
    }

    /**
     * Adds a value to property WorkInfoHomepage as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addWorkInfoHomepage(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), WORKINFOHOMEPAGE, value);
    }

    /**
     * Adds a value to property WorkInfoHomepage from an instance of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addWorkInfoHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.add(model, instanceResource, WORKINFOHOMEPAGE, value);
    }

    /**
     * Adds a value to property WorkInfoHomepage from an instance of Document
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addWorkInfoHomepage(Document value) {
	Base.add(this.model, this.getResource(), WORKINFOHOMEPAGE, value);
    }

    /**
     * Sets a value of property WorkInfoHomepage from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setWorkInfoHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, WORKINFOHOMEPAGE, value);
    }

    /**
     * Sets a value of property WorkInfoHomepage from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setWorkInfoHomepage(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), WORKINFOHOMEPAGE, value);
    }

    /**
     * Sets a value of property WorkInfoHomepage from an instance of Document
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setWorkInfoHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.set(model, instanceResource, WORKINFOHOMEPAGE, value);
    }

    /**
     * Sets a value of property WorkInfoHomepage from an instance of Document
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setWorkInfoHomepage(Document value) {
	Base.set(this.model, this.getResource(), WORKINFOHOMEPAGE, value);
    }

    /**
     * Removes a value of property WorkInfoHomepage as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeWorkInfoHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, WORKINFOHOMEPAGE, value);
    }

    /**
     * Removes a value of property WorkInfoHomepage as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeWorkInfoHomepage(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), WORKINFOHOMEPAGE, value);
    }

    /**
     * Removes a value of property WorkInfoHomepage given as an instance of
     * Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeWorkInfoHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.remove(model, instanceResource, WORKINFOHOMEPAGE, value);
    }

    /**
     * Removes a value of property WorkInfoHomepage given as an instance of
     * Document
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeWorkInfoHomepage(Document value) {
	Base.remove(this.model, this.getResource(), WORKINFOHOMEPAGE, value);
    }

    /**
     * Removes all values of property WorkInfoHomepage * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllWorkInfoHomepages(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, WORKINFOHOMEPAGE);
    }

    /**
     * Removes all values of property WorkInfoHomepage * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllWorkInfoHomepages() {
	Base.removeAll(this.model, this.getResource(), WORKINFOHOMEPAGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@48249d84 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasWorkplaceHomepages(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, WORKPLACEHOMEPAGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@48249d84 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasWorkplaceHomepages() {
	return Base.has(this.model, this.getResource(), WORKPLACEHOMEPAGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@48249d84 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasWorkplaceHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, WORKPLACEHOMEPAGE, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@48249d84 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasWorkplaceHomepage(
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), WORKPLACEHOMEPAGE,
		value);
    }

    /**
     * Get all values of property WorkplaceHomepage as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWorkplaceHomepages_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, WORKPLACEHOMEPAGE);
    }

    /**
     * Get all values of property WorkplaceHomepage as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllWorkplaceHomepages_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(),
		WORKPLACEHOMEPAGE);
    }

    /**
     * Get all values of property WorkplaceHomepage * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Document> getAllWorkplaceHomepages(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, WORKPLACEHOMEPAGE,
		Document.class);
    }

    /**
     * Get all values of property WorkplaceHomepage * @return a ClosableIterator
     * of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Document> getAllWorkplaceHomepages() {
	return Base.getAll(this.model, this.getResource(), WORKPLACEHOMEPAGE,
		Document.class);
    }

    /**
     * Get all values of property WorkplaceHomepage as a ReactorResult of
     * Document
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Document getWorkplaceHomepage() {
	return Base.getAll_as(this.model, this.getResource(),
		WORKPLACEHOMEPAGE, Document.class).firstValue();
    }

    /**
     * Adds a value to property WorkplaceHomepage as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addWorkplaceHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, WORKPLACEHOMEPAGE, value);
    }

    /**
     * Adds a value to property WorkplaceHomepage as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addWorkplaceHomepage(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), WORKPLACEHOMEPAGE, value);
    }

    /**
     * Adds a value to property WorkplaceHomepage from an instance of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addWorkplaceHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.add(model, instanceResource, WORKPLACEHOMEPAGE, value);
    }

    /**
     * Adds a value to property WorkplaceHomepage from an instance of Document
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addWorkplaceHomepage(Document value) {
	Base.add(this.model, this.getResource(), WORKPLACEHOMEPAGE, value);
    }

    /**
     * Sets a value of property WorkplaceHomepage from an RDF2Go node. First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setWorkplaceHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, WORKPLACEHOMEPAGE, value);
    }

    /**
     * Sets a value of property WorkplaceHomepage from an RDF2Go node. First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setWorkplaceHomepage(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), WORKPLACEHOMEPAGE, value);
    }

    /**
     * Sets a value of property WorkplaceHomepage from an instance of Document
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setWorkplaceHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.set(model, instanceResource, WORKPLACEHOMEPAGE, value);
    }

    /**
     * Sets a value of property WorkplaceHomepage from an instance of Document
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setWorkplaceHomepage(Document value) {
	Base.set(this.model, this.getResource(), WORKPLACEHOMEPAGE, value);
    }

    /**
     * Removes a value of property WorkplaceHomepage as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeWorkplaceHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, WORKPLACEHOMEPAGE, value);
    }

    /**
     * Removes a value of property WorkplaceHomepage as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeWorkplaceHomepage(
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), WORKPLACEHOMEPAGE, value);
    }

    /**
     * Removes a value of property WorkplaceHomepage given as an instance of
     * Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeWorkplaceHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.remove(model, instanceResource, WORKPLACEHOMEPAGE, value);
    }

    /**
     * Removes a value of property WorkplaceHomepage given as an instance of
     * Document
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeWorkplaceHomepage(Document value) {
	Base.remove(this.model, this.getResource(), WORKPLACEHOMEPAGE, value);
    }

    /**
     * Removes all values of property WorkplaceHomepage * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllWorkplaceHomepages(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, WORKPLACEHOMEPAGE);
    }

    /**
     * Removes all values of property WorkplaceHomepage * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllWorkplaceHomepages() {
	Base.removeAll(this.model, this.getResource(), WORKPLACEHOMEPAGE);
    }
}