/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765
 * 2010-02-11 09:51:13Z max.at.xam.de $) on 21.12.12 17:00
 */
package com.xmlns.foaf;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;

/**
 * This class manages access to these properties:
 * <ul>
 * <li>created</li>
 * <li>Date</li>
 * <li>Depiction</li>
 * <li>Description</li>
 * <li>modified</li>
 * <li>Name</li>
 * <li>Note</li>
 * <li>Subject</li>
 * <li>DNAChecksum</li>
 * <li>Depiction</li>
 * <li>Description</li>
 * <li>Elements1_1Title</li>
 * <li>FoafGivenname</li>
 * <li>FundedBy</li>
 * <li>Givenname</li>
 * <li>Homepage</li>
 * <li>Logo</li>
 * <li>Maker</li>
 * <li>MembershipClass</li>
 * <li>Name</li>
 * <li>Nickname</li>
 * <li>Page</li>
 * <li>Phone</li>
 * <li>PrimaryTopicOf</li>
 * <li>Theme</li>
 * <li>Title</li>
 * </ul>
 * 
 * This class was generated by <a
 * href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 21.12.12 17:00
 */
public class Thing extends org.ontoware.rdfreactor.schema.rdfs.Class {
    /**
     * 
     */
    private static final long serialVersionUID = 9047324362517530425L;

    /** http://www.w3.org/2000/01/rdf-schema#Class */
    public static final URI RDFS_CLASS = new URIImpl(
	    "http://www.w3.org/2000/01/rdf-schema#Class", false);

    /** http://purl.org/dc/terms/subject */
    public static final URI SUBJECT = new URIImpl(
	    "http://purl.org/dc/terms/subject", false);

    /** http://purl.org/dc/terms/title */
    public static final URI TITLE = new URIImpl(
	    "http://purl.org/dc/terms/title", false);

    /** http://purl.org/dc/terms/date */
    public static final URI DATE = new URIImpl("http://purl.org/dc/terms/date",
	    false);

    /** http://purl.org/dc/terms/created */
    public static final URI CREATED = new URIImpl(
	    "http://purl.org/dc/terms/created", false);

    /** http://purl.org/dc/terms/modified */
    public static final URI MODIFIED = new URIImpl(
	    "http://purl.org/dc/terms/modified", false);

    /** http://purl.org/dc/terms/hasPart */
    public static final URI HASPART = new URIImpl(
	    "http://purl.org/dc/terms/hasPart", false);

    /** http://purl.org/dc/terms/isPartOf */
    public static final URI ISPARTOF = new URIImpl(
	    "http://purl.org/dc/terms/isPartOf", false);

    /** http://purl.org/dc/terms/description */
    public static final URI DESCRIPTION = new URIImpl(
	    "http://purl.org/dc/terms/description", false);

    /** http://purl.org/dc/terms/references */
    public static final URI REFERENCES = new URIImpl(
	    "http://purl.org/dc/terms/references", false);

    /** http://xmlns.com/foaf/0.1/depiction */
    public static final URI DEPICTION = new URIImpl(
	    "http://xmlns.com/foaf/0.1/depiction", false);

    /** http://xmlns.com/foaf/0.1/dnaChecksum */
    public static final URI DNACHECKSUM = new URIImpl(
	    "http://xmlns.com/foaf/0.1/dnaChecksum", false);

    /** http://xmlns.com/foaf/0.1/fundedBy */
    public static final URI FUNDEDBY = new URIImpl(
	    "http://xmlns.com/foaf/0.1/fundedBy", false);

    /** http://xmlns.com/foaf/0.1/givenName */
    public static final URI GIVENNAME = new URIImpl(
	    "http://xmlns.com/foaf/0.1/givenName", false);

    /** http://xmlns.com/foaf/0.1/homepage */
    public static final URI HOMEPAGE = new URIImpl(
	    "http://xmlns.com/foaf/0.1/homepage", false);

    /** http://xmlns.com/foaf/0.1/logo */
    public static final URI LOGO = new URIImpl(
	    "http://xmlns.com/foaf/0.1/logo", false);

    /** http://xmlns.com/foaf/0.1/maker */
    public static final URI MAKER = new URIImpl(
	    "http://xmlns.com/foaf/0.1/maker", false);

    /** http://xmlns.com/foaf/0.1/membershipClass */
    public static final URI MEMBERSHIPCLASS = new URIImpl(
	    "http://xmlns.com/foaf/0.1/membershipClass", false);

    /** http://xmlns.com/foaf/0.1/name */
    public static final URI NAME = new URIImpl(
	    "http://xmlns.com/foaf/0.1/name", false);

    /** http://xmlns.com/foaf/0.1/nick */
    public static final URI NICKNAME = new URIImpl(
	    "http://xmlns.com/foaf/0.1/nick", false);

    /** http://xmlns.com/foaf/0.1/page */
    public static final URI PAGE = new URIImpl(
	    "http://xmlns.com/foaf/0.1/page", false);

    /** http://xmlns.com/foaf/0.1/phone */
    public static final URI PHONE = new URIImpl(
	    "http://xmlns.com/foaf/0.1/phone", false);

    /** http://xmlns.com/foaf/0.1/isPrimaryTopicOf */
    public static final URI PRIMARYTOPICOF = new URIImpl(
	    "http://xmlns.com/foaf/0.1/isPrimaryTopicOf", false);

    /** http://xmlns.com/foaf/0.1/theme */
    public static final URI THEME = new URIImpl(
	    "http://xmlns.com/foaf/0.1/theme", false);

    /**
     * All property-URIs with this class as domain. All properties of all
     * super-classes are also available.
     */
    public static final URI[] MANAGED_URIS = {
	    new URIImpl("http://purl.org/dc/terms/subject", false),
	    new URIImpl("http://purl.org/dc/terms/title", false),
	    new URIImpl("http://purl.org/dc/terms/created", false),
	    new URIImpl("http://purl.org/dc/terms/date", false),
	    new URIImpl("http://purl.org/dc/terms/description", false),
	    new URIImpl("http://purl.org/dc/terms/references", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/dnaChecksum", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/depiction", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/givenname", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/fundedBy", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/givenName", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/homepage", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/logo", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/maker", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/membershipClass", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/name", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/nick", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/page", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/phone", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/isPrimaryTopicOf", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/theme", false) };

    // protected constructors needed for inheritance

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.semweb4j.org
     * @param classURI
     *            URI of RDFS class
     * @param instanceIdentifier
     *            Resource that identifies this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c1]
     */
    protected Thing(Model model, URI classURI,
	    org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
	    boolean write) {
	super(model, classURI, instanceIdentifier, write);
    }

    // public constructors

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param instanceIdentifier
     *            an RDF2Go Resource identifying this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c2]
     */
    public Thing(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
	    boolean write) {
	super(model, RDFS_CLASS, instanceIdentifier, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a URI, given as
     * a String. Creating two wrappers for the same URI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param uriString
     *            a URI given as a String
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * @throws ModelRuntimeException
     *             if URI syntax is wrong
     * 
     *             [Generated from RDFReactor template rule #c7]
     */
    public Thing(Model model, String uriString, boolean write)
	    throws ModelRuntimeException {
	super(model, RDFS_CLASS, new URIImpl(uriString, false), write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a blank node.
     * Creating two wrappers for the same blank node is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param bnode
     *            BlankNode of this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c8]
     */
    public Thing(Model model, BlankNode bnode, boolean write) {
	super(model, RDFS_CLASS, bnode, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a randomly
     * generated URI. Creating two wrappers results in different URIs.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c9]
     */
    public Thing(Model model, boolean write) {
	super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
    }

    // /////////////////////////////////////////////////////////////////
    // typing

    /**
     * Return an existing instance of this class in the model. No statements are
     * written.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return an instance of Thing or null if none existst
     * 
     *         [Generated from RDFReactor template rule #class0]
     */
    public static Thing getInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getInstance(model, instanceResource, Thing.class);
    }

    /**
     * Create a new instance of this class in the model. That is, create the
     * statement (instanceResource, RDF.type,
     * http://www.w3.org/2000/01/rdf-schema#Class).
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class1]
     */
    public static void createInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.createInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return true if instanceResource is an instance of this class in the
     *         model
     * 
     *         [Generated from RDFReactor template rule #class2]
     */
    public static boolean hasInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.hasInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @return all instances of this class in Model 'model' as RDF resources
     * 
     *         [Generated from RDFReactor template rule #class3]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(
	    Model model) {
	return Base.getAllInstances(model, RDFS_CLASS,
		org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * Remove rdf:type Thing from this instance. Other triples are not affected.
     * To delete more, use deleteAllProperties
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class4]
     */
    public static void deleteInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.deleteInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * Delete all (this, *, *), i.e. including rdf:type
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     */
    public static void deleteAllProperties(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.deleteAllProperties(model, instanceResource);
    }

    // /////////////////////////////////////////////////////////////////
    // property access methods

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'HasPart' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHasPart_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Thing.HASPART, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'HasPart' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHasPart_Inverse() {
	return Base.getAll_Inverse(this.model, Thing.HASPART,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'IsPartOf' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIsPartOf_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Thing.ISPARTOF, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'IsPartOf' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIsPartOf_Inverse() {
	return Base.getAll_Inverse(this.model, Thing.ISPARTOF,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Date' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDates_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Thing.DATE, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Date' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDates_Inverse() {
	return Base.getAll_Inverse(this.model, Thing.DATE,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Description' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDescriptions_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Thing.DESCRIPTION, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Description' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDescriptions_Inverse() {
	return Base.getAll_Inverse(this.model, Thing.DESCRIPTION,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'References' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllReferences_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Thing.REFERENCES, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'References' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllReferences_Inverse() {
	return Base.getAll_Inverse(this.model, Thing.REFERENCES,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Subject' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSubjects_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Thing.SUBJECT, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Subject' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSubjects_Inverse() {
	return Base.getAll_Inverse(this.model, Thing.SUBJECT,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Title' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTitles_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Thing.TITLE, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Title' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTitles_Inverse() {
	return Base.getAll_Inverse(this.model, Thing.TITLE,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Givenname' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGivennames_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Thing.GIVENNAME, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Givenname' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllGivennames_Inverse() {
	return Base.getAll_Inverse(this.model, Thing.GIVENNAME,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'MembershipClass'
     *         to this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMembershipClasses_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Thing.MEMBERSHIPCLASS,
		objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'MembershipClass'
     *         to this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMembershipClasses_Inverse() {
	return Base.getAll_Inverse(this.model, Thing.MEMBERSHIPCLASS,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Nickname' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNicknames_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Thing.NICKNAME, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Nickname' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNicknames_Inverse() {
	return Base.getAll_Inverse(this.model, Thing.NICKNAME,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Phone' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPhones_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Thing.PHONE, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Phone' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPhones_Inverse() {
	return Base.getAll_Inverse(this.model, Thing.PHONE,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Sha1sum_hex_' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSha1Sums_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Document.SHA1SUM, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Sha1sum_hex_' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSha1Sums_Inverse() {
	return Base.getAll_Inverse(this.model, Document.SHA1SUM,
		this.getResource());
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389aee72 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasDates(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, DATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389aee72 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasDates() {
	return Base.has(this.model, this.getResource(), DATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389aee72 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, DATE, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389aee72 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasDate(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), DATE, value);
    }

    /**
     * Get all values of property Date as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDates_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, DATE);
    }

    /**
     * Get all values of property Date as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDates_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), DATE);
    }

    /**
     * Get all values of property Date * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllDates(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, DATE, Thing.class);
    }

    /**
     * Get all values of property Date * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllDates() {
	return Base.getAll(this.model, this.getResource(), DATE,
		Thing.class);
    }

    /**
     * Get first values of property Date * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public Thing getDate() {
	return Base.getAll_as(this.model, this.getResource(), DATE,
		Thing.class).firstValue();
    }

    /**
     * Adds a value to property Date as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, DATE, value);
    }

    /**
     * Adds a value to property Date as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addDate(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), DATE, value);
    }

    /**
     * Adds a value to property Date from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.add(model, instanceResource, DATE, value);
    }

    /**
     * Adds a value to property Date from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addDate(Thing value) {
	Base.add(this.model, this.getResource(), DATE, value);
    }

    /**
     * Sets a value of property Date from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, DATE, value);
    }

    /**
     * Sets a value of property Date from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setDate(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), DATE, value);
    }

    /**
     * Sets a value of property Date from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.set(model, instanceResource, DATE, value);
    }

    /**
     * Sets a value of property Date from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setDate(Thing value) {
	Base.set(this.model, this.getResource(), DATE, value);
    }

    /**
     * Removes a value of property Date as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, DATE, value);
    }

    /**
     * Removes a value of property Date as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeDate(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), DATE, value);
    }

    /**
     * Removes a value of property Date given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.remove(model, instanceResource, DATE, value);
    }

    /**
     * Removes a value of property Date given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeDate(Thing value) {
	Base.remove(this.model, this.getResource(), DATE, value);
    }

    /**
     * Removes all values of property Date * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllDates(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, DATE);
    }

    /**
     * Removes all values of property Date * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllDates() {
	Base.removeAll(this.model, this.getResource(), DATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d41b16b has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasDescriptions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, DESCRIPTION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d41b16b has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasDescriptions() {
	return Base.has(this.model, this.getResource(), DESCRIPTION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d41b16b has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasDescription(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, DESCRIPTION, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d41b16b has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasDescription(org.ontoware.rdf2go.model.node.Node value) {
	return Base
		.hasValue(this.model, this.getResource(), DESCRIPTION, value);
    }

    /**
     * Get all values of property Description as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDescriptions_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, DESCRIPTION);
    }

    /**
     * Get all values of property Description as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDescriptions_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), DESCRIPTION);
    }

    /**
     * Get all values of property Description * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllDescriptions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, DESCRIPTION,
		Thing.class);
    }

    /**
     * Get first values of property Description * @return FOAFThing
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public Thing getDescription() {
	return Base.getAll_as(this.model, this.getResource(), DESCRIPTION,
		Thing.class).firstValue();
    }

    /**
     * Get all values of property Description * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllDescriptions() {
	return Base.getAll(this.model, this.getResource(), DESCRIPTION,
		Thing.class);
    }

    /**
     * Adds a value to property Description as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addDescription(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, DESCRIPTION, value);
    }

    /**
     * Adds a value to property Description as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addDescription(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), DESCRIPTION, value);
    }

    /**
     * Adds a value to property Description from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addDescription(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.add(model, instanceResource, DESCRIPTION, value);
    }

    /**
     * Adds a value to property Description from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addDescription(Thing value) {
	Base.add(this.model, this.getResource(), DESCRIPTION, value);
    }

    /**
     * Sets a value of property Description from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setDescription(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, DESCRIPTION, value);
    }

    /**
     * Sets a value of property Description from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setDescription(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), DESCRIPTION, value);
    }

    /**
     * Sets a value of property Description from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setDescription(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.set(model, instanceResource, DESCRIPTION, value);
    }

    /**
     * Sets a value of property Description from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setDescription(Thing value) {
	Base.set(this.model, this.getResource(), DESCRIPTION, value);
    }

    /**
     * Removes a value of property Description as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeDescription(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, DESCRIPTION, value);
    }

    /**
     * Removes a value of property Description as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeDescription(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), DESCRIPTION, value);
    }

    /**
     * Removes a value of property Description given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeDescription(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.remove(model, instanceResource, DESCRIPTION, value);
    }

    /**
     * Removes a value of property Description given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeDescription(Thing value) {
	Base.remove(this.model, this.getResource(), DESCRIPTION, value);
    }

    /**
     * Removes all values of property Description * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllDescriptions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, DESCRIPTION);
    }

    /**
     * Removes all values of property Description * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllDescriptions() {
	Base.removeAll(this.model, this.getResource(), DESCRIPTION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b01812b has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasReferences(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, REFERENCES);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b01812b has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasReferences() {
	return Base.has(this.model, this.getResource(), REFERENCES);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b01812b has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasReferences(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, REFERENCES, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b01812b has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasReferences(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), REFERENCES, value);
    }

    /**
     * Get all values of property References as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllReferences_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, REFERENCES);
    }

    /**
     * Get all values of property References as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllReferences_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), REFERENCES);
    }

    /**
     * Get all values of property References * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllReferences(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base
		.getAll(model, instanceResource, REFERENCES, Thing.class);
    }

    /**
     * Get all values of property References * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public Thing getReference() {
	return Base.getAll_as(this.model, this.getResource(), REFERENCES,
		Thing.class).firstValue();
    }

    /**
     * Get all values of property References * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllReferences() {
	return Base.getAll(this.model, this.getResource(), REFERENCES,
		Thing.class);
    }

    /**
     * Adds a value to property References as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addReferences(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, REFERENCES, value);
    }

    /**
     * Adds a value to property References as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addReferences(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), REFERENCES, value);
    }

    /**
     * Adds a value to property References from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addReferences(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.add(model, instanceResource, REFERENCES, value);
    }

    /**
     * Adds a value to property References from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addReferences(Thing value) {
	Base.add(this.model, this.getResource(), REFERENCES, value);
    }

    /**
     * Sets a value of property References from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setReferences(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, REFERENCES, value);
    }

    /**
     * Sets a value of property References from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setReferences(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), REFERENCES, value);
    }

    /**
     * Sets a value of property References from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setReferences(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.set(model, instanceResource, REFERENCES, value);
    }

    /**
     * Sets a value of property References from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setReferences(Thing value) {
	Base.set(this.model, this.getResource(), REFERENCES, value);
    }

    /**
     * Removes a value of property References as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeReferences(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, REFERENCES, value);
    }

    /**
     * Removes a value of property References as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeReferences(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), REFERENCES, value);
    }

    /**
     * Removes a value of property References given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeReferences(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.remove(model, instanceResource, REFERENCES, value);
    }

    /**
     * Removes a value of property References given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeReferences(Thing value) {
	Base.remove(this.model, this.getResource(), REFERENCES, value);
    }

    /**
     * Removes all values of property References * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllReferences(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, REFERENCES);
    }

    /**
     * Removes all values of property References * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllReferences() {
	Base.removeAll(this.model, this.getResource(), REFERENCES);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3efc68a7 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSubjects(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, SUBJECT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3efc68a7 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSubjects() {
	return Base.has(this.model, this.getResource(), SUBJECT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3efc68a7 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSubject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, SUBJECT, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3efc68a7 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasSubject(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), SUBJECT, value);
    }

    /**
     * Get all values of property Subject as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubjects_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, SUBJECT);
    }

    /**
     * Get all values of property Subject as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubjects_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), SUBJECT);
    }

    /**
     * Get all values of property Subject * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllSubjects(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, SUBJECT, Thing.class);
    }

    /**
     * Get all values of property Subject * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllSubjects() {
	return Base.getAll(this.model, this.getResource(), SUBJECT,
		Thing.class);
    }

    /**
     * Get all values of property Subject * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public Thing getSubject() {
	return Base.getAll_as(this.model, this.getResource(), SUBJECT,
		Thing.class).firstValue();
    }

    /**
     * Adds a value to property Subject as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSubject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, SUBJECT, value);
    }

    /**
     * Adds a value to property Subject as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSubject(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), SUBJECT, value);
    }

    /**
     * Adds a value to property Subject from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSubject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.add(model, instanceResource, SUBJECT, value);
    }

    /**
     * Adds a value to property Subject from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSubject(Thing value) {
	Base.add(this.model, this.getResource(), SUBJECT, value);
    }

    /**
     * Sets a value of property Subject from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSubject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, SUBJECT, value);
    }

    /**
     * Sets a value of property Subject from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSubject(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), SUBJECT, value);
    }

    /**
     * Sets a value of property Subject from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSubject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.set(model, instanceResource, SUBJECT, value);
    }

    /**
     * Sets a value of property Subject from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSubject(Thing value) {
	Base.set(this.model, this.getResource(), SUBJECT, value);
    }

    /**
     * Removes a value of property Subject as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSubject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, SUBJECT, value);
    }

    /**
     * Removes a value of property Subject as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeSubject(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), SUBJECT, value);
    }

    /**
     * Removes a value of property Subject given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSubject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.remove(model, instanceResource, SUBJECT, value);
    }

    /**
     * Removes a value of property Subject given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSubject(Thing value) {
	Base.remove(this.model, this.getResource(), SUBJECT, value);
    }

    /**
     * Removes all values of property Subject * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSubjects(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, SUBJECT);
    }

    /**
     * Removes all values of property Subject * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllSubjects() {
	Base.removeAll(this.model, this.getResource(), SUBJECT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bbe2ed3 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasTitles(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, TITLE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bbe2ed3 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasTitles() {
	return Base.has(this.model, this.getResource(), TITLE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bbe2ed3 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasTitle(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, TITLE, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bbe2ed3 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasTitle(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), TITLE, value);
    }

    /**
     * Get all values of property Title as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTitles_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, TITLE);
    }

    /**
     * Get all values of property Title as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTitles_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), TITLE);
    }

    /**
     * Get all values of property Title * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllTitles(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, TITLE, Thing.class);
    }

    /**
     * Get all values of property Title * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllTitles() {
	return Base.getAll(this.model, this.getResource(), TITLE,
		Thing.class);
    }

    /**
     * Get all values of property Title * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public Thing getTitle() {
	return Base.getAll_as(this.model, this.getResource(), TITLE,
		Thing.class).firstValue();
    }

    /**
     * Adds a value to property Title as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addTitle(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, TITLE, value);
    }

    /**
     * Adds a value to property Title as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addTitle(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), TITLE, value);
    }

    /**
     * Adds a value to property Title from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addTitle(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.add(model, instanceResource, TITLE, value);
    }

    /**
     * Adds a value to property Title from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addTitle(Thing value) {
	Base.add(this.model, this.getResource(), TITLE, value);
    }

    /**
     * Sets a value of property Title from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setTitle(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, TITLE, value);
    }

    /**
     * Sets a value of property Title from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setTitle(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), TITLE, value);
    }

    /**
     * Sets a value of property Title from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setTitle(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.set(model, instanceResource, TITLE, value);
    }

    /**
     * Sets a value of property Title from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setTitle(Thing value) {
	Base.set(this.model, this.getResource(), TITLE, value);
    }

    /**
     * Removes a value of property Title as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeTitle(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, TITLE, value);
    }

    /**
     * Removes a value of property Title as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeTitle(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), TITLE, value);
    }

    /**
     * Removes a value of property Title given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeTitle(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.remove(model, instanceResource, TITLE, value);
    }

    /**
     * Removes a value of property Title given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeTitle(Thing value) {
	Base.remove(this.model, this.getResource(), TITLE, value);
    }

    /**
     * Removes all values of property Title * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllTitles(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, TITLE);
    }

    /**
     * Removes all values of property Title * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllTitles() {
	Base.removeAll(this.model, this.getResource(), TITLE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fff31e1 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasDNAChecksums(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, DNACHECKSUM);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fff31e1 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasDNAChecksums() {
	return Base.has(this.model, this.getResource(), DNACHECKSUM);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fff31e1 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasDNAChecksum(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, DNACHECKSUM, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fff31e1 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasDNAChecksum(org.ontoware.rdf2go.model.node.Node value) {
	return Base
		.hasValue(this.model, this.getResource(), DNACHECKSUM, value);
    }

    /**
     * Get all values of property DNAChecksum as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDNAChecksums_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, DNACHECKSUM);
    }

    /**
     * Get all values of property DNAChecksum as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDNAChecksums_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), DNACHECKSUM);
    }

    /**
     * Get all values of property DNAChecksum * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllDNAChecksums(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, DNACHECKSUM,
		java.lang.String.class);
    }

    /**
     * Get all values of property DNAChecksum * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllDNAChecksums() {
	return Base.getAll(this.model, this.getResource(), DNACHECKSUM,
		java.lang.String.class);
    }

    /**
     * Get all values of property DNAChecksum * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public String getADNAChecksum() {
	return Base.getAll_as(this.model, this.getResource(), DNACHECKSUM,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property DNAChecksum as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addDNAChecksum(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, DNACHECKSUM, value);
    }

    /**
     * Adds a value to property DNAChecksum as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addDNAChecksum(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), DNACHECKSUM, value);
    }

    /**
     * Adds a value to property DNAChecksum from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addDNAChecksum(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, DNACHECKSUM, value);
    }

    /**
     * Adds a value to property DNAChecksum from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addDNAChecksum(java.lang.String value) {
	Base.add(this.model, this.getResource(), DNACHECKSUM, value);
    }

    /**
     * Sets a value of property DNAChecksum from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setDNAChecksum(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, DNACHECKSUM, value);
    }

    /**
     * Sets a value of property DNAChecksum from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setDNAChecksum(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), DNACHECKSUM, value);
    }

    /**
     * Sets a value of property DNAChecksum from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setDNAChecksum(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, DNACHECKSUM, value);
    }

    /**
     * Sets a value of property DNAChecksum from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setDNAChecksum(java.lang.String value) {
	Base.set(this.model, this.getResource(), DNACHECKSUM, value);
    }

    /**
     * Removes a value of property DNAChecksum as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeDNAChecksum(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, DNACHECKSUM, value);
    }

    /**
     * Removes a value of property DNAChecksum as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeDNAChecksum(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), DNACHECKSUM, value);
    }

    /**
     * Removes a value of property DNAChecksum given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeDNAChecksum(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, DNACHECKSUM, value);
    }

    /**
     * Removes a value of property DNAChecksum given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeDNAChecksum(java.lang.String value) {
	Base.remove(this.model, this.getResource(), DNACHECKSUM, value);
    }

    /**
     * Removes all values of property DNAChecksum * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllDNAChecksums(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, DNACHECKSUM);
    }

    /**
     * Removes all values of property DNAChecksum * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllDNAChecksums() {
	Base.removeAll(this.model, this.getResource(), DNACHECKSUM);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f72eaa2 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasDepictions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, DEPICTION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f72eaa2 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasDepictions() {
	return Base.has(this.model, this.getResource(), DEPICTION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f72eaa2 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasDepiction(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, DEPICTION, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f72eaa2 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasDepiction(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), DEPICTION, value);
    }

    /**
     * Get all values of property Depiction as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDepictions_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, DEPICTION);
    }

    /**
     * Get all values of property Depiction as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDepictions_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), DEPICTION);
    }

    /**
     * Get all values of property Depiction * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Image> getAllDepictions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, DEPICTION, Image.class);
    }

    /**
     * Get all values of property Depiction * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Image> getAllDepictions() {
	return Base.getAll(this.model, this.getResource(), DEPICTION,
		Image.class);
    }

    /**
     * Get all values of property Depiction * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public Image getDepiction() {
	return Base.getAll_as(this.model, this.getResource(), DEPICTION,
		Image.class).firstValue();
    }

    /**
     * Adds a value to property Depiction as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addDepiction(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, DEPICTION, value);
    }

    /**
     * Adds a value to property Depiction as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addDepiction(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), DEPICTION, value);
    }

    /**
     * Adds a value to property Depiction from an instance of Image
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addDepiction(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Image value) {
	Base.add(model, instanceResource, DEPICTION, value);
    }

    /**
     * Adds a value to property Depiction from an instance of Image
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addDepiction(Image value) {
	Base.add(this.model, this.getResource(), DEPICTION, value);
    }

    /**
     * Sets a value of property Depiction from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setDepiction(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, DEPICTION, value);
    }

    /**
     * Sets a value of property Depiction from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setDepiction(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), DEPICTION, value);
    }

    /**
     * Sets a value of property Depiction from an instance of Image First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setDepiction(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Image value) {
	Base.set(model, instanceResource, DEPICTION, value);
    }

    /**
     * Sets a value of property Depiction from an instance of Image First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setDepiction(Image value) {
	Base.set(this.model, this.getResource(), DEPICTION, value);
    }

    /**
     * Removes a value of property Depiction as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeDepiction(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, DEPICTION, value);
    }

    /**
     * Removes a value of property Depiction as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeDepiction(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), DEPICTION, value);
    }

    /**
     * Removes a value of property Depiction given as an instance of Image
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeDepiction(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Image value) {
	Base.remove(model, instanceResource, DEPICTION, value);
    }

    /**
     * Removes a value of property Depiction given as an instance of Image
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeDepiction(Image value) {
	Base.remove(this.model, this.getResource(), DEPICTION, value);
    }

    /**
     * Removes all values of property Depiction * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllDepictions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, DEPICTION);
    }

    /**
     * Removes all values of property Depiction * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllDepictions() {
	Base.removeAll(this.model, this.getResource(), DEPICTION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@78fb787f has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasFundedBy(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, FUNDEDBY);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@78fb787f has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasFundedBy() {
	return Base.has(this.model, this.getResource(), FUNDEDBY);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@78fb787f has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasFundedBy(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, FUNDEDBY, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@78fb787f has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasFundedBy(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), FUNDEDBY, value);
    }

    /**
     * Get all values of property FundedBy as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFundedBy_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, FUNDEDBY);
    }

    /**
     * Get all values of property FundedBy as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFundedBy_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), FUNDEDBY);
    }

    /**
     * Get all values of property FundedBy * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<org.ontoware.rdfreactor.schema.owl.OwlThing> getAllFundedBy(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, FUNDEDBY,
		org.ontoware.rdfreactor.schema.owl.OwlThing.class);
    }

    /**
     * Get all values of property FundedBy * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<org.ontoware.rdfreactor.schema.owl.OwlThing> getAllFundedBy() {
	return Base.getAll(this.model, this.getResource(), FUNDEDBY,
		org.ontoware.rdfreactor.schema.owl.OwlThing.class);
    }

    /**
     * Get all values of property FundedBy * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public org.ontoware.rdfreactor.schema.owl.OwlThing getFundedBy() {
	return Base.getAll_as(this.model, this.getResource(), FUNDEDBY,
		org.ontoware.rdfreactor.schema.owl.OwlThing.class).firstValue();
    }

    /**
     * Adds a value to property FundedBy as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addFundedBy(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, FUNDEDBY, value);
    }

    /**
     * Adds a value to property FundedBy as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addFundedBy(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), FUNDEDBY, value);
    }

    /**
     * Adds a value to property FundedBy from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addFundedBy(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.add(model, instanceResource, FUNDEDBY, value);
    }

    /**
     * Adds a value to property FundedBy from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addFundedBy(org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.add(this.model, this.getResource(), FUNDEDBY, value);
    }

    /**
     * Sets a value of property FundedBy from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setFundedBy(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, FUNDEDBY, value);
    }

    /**
     * Sets a value of property FundedBy from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setFundedBy(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), FUNDEDBY, value);
    }

    /**
     * Sets a value of property FundedBy from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing First, all existing values
     * are removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setFundedBy(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.set(model, instanceResource, FUNDEDBY, value);
    }

    /**
     * Sets a value of property FundedBy from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing First, all existing values
     * are removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setFundedBy(org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.set(this.model, this.getResource(), FUNDEDBY, value);
    }

    /**
     * Removes a value of property FundedBy as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeFundedBy(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, FUNDEDBY, value);
    }

    /**
     * Removes a value of property FundedBy as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeFundedBy(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), FUNDEDBY, value);
    }

    /**
     * Removes a value of property FundedBy given as an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeFundedBy(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.remove(model, instanceResource, FUNDEDBY, value);
    }

    /**
     * Removes a value of property FundedBy given as an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeFundedBy(org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.remove(this.model, this.getResource(), FUNDEDBY, value);
    }

    /**
     * Removes all values of property FundedBy * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllFundedBy(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, FUNDEDBY);
    }

    /**
     * Removes all values of property FundedBy * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllFundedBy() {
	Base.removeAll(this.model, this.getResource(), FUNDEDBY);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57506502 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasGivennames(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, GIVENNAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57506502 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasGivennames() {
	return Base.has(this.model, this.getResource(), GIVENNAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57506502 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasGivenname(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, GIVENNAME, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57506502 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasGivenname(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), GIVENNAME, value);
    }

    /**
     * Get all values of property Givenname as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGivennames_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, GIVENNAME);
    }

    /**
     * Get all values of property Givenname as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllGivennames_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), GIVENNAME);
    }

    /**
     * Get all values of property Givenname * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllGivennames(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, GIVENNAME, Thing.class);
    }

    /**
     * Get all values of property Givenname * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllGivennames() {
	return Base.getAll(this.model, this.getResource(), GIVENNAME,
		Thing.class);
    }

    /**
     * Get all values of property Givenname * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public Thing getGivenname() {
	return Base.getAll_as(this.model, this.getResource(), GIVENNAME,
		Thing.class).firstValue();
    }

    /**
     * Adds a value to property Givenname as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addGivenname(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, GIVENNAME, value);
    }

    /**
     * Adds a value to property Givenname as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addGivenname(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), GIVENNAME, value);
    }

    /**
     * Adds a value to property Givenname from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addGivenname(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.add(model, instanceResource, GIVENNAME, value);
    }

    /**
     * Adds a value to property Givenname from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addGivenname(Thing value) {
	Base.add(this.model, this.getResource(), GIVENNAME, value);
    }

    /**
     * Sets a value of property Givenname from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setGivenname(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, GIVENNAME, value);
    }

    /**
     * Sets a value of property Givenname from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setGivenname(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), GIVENNAME, value);
    }

    /**
     * Sets a value of property Givenname from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setGivenname(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.set(model, instanceResource, GIVENNAME, value);
    }

    /**
     * Sets a value of property Givenname from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setGivenname(Thing value) {
	Base.set(this.model, this.getResource(), GIVENNAME, value);
    }

    /**
     * Removes a value of property Givenname as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeGivenname(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, GIVENNAME, value);
    }

    /**
     * Removes a value of property Givenname as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeGivenname(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), GIVENNAME, value);
    }

    /**
     * Removes a value of property Givenname given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeGivenname(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.remove(model, instanceResource, GIVENNAME, value);
    }

    /**
     * Removes a value of property Givenname given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeGivenname(Thing value) {
	Base.remove(this.model, this.getResource(), GIVENNAME, value);
    }

    /**
     * Removes all values of property Givenname * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllGivennames(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, GIVENNAME);
    }

    /**
     * Removes all values of property Givenname * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllGivennames() {
	Base.removeAll(this.model, this.getResource(), GIVENNAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@469b762c has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasHomepages(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, HOMEPAGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@469b762c has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasHomepages() {
	return Base.has(this.model, this.getResource(), HOMEPAGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@469b762c has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, HOMEPAGE, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@469b762c has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasHomepage(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), HOMEPAGE, value);
    }

    /**
     * Get all values of property Homepage as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHomepages_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, HOMEPAGE);
    }

    /**
     * Get all values of property Homepage as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHomepages_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), HOMEPAGE);
    }

    /**
     * Get all values of property Homepage * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Document> getAllHomepages(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, HOMEPAGE, Document.class);
    }

    /**
     * Get all values of property Homepage * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Document> getAllHomepages() {
	return Base.getAll(this.model, this.getResource(), HOMEPAGE,
		Document.class);
    }

    /**
     * Get all values of property Homepage * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public Document getHomepage() {
	return Base.getAll_as(this.model, this.getResource(), HOMEPAGE,
		Document.class).firstValue();
    }

    /**
     * Adds a value to property Homepage as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, HOMEPAGE, value);
    }

    /**
     * Adds a value to property Homepage as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addHomepage(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), HOMEPAGE, value);
    }

    /**
     * Adds a value to property Homepage from an instance of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.add(model, instanceResource, HOMEPAGE, value);
    }

    /**
     * Adds a value to property Homepage from an instance of Document
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addHomepage(Document value) {
	Base.add(this.model, this.getResource(), HOMEPAGE, value);
    }

    /**
     * Sets a value of property Homepage from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, HOMEPAGE, value);
    }

    /**
     * Sets a value of property Homepage from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setHomepage(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), HOMEPAGE, value);
    }

    /**
     * Sets a value of property Homepage from an instance of Document First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.set(model, instanceResource, HOMEPAGE, value);
    }

    /**
     * Sets a value of property Homepage from an instance of Document First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setHomepage(Document value) {
	Base.set(this.model, this.getResource(), HOMEPAGE, value);
    }

    /**
     * Removes a value of property Homepage as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, HOMEPAGE, value);
    }

    /**
     * Removes a value of property Homepage as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeHomepage(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), HOMEPAGE, value);
    }

    /**
     * Removes a value of property Homepage given as an instance of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.remove(model, instanceResource, HOMEPAGE, value);
    }

    /**
     * Removes a value of property Homepage given as an instance of Document
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeHomepage(Document value) {
	Base.remove(this.model, this.getResource(), HOMEPAGE, value);
    }

    /**
     * Removes all values of property Homepage * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllHomepages(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, HOMEPAGE);
    }

    /**
     * Removes all values of property Homepage * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllHomepages() {
	Base.removeAll(this.model, this.getResource(), HOMEPAGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5956c062 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasLogos(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, LOGO);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5956c062 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasLogos() {
	return Base.has(this.model, this.getResource(), LOGO);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5956c062 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasLogo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, LOGO, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5956c062 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasLogo(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), LOGO, value);
    }

    /**
     * Get all values of property Logo as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLogos_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, LOGO);
    }

    /**
     * Get all values of property Logo as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLogos_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), LOGO);
    }

    /**
     * Get all values of property Logo * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<org.ontoware.rdfreactor.schema.owl.OwlThing> getAllLogos(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, LOGO,
		org.ontoware.rdfreactor.schema.owl.OwlThing.class);
    }

    /**
     * Get all values of property Logo * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<org.ontoware.rdfreactor.schema.owl.OwlThing> getAllLogos() {
	return Base.getAll(this.model, this.getResource(), LOGO,
		org.ontoware.rdfreactor.schema.owl.OwlThing.class);
    }

    /**
     * Get all values of property Logo * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public org.ontoware.rdfreactor.schema.owl.OwlThing getLogo() {
	return Base.getAll_as(this.model, this.getResource(), LOGO,
		org.ontoware.rdfreactor.schema.owl.OwlThing.class).firstValue();
    }

    /**
     * Adds a value to property Logo as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addLogo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, LOGO, value);
    }

    /**
     * Adds a value to property Logo as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addLogo(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), LOGO, value);
    }

    /**
     * Adds a value to property Logo from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addLogo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.add(model, instanceResource, LOGO, value);
    }

    /**
     * Adds a value to property Logo from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addLogo(org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.add(this.model, this.getResource(), LOGO, value);
    }

    /**
     * Sets a value of property Logo from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setLogo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, LOGO, value);
    }

    /**
     * Sets a value of property Logo from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setLogo(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), LOGO, value);
    }

    /**
     * Sets a value of property Logo from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing First, all existing values
     * are removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setLogo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.set(model, instanceResource, LOGO, value);
    }

    /**
     * Sets a value of property Logo from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing First, all existing values
     * are removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setLogo(org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.set(this.model, this.getResource(), LOGO, value);
    }

    /**
     * Removes a value of property Logo as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeLogo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, LOGO, value);
    }

    /**
     * Removes a value of property Logo as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeLogo(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), LOGO, value);
    }

    /**
     * Removes a value of property Logo given as an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeLogo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.remove(model, instanceResource, LOGO, value);
    }

    /**
     * Removes a value of property Logo given as an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeLogo(org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.remove(this.model, this.getResource(), LOGO, value);
    }

    /**
     * Removes all values of property Logo * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllLogos(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, LOGO);
    }

    /**
     * Removes all values of property Logo * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllLogos() {
	Base.removeAll(this.model, this.getResource(), LOGO);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1275a539 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasMakers(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, MAKER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1275a539 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasMakers() {
	return Base.has(this.model, this.getResource(), MAKER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1275a539 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasMaker(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, MAKER, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1275a539 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasMaker(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), MAKER, value);
    }

    /**
     * Get all values of property Maker as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMakers_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, MAKER);
    }

    /**
     * Get all values of property Maker as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMakers_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), MAKER);
    }

    /**
     * Get all values of property Maker * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Agent> getAllMakers(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, MAKER, Agent.class);
    }

    /**
     * Get all values of property Maker * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Agent> getAllMakers() {
	return Base.getAll(this.model, this.getResource(), MAKER, Agent.class);
    }

    /**
     * Get all values of property Maker * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public Agent getMaker() {
	return Base.getAll_as(this.model, this.getResource(), MAKER,
		Agent.class).firstValue();
    }

    /**
     * Adds a value to property Maker as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addMaker(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, MAKER, value);
    }

    /**
     * Adds a value to property Maker as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addMaker(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), MAKER, value);
    }

    /**
     * Adds a value to property Maker from an instance of Agent
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addMaker(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Agent value) {
	Base.add(model, instanceResource, MAKER, value);
    }

    /**
     * Adds a value to property Maker from an instance of Agent
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addMaker(Agent value) {
	Base.add(this.model, this.getResource(), MAKER, value);
    }

    /**
     * Sets a value of property Maker from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setMaker(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, MAKER, value);
    }

    /**
     * Sets a value of property Maker from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setMaker(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), MAKER, value);
    }

    /**
     * Sets a value of property Maker from an instance of Agent First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setMaker(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Agent value) {
	Base.set(model, instanceResource, MAKER, value);
    }

    /**
     * Sets a value of property Maker from an instance of Agent First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setMaker(Agent value) {
	Base.set(this.model, this.getResource(), MAKER, value);
    }

    /**
     * Removes a value of property Maker as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeMaker(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, MAKER, value);
    }

    /**
     * Removes a value of property Maker as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeMaker(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), MAKER, value);
    }

    /**
     * Removes a value of property Maker given as an instance of Agent
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeMaker(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Agent value) {
	Base.remove(model, instanceResource, MAKER, value);
    }

    /**
     * Removes a value of property Maker given as an instance of Agent
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeMaker(Agent value) {
	Base.remove(this.model, this.getResource(), MAKER, value);
    }

    /**
     * Removes all values of property Maker * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllMakers(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, MAKER);
    }

    /**
     * Removes all values of property Maker * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllMakers() {
	Base.removeAll(this.model, this.getResource(), MAKER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31245703 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasMembershipClass(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, MEMBERSHIPCLASS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31245703 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasMembershipClass() {
	return Base.has(this.model, this.getResource(), MEMBERSHIPCLASS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31245703 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasMembershipClass(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, MEMBERSHIPCLASS, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31245703 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasMembershipClass(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), MEMBERSHIPCLASS,
		value);
    }

    /**
     * Get all values of property MembershipClass as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMembershipClass_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, MEMBERSHIPCLASS);
    }

    /**
     * Get all values of property MembershipClass as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMembershipClass_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(),
		MEMBERSHIPCLASS);
    }

    /**
     * Get all values of property MembershipClass * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllMembershipClass(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, MEMBERSHIPCLASS,
		Thing.class);
    }

    /**
     * Get all values of property MembershipClass * @return a ClosableIterator
     * of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllMembershipClass() {
	return Base.getAll(this.model, this.getResource(), MEMBERSHIPCLASS,
		Thing.class);
    }

    /**
     * Get all values of property MembershipClass * @return a ClosableIterator
     * of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public Thing getMembershipClass() {
	return Base.getAll_as(this.model, this.getResource(), MEMBERSHIPCLASS,
		Thing.class).firstValue();
    }

    /**
     * Adds a value to property MembershipClass as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addMembershipClass(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, MEMBERSHIPCLASS, value);
    }

    /**
     * Adds a value to property MembershipClass as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addMembershipClass(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), MEMBERSHIPCLASS, value);
    }

    /**
     * Adds a value to property MembershipClass from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addMembershipClass(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.add(model, instanceResource, MEMBERSHIPCLASS, value);
    }

    /**
     * Adds a value to property MembershipClass from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addMembershipClass(Thing value) {
	Base.add(this.model, this.getResource(), MEMBERSHIPCLASS, value);
    }

    /**
     * Sets a value of property MembershipClass from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setMembershipClass(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, MEMBERSHIPCLASS, value);
    }

    /**
     * Sets a value of property MembershipClass from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setMembershipClass(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), MEMBERSHIPCLASS, value);
    }

    /**
     * Sets a value of property MembershipClass from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setMembershipClass(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.set(model, instanceResource, MEMBERSHIPCLASS, value);
    }

    /**
     * Sets a value of property MembershipClass from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setMembershipClass(Thing value) {
	Base.set(this.model, this.getResource(), MEMBERSHIPCLASS, value);
    }

    /**
     * Removes a value of property MembershipClass as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeMembershipClass(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, MEMBERSHIPCLASS, value);
    }

    /**
     * Removes a value of property MembershipClass as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeMembershipClass(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), MEMBERSHIPCLASS, value);
    }

    /**
     * Removes a value of property MembershipClass given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeMembershipClass(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.remove(model, instanceResource, MEMBERSHIPCLASS, value);
    }

    /**
     * Removes a value of property MembershipClass given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeMembershipClass(Thing value) {
	Base.remove(this.model, this.getResource(), MEMBERSHIPCLASS, value);
    }

    /**
     * Removes all values of property MembershipClass * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllMembershipClass(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, MEMBERSHIPCLASS);
    }

    /**
     * Removes all values of property MembershipClass * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllMembershipClass() {
	Base.removeAll(this.model, this.getResource(), MEMBERSHIPCLASS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@272e6498 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNames(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, NAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@272e6498 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNames() {
	return Base.has(this.model, this.getResource(), NAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@272e6498 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, NAME, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@272e6498 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasName(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), NAME, value);
    }

    /**
     * Get all values of property Name as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNames_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, NAME);
    }

    /**
     * Get all values of property Name as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNames_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), NAME);
    }

    /**
     * Get all values of property Name * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllNames(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, NAME,
		java.lang.String.class);
    }

    /**
     * Get all values of property Name * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllNames() {
	return Base.getAll(this.model, this.getResource(), NAME,
		java.lang.String.class);
    }

    /**
     * Get all values of property Name * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public java.lang.String getName() {
	return Base.getAll_as(this.model, this.getResource(), NAME,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property Name as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, NAME, value);
    }

    /**
     * Adds a value to property Name as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addName(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), NAME, value);
    }

    /**
     * Adds a value to property Name from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, NAME, value);
    }

    /**
     * Adds a value to property Name from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addName(java.lang.String value) {
	Base.add(this.model, this.getResource(), NAME, value);
    }

    /**
     * Sets a value of property Name from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, NAME, value);
    }

    /**
     * Sets a value of property Name from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setName(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), NAME, value);
    }

    /**
     * Sets a value of property Name from an instance of java.lang.String First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, NAME, value);
    }

    /**
     * Sets a value of property Name from an instance of java.lang.String First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setName(java.lang.String value) {
	Base.set(this.model, this.getResource(), NAME, value);
    }

    /**
     * Removes a value of property Name as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, NAME, value);
    }

    /**
     * Removes a value of property Name as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeName(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), NAME, value);
    }

    /**
     * Removes a value of property Name given as an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, NAME, value);
    }

    /**
     * Removes a value of property Name given as an instance of java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeName(java.lang.String value) {
	Base.remove(this.model, this.getResource(), NAME, value);
    }

    /**
     * Removes all values of property Name * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNames(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, NAME);
    }

    /**
     * Removes all values of property Name * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllNames() {
	Base.removeAll(this.model, this.getResource(), NAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@523ed23c has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNicknames(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, NICKNAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@523ed23c has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNicknames() {
	return Base.has(this.model, this.getResource(), NICKNAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@523ed23c has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNickname(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, NICKNAME, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@523ed23c has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNickname(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), NICKNAME, value);
    }

    /**
     * Get all values of property Nickname as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNicknames_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, NICKNAME);
    }

    /**
     * Get all values of property Nickname as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNicknames_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), NICKNAME);
    }

    /**
     * Get all values of property Nickname * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllNicknames(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, NICKNAME, Thing.class);
    }

    /**
     * Get all values of property Nickname * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllNicknames() {
	return Base.getAll(this.model, this.getResource(), NICKNAME,
		Thing.class);
    }

    /**
     * Get all values of property Nickname * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public Thing getNickname() {
	return Base.getAll_as(this.model, this.getResource(), NICKNAME,
		Thing.class).firstValue();
    }

    /**
     * Adds a value to property Nickname as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNickname(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, NICKNAME, value);
    }

    /**
     * Adds a value to property Nickname as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNickname(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), NICKNAME, value);
    }

    /**
     * Adds a value to property Nickname from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNickname(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.add(model, instanceResource, NICKNAME, value);
    }

    /**
     * Adds a value to property Nickname from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNickname(Thing value) {
	Base.add(this.model, this.getResource(), NICKNAME, value);
    }

    /**
     * Sets a value of property Nickname from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNickname(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, NICKNAME, value);
    }

    /**
     * Sets a value of property Nickname from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNickname(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), NICKNAME, value);
    }

    /**
     * Sets a value of property Nickname from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNickname(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.set(model, instanceResource, NICKNAME, value);
    }

    /**
     * Sets a value of property Nickname from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNickname(Thing value) {
	Base.set(this.model, this.getResource(), NICKNAME, value);
    }

    /**
     * Removes a value of property Nickname as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNickname(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, NICKNAME, value);
    }

    /**
     * Removes a value of property Nickname as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNickname(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), NICKNAME, value);
    }

    /**
     * Removes a value of property Nickname given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNickname(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.remove(model, instanceResource, NICKNAME, value);
    }

    /**
     * Removes a value of property Nickname given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNickname(Thing value) {
	Base.remove(this.model, this.getResource(), NICKNAME, value);
    }

    /**
     * Removes all values of property Nickname * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNicknames(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, NICKNAME);
    }

    /**
     * Removes all values of property Nickname * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNicknames() {
	Base.removeAll(this.model, this.getResource(), NICKNAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47a89031 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasPages(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, PAGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47a89031 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasPages() {
	return Base.has(this.model, this.getResource(), PAGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47a89031 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasPage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, PAGE, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47a89031 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasPage(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), PAGE, value);
    }

    /**
     * Get all values of property Page as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPages_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, PAGE);
    }

    /**
     * Get all values of property Page as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPages_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), PAGE);
    }

    /**
     * Get all values of property Page * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Document> getAllPages(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, PAGE, Document.class);
    }

    /**
     * Get all values of property Page * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Document> getAllPages() {
	return Base
		.getAll(this.model, this.getResource(), PAGE, Document.class);
    }

    /**
     * Get all values of property Page * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public Document getPage() {
	return Base.getAll_as(this.model, this.getResource(), PAGE,
		Document.class).firstValue();
    }

    /**
     * Adds a value to property Page as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addPage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, PAGE, value);
    }

    /**
     * Adds a value to property Page as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addPage(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), PAGE, value);
    }

    /**
     * Adds a value to property Page from an instance of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addPage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.add(model, instanceResource, PAGE, value);
    }

    /**
     * Adds a value to property Page from an instance of Document
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addPage(Document value) {
	Base.add(this.model, this.getResource(), PAGE, value);
    }

    /**
     * Sets a value of property Page from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setPage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, PAGE, value);
    }

    /**
     * Sets a value of property Page from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setPage(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), PAGE, value);
    }

    /**
     * Sets a value of property Page from an instance of Document First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setPage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.set(model, instanceResource, PAGE, value);
    }

    /**
     * Sets a value of property Page from an instance of Document First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setPage(Document value) {
	Base.set(this.model, this.getResource(), PAGE, value);
    }

    /**
     * Removes a value of property Page as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removePage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, PAGE, value);
    }

    /**
     * Removes a value of property Page as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removePage(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), PAGE, value);
    }

    /**
     * Removes a value of property Page given as an instance of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removePage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.remove(model, instanceResource, PAGE, value);
    }

    /**
     * Removes a value of property Page given as an instance of Document
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removePage(Document value) {
	Base.remove(this.model, this.getResource(), PAGE, value);
    }

    /**
     * Removes all values of property Page * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllPages(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, PAGE);
    }

    /**
     * Removes all values of property Page * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllPages() {
	Base.removeAll(this.model, this.getResource(), PAGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49c3c8e has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasPhones(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, PHONE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49c3c8e has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasPhones() {
	return Base.has(this.model, this.getResource(), PHONE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49c3c8e has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasPhone(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, PHONE, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49c3c8e has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasPhone(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), PHONE, value);
    }

    /**
     * Get all values of property Phone as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPhones_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, PHONE);
    }

    /**
     * Get all values of property Phone as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPhones_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), PHONE);
    }

    /**
     * Get all values of property Phone * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllPhones(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, PHONE, Thing.class);
    }

    /**
     * Get all values of property Phone * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllPhones() {
	return Base.getAll(this.model, this.getResource(), PHONE,
		Thing.class);
    }

    /**
     * Get all values of property Phone * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public Thing getPhone() {
	return Base.getAll_as(this.model, this.getResource(), PHONE,
		Thing.class).firstValue();
    }

    /**
     * Adds a value to property Phone as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addPhone(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, PHONE, value);
    }

    /**
     * Adds a value to property Phone as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addPhone(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), PHONE, value);
    }

    /**
     * Adds a value to property Phone from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addPhone(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.add(model, instanceResource, PHONE, value);
    }

    /**
     * Adds a value to property Phone from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addPhone(Thing value) {
	Base.add(this.model, this.getResource(), PHONE, value);
    }

    /**
     * Sets a value of property Phone from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setPhone(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, PHONE, value);
    }

    /**
     * Sets a value of property Phone from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setPhone(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), PHONE, value);
    }

    /**
     * Sets a value of property Phone from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setPhone(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.set(model, instanceResource, PHONE, value);
    }

    /**
     * Sets a value of property Phone from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setPhone(Thing value) {
	Base.set(this.model, this.getResource(), PHONE, value);
    }

    /**
     * Removes a value of property Phone as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removePhone(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, PHONE, value);
    }

    /**
     * Removes a value of property Phone as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removePhone(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), PHONE, value);
    }

    /**
     * Removes a value of property Phone given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removePhone(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.remove(model, instanceResource, PHONE, value);
    }

    /**
     * Removes a value of property Phone given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removePhone(Thing value) {
	Base.remove(this.model, this.getResource(), PHONE, value);
    }

    /**
     * Removes all values of property Phone * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllPhones(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, PHONE);
    }

    /**
     * Removes all values of property Phone * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllPhones() {
	Base.removeAll(this.model, this.getResource(), PHONE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bd6075d has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasPrimaryTopicOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, PRIMARYTOPICOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bd6075d has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasPrimaryTopicOf() {
	return Base.has(this.model, this.getResource(), PRIMARYTOPICOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bd6075d has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasPrimaryTopicOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, PRIMARYTOPICOF, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bd6075d has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasPrimaryTopicOf(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), PRIMARYTOPICOF,
		value);
    }

    /**
     * Get all values of property PrimaryTopicOf as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrimaryTopicOf_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, PRIMARYTOPICOF);
    }

    /**
     * Get all values of property PrimaryTopicOf as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrimaryTopicOf_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(),
		PRIMARYTOPICOF);
    }

    /**
     * Get all values of property PrimaryTopicOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Document> getAllPrimaryTopicOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, PRIMARYTOPICOF,
		Document.class);
    }

    /**
     * Get all values of property PrimaryTopicOf * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Document> getAllPrimaryTopicOf() {
	return Base.getAll(this.model, this.getResource(), PRIMARYTOPICOF,
		Document.class);
    }

    /**
     * Get all values of property PrimaryTopicOf * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public Document getPrimaryTopicOf() {
	return Base.getAll_as(this.model, this.getResource(), PRIMARYTOPICOF,
		Document.class).firstValue();
    }

    /**
     * Adds a value to property PrimaryTopicOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addPrimaryTopicOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, PRIMARYTOPICOF, value);
    }

    /**
     * Adds a value to property PrimaryTopicOf as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addPrimaryTopicOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), PRIMARYTOPICOF, value);
    }

    /**
     * Adds a value to property PrimaryTopicOf from an instance of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addPrimaryTopicOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.add(model, instanceResource, PRIMARYTOPICOF, value);
    }

    /**
     * Adds a value to property PrimaryTopicOf from an instance of Document
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addPrimaryTopicOf(Document value) {
	Base.add(this.model, this.getResource(), PRIMARYTOPICOF, value);
    }

    /**
     * Sets a value of property PrimaryTopicOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setPrimaryTopicOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, PRIMARYTOPICOF, value);
    }

    /**
     * Sets a value of property PrimaryTopicOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setPrimaryTopicOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), PRIMARYTOPICOF, value);
    }

    /**
     * Sets a value of property PrimaryTopicOf from an instance of Document
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setPrimaryTopicOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.set(model, instanceResource, PRIMARYTOPICOF, value);
    }

    /**
     * Sets a value of property PrimaryTopicOf from an instance of Document
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setPrimaryTopicOf(Document value) {
	Base.set(this.model, this.getResource(), PRIMARYTOPICOF, value);
    }

    /**
     * Removes a value of property PrimaryTopicOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removePrimaryTopicOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, PRIMARYTOPICOF, value);
    }

    /**
     * Removes a value of property PrimaryTopicOf as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removePrimaryTopicOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), PRIMARYTOPICOF, value);
    }

    /**
     * Removes a value of property PrimaryTopicOf given as an instance of
     * Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removePrimaryTopicOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.remove(model, instanceResource, PRIMARYTOPICOF, value);
    }

    /**
     * Removes a value of property PrimaryTopicOf given as an instance of
     * Document
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removePrimaryTopicOf(Document value) {
	Base.remove(this.model, this.getResource(), PRIMARYTOPICOF, value);
    }

    /**
     * Removes all values of property PrimaryTopicOf * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllPrimaryTopicOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, PRIMARYTOPICOF);
    }

    /**
     * Removes all values of property PrimaryTopicOf * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllPrimaryTopicOf() {
	Base.removeAll(this.model, this.getResource(), PRIMARYTOPICOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c84d9d has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasThemes(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, THEME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c84d9d has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasThemes() {
	return Base.has(this.model, this.getResource(), THEME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c84d9d has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasTheme(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, THEME, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c84d9d has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasTheme(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), THEME, value);
    }

    /**
     * Get all values of property Theme as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllThemes_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, THEME);
    }

    /**
     * Get all values of property Theme as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllThemes_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), THEME);
    }

    /**
     * Get all values of property Theme * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<org.ontoware.rdfreactor.schema.owl.OwlThing> getAllThemes(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, THEME,
		org.ontoware.rdfreactor.schema.owl.OwlThing.class);
    }

    /**
     * Get all values of property Theme * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<org.ontoware.rdfreactor.schema.owl.OwlThing> getAllThemes() {
	return Base.getAll(this.model, this.getResource(), THEME,
		org.ontoware.rdfreactor.schema.owl.OwlThing.class);
    }

    /**
     * Get all values of property Theme * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public org.ontoware.rdfreactor.schema.owl.OwlThing getTheme() {
	return Base.getAll_as(this.model, this.getResource(), THEME,
		org.ontoware.rdfreactor.schema.owl.OwlThing.class).firstValue();
    }

    /**
     * Adds a value to property Theme as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addTheme(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, THEME, value);
    }

    /**
     * Adds a value to property Theme as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addTheme(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), THEME, value);
    }

    /**
     * Adds a value to property Theme from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addTheme(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.add(model, instanceResource, THEME, value);
    }

    /**
     * Adds a value to property Theme from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addTheme(org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.add(this.model, this.getResource(), THEME, value);
    }

    /**
     * Sets a value of property Theme from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setTheme(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, THEME, value);
    }

    /**
     * Sets a value of property Theme from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setTheme(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), THEME, value);
    }

    /**
     * Sets a value of property Theme from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing First, all existing values
     * are removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setTheme(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.set(model, instanceResource, THEME, value);
    }

    /**
     * Sets a value of property Theme from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing First, all existing values
     * are removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setTheme(org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.set(this.model, this.getResource(), THEME, value);
    }

    /**
     * Removes a value of property Theme as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeTheme(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, THEME, value);
    }

    /**
     * Removes a value of property Theme as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeTheme(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), THEME, value);
    }

    /**
     * Removes a value of property Theme given as an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeTheme(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.remove(model, instanceResource, THEME, value);
    }

    /**
     * Removes a value of property Theme given as an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeTheme(org.ontoware.rdfreactor.schema.owl.OwlThing value) {
	Base.remove(this.model, this.getResource(), THEME, value);
    }

    /**
     * Removes all values of property Theme * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllThemes(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, THEME);
    }

    /**
     * Removes all values of property Theme * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllThemes() {
	Base.removeAll(this.model, this.getResource(), THEME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@121c77b has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasModified(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, MODIFIED);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@121c77b has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasModified() {
	return Base.has(this.model, this.getResource(), MODIFIED);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@121c77b has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasModified(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, MODIFIED, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@121c77b has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasModified(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), MODIFIED, value);
    }

    /**
     * Get all values of property DateModified as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllModified_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, MODIFIED);
    }

    /**
     * Get all values of property DateModified as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllModified_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), MODIFIED);
    }

    /**
     * Get all values of property DateModified * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllModified(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, MODIFIED,
		java.lang.String.class);
    }

    /**
     * Get all values of property DateModified * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllModified() {
	return Base.getAll(this.model, this.getResource(), MODIFIED,
		java.lang.String.class);
    }

    /**
     * Get all values of property DateModified * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public java.lang.String getModified() {
	return Base.getAll_as(this.model, this.getResource(), MODIFIED,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property DateModified as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addModified(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, MODIFIED, value);
    }

    /**
     * Adds a value to property DateModified as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addModified(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), MODIFIED, value);
    }

    /**
     * Adds a value to property DateModified from an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addModified(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, MODIFIED, value);
    }

    /**
     * Adds a value to property DateModified from an instance of
     * java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addModified(java.lang.String value) {
	Base.add(this.model, this.getResource(), MODIFIED, value);
    }

    /**
     * Sets a value of property DateModified from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setModified(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, MODIFIED, value);
    }

    /**
     * Sets a value of property DateModified from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setModified(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), MODIFIED, value);
    }

    /**
     * Sets a value of property DateModified from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setModified(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, MODIFIED, value);
    }

    /**
     * Sets a value of property DateModified from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setModified(java.lang.String value) {
	Base.set(this.model, this.getResource(), MODIFIED, value);
    }

    /**
     * Removes a value of property DateModified as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeModified(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, MODIFIED, value);
    }

    /**
     * Removes a value of property DateModified as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeModified(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), MODIFIED, value);
    }

    /**
     * Removes a value of property DateModified given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeModified(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, MODIFIED, value);
    }

    /**
     * Removes a value of property DateModified given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeModified(java.lang.String value) {
	Base.remove(this.model, this.getResource(), MODIFIED, value);
    }

    /**
     * Removes all values of property DateModified * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllModified(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, MODIFIED);
    }

    /**
     * Removes all values of property DateModified * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllModified() {
	Base.removeAll(this.model, this.getResource(), MODIFIED);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a56f0 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasCreated(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, CREATED);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a56f0 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasCreated() {
	return Base.has(this.model, this.getResource(), CREATED);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a56f0 has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasCreated(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, CREATED, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a56f0 has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasCreated(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), CREATED, value);
    }

    /**
     * Get all values of property DateCreated as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCreated_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, CREATED);
    }

    /**
     * Get all values of property DateCreated as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCreated_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), CREATED);
    }

    /**
     * Get all values of property DateCreated * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllCreated(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, CREATED,
		java.lang.String.class);
    }

    /**
     * Get all values of property DateCreated * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllCreated() {
	return Base.getAll(this.model, this.getResource(), CREATED,
		java.lang.String.class);
    }

    /**
     * Get all values of property DateCreated * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public java.lang.String getCreated() {
	return Base.getAll_as(this.model, this.getResource(), CREATED,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property DateCreated as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addCreated(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, CREATED, value);
    }

    /**
     * Adds a value to property DateCreated as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addCreated(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), CREATED, value);
    }

    /**
     * Adds a value to property DateCreated from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addCreated(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, CREATED, value);
    }

    /**
     * Adds a value to property DateCreated from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addCreated(java.lang.String value) {
	Base.add(this.model, this.getResource(), CREATED, value);
    }

    /**
     * Sets a value of property DateCreated from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setCreated(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, CREATED, value);
    }

    /**
     * Sets a value of property DateCreated from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setCreated(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), CREATED, value);
    }

    /**
     * Sets a value of property DateCreated from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setCreated(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, CREATED, value);
    }

    /**
     * Sets a value of property DateCreated from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setCreated(java.lang.String value) {
	Base.set(this.model, this.getResource(), CREATED, value);
    }

    /**
     * Removes a value of property DateCreated as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeCreated(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, CREATED, value);
    }

    /**
     * Removes a value of property DateCreated as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeCreated(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), CREATED, value);
    }

    /**
     * Removes a value of property DateCreated given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeCreated(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, CREATED, value);
    }

    /**
     * Removes a value of property DateCreated given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeCreated(java.lang.String value) {
	Base.remove(this.model, this.getResource(), CREATED, value);
    }

    /**
     * Removes all values of property DateCreated * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllCreated(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, CREATED);
    }

    /**
     * Removes all values of property DateCreated * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllCreated() {
	Base.removeAll(this.model, this.getResource(), CREATED);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10a73bc has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasHasPart(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, HASPART);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10a73bc has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasHasPart() {
	return Base.has(this.model, this.getResource(), HASPART);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10a73bc has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasHasPart(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, HASPART, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10a73bc has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasHasPart(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Get all values of property HasPart as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasPart_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, HASPART);
    }

    /**
     * Get all values of property HasPart as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasPart_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), HASPART);
    }

    /**
     * Get all values of property HasPart * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllHasPart(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, HASPART, Thing.class);
    }

    /**
     * Get all values of property HasPart * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllHasPart() {
	return Base.getAll(this.model, this.getResource(), HASPART,
		Thing.class);
    }

    /**
     * Get all values of property HasPart * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public Thing getHasPart() {
	return Base.getAll_as(this.model, this.getResource(), HASPART,
		Thing.class).firstValue();
    }

    /**
     * Adds a value to property HasPart as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addHasPart(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, HASPART, value);
    }

    /**
     * Adds a value to property HasPart as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addHasPart(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Adds a value to property HasPart from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addHasPart(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.add(model, instanceResource, HASPART, value);
    }

    /**
     * Adds a value to property HasPart from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addHasPart(Thing value) {
	Base.add(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Sets a value of property HasPart from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setHasPart(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, HASPART, value);
    }

    /**
     * Sets a value of property HasPart from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setHasPart(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Sets a value of property HasPart from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setHasPart(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.set(model, instanceResource, HASPART, value);
    }

    /**
     * Sets a value of property HasPart from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setHasPart(Thing value) {
	Base.set(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Removes a value of property HasPart as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeHasPart(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, HASPART, value);
    }

    /**
     * Removes a value of property HasPart as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeHasPart(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Removes a value of property HasPart given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeHasPart(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.remove(model, instanceResource, HASPART, value);
    }

    /**
     * Removes a value of property HasPart given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeHasPart(Thing value) {
	Base.remove(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Removes all values of property HasPart * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllHasPart(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, HASPART);
    }

    /**
     * Removes all values of property HasPart * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllHasPart() {
	Base.removeAll(this.model, this.getResource(), HASPART);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1391b1a has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasIsPartOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, ISPARTOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1391b1a has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasIsPartOf() {
	return Base.has(this.model, this.getResource(), ISPARTOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1391b1a has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasIsPartOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, ISPARTOF, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1391b1a has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasIsPartOf(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), ISPARTOF, value);
    }

    /**
     * Get all values of property IsPartOf as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIsPartOf_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, ISPARTOF);
    }

    /**
     * Get all values of property IsPartOf as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIsPartOf_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), ISPARTOF);
    }

    /**
     * Get all values of property IsPartOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllIsPartOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, ISPARTOF, Thing.class);
    }

    /**
     * Get all values of property IsPartOf * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllIsPartOf() {
	return Base.getAll(this.model, this.getResource(), ISPARTOF,
		Thing.class);
    }

    /**
     * Get all values of property IsPartOf * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public Thing getIsPartOf() {
	return Base.getAll_as(this.model, this.getResource(), ISPARTOF,
		Thing.class).firstValue();
    }

    /**
     * Adds a value to property IsPartOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addIsPartOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, ISPARTOF, value);
    }

    /**
     * Adds a value to property IsPartOf as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addIsPartOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), ISPARTOF, value);
    }

    /**
     * Adds a value to property IsPartOf from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addIsPartOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.add(model, instanceResource, ISPARTOF, value);
    }

    /**
     * Adds a value to property IsPartOf from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addIsPartOf(Thing value) {
	Base.add(this.model, this.getResource(), ISPARTOF, value);
    }

    /**
     * Sets a value of property IsPartOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setIsPartOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, ISPARTOF, value);
    }

    /**
     * Sets a value of property IsPartOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setIsPartOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), ISPARTOF, value);
    }

    /**
     * Sets a value of property IsPartOf from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setIsPartOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.set(model, instanceResource, ISPARTOF, value);
    }

    /**
     * Sets a value of property IsPartOf from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setIsPartOf(Thing value) {
	Base.set(this.model, this.getResource(), ISPARTOF, value);
    }

    /**
     * Removes a value of property IsPartOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeIsPartOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, ISPARTOF, value);
    }

    /**
     * Removes a value of property IsPartOf as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeIsPartOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), ISPARTOF, value);
    }

    /**
     * Removes a value of property IsPartOf given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeIsPartOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.remove(model, instanceResource, ISPARTOF, value);
    }

    /**
     * Removes a value of property IsPartOf given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeIsPartOf(Thing value) {
	Base.remove(this.model, this.getResource(), ISPARTOF, value);
    }

    /**
     * Removes all values of property IsPartOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllIsPartOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, ISPARTOF);
    }

    /**
     * Removes all values of property IsPartOf * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllIsPartOf() {
	Base.removeAll(this.model, this.getResource(), ISPARTOF);
    }
}