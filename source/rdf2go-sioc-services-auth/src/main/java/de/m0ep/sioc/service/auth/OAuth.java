/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) on 6/3/13 4:25 PM
 */
package de.m0ep.sioc.service.auth;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;
import org.rdfs.sioc.services.Thing;

/**
 * This class manages access to these properties:
 * <ul>
 * <li>AccessTokeneEndpoint</li>
 * <li>AuthorizationURL</li>
 * <li>OAuthVersion</li>
 * <li>RequestTokenEndpoint</li>
 * </ul>
 * 
 * This class was generated by <a
 * href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 6/3/13 4:25 PM
 */
public class OAuth extends Authentication {
    private static final long serialVersionUID = 8460720909085225254L;

    /** http://www.m0ep.de/sioc-service-auth#OAuth */
    public static final URI RDFS_CLASS = new URIImpl(
	    "http://www.m0ep.de/sioc-service-auth#OAuth", false);

    /** http://www.m0ep.de/sioc-service-auth#has_accesstokenendpoint */
    public static final URI ACCESSTOKENENDPOINT = new URIImpl(
	    "http://www.m0ep.de/sioc-service-auth#has_accesstokenendpoint",
	    false);

    /** http://www.m0ep.de/sioc-service-auth#has_authorizationurl */
    public static final URI AUTHORIZATIONURL = new URIImpl(
	    "http://www.m0ep.de/sioc-service-auth#has_authorizationurl", false);

    /** http://www.m0ep.de/sioc-service-auth#oauth_version */
    public static final URI OAUTHVERSION = new URIImpl(
	    "http://www.m0ep.de/sioc-service-auth#oauth_version", false);

    /** http://www.m0ep.de/sioc-service-auth#has_requesttokenendpoint */
    public static final URI REQUESTTOKENENDPOINT = new URIImpl(
	    "http://www.m0ep.de/sioc-service-auth#has_requesttokenendpoint",
	    false);

    /**
     * All property-URIs with this class as domain. All properties of all
     * super-classes are also available.
     */
    public static final URI[] MANAGED_URIS = {
	    new URIImpl(
		    "http://www.m0ep.de/sioc-service-auth#has_accesstokenendpoint",
		    false),
	    new URIImpl(
		    "http://www.m0ep.de/sioc-service-auth#has_authorizationurl",
		    false),
	    new URIImpl("http://www.m0ep.de/sioc-service-auth#oauth_version",
		    false),
	    new URIImpl(
		    "http://www.m0ep.de/sioc-service-auth#has_requesttokenendpoint",
		    false)
    };

    // protected constructors needed for inheritance

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.semweb4j.org
     * @param classURI
     *            URI of RDFS class
     * @param instanceIdentifier
     *            Resource that identifies this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c1]
     */
    protected OAuth(Model model, URI classURI,
	    org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
	    boolean write) {
	super(model, classURI, instanceIdentifier, write);
    }

    // public constructors

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param instanceIdentifier
     *            an RDF2Go Resource identifying this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c2]
     */
    public OAuth(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
	    boolean write) {
	super(model, RDFS_CLASS, instanceIdentifier, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a URI, given as
     * a String. Creating two wrappers for the same URI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param uriString
     *            a URI given as a String
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * @throws ModelRuntimeException
     *             if URI syntax is wrong
     * 
     *             [Generated from RDFReactor template rule #c7]
     */
    public OAuth(Model model, String uriString, boolean write)
	    throws ModelRuntimeException {
	super(model, RDFS_CLASS, new URIImpl(uriString, false), write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a blank node.
     * Creating two wrappers for the same blank node is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param bnode
     *            BlankNode of this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c8]
     */
    public OAuth(Model model, BlankNode bnode, boolean write) {
	super(model, RDFS_CLASS, bnode, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a randomly
     * generated URI. Creating two wrappers results in different URIs.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c9]
     */
    public OAuth(Model model, boolean write) {
	super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
    }

    // /////////////////////////////////////////////////////////////////
    // typing

    /**
     * Return an existing instance of this class in the model. No statements are
     * written.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return an instance of OAuth or null if none existst
     * 
     *         [Generated from RDFReactor template rule #class0]
     */
    public static OAuth getInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getInstance(model, instanceResource, OAuth.class);
    }

    /**
     * Create a new instance of this class in the model. That is, create the
     * statement (instanceResource, RDF.type,
     * http://www.m0ep.de/sioc-service-auth#OAuth).
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class1]
     */
    public static void createInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.createInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return true if instanceResource is an instance of this class in the
     *         model
     * 
     *         [Generated from RDFReactor template rule #class2]
     */
    public static boolean hasInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.hasInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @return all instances of this class in Model 'model' as RDF resources
     * 
     *         [Generated from RDFReactor template rule #class3]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(
	    Model model) {
	return Base.getAllInstances(model, RDFS_CLASS,
		org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @return all instances of this class in Model 'model' as a ReactorResult,
     *         which can conveniently be converted to iterator, list or array.
     * 
     *         [Generated from RDFReactor template rule #class3-as]
     */
    public static ReactorResult<? extends OAuth> getAllInstances_as(Model model) {
	return Base.getAllInstances_as(model, RDFS_CLASS, OAuth.class);
    }

    /**
     * Remove rdf:type OAuth from this instance. Other triples are not affected.
     * To delete more, use deleteAllProperties
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class4]
     */
    public static void deleteInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.deleteInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * Delete all (this, *, *), i.e. including rdf:type
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     */
    public static void deleteAllProperties(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.deleteAllProperties(model, instanceResource);
    }

    // /////////////////////////////////////////////////////////////////
    // property access methods

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55925433 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasAccessTokeneEndpoint(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, ACCESSTOKENENDPOINT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55925433 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasAccessTokeneEndpoint() {
	return Base.has(this.model, this.getResource(), ACCESSTOKENENDPOINT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55925433 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasAccessTokeneEndpoint(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, ACCESSTOKENENDPOINT,
		value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@55925433 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasAccessTokeneEndpoint(
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(),
		ACCESSTOKENENDPOINT, value);
    }

    /**
     * Get all values of property AccessTokeneEndpoint as an Iterator over
     * RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAccessTokeneEndpoint_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, ACCESSTOKENENDPOINT);
    }

    /**
     * Get all values of property AccessTokeneEndpoint as an Iterator over
     * RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAccessTokeneEndpoint_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(),
		ACCESSTOKENENDPOINT);
    }

    /**
     * Get all values of property AccessTokeneEndpoint * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllAccessTokeneEndpoint(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, ACCESSTOKENENDPOINT,
		Thing.class);
    }

    /**
     * Get all values of property AccessTokeneEndpoint * @return a
     * ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllAccessTokeneEndpoint() {
	return Base.getAll(this.model, this.getResource(), ACCESSTOKENENDPOINT,
		Thing.class);
    }

    /**
     * Get all values of property AccessTokeneEndpoint as a ReactorResult of
     * Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Thing getAccessTokeneEndpoint() {
	return Base.getAll_as(this.model, this.getResource(),
		ACCESSTOKENENDPOINT, Thing.class).firstValue();
    }

    /**
     * Adds a value to property AccessTokeneEndpoint as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addAccessTokeneEndpoint(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, ACCESSTOKENENDPOINT, value);
    }

    /**
     * Adds a value to property AccessTokeneEndpoint as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addAccessTokeneEndpoint(
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), ACCESSTOKENENDPOINT, value);
    }

    /**
     * Adds a value to property AccessTokeneEndpoint from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addAccessTokeneEndpoint(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.add(model, instanceResource, ACCESSTOKENENDPOINT, value);
    }

    /**
     * Adds a value to property AccessTokeneEndpoint from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addAccessTokeneEndpoint(Thing value) {
	Base.add(this.model, this.getResource(), ACCESSTOKENENDPOINT, value);
    }

    /**
     * Sets a value of property AccessTokeneEndpoint from an RDF2Go node. First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setAccessTokeneEndpoint(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, ACCESSTOKENENDPOINT, value);
    }

    /**
     * Sets a value of property AccessTokeneEndpoint from an RDF2Go node. First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setAccessTokeneEndpoint(
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), ACCESSTOKENENDPOINT, value);
    }

    /**
     * Sets a value of property AccessTokeneEndpoint from an instance of Thing
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setAccessTokeneEndpoint(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.set(model, instanceResource, ACCESSTOKENENDPOINT, value);
    }

    /**
     * Sets a value of property AccessTokeneEndpoint from an instance of Thing
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setAccessTokeneEndpoint(Thing value) {
	Base.set(this.model, this.getResource(), ACCESSTOKENENDPOINT, value);
    }

    /**
     * Removes a value of property AccessTokeneEndpoint as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeAccessTokeneEndpoint(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, ACCESSTOKENENDPOINT, value);
    }

    /**
     * Removes a value of property AccessTokeneEndpoint as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeAccessTokeneEndpoint(
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), ACCESSTOKENENDPOINT, value);
    }

    /**
     * Removes a value of property AccessTokeneEndpoint given as an instance of
     * Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeAccessTokeneEndpoint(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.remove(model, instanceResource, ACCESSTOKENENDPOINT, value);
    }

    /**
     * Removes a value of property AccessTokeneEndpoint given as an instance of
     * Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeAccessTokeneEndpoint(Thing value) {
	Base.remove(this.model, this.getResource(), ACCESSTOKENENDPOINT, value);
    }

    /**
     * Removes all values of property AccessTokeneEndpoint * @param model an
     * RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllAccessTokeneEndpoint(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, ACCESSTOKENENDPOINT);
    }

    /**
     * Removes all values of property AccessTokeneEndpoint * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllAccessTokeneEndpoint() {
	Base.removeAll(this.model, this.getResource(), ACCESSTOKENENDPOINT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@74577bbc has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasAuthorizationURL(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, AUTHORIZATIONURL);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@74577bbc has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasAuthorizationURL() {
	return Base.has(this.model, this.getResource(), AUTHORIZATIONURL);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@74577bbc has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasAuthorizationURL(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, AUTHORIZATIONURL, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@74577bbc has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasAuthorizationURL(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), AUTHORIZATIONURL,
		value);
    }

    /**
     * Get all values of property AuthorizationURL as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAuthorizationURL_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, AUTHORIZATIONURL);
    }

    /**
     * Get all values of property AuthorizationURL as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAuthorizationURL_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(),
		AUTHORIZATIONURL);
    }

    /**
     * Get all values of property AuthorizationURL * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllAuthorizationURL(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, AUTHORIZATIONURL,
		Thing.class);
    }

    /**
     * Get all values of property AuthorizationURL * @return a ClosableIterator
     * of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllAuthorizationURL() {
	return Base.getAll(this.model, this.getResource(), AUTHORIZATIONURL,
		Thing.class);
    }

    /**
     * Get all values of property AuthorizationURL as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Thing getAuthorizationURL() {
	return Base.getAll_as(this.model, this.getResource(), AUTHORIZATIONURL,
		Thing.class).firstValue();
    }

    /**
     * Adds a value to property AuthorizationURL as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addAuthorizationURL(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, AUTHORIZATIONURL, value);
    }

    /**
     * Adds a value to property AuthorizationURL as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addAuthorizationURL(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), AUTHORIZATIONURL, value);
    }

    /**
     * Adds a value to property AuthorizationURL from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addAuthorizationURL(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.add(model, instanceResource, AUTHORIZATIONURL, value);
    }

    /**
     * Adds a value to property AuthorizationURL from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addAuthorizationURL(Thing value) {
	Base.add(this.model, this.getResource(), AUTHORIZATIONURL, value);
    }

    /**
     * Sets a value of property AuthorizationURL from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setAuthorizationURL(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, AUTHORIZATIONURL, value);
    }

    /**
     * Sets a value of property AuthorizationURL from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setAuthorizationURL(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), AUTHORIZATIONURL, value);
    }

    /**
     * Sets a value of property AuthorizationURL from an instance of Thing
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setAuthorizationURL(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.set(model, instanceResource, AUTHORIZATIONURL, value);
    }

    /**
     * Sets a value of property AuthorizationURL from an instance of Thing
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setAuthorizationURL(Thing value) {
	Base.set(this.model, this.getResource(), AUTHORIZATIONURL, value);
    }

    /**
     * Removes a value of property AuthorizationURL as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeAuthorizationURL(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, AUTHORIZATIONURL, value);
    }

    /**
     * Removes a value of property AuthorizationURL as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeAuthorizationURL(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), AUTHORIZATIONURL, value);
    }

    /**
     * Removes a value of property AuthorizationURL given as an instance of
     * Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeAuthorizationURL(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.remove(model, instanceResource, AUTHORIZATIONURL, value);
    }

    /**
     * Removes a value of property AuthorizationURL given as an instance of
     * Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeAuthorizationURL(Thing value) {
	Base.remove(this.model, this.getResource(), AUTHORIZATIONURL, value);
    }

    /**
     * Removes all values of property AuthorizationURL * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllAuthorizationURL(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, AUTHORIZATIONURL);
    }

    /**
     * Removes all values of property AuthorizationURL * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllAuthorizationURL() {
	Base.removeAll(this.model, this.getResource(), AUTHORIZATIONURL);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2084176c has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasOAuthVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, OAUTHVERSION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2084176c has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasOAuthVersion() {
	return Base.has(this.model, this.getResource(), OAUTHVERSION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2084176c has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasOAuthVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, OAUTHVERSION, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2084176c has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasOAuthVersion(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), OAUTHVERSION,
		value);
    }

    /**
     * Get all values of property OAuthVersion as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOAuthVersion_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, OAUTHVERSION);
    }

    /**
     * Get all values of property OAuthVersion as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOAuthVersion_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), OAUTHVERSION);
    }

    /**
     * Get all values of property OAuthVersion * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllOAuthVersion(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, OAUTHVERSION,
		java.lang.String.class);
    }

    /**
     * Get all values of property OAuthVersion * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllOAuthVersion() {
	return Base.getAll(this.model, this.getResource(), OAUTHVERSION,
		java.lang.String.class);
    }

    /**
     * Get all values of property OAuthVersion as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getOAuthVersion() {
	return Base.getAll_as(this.model, this.getResource(), OAUTHVERSION,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property OAuthVersion as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addOAuthVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, OAUTHVERSION, value);
    }

    /**
     * Adds a value to property OAuthVersion as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addOAuthVersion(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), OAUTHVERSION, value);
    }

    /**
     * Adds a value to property OAuthVersion from an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addOAuthVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, OAUTHVERSION, value);
    }

    /**
     * Adds a value to property OAuthVersion from an instance of
     * java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addOAuthVersion(java.lang.String value) {
	Base.add(this.model, this.getResource(), OAUTHVERSION, value);
    }

    /**
     * Sets a value of property OAuthVersion from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setOAuthVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, OAUTHVERSION, value);
    }

    /**
     * Sets a value of property OAuthVersion from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setOAuthVersion(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), OAUTHVERSION, value);
    }

    /**
     * Sets a value of property OAuthVersion from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setOAuthVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, OAUTHVERSION, value);
    }

    /**
     * Sets a value of property OAuthVersion from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setOAuthVersion(java.lang.String value) {
	Base.set(this.model, this.getResource(), OAUTHVERSION, value);
    }

    /**
     * Removes a value of property OAuthVersion as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeOAuthVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, OAUTHVERSION, value);
    }

    /**
     * Removes a value of property OAuthVersion as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeOAuthVersion(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), OAUTHVERSION, value);
    }

    /**
     * Removes a value of property OAuthVersion given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeOAuthVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, OAUTHVERSION, value);
    }

    /**
     * Removes a value of property OAuthVersion given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeOAuthVersion(java.lang.String value) {
	Base.remove(this.model, this.getResource(), OAUTHVERSION, value);
    }

    /**
     * Removes all values of property OAuthVersion * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllOAuthVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, OAUTHVERSION);
    }

    /**
     * Removes all values of property OAuthVersion * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllOAuthVersion() {
	Base.removeAll(this.model, this.getResource(), OAUTHVERSION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@712b773a has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasRequestTokenEndpoint(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, REQUESTTOKENENDPOINT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@712b773a has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasRequestTokenEndpoint() {
	return Base.has(this.model, this.getResource(), REQUESTTOKENENDPOINT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@712b773a has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasRequestTokenEndpoint(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, REQUESTTOKENENDPOINT,
		value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@712b773a has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasRequestTokenEndpoint(
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(),
		REQUESTTOKENENDPOINT, value);
    }

    /**
     * Get all values of property RequestTokenEndpoint as an Iterator over
     * RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRequestTokenEndpoint_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base
		.getAll_asNode(model, instanceResource, REQUESTTOKENENDPOINT);
    }

    /**
     * Get all values of property RequestTokenEndpoint as an Iterator over
     * RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRequestTokenEndpoint_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(),
		REQUESTTOKENENDPOINT);
    }

    /**
     * Get all values of property RequestTokenEndpoint * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllRequestTokenEndpoint(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, REQUESTTOKENENDPOINT,
		Thing.class);
    }

    /**
     * Get all values of property RequestTokenEndpoint * @return a
     * ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllRequestTokenEndpoint() {
	return Base.getAll(this.model, this.getResource(),
		REQUESTTOKENENDPOINT, Thing.class);
    }

    /**
     * Get all values of property RequestTokenEndpoint as a ReactorResult of
     * Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Thing getRequestTokenEndpoint() {
	return Base.getAll_as(this.model, this.getResource(),
		REQUESTTOKENENDPOINT, Thing.class).firstValue();
    }

    /**
     * Adds a value to property RequestTokenEndpoint as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addRequestTokenEndpoint(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, REQUESTTOKENENDPOINT, value);
    }

    /**
     * Adds a value to property RequestTokenEndpoint as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addRequestTokenEndpoint(
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), REQUESTTOKENENDPOINT, value);
    }

    /**
     * Adds a value to property RequestTokenEndpoint from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addRequestTokenEndpoint(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.add(model, instanceResource, REQUESTTOKENENDPOINT, value);
    }

    /**
     * Adds a value to property RequestTokenEndpoint from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addRequestTokenEndpoint(Thing value) {
	Base.add(this.model, this.getResource(), REQUESTTOKENENDPOINT, value);
    }

    /**
     * Sets a value of property RequestTokenEndpoint from an RDF2Go node. First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setRequestTokenEndpoint(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, REQUESTTOKENENDPOINT, value);
    }

    /**
     * Sets a value of property RequestTokenEndpoint from an RDF2Go node. First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setRequestTokenEndpoint(
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), REQUESTTOKENENDPOINT, value);
    }

    /**
     * Sets a value of property RequestTokenEndpoint from an instance of Thing
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setRequestTokenEndpoint(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.set(model, instanceResource, REQUESTTOKENENDPOINT, value);
    }

    /**
     * Sets a value of property RequestTokenEndpoint from an instance of Thing
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setRequestTokenEndpoint(Thing value) {
	Base.set(this.model, this.getResource(), REQUESTTOKENENDPOINT, value);
    }

    /**
     * Removes a value of property RequestTokenEndpoint as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeRequestTokenEndpoint(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, REQUESTTOKENENDPOINT, value);
    }

    /**
     * Removes a value of property RequestTokenEndpoint as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeRequestTokenEndpoint(
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), REQUESTTOKENENDPOINT, value);
    }

    /**
     * Removes a value of property RequestTokenEndpoint given as an instance of
     * Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeRequestTokenEndpoint(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.remove(model, instanceResource, REQUESTTOKENENDPOINT, value);
    }

    /**
     * Removes a value of property RequestTokenEndpoint given as an instance of
     * Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeRequestTokenEndpoint(Thing value) {
	Base.remove(this.model, this.getResource(), REQUESTTOKENENDPOINT, value);
    }

    /**
     * Removes all values of property RequestTokenEndpoint * @param model an
     * RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllRequestTokenEndpoint(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, REQUESTTOKENENDPOINT);
    }

    /**
     * Removes all values of property RequestTokenEndpoint * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllRequestTokenEndpoint() {
	Base.removeAll(this.model, this.getResource(), REQUESTTOKENENDPOINT);
    }
}