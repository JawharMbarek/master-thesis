/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) on 21.12.12 17:00
 */
package org.rdfs.sioc;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;

/**
 * This class manages access to these properties:
 * <ul>
 * <li>ContainerOf</li>
 * <li>LastItemDate</li>
 * <li>NumItems</li>
 * <li>Parent</li>
 * <li>ParentOf</li>
 * <li>Subscriber</li>
 * </ul>
 * 
 * This class was generated by <a
 * href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 21.12.12 17:00
 */
public class Container extends SIOCThing {

    /**
     * 
     */
    private static final long serialVersionUID = -4753084289240405694L;

    /** http://rdfs.org/sioc/ns#Container */
    public static final URI RDFS_CLASS = new URIImpl(
	    "http://rdfs.org/sioc/ns#Container", false);

    /** http://rdfs.org/sioc/ns#container_of */
    public static final URI CONTAINEROF = new URIImpl(
	    "http://rdfs.org/sioc/ns#container_of", false);

    /** http://rdfs.org/sioc/ns#last_item_date */
    public static final URI LASTITEMDATE = new URIImpl(
	    "http://rdfs.org/sioc/ns#last_item_date", false);

    /** http://rdfs.org/sioc/ns#num_items */
    public static final URI NUMITEMS = new URIImpl(
	    "http://rdfs.org/sioc/ns#num_items", false);

    /** http://rdfs.org/sioc/ns#has_parent */
    public static final URI PARENT = new URIImpl(
	    "http://rdfs.org/sioc/ns#has_parent", false);

    /** http://rdfs.org/sioc/ns#parent_of */
    public static final URI PARENTOF = new URIImpl(
	    "http://rdfs.org/sioc/ns#parent_of", false);

    /** http://rdfs.org/sioc/ns#has_subscriber */
    public static final URI SUBSCRIBER = new URIImpl(
	    "http://rdfs.org/sioc/ns#has_subscriber", false);

    /**
     * All property-URIs with this class as domain. All properties of all
     * super-classes are also available.
     */
    public static final URI[] MANAGED_URIS = {
	    new URIImpl("http://rdfs.org/sioc/ns#container_of", false),
	    new URIImpl("http://rdfs.org/sioc/ns#last_item_date", false),
	    new URIImpl("http://rdfs.org/sioc/ns#num_items", false),
	    new URIImpl("http://rdfs.org/sioc/ns#has_parent", false),
	    new URIImpl("http://rdfs.org/sioc/ns#parent_of", false),
	    new URIImpl("http://rdfs.org/sioc/ns#has_subscriber", false), };

    // protected constructors needed for inheritance

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.semweb4j.org
     * @param classURI
     *            URI of RDFS class
     * @param instanceIdentifier
     *            Resource that identifies this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c1]
     */
    protected Container(Model model, URI classURI,
	    org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
	    boolean write) {
	super(model, classURI, instanceIdentifier, write);
    }

    // public constructors

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param instanceIdentifier
     *            an RDF2Go Resource identifying this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c2]
     */
    public Container(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
	    boolean write) {
	super(model, RDFS_CLASS, instanceIdentifier, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a URI, given as
     * a String. Creating two wrappers for the same URI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param uriString
     *            a URI given as a String
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * @throws ModelRuntimeException
     *             if URI syntax is wrong
     * 
     *             [Generated from RDFReactor template rule #c7]
     */
    public Container(Model model, String uriString, boolean write)
	    throws ModelRuntimeException {
	super(model, RDFS_CLASS, new URIImpl(uriString, false), write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a blank node.
     * Creating two wrappers for the same blank node is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param bnode
     *            BlankNode of this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c8]
     */
    public Container(Model model, BlankNode bnode, boolean write) {
	super(model, RDFS_CLASS, bnode, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a randomly
     * generated URI. Creating two wrappers results in different URIs.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c9]
     */
    public Container(Model model, boolean write) {
	super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
    }

    // /////////////////////////////////////////////////////////////////
    // typing

    /**
     * Return an existing instance of this class in the model. No statements are
     * written.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return an instance of Container or null if none existst
     * 
     *         [Generated from RDFReactor template rule #class0]
     */
    public static Container getInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getInstance(model, instanceResource, Container.class);
    }

    /**
     * Create a new instance of this class in the model. That is, create the
     * statement (instanceResource, RDF.type,
     * http://rdfs.org/sioc/ns#Container).
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class1]
     */
    public static void createInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.createInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return true if instanceResource is an instance of this class in the
     *         model
     * 
     *         [Generated from RDFReactor template rule #class2]
     */
    public static boolean hasInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.hasInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @return all instances of this class in Model 'model' as RDF resources
     * 
     *         [Generated from RDFReactor template rule #class3]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(
	    Model model) {
	return Base.getAllInstances(model, RDFS_CLASS,
		org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * Remove rdf:type Container from this instance. Other triples are not
     * affected. To delete more, use deleteAllProperties
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class4]
     */
    public static void deleteInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.deleteInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * Delete all (this, *, *), i.e. including rdf:type
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     */
    public static void deleteAllProperties(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.deleteAllProperties(model, instanceResource);
    }

    // /////////////////////////////////////////////////////////////////
    // property access methods

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Parent' to this
     *         Container instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllParent_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Container.PARENT, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Parent' to this
     *         Container instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllParent_Inverse() {
	return Base.getAll_Inverse(this.model, Container.PARENT,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'ParentOf' to this
     *         Container instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllParentOf_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Container.PARENTOF, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'ParentOf' to this
     *         Container instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllParentOf_Inverse() {
	return Base.getAll_Inverse(this.model, Container.PARENTOF,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Container' to
     *         this Container instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllContainer_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Item.CONTAINER, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Container' to
     *         this Container instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllContainer_Inverse() {
	return Base.getAll_Inverse(this.model, Item.CONTAINER,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Subscriberof' to
     *         this Container instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSubscriberOf_Inverse(
	    Model model, Object objectValue) {
	return Base
		.getAll_Inverse(model, UserAccount.SUBSCRIBEROF, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Subscriberof' to
     *         this Container instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSubscriberOf_Inverse() {
	return Base.getAll_Inverse(this.model, UserAccount.SUBSCRIBEROF,
		this.getResource());
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@77bb1dd2 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasContainerOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, CONTAINEROF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@77bb1dd2 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasContainerOf() {
	return Base.has(this.model, this.getResource(), CONTAINEROF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@77bb1dd2 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasContainerOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, CONTAINEROF, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@77bb1dd2 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasContainerOf(org.ontoware.rdf2go.model.node.Node value) {
	return Base
		.hasValue(this.model, this.getResource(), CONTAINEROF, value);
    }

    /**
     * Get all values of property ContainerOf as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContainerOf_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, CONTAINEROF);
    }

    /**
     * Get all values of property ContainerOf as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContainerOf_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), CONTAINEROF);
    }

    /**
     * Get all values of property ContainerOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Item> getAllContainerOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, CONTAINEROF, Item.class);
    }

    /**
     * Get all values of property ContainerOf * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Item> getAllContainerOf() {
	return Base.getAll(this.model, this.getResource(), CONTAINEROF,
		Item.class);
    }

    /**
     * Get all values of property ContainerOf as a ReactorResult of Item
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Item getContainerOf() {
	return Base.getAll_as(this.model, this.getResource(), CONTAINEROF,
		Item.class).firstValue();
    }

    /**
     * Adds a value to property ContainerOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addContainerOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, CONTAINEROF, value);
    }

    /**
     * Adds a value to property ContainerOf as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addContainerOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), CONTAINEROF, value);
    }

    /**
     * Adds a value to property ContainerOf from an instance of Item
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addContainerOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.add(model, instanceResource, CONTAINEROF, value);
    }

    /**
     * Adds a value to property ContainerOf from an instance of Item
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addContainerOf(Item value) {
	Base.add(this.model, this.getResource(), CONTAINEROF, value);
    }

    /**
     * Sets a value of property ContainerOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setContainerOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, CONTAINEROF, value);
    }

    /**
     * Sets a value of property ContainerOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setContainerOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), CONTAINEROF, value);
    }

    /**
     * Sets a value of property ContainerOf from an instance of Item First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setContainerOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.set(model, instanceResource, CONTAINEROF, value);
    }

    /**
     * Sets a value of property ContainerOf from an instance of Item First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setContainerOf(Item value) {
	Base.set(this.model, this.getResource(), CONTAINEROF, value);
    }

    /**
     * Removes a value of property ContainerOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeContainerOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, CONTAINEROF, value);
    }

    /**
     * Removes a value of property ContainerOf as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeContainerOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), CONTAINEROF, value);
    }

    /**
     * Removes a value of property ContainerOf given as an instance of Item
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeContainerOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.remove(model, instanceResource, CONTAINEROF, value);
    }

    /**
     * Removes a value of property ContainerOf given as an instance of Item
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeContainerOf(Item value) {
	Base.remove(this.model, this.getResource(), CONTAINEROF, value);
    }

    /**
     * Removes all values of property ContainerOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllContainerOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, CONTAINEROF);
    }

    /**
     * Removes all values of property ContainerOf * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllContainerOf() {
	Base.removeAll(this.model, this.getResource(), CONTAINEROF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d18d011 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasLastItemDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, LASTITEMDATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d18d011 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasLastItemDate() {
	return Base.has(this.model, this.getResource(), LASTITEMDATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d18d011 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasLastItemDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, LASTITEMDATE, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5d18d011 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasLastItemDate(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), LASTITEMDATE,
		value);
    }

    /**
     * Get all values of property LastItemDate as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLastItemDate_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, LASTITEMDATE);
    }

    /**
     * Get all values of property LastItemDate as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLastItemDate_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), LASTITEMDATE);
    }

    /**
     * Get all values of property LastItemDate * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllLastItemDate(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, LASTITEMDATE,
		java.lang.String.class);
    }

    /**
     * Get all values of property LastItemDate * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllLastItemDate() {
	return Base.getAll(this.model, this.getResource(), LASTITEMDATE,
		java.lang.String.class);
    }

    /**
     * Get all values of property LastItemDate as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getLastItemDate() {
	return Base.getAll_as(this.model, this.getResource(), LASTITEMDATE,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property LastItemDate as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addLastItemDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, LASTITEMDATE, value);
    }

    /**
     * Adds a value to property LastItemDate as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addLastItemDate(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), LASTITEMDATE, value);
    }

    /**
     * Adds a value to property LastItemDate from an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addLastItemDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, LASTITEMDATE, value);
    }

    /**
     * Adds a value to property LastItemDate from an instance of
     * java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addLastItemDate(java.lang.String value) {
	Base.add(this.model, this.getResource(), LASTITEMDATE, value);
    }

    /**
     * Sets a value of property LastItemDate from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setLastItemDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, LASTITEMDATE, value);
    }

    /**
     * Sets a value of property LastItemDate from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setLastItemDate(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), LASTITEMDATE, value);
    }

    /**
     * Sets a value of property LastItemDate from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setLastItemDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, LASTITEMDATE, value);
    }

    /**
     * Sets a value of property LastItemDate from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setLastItemDate(java.lang.String value) {
	Base.set(this.model, this.getResource(), LASTITEMDATE, value);
    }

    /**
     * Removes a value of property LastItemDate as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeLastItemDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, LASTITEMDATE, value);
    }

    /**
     * Removes a value of property LastItemDate as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeLastItemDate(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), LASTITEMDATE, value);
    }

    /**
     * Removes a value of property LastItemDate given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeLastItemDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, LASTITEMDATE, value);
    }

    /**
     * Removes a value of property LastItemDate given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeLastItemDate(java.lang.String value) {
	Base.remove(this.model, this.getResource(), LASTITEMDATE, value);
    }

    /**
     * Removes all values of property LastItemDate * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllLastItemDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, LASTITEMDATE);
    }

    /**
     * Removes all values of property LastItemDate * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllLastItemDate() {
	Base.removeAll(this.model, this.getResource(), LASTITEMDATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57ee667c has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNumItems(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, NUMITEMS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57ee667c has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNumItems() {
	return Base.has(this.model, this.getResource(), NUMITEMS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57ee667c has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNumItems(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, NUMITEMS, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57ee667c has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNumItems(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), NUMITEMS, value);
    }

    /**
     * Get all values of property NumItems as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNumItems_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, NUMITEMS);
    }

    /**
     * Get all values of property NumItems as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNumItems_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), NUMITEMS);
    }

    /**
     * Get all values of property NumItems * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.Integer> getAllNumItems(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, NUMITEMS,
		java.lang.Integer.class);
    }

    /**
     * Get all values of property NumItems * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.Integer> getAllNumItems() {
	return Base.getAll(this.model, this.getResource(), NUMITEMS,
		java.lang.Integer.class);
    }

    /**
     * Get all values of property NumItems as a ReactorResult of
     * java.lang.Integer
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Integer getNumItems() {
	return Base.getAll_as(this.model, this.getResource(), NUMITEMS,
		java.lang.Integer.class).firstValue();
    }

    /**
     * Adds a value to property NumItems as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNumItems(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, NUMITEMS, value);
    }

    /**
     * Adds a value to property NumItems as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNumItems(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), NUMITEMS, value);
    }

    /**
     * Adds a value to property NumItems from an instance of java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNumItems(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.Integer value) {
	Base.add(model, instanceResource, NUMITEMS, value);
    }

    /**
     * Adds a value to property NumItems from an instance of java.lang.Integer
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNumItems(java.lang.Integer value) {
	Base.add(this.model, this.getResource(), NUMITEMS, value);
    }

    /**
     * Sets a value of property NumItems from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNumItems(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, NUMITEMS, value);
    }

    /**
     * Sets a value of property NumItems from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNumItems(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), NUMITEMS, value);
    }

    /**
     * Sets a value of property NumItems from an instance of java.lang.Integer
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNumItems(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.Integer value) {
	Base.set(model, instanceResource, NUMITEMS, value);
    }

    /**
     * Sets a value of property NumItems from an instance of java.lang.Integer
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNumItems(java.lang.Integer value) {
	Base.set(this.model, this.getResource(), NUMITEMS, value);
    }

    /**
     * Removes a value of property NumItems as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNumItems(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, NUMITEMS, value);
    }

    /**
     * Removes a value of property NumItems as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNumItems(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), NUMITEMS, value);
    }

    /**
     * Removes a value of property NumItems given as an instance of
     * java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNumItems(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.Integer value) {
	Base.remove(model, instanceResource, NUMITEMS, value);
    }

    /**
     * Removes a value of property NumItems given as an instance of
     * java.lang.Integer
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNumItems(java.lang.Integer value) {
	Base.remove(this.model, this.getResource(), NUMITEMS, value);
    }

    /**
     * Removes all values of property NumItems * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNumItems(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, NUMITEMS);
    }

    /**
     * Removes all values of property NumItems * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNumItems() {
	Base.removeAll(this.model, this.getResource(), NUMITEMS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@339c2405 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasParents(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, PARENT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@339c2405 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasParents() {
	return Base.has(this.model, this.getResource(), PARENT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@339c2405 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasParent(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, PARENT, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@339c2405 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasParent(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), PARENT, value);
    }

    /**
     * Get all values of property Parent as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllParents_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, PARENT);
    }

    /**
     * Get all values of property Parent as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllParents_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), PARENT);
    }

    /**
     * Get all values of property Parent * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Container> getAllParents(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, PARENT, Container.class);
    }

    /**
     * Get all values of property Parent * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Container> getAllParents() {
	return Base.getAll(this.model, this.getResource(), PARENT,
		Container.class);
    }

    /**
     * Get all values of property Parent as a ReactorResult of Container
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Container getParent() {
	return Base.getAll_as(this.model, this.getResource(), PARENT,
		Container.class).firstValue();
    }

    /**
     * Adds a value to property Parent as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addParent(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, PARENT, value);
    }

    /**
     * Adds a value to property Parent as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addParent(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), PARENT, value);
    }

    /**
     * Adds a value to property Parent from an instance of Container
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addParent(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Container value) {
	Base.add(model, instanceResource, PARENT, value);
    }

    /**
     * Adds a value to property Parent from an instance of Container
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addParent(Container value) {
	Base.add(this.model, this.getResource(), PARENT, value);
    }

    /**
     * Sets a value of property Parent from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setParent(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, PARENT, value);
    }

    /**
     * Sets a value of property Parent from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setParent(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), PARENT, value);
    }

    /**
     * Sets a value of property Parent from an instance of Container First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setParent(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Container value) {
	Base.set(model, instanceResource, PARENT, value);
    }

    /**
     * Sets a value of property Parent from an instance of Container First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setParent(Container value) {
	Base.set(this.model, this.getResource(), PARENT, value);
    }

    /**
     * Removes a value of property Parent as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeParent(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, PARENT, value);
    }

    /**
     * Removes a value of property Parent as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeParent(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), PARENT, value);
    }

    /**
     * Removes a value of property Parent given as an instance of Container
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeParent(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Container value) {
	Base.remove(model, instanceResource, PARENT, value);
    }

    /**
     * Removes a value of property Parent given as an instance of Container
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeParent(Container value) {
	Base.remove(this.model, this.getResource(), PARENT, value);
    }

    /**
     * Removes all values of property Parent * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllParents(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, PARENT);
    }

    /**
     * Removes all values of property Parent * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllParents() {
	Base.removeAll(this.model, this.getResource(), PARENT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e105f5a has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasParentOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, PARENTOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e105f5a has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasParentOf() {
	return Base.has(this.model, this.getResource(), PARENTOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e105f5a has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasParentOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, PARENTOF, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e105f5a has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasParentOf(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), PARENTOF, value);
    }

    /**
     * Get all values of property ParentOf as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllParentOf_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, PARENTOF);
    }

    /**
     * Get all values of property ParentOf as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllParentOf_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), PARENTOF);
    }

    /**
     * Get all values of property ParentOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Container> getAllParentOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, PARENTOF, Container.class);
    }

    /**
     * Get all values of property ParentOf * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Container> getAllParentOf() {
	return Base.getAll(this.model, this.getResource(), PARENTOF,
		Container.class);
    }

    /**
     * Get all values of property ParentOf as a ReactorResult of Container
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Container getParentOf() {
	return Base.getAll_as(this.model, this.getResource(), PARENTOF,
		Container.class).firstValue();
    }

    /**
     * Adds a value to property ParentOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addParentOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, PARENTOF, value);
    }

    /**
     * Adds a value to property ParentOf as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addParentOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), PARENTOF, value);
    }

    /**
     * Adds a value to property ParentOf from an instance of Container
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addParentOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Container value) {
	Base.add(model, instanceResource, PARENTOF, value);
    }

    /**
     * Adds a value to property ParentOf from an instance of Container
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addParentOf(Container value) {
	Base.add(this.model, this.getResource(), PARENTOF, value);
    }

    /**
     * Sets a value of property ParentOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setParentOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, PARENTOF, value);
    }

    /**
     * Sets a value of property ParentOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setParentOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), PARENTOF, value);
    }

    /**
     * Sets a value of property ParentOf from an instance of Container First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setParentOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Container value) {
	Base.set(model, instanceResource, PARENTOF, value);
    }

    /**
     * Sets a value of property ParentOf from an instance of Container First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setParentOf(Container value) {
	Base.set(this.model, this.getResource(), PARENTOF, value);
    }

    /**
     * Removes a value of property ParentOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeParentOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, PARENTOF, value);
    }

    /**
     * Removes a value of property ParentOf as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeParentOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), PARENTOF, value);
    }

    /**
     * Removes a value of property ParentOf given as an instance of Container
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeParentOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Container value) {
	Base.remove(model, instanceResource, PARENTOF, value);
    }

    /**
     * Removes a value of property ParentOf given as an instance of Container
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeParentOf(Container value) {
	Base.remove(this.model, this.getResource(), PARENTOF, value);
    }

    /**
     * Removes all values of property ParentOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllParentOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, PARENTOF);
    }

    /**
     * Removes all values of property ParentOf * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllParentOf() {
	Base.removeAll(this.model, this.getResource(), PARENTOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@283a30f3 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSubscribers(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, SUBSCRIBER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@283a30f3 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSubscribers() {
	return Base.has(this.model, this.getResource(), SUBSCRIBER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@283a30f3 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSubscriber(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, SUBSCRIBER, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@283a30f3 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasSubscriber(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), SUBSCRIBER, value);
    }

    /**
     * Get all values of property Subscriber as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubscribers_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, SUBSCRIBER);
    }

    /**
     * Get all values of property Subscriber as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubscribers_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), SUBSCRIBER);
    }

    /**
     * Get all values of property Subscriber * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<UserAccount> getAllSubscribers(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, SUBSCRIBER,
		UserAccount.class);
    }

    /**
     * Get all values of property Subscriber * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<UserAccount> getAllSubscribers() {
	return Base.getAll(this.model, this.getResource(), SUBSCRIBER,
		UserAccount.class);
    }

    /**
     * Get all values of property Subscriber as a ReactorResult of UserAccount
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public UserAccount getSubscriber() {
	return Base.getAll_as(this.model, this.getResource(), SUBSCRIBER,
		UserAccount.class).firstValue();
    }

    /**
     * Adds a value to property Subscriber as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSubscriber(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, SUBSCRIBER, value);
    }

    /**
     * Adds a value to property Subscriber as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSubscriber(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), SUBSCRIBER, value);
    }

    /**
     * Adds a value to property Subscriber from an instance of UserAccount
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSubscriber(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    UserAccount value) {
	Base.add(model, instanceResource, SUBSCRIBER, value);
    }

    /**
     * Adds a value to property Subscriber from an instance of UserAccount
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSubscriber(UserAccount value) {
	Base.add(this.model, this.getResource(), SUBSCRIBER, value);
    }

    /**
     * Sets a value of property Subscriber from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSubscriber(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, SUBSCRIBER, value);
    }

    /**
     * Sets a value of property Subscriber from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSubscriber(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), SUBSCRIBER, value);
    }

    /**
     * Sets a value of property Subscriber from an instance of UserAccount
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSubscriber(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    UserAccount value) {
	Base.set(model, instanceResource, SUBSCRIBER, value);
    }

    /**
     * Sets a value of property Subscriber from an instance of UserAccount
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSubscriber(UserAccount value) {
	Base.set(this.model, this.getResource(), SUBSCRIBER, value);
    }

    /**
     * Removes a value of property Subscriber as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSubscriber(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, SUBSCRIBER, value);
    }

    /**
     * Removes a value of property Subscriber as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeSubscriber(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), SUBSCRIBER, value);
    }

    /**
     * Removes a value of property Subscriber given as an instance of
     * UserAccount
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSubscriber(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    UserAccount value) {
	Base.remove(model, instanceResource, SUBSCRIBER, value);
    }

    /**
     * Removes a value of property Subscriber given as an instance of
     * UserAccount
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSubscriber(UserAccount value) {
	Base.remove(this.model, this.getResource(), SUBSCRIBER, value);
    }

    /**
     * Removes all values of property Subscriber * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSubscribers(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, SUBSCRIBER);
    }

    /**
     * Removes all values of property Subscriber * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllSubscribers() {
	Base.removeAll(this.model, this.getResource(), SUBSCRIBER);
    }
}