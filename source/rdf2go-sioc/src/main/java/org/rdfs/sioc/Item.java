/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) on 21.12.12 17:00
 */
package org.rdfs.sioc;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 * <li>About</li>
 * <li>AddressedTo</li>
 * <li>Attachment</li>
 * <li>Container</li>
 * <li>Content</li>
 * <li>Discussion</li>
 * <li>EarlierVersion</li>
 * <li>EmbedsKnowledge</li>
 * <li>IPAddress</li>
 * <li>LaterVersion</li>
 * <li>LatestVersion</li>
 * <li>Modifier</li>
 * <li>NextByDate</li>
 * <li>NextVersion</li>
 * <li>PreviousByDate</li>
 * <li>PreviousVersion</li>
 * <li>Reply</li>
 * <li>ReplyOf</li>
 * <li>Sibling</li>
 * </ul>
 * 
 * This class was generated by <a
 * href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 21.12.12 17:00
 */
public class Item extends SIOCThing {

    /**
     * 
     */
    private static final long serialVersionUID = -3861203006621654845L;

    /** http://rdfs.org/sioc/ns#Item */
    public static final URI RDFS_CLASS = new URIImpl(
	    "http://rdfs.org/sioc/ns#Item", false);

    /** http://rdfs.org/sioc/ns#about */
    public static final URI ABOUT = new URIImpl(
	    "http://rdfs.org/sioc/ns#about", false);

    /** http://rdfs.org/sioc/ns#addressed_to */
    public static final URI ADDRESSEDTO = new URIImpl(
	    "http://rdfs.org/sioc/ns#addressed_to", false);

    /** http://rdfs.org/sioc/ns#attachment */
    public static final URI ATTACHMENT = new URIImpl(
	    "http://rdfs.org/sioc/ns#attachment", false);

    /** http://rdfs.org/sioc/ns#has_container */
    public static final URI CONTAINER = new URIImpl(
	    "http://rdfs.org/sioc/ns#has_container", false);

    /** http://rdfs.org/sioc/ns#content */
    public static final URI CONTENT = new URIImpl(
	    "http://rdfs.org/sioc/ns#content", false);

    public static final URI CONTENT_ENCODED = new URIImpl(
	    "http://purl.org/rss/1.0/modules/content/encoded", false);

    /** http://rdfs.org/sioc/ns#has_discussion */
    public static final URI DISCUSSION = new URIImpl(
	    "http://rdfs.org/sioc/ns#has_discussion", false);

    /** http://rdfs.org/sioc/ns#earlier_version */
    public static final URI EARLIERVERSION = new URIImpl(
	    "http://rdfs.org/sioc/ns#earlier_version", false);

    /** http://rdfs.org/sioc/ns#embeds_knowledge */
    public static final URI EMBEDSKNOWLEDGE = new URIImpl(
	    "http://rdfs.org/sioc/ns#embeds_knowledge", false);

    /** http://rdfs.org/sioc/ns#ip_address */
    public static final URI IPADDRESS = new URIImpl(
	    "http://rdfs.org/sioc/ns#ip_address", false);

    /** http://rdfs.org/sioc/ns#later_version */
    public static final URI LATERVERSION = new URIImpl(
	    "http://rdfs.org/sioc/ns#later_version", false);

    /** http://rdfs.org/sioc/ns#latest_version */
    public static final URI LATESTVERSION = new URIImpl(
	    "http://rdfs.org/sioc/ns#latest_version", false);

    /** http://rdfs.org/sioc/ns#has_modifier */
    public static final URI MODIFIER = new URIImpl(
	    "http://rdfs.org/sioc/ns#has_modifier", false);

    /** http://rdfs.org/sioc/ns#next_by_date */
    public static final URI NEXTBYDATE = new URIImpl(
	    "http://rdfs.org/sioc/ns#next_by_date", false);

    /** http://rdfs.org/sioc/ns#next_version */
    public static final URI NEXTVERSION = new URIImpl(
	    "http://rdfs.org/sioc/ns#next_version", false);

    /** http://rdfs.org/sioc/ns#previous_by_date */
    public static final URI PREVIOUSBYDATE = new URIImpl(
	    "http://rdfs.org/sioc/ns#previous_by_date", false);

    /** http://rdfs.org/sioc/ns#previous_version */
    public static final URI PREVIOUSVERSION = new URIImpl(
	    "http://rdfs.org/sioc/ns#previous_version", false);

    /** http://rdfs.org/sioc/ns#has_reply */
    public static final URI REPLY = new URIImpl(
	    "http://rdfs.org/sioc/ns#has_reply", false);

    /** http://rdfs.org/sioc/ns#reply_of */
    public static final URI REPLYOF = new URIImpl(
	    "http://rdfs.org/sioc/ns#reply_of", false);

    /** http://rdfs.org/sioc/ns#sibling */
    public static final URI SIBLING = new URIImpl(
	    "http://rdfs.org/sioc/ns#sibling", false);

    /**
     * All property-URIs with this class as domain. All properties of all
     * super-classes are also available.
     */
    public static final URI[] MANAGED_URIS = {
	    new URIImpl("http://rdfs.org/sioc/ns#about", false),
	    new URIImpl("http://rdfs.org/sioc/ns#addressed_to", false),
	    new URIImpl("http://rdfs.org/sioc/ns#attachment", false),
	    new URIImpl("http://rdfs.org/sioc/ns#has_container", false),
	    new URIImpl("http://rdfs.org/sioc/ns#content", false),
	    new URIImpl("http://rdfs.org/sioc/ns#has_discussion", false),
	    new URIImpl("http://rdfs.org/sioc/ns#earlier_version", false),
	    new URIImpl("http://rdfs.org/sioc/ns#embeds_knowledge", false),
	    new URIImpl("http://rdfs.org/sioc/ns#ip_address", false),
	    new URIImpl("http://rdfs.org/sioc/ns#later_version", false),
	    new URIImpl("http://rdfs.org/sioc/ns#latest_version", false),
	    new URIImpl("http://rdfs.org/sioc/ns#has_modifier", false),
	    new URIImpl("http://rdfs.org/sioc/ns#next_by_date", false),
	    new URIImpl("http://rdfs.org/sioc/ns#next_version", false),
	    new URIImpl("http://rdfs.org/sioc/ns#previous_by_date", false),
	    new URIImpl("http://rdfs.org/sioc/ns#previous_version", false),
	    new URIImpl("http://rdfs.org/sioc/ns#has_reply", false),
	    new URIImpl("http://rdfs.org/sioc/ns#reply_of", false),
	    new URIImpl("http://rdfs.org/sioc/ns#sibling", false), };

    // protected constructors needed for inheritance

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.semweb4j.org
     * @param classURI
     *            URI of RDFS class
     * @param instanceIdentifier
     *            Resource that identifies this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c1]
     */
    protected Item(Model model, URI classURI,
	    org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
	    boolean write) {
	super(model, classURI, instanceIdentifier, write);
    }

    // public constructors

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param instanceIdentifier
     *            an RDF2Go Resource identifying this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c2]
     */
    public Item(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
	    boolean write) {
	super(model, RDFS_CLASS, instanceIdentifier, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a URI, given as
     * a String. Creating two wrappers for the same URI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param uriString
     *            a URI given as a String
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * @throws ModelRuntimeException
     *             if URI syntax is wrong
     * 
     *             [Generated from RDFReactor template rule #c7]
     */
    public Item(Model model, String uriString, boolean write)
	    throws ModelRuntimeException {
	super(model, RDFS_CLASS, new URIImpl(uriString, false), write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a blank node.
     * Creating two wrappers for the same blank node is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param bnode
     *            BlankNode of this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c8]
     */
    public Item(Model model, BlankNode bnode, boolean write) {
	super(model, RDFS_CLASS, bnode, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a randomly
     * generated URI. Creating two wrappers results in different URIs.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c9]
     */
    public Item(Model model, boolean write) {
	super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
    }

    // /////////////////////////////////////////////////////////////////
    // typing

    /**
     * Return an existing instance of this class in the model. No statements are
     * written.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return an instance of Item or null if none existst
     * 
     *         [Generated from RDFReactor template rule #class0]
     */
    public static Item getInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getInstance(model, instanceResource, Item.class);
    }

    /**
     * Create a new instance of this class in the model. That is, create the
     * statement (instanceResource, RDF.type, http://rdfs.org/sioc/ns#Item).
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class1]
     */
    public static void createInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.createInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return true if instanceResource is an instance of this class in the
     *         model
     * 
     *         [Generated from RDFReactor template rule #class2]
     */
    public static boolean hasInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.hasInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @return all instances of this class in Model 'model' as RDF resources
     * 
     *         [Generated from RDFReactor template rule #class3]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(
	    Model model) {
	return Base.getAllInstances(model, RDFS_CLASS,
		org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * Remove rdf:type Item from this instance. Other triples are not affected.
     * To delete more, use deleteAllProperties
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class4]
     */
    public static void deleteInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.deleteInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * Delete all (this, *, *), i.e. including rdf:type
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     */
    public static void deleteAllProperties(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.deleteAllProperties(model, instanceResource);
    }

    // /////////////////////////////////////////////////////////////////
    // property access methods

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'ContainerOf' to
     *         this Item instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllContainersOf_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Container.CONTAINEROF, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'ContainerOf' to
     *         this Item instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllContainersOf_Inverse() {
	return Base.getAll_Inverse(this.model, Container.CONTAINEROF,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'EarlierVersion'
     *         to this Item instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEarlierVersionss_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Item.EARLIERVERSION, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'EarlierVersion'
     *         to this Item instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEarlierVersionss_Inverse() {
	return Base.getAll_Inverse(this.model, Item.EARLIERVERSION,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'LaterVersion' to
     *         this Item instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLaterVersionss_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Item.LATERVERSION, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'LaterVersion' to
     *         this Item instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLaterVersionss_Inverse() {
	return Base.getAll_Inverse(this.model, Item.LATERVERSION,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'LatestVersion' to
     *         this Item instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLatestVersionss_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Item.LATESTVERSION, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'LatestVersion' to
     *         this Item instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLatestVersionss_Inverse() {
	return Base.getAll_Inverse(this.model, Item.LATESTVERSION,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'NextByDate' to
     *         this Item instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNextByDate_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Item.NEXTBYDATE, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'NextByDate' to
     *         this Item instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNextByDate_Inverse() {
	return Base.getAll_Inverse(this.model, Item.NEXTBYDATE,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'NextVersion' to
     *         this Item instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNextVersionss_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Item.NEXTVERSION, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'NextVersion' to
     *         this Item instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllNextVersionss_Inverse() {
	return Base.getAll_Inverse(this.model, Item.NEXTVERSION,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'PreviousByDate'
     *         to this Item instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPreviousByDate_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Item.PREVIOUSBYDATE, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'PreviousByDate'
     *         to this Item instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPreviousByDate_Inverse() {
	return Base.getAll_Inverse(this.model, Item.PREVIOUSBYDATE,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'PreviousVersion'
     *         to this Item instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPreviousVersionss_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Item.PREVIOUSVERSION, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'PreviousVersion'
     *         to this Item instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPreviousVersionss_Inverse() {
	return Base.getAll_Inverse(this.model, Item.PREVIOUSVERSION,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Reply' to this
     *         Item instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllReplies_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Item.REPLY, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Reply' to this
     *         Item instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllReplies_Inverse() {
	return Base.getAll_Inverse(this.model, Item.REPLY, this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'ReplyOf' to this
     *         Item instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRepliesOf_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Item.REPLYOF, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'ReplyOf' to this
     *         Item instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRepliesOf_Inverse() {
	return Base
		.getAll_Inverse(this.model, Item.REPLYOF, this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Sibling' to this
     *         Item instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSiblingss_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Item.SIBLING, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Sibling' to this
     *         Item instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSiblingss_Inverse() {
	return Base
		.getAll_Inverse(this.model, Item.SIBLING, this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Modifierof' to
     *         this Item instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllModifiersOf_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, UserAccount.MODIFIEROF, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Modifierof' to
     *         this Item instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllModifiersOf_Inverse() {
	return Base.getAll_Inverse(this.model, UserAccount.MODIFIEROF,
		this.getResource());
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@208ee9c9 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasAbout(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, ABOUT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@208ee9c9 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasAbout() {
	return Base.has(this.model, this.getResource(), ABOUT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@208ee9c9 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasAbout(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, ABOUT, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@208ee9c9 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasAbout(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), ABOUT, value);
    }

    /**
     * Get all values of property About as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAbout_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, ABOUT);
    }

    /**
     * Get all values of property About as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAbout_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), ABOUT);
    }

    /**
     * Get all values of property About * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<SIOCThing> getAllAbout(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, ABOUT, SIOCThing.class);
    }

    /**
     * Get all values of property About * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<SIOCThing> getAllAbout() {
	return Base.getAll(this.model, this.getResource(), ABOUT,
		SIOCThing.class);
    }

    /**
     * Get all values of property About as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public SIOCThing getAbout() {
	return Base.getAll_as(this.model, this.getResource(), ABOUT,
		SIOCThing.class).firstValue();
    }

    /**
     * Adds a value to property About as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addAbout(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, ABOUT, value);
    }

    /**
     * Adds a value to property About as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addAbout(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), ABOUT, value);
    }

    /**
     * Adds a value to property About from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addAbout(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    SIOCThing value) {
	Base.add(model, instanceResource, ABOUT, value);
    }

    /**
     * Adds a value to property About from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addAbout(SIOCThing value) {
	Base.add(this.model, this.getResource(), ABOUT, value);
    }

    /**
     * Sets a value of property About from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setAbout(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, ABOUT, value);
    }

    /**
     * Sets a value of property About from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setAbout(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), ABOUT, value);
    }

    /**
     * Sets a value of property About from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setAbout(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    SIOCThing value) {
	Base.set(model, instanceResource, ABOUT, value);
    }

    /**
     * Sets a value of property About from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setAbout(SIOCThing value) {
	Base.set(this.model, this.getResource(), ABOUT, value);
    }

    /**
     * Removes a value of property About as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeAbout(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, ABOUT, value);
    }

    /**
     * Removes a value of property About as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeAbout(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), ABOUT, value);
    }

    /**
     * Removes a value of property About given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeAbout(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    SIOCThing value) {
	Base.remove(model, instanceResource, ABOUT, value);
    }

    /**
     * Removes a value of property About given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeAbout(SIOCThing value) {
	Base.remove(this.model, this.getResource(), ABOUT, value);
    }

    /**
     * Removes all values of property About * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllAbout(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, ABOUT);
    }

    /**
     * Removes all values of property About * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllAbout() {
	Base.removeAll(this.model, this.getResource(), ABOUT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6e67a769 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasAddressedTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, ADDRESSEDTO);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6e67a769 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasAddressedTo() {
	return Base.has(this.model, this.getResource(), ADDRESSEDTO);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6e67a769 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasAddressedTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, ADDRESSEDTO, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6e67a769 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasAddressedTo(org.ontoware.rdf2go.model.node.Node value) {
	return Base
		.hasValue(this.model, this.getResource(), ADDRESSEDTO, value);
    }

    /**
     * Get all values of property AddressedTo as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAddressedTo_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, ADDRESSEDTO);
    }

    /**
     * Get all values of property AddressedTo as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAddressedTo_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), ADDRESSEDTO);
    }

    /**
     * Get all values of property AddressedTo * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<SIOCThing> getAllAddressedTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, ADDRESSEDTO,
		SIOCThing.class);
    }

    /**
     * Get all values of property AddressedTo * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<SIOCThing> getAllAddressedTo() {
	return Base.getAll(this.model, this.getResource(), ADDRESSEDTO,
		SIOCThing.class);
    }

    /**
     * Get all values of property AddressedTo as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public SIOCThing getAddressedTo() {
	return Base.getAll_as(this.model, this.getResource(), ADDRESSEDTO,
		SIOCThing.class).firstValue();
    }

    /**
     * Adds a value to property AddressedTo as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addAddressedTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, ADDRESSEDTO, value);
    }

    /**
     * Adds a value to property AddressedTo as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addAddressedTo(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), ADDRESSEDTO, value);
    }

    /**
     * Adds a value to property AddressedTo from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addAddressedTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    SIOCThing value) {
	Base.add(model, instanceResource, ADDRESSEDTO, value);
    }

    /**
     * Adds a value to property AddressedTo from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addAddressedTo(SIOCThing value) {
	Base.add(this.model, this.getResource(), ADDRESSEDTO, value);
    }

    /**
     * Sets a value of property AddressedTo from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setAddressedTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, ADDRESSEDTO, value);
    }

    /**
     * Sets a value of property AddressedTo from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setAddressedTo(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), ADDRESSEDTO, value);
    }

    /**
     * Sets a value of property AddressedTo from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setAddressedTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    SIOCThing value) {
	Base.set(model, instanceResource, ADDRESSEDTO, value);
    }

    /**
     * Sets a value of property AddressedTo from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setAddressedTo(SIOCThing value) {
	Base.set(this.model, this.getResource(), ADDRESSEDTO, value);
    }

    /**
     * Removes a value of property AddressedTo as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeAddressedTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, ADDRESSEDTO, value);
    }

    /**
     * Removes a value of property AddressedTo as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeAddressedTo(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), ADDRESSEDTO, value);
    }

    /**
     * Removes a value of property AddressedTo given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeAddressedTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    SIOCThing value) {
	Base.remove(model, instanceResource, ADDRESSEDTO, value);
    }

    /**
     * Removes a value of property AddressedTo given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeAddressedTo(SIOCThing value) {
	Base.remove(this.model, this.getResource(), ADDRESSEDTO, value);
    }

    /**
     * Removes all values of property AddressedTo * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllAddressedTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, ADDRESSEDTO);
    }

    /**
     * Removes all values of property AddressedTo * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllAddressedTo() {
	Base.removeAll(this.model, this.getResource(), ADDRESSEDTO);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70c44470 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasAttachments(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, ATTACHMENT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70c44470 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasAttachments() {
	return Base.has(this.model, this.getResource(), ATTACHMENT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70c44470 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasAttachment(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, ATTACHMENT, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70c44470 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasAttachment(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), ATTACHMENT, value);
    }

    /**
     * Get all values of property Attachment as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAttachmentss_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, ATTACHMENT);
    }

    /**
     * Get all values of property Attachment as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAttachments_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), ATTACHMENT);
    }

    /**
     * Get all values of property Attachment * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<SIOCThing> getAllAttachments(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base
		.getAll(model, instanceResource, ATTACHMENT, SIOCThing.class);
    }

    /**
     * Get all values of property Attachment * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<SIOCThing> getAllAttachments() {
	return Base.getAll(this.model, this.getResource(), ATTACHMENT,
		SIOCThing.class);
    }

    /**
     * Get all values of property Attachment as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public SIOCThing getAttachment() {
	return Base.getAll_as(this.model, this.getResource(), ATTACHMENT,
		SIOCThing.class).firstValue();
    }

    /**
     * Adds a value to property Attachment as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addAttachment(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, ATTACHMENT, value);
    }

    /**
     * Adds a value to property Attachment as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addAttachment(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), ATTACHMENT, value);
    }

    /**
     * Adds a value to property Attachment from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addAttachment(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    SIOCThing value) {
	Base.add(model, instanceResource, ATTACHMENT, value);
    }

    /**
     * Adds a value to property Attachment from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addAttachment(SIOCThing value) {
	Base.add(this.model, this.getResource(), ATTACHMENT, value);
    }

    /**
     * Sets a value of property Attachment from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setAttachment(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, ATTACHMENT, value);
    }

    /**
     * Sets a value of property Attachment from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setAttachment(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), ATTACHMENT, value);
    }

    /**
     * Sets a value of property Attachment from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setAttachment(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    SIOCThing value) {
	Base.set(model, instanceResource, ATTACHMENT, value);
    }

    /**
     * Sets a value of property Attachment from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setAttachment(SIOCThing value) {
	Base.set(this.model, this.getResource(), ATTACHMENT, value);
    }

    /**
     * Removes a value of property Attachment as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeAttachment(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, ATTACHMENT, value);
    }

    /**
     * Removes a value of property Attachment as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeAttachment(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), ATTACHMENT, value);
    }

    /**
     * Removes a value of property Attachment given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeAttachment(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    SIOCThing value) {
	Base.remove(model, instanceResource, ATTACHMENT, value);
    }

    /**
     * Removes a value of property Attachment given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeAttachment(SIOCThing value) {
	Base.remove(this.model, this.getResource(), ATTACHMENT, value);
    }

    /**
     * Removes all values of property Attachment * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllAttachments(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, ATTACHMENT);
    }

    /**
     * Removes all values of property Attachment * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllAttachments() {
	Base.removeAll(this.model, this.getResource(), ATTACHMENT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7394743b has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasContainers(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, CONTAINER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7394743b has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasContainers() {
	return Base.has(this.model, this.getResource(), CONTAINER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7394743b has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasContainer(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, CONTAINER, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7394743b has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasContainer(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), CONTAINER, value);
    }

    /**
     * Get all values of property Container as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContainers_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, CONTAINER);
    }

    /**
     * Get all values of property Container as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContainers_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), CONTAINER);
    }

    /**
     * Get all values of property Container * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Container> getAllContainers(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, CONTAINER, Container.class);
    }

    /**
     * Get all values of property Container * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Container> getAllContainers() {
	return Base.getAll(this.model, this.getResource(), CONTAINER,
		Container.class);
    }

    /**
     * Get all values of property Container as a ReactorResult of Container
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Container getContainer() {
	return Base.getAll_as(this.model, this.getResource(), CONTAINER,
		Container.class).firstValue();
    }

    /**
     * Adds a value to property Container as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addContainer(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, CONTAINER, value);
    }

    /**
     * Adds a value to property Container as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addContainer(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), CONTAINER, value);
    }

    /**
     * Adds a value to property Container from an instance of Container
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addContainer(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Container value) {
	Base.add(model, instanceResource, CONTAINER, value);
    }

    /**
     * Adds a value to property Container from an instance of Container
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addContainer(Container value) {
	Base.add(this.model, this.getResource(), CONTAINER, value);
    }

    /**
     * Sets a value of property Container from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setContainer(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, CONTAINER, value);
    }

    /**
     * Sets a value of property Container from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setContainer(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), CONTAINER, value);
    }

    /**
     * Sets a value of property Container from an instance of Container First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setContainer(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Container value) {
	Base.set(model, instanceResource, CONTAINER, value);
    }

    /**
     * Sets a value of property Container from an instance of Container First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setContainer(Container value) {
	Base.set(this.model, this.getResource(), CONTAINER, value);
    }

    /**
     * Removes a value of property Container as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeContainer(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, CONTAINER, value);
    }

    /**
     * Removes a value of property Container as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeContainer(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), CONTAINER, value);
    }

    /**
     * Removes a value of property Container given as an instance of Container
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeContainer(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Container value) {
	Base.remove(model, instanceResource, CONTAINER, value);
    }

    /**
     * Removes a value of property Container given as an instance of Container
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeContainer(Container value) {
	Base.remove(this.model, this.getResource(), CONTAINER, value);
    }

    /**
     * Removes all values of property Container * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllContainers(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, CONTAINER);
    }

    /**
     * Removes all values of property Container * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllContainers() {
	Base.removeAll(this.model, this.getResource(), CONTAINER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e9384fb has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasContent(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, CONTENT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e9384fb has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasContent() {
	return Base.has(this.model, this.getResource(), CONTENT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e9384fb has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasContent(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, CONTENT, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e9384fb has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasContent(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), CONTENT, value);
    }

    /**
     * Get all values of property Content as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContent_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, CONTENT);
    }

    /**
     * Get all values of property Content as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContent_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), CONTENT);
    }

    /**
     * Get all values of property Content * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllContent(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, CONTENT,
		java.lang.String.class);
    }

    /**
     * Get all values of property Content * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllContent() {
	return Base.getAll(this.model, this.getResource(), CONTENT,
		java.lang.String.class);
    }

    /**
     * Get all values of property Content as a ReactorResult of java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getContent() {
	return Base.getAll_as(this.model, this.getResource(), CONTENT,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property Content as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addContent(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, CONTENT, value);
    }

    /**
     * Adds a value to property Content as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addContent(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), CONTENT, value);
    }

    /**
     * Adds a value to property Content from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addContent(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, CONTENT, value);
    }

    /**
     * Adds a value to property Content from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addContent(java.lang.String value) {
	Base.add(this.model, this.getResource(), CONTENT, value);
    }

    /**
     * Sets a value of property Content from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setContent(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, CONTENT, value);
    }

    /**
     * Sets a value of property Content from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setContent(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), CONTENT, value);
    }

    /**
     * Sets a value of property Content from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setContent(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, CONTENT, value);
    }

    /**
     * Sets a value of property Content from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setContent(java.lang.String value) {
	Base.set(this.model, this.getResource(), CONTENT, value);
    }

    /**
     * Removes a value of property Content as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeContent(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, CONTENT, value);
    }

    /**
     * Removes a value of property Content as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeContent(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), CONTENT, value);
    }

    /**
     * Removes a value of property Content given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeContent(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, CONTENT, value);
    }

    /**
     * Removes a value of property Content given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeContent(java.lang.String value) {
	Base.remove(this.model, this.getResource(), CONTENT, value);
    }

    /**
     * Removes all values of property Content * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllContent(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, CONTENT);
    }

    /**
     * Removes all values of property Content * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllContent() {
	Base.removeAll(this.model, this.getResource(), CONTENT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e9384fb has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasContentEncoded(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, CONTENT_ENCODED);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e9384fb has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasContentEncoded() {
	return Base.has(this.model, this.getResource(), CONTENT_ENCODED);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e9384fb has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasContentEncoded(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, CONTENT_ENCODED, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e9384fb has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasContentEncoded(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), CONTENT_ENCODED,
		value);
    }

    /**
     * Get all values of property ContentEncoded as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContentEncoded_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, CONTENT_ENCODED);
    }

    /**
     * Get all values of property ContentEncoded as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllContentEncoded_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(),
		CONTENT_ENCODED);
    }

    /**
     * Get all values of property ContentEncoded * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllContentEncoded(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, CONTENT_ENCODED,
		java.lang.String.class);
    }

    /**
     * Get all values of property ContentEncoded * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllContentEncoded() {
	return Base.getAll(this.model, this.getResource(), CONTENT_ENCODED,
		java.lang.String.class);
    }

    /**
     * Get all values of property ContentEncoded as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getContentEncoded() {
	return Base.getAll_as(this.model, this.getResource(), CONTENT_ENCODED,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property ContentEncoded as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addContentEncoded(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, CONTENT_ENCODED, value);
    }

    /**
     * Adds a value to property ContentEncoded as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addContentEncoded(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), CONTENT_ENCODED, value);
    }

    /**
     * Adds a value to property ContentEncoded from an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addContentEncoded(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, CONTENT_ENCODED, value);
    }

    /**
     * Adds a value to property ContentEncoded from an instance of
     * java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addContentEncoded(java.lang.String value) {
	Base.add(this.model, this.getResource(), CONTENT_ENCODED, value);
    }

    /**
     * Sets a value of property ContentEncoded from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setContentEncoded(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, CONTENT_ENCODED, value);
    }

    /**
     * Sets a value of property ContentEncoded from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setContentEncoded(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), CONTENT_ENCODED, value);
    }

    /**
     * Sets a value of property ContentEncoded from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setContentEncoded(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, CONTENT_ENCODED, value);
    }

    /**
     * Sets a value of property ContentEncoded from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setContentEncoded(java.lang.String value) {
	Base.set(this.model, this.getResource(), CONTENT_ENCODED, value);
    }

    /**
     * Removes a value of property ContentEncoded as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeContentEncoded(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, CONTENT_ENCODED, value);
    }

    /**
     * Removes a value of property ContentEncoded as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeContentEncoded(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), CONTENT_ENCODED, value);
    }

    /**
     * Removes a value of property ContentEncoded given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeContentEncoded(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, CONTENT_ENCODED, value);
    }

    /**
     * Removes a value of property ContentEncoded given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeContentEncoded(java.lang.String value) {
	Base.remove(this.model, this.getResource(), CONTENT_ENCODED, value);
    }

    /**
     * Removes all values of property ContentEncoded * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllContentEncoded(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, CONTENT_ENCODED);
    }

    /**
     * Removes all values of property ContentEncoded * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllContentEncoded() {
	Base.removeAll(this.model, this.getResource(), CONTENT_ENCODED);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23dc51cb has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasDiscussions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, DISCUSSION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23dc51cb has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasDiscussions() {
	return Base.has(this.model, this.getResource(), DISCUSSION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23dc51cb has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasDiscussion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, DISCUSSION, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23dc51cb has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasDiscussion(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), DISCUSSION, value);
    }

    /**
     * Get all values of property Discussion as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDiscussions_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, DISCUSSION);
    }

    /**
     * Get all values of property Discussion as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDiscussions_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), DISCUSSION);
    }

    /**
     * Get all values of property Discussion * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<SIOCThing> getAllDiscussions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base
		.getAll(model, instanceResource, DISCUSSION, SIOCThing.class);
    }

    /**
     * Get all values of property Discussion * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<SIOCThing> getAllDiscussions() {
	return Base.getAll(this.model, this.getResource(), DISCUSSION,
		SIOCThing.class);
    }

    /**
     * Get all values of property Discussion as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public SIOCThing getDiscussion() {
	return Base.getAll_as(this.model, this.getResource(), DISCUSSION,
		SIOCThing.class).firstValue();
    }

    /**
     * Adds a value to property Discussion as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addDiscussion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, DISCUSSION, value);
    }

    /**
     * Adds a value to property Discussion as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addDiscussion(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), DISCUSSION, value);
    }

    /**
     * Adds a value to property Discussion from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addDiscussion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    SIOCThing value) {
	Base.add(model, instanceResource, DISCUSSION, value);
    }

    /**
     * Adds a value to property Discussion from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addDiscussion(SIOCThing value) {
	Base.add(this.model, this.getResource(), DISCUSSION, value);
    }

    /**
     * Sets a value of property Discussion from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setDiscussion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, DISCUSSION, value);
    }

    /**
     * Sets a value of property Discussion from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setDiscussion(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), DISCUSSION, value);
    }

    /**
     * Sets a value of property Discussion from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setDiscussion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    SIOCThing value) {
	Base.set(model, instanceResource, DISCUSSION, value);
    }

    /**
     * Sets a value of property Discussion from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setDiscussion(SIOCThing value) {
	Base.set(this.model, this.getResource(), DISCUSSION, value);
    }

    /**
     * Removes a value of property Discussion as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeDiscussion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, DISCUSSION, value);
    }

    /**
     * Removes a value of property Discussion as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeDiscussion(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), DISCUSSION, value);
    }

    /**
     * Removes a value of property Discussion given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeDiscussion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    SIOCThing value) {
	Base.remove(model, instanceResource, DISCUSSION, value);
    }

    /**
     * Removes a value of property Discussion given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeDiscussion(SIOCThing value) {
	Base.remove(this.model, this.getResource(), DISCUSSION, value);
    }

    /**
     * Removes all values of property Discussion * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllDiscussions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, DISCUSSION);
    }

    /**
     * Removes all values of property Discussion * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllDiscussions() {
	Base.removeAll(this.model, this.getResource(), DISCUSSION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12911b4f has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasEarlierVersions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, EARLIERVERSION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12911b4f has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasEarlierVersions() {
	return Base.has(this.model, this.getResource(), EARLIERVERSION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12911b4f has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasEarlierVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, EARLIERVERSION, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12911b4f has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasEarlierVersion(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), EARLIERVERSION,
		value);
    }

    /**
     * Get all values of property EarlierVersion as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEarlierVersions_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, EARLIERVERSION);
    }

    /**
     * Get all values of property EarlierVersion as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEarlierVersions_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(),
		EARLIERVERSION);
    }

    /**
     * Get all values of property EarlierVersion * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Item> getAllEarlierVersions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, EARLIERVERSION, Item.class);
    }

    /**
     * Get all values of property EarlierVersion * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Item> getAllEarlierVersions() {
	return Base.getAll(this.model, this.getResource(), EARLIERVERSION,
		Item.class);
    }

    /**
     * Get all values of property EarlierVersion as a ReactorResult of Item
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Item getEarlierVersion() {
	return Base.getAll_as(this.model, this.getResource(), EARLIERVERSION,
		Item.class).firstValue();
    }

    /**
     * Adds a value to property EarlierVersion as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addEarlierVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, EARLIERVERSION, value);
    }

    /**
     * Adds a value to property EarlierVersion as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addEarlierVersion(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), EARLIERVERSION, value);
    }

    /**
     * Adds a value to property EarlierVersion from an instance of Item
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addEarlierVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.add(model, instanceResource, EARLIERVERSION, value);
    }

    /**
     * Adds a value to property EarlierVersion from an instance of Item
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addEarlierVersion(Item value) {
	Base.add(this.model, this.getResource(), EARLIERVERSION, value);
    }

    /**
     * Sets a value of property EarlierVersion from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setEarlierVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, EARLIERVERSION, value);
    }

    /**
     * Sets a value of property EarlierVersion from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setEarlierVersion(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), EARLIERVERSION, value);
    }

    /**
     * Sets a value of property EarlierVersion from an instance of Item First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setEarlierVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.set(model, instanceResource, EARLIERVERSION, value);
    }

    /**
     * Sets a value of property EarlierVersion from an instance of Item First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setEarlierVersion(Item value) {
	Base.set(this.model, this.getResource(), EARLIERVERSION, value);
    }

    /**
     * Removes a value of property EarlierVersion as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeEarlierVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, EARLIERVERSION, value);
    }

    /**
     * Removes a value of property EarlierVersion as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeEarlierVersion(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), EARLIERVERSION, value);
    }

    /**
     * Removes a value of property EarlierVersion given as an instance of Item
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeEarlierVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.remove(model, instanceResource, EARLIERVERSION, value);
    }

    /**
     * Removes a value of property EarlierVersion given as an instance of Item
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeEarlierVersion(Item value) {
	Base.remove(this.model, this.getResource(), EARLIERVERSION, value);
    }

    /**
     * Removes all values of property EarlierVersion * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllEarlierVersions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, EARLIERVERSION);
    }

    /**
     * Removes all values of property EarlierVersion * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllEarlierVersions() {
	Base.removeAll(this.model, this.getResource(), EARLIERVERSION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2bce05fc has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasEmbedsKnowledge(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, EMBEDSKNOWLEDGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2bce05fc has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasEmbedsKnowledge() {
	return Base.has(this.model, this.getResource(), EMBEDSKNOWLEDGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2bce05fc has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasEmbedsKnowledge(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, EMBEDSKNOWLEDGE, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2bce05fc has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasEmbedsKnowledge(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), EMBEDSKNOWLEDGE,
		value);
    }

    /**
     * Get all values of property EmbedsKnowledge as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEmbedsKnowledge_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, EMBEDSKNOWLEDGE);
    }

    /**
     * Get all values of property EmbedsKnowledge as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEmbedsKnowledge_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(),
		EMBEDSKNOWLEDGE);
    }

    /**
     * Get all values of property EmbedsKnowledge * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Graph> getAllEmbedsKnowledge(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, EMBEDSKNOWLEDGE,
		Graph.class);
    }

    /**
     * Get all values of property EmbedsKnowledge * @return a ClosableIterator
     * of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Graph> getAllEmbedsKnowledge() {
	return Base.getAll(this.model, this.getResource(), EMBEDSKNOWLEDGE,
		Graph.class);
    }

    /**
     * Get all values of property EmbedsKnowledge as a ReactorResult of Graph
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Graph getEmbedsKnowledge() {
	return Base.getAll_as(this.model, this.getResource(), EMBEDSKNOWLEDGE,
		Graph.class).firstValue();
    }

    /**
     * Adds a value to property EmbedsKnowledge as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addEmbedsKnowledge(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, EMBEDSKNOWLEDGE, value);
    }

    /**
     * Adds a value to property EmbedsKnowledge as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addEmbedsKnowledge(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), EMBEDSKNOWLEDGE, value);
    }

    /**
     * Adds a value to property EmbedsKnowledge from an instance of Graph
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addEmbedsKnowledge(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Graph value) {
	Base.add(model, instanceResource, EMBEDSKNOWLEDGE, value);
    }

    /**
     * Adds a value to property EmbedsKnowledge from an instance of Graph
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addEmbedsKnowledge(Graph value) {
	Base.add(this.model, this.getResource(), EMBEDSKNOWLEDGE, value);
    }

    /**
     * Sets a value of property EmbedsKnowledge from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setEmbedsKnowledge(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, EMBEDSKNOWLEDGE, value);
    }

    /**
     * Sets a value of property EmbedsKnowledge from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setEmbedsKnowledge(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), EMBEDSKNOWLEDGE, value);
    }

    /**
     * Sets a value of property EmbedsKnowledge from an instance of Graph First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setEmbedsKnowledge(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Graph value) {
	Base.set(model, instanceResource, EMBEDSKNOWLEDGE, value);
    }

    /**
     * Sets a value of property EmbedsKnowledge from an instance of Graph First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setEmbedsKnowledge(Graph value) {
	Base.set(this.model, this.getResource(), EMBEDSKNOWLEDGE, value);
    }

    /**
     * Removes a value of property EmbedsKnowledge as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeEmbedsKnowledge(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, EMBEDSKNOWLEDGE, value);
    }

    /**
     * Removes a value of property EmbedsKnowledge as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeEmbedsKnowledge(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), EMBEDSKNOWLEDGE, value);
    }

    /**
     * Removes a value of property EmbedsKnowledge given as an instance of Graph
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeEmbedsKnowledge(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Graph value) {
	Base.remove(model, instanceResource, EMBEDSKNOWLEDGE, value);
    }

    /**
     * Removes a value of property EmbedsKnowledge given as an instance of Graph
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeEmbedsKnowledge(Graph value) {
	Base.remove(this.model, this.getResource(), EMBEDSKNOWLEDGE, value);
    }

    /**
     * Removes all values of property EmbedsKnowledge * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllEmbedsKnowledge(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, EMBEDSKNOWLEDGE);
    }

    /**
     * Removes all values of property EmbedsKnowledge * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllEmbedsKnowledge() {
	Base.removeAll(this.model, this.getResource(), EMBEDSKNOWLEDGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4792cf37 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasIPAddresses(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, IPADDRESS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4792cf37 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasIPAddresses() {
	return Base.has(this.model, this.getResource(), IPADDRESS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4792cf37 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasIPAddress(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, IPADDRESS, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4792cf37 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasIPAddress(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), IPADDRESS, value);
    }

    /**
     * Get all values of property IPAddress as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIPAddresses_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, IPADDRESS);
    }

    /**
     * Get all values of property IPAddress as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIPAddresses_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), IPADDRESS);
    }

    /**
     * Get all values of property IPAddress * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllIPAddresses(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, IPADDRESS,
		java.lang.String.class);
    }

    /**
     * Get all values of property IPAddress * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllIPAddresses() {
	return Base.getAll(this.model, this.getResource(), IPADDRESS,
		java.lang.String.class);
    }

    /**
     * Get all values of property IPAddress as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getIPAddress() {
	return Base.getAll_as(this.model, this.getResource(), IPADDRESS,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property IPAddress as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addIPAddress(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, IPADDRESS, value);
    }

    /**
     * Adds a value to property IPAddress as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addIPAddress(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), IPADDRESS, value);
    }

    /**
     * Adds a value to property IPAddress from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addIPAddress(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, IPADDRESS, value);
    }

    /**
     * Adds a value to property IPAddress from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addIPAddress(java.lang.String value) {
	Base.add(this.model, this.getResource(), IPADDRESS, value);
    }

    /**
     * Sets a value of property IPAddress from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setIPAddress(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, IPADDRESS, value);
    }

    /**
     * Sets a value of property IPAddress from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setIPAddress(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), IPADDRESS, value);
    }

    /**
     * Sets a value of property IPAddress from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setIPAddress(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, IPADDRESS, value);
    }

    /**
     * Sets a value of property IPAddress from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setIPAddress(java.lang.String value) {
	Base.set(this.model, this.getResource(), IPADDRESS, value);
    }

    /**
     * Removes a value of property IPAddress as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeIPAddress(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, IPADDRESS, value);
    }

    /**
     * Removes a value of property IPAddress as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeIPAddress(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), IPADDRESS, value);
    }

    /**
     * Removes a value of property IPAddress given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeIPAddress(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, IPADDRESS, value);
    }

    /**
     * Removes a value of property IPAddress given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeIPAddress(java.lang.String value) {
	Base.remove(this.model, this.getResource(), IPADDRESS, value);
    }

    /**
     * Removes all values of property IPAddress * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllIPAddresses(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, IPADDRESS);
    }

    /**
     * Removes all values of property IPAddress * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllIPAddresses() {
	Base.removeAll(this.model, this.getResource(), IPADDRESS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f9e0e7b has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasLaterVersions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, LATERVERSION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f9e0e7b has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasLaterVersions() {
	return Base.has(this.model, this.getResource(), LATERVERSION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f9e0e7b has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasLaterVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, LATERVERSION, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f9e0e7b has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasLaterVersion(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), LATERVERSION,
		value);
    }

    /**
     * Get all values of property LaterVersion as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLaterVersions_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, LATERVERSION);
    }

    /**
     * Get all values of property LaterVersion as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLaterVersions_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), LATERVERSION);
    }

    /**
     * Get all values of property LaterVersion * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Item> getAllLaterVersions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, LATERVERSION, Item.class);
    }

    /**
     * Get all values of property LaterVersion * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Item> getAllLaterVersions() {
	return Base.getAll(this.model, this.getResource(), LATERVERSION,
		Item.class);
    }

    /**
     * Get all values of property LaterVersion as a ReactorResult of Item
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Item getLaterVersion() {
	return Base.getAll_as(this.model, this.getResource(), LATERVERSION,
		Item.class).firstValue();
    }

    /**
     * Adds a value to property LaterVersion as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addLaterVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, LATERVERSION, value);
    }

    /**
     * Adds a value to property LaterVersion as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addLaterVersion(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), LATERVERSION, value);
    }

    /**
     * Adds a value to property LaterVersion from an instance of Item
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addLaterVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.add(model, instanceResource, LATERVERSION, value);
    }

    /**
     * Adds a value to property LaterVersion from an instance of Item
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addLaterVersion(Item value) {
	Base.add(this.model, this.getResource(), LATERVERSION, value);
    }

    /**
     * Sets a value of property LaterVersion from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setLaterVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, LATERVERSION, value);
    }

    /**
     * Sets a value of property LaterVersion from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setLaterVersion(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), LATERVERSION, value);
    }

    /**
     * Sets a value of property LaterVersion from an instance of Item First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setLaterVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.set(model, instanceResource, LATERVERSION, value);
    }

    /**
     * Sets a value of property LaterVersion from an instance of Item First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setLaterVersion(Item value) {
	Base.set(this.model, this.getResource(), LATERVERSION, value);
    }

    /**
     * Removes a value of property LaterVersion as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeLaterVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, LATERVERSION, value);
    }

    /**
     * Removes a value of property LaterVersion as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeLaterVersion(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), LATERVERSION, value);
    }

    /**
     * Removes a value of property LaterVersion given as an instance of Item
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeLaterVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.remove(model, instanceResource, LATERVERSION, value);
    }

    /**
     * Removes a value of property LaterVersion given as an instance of Item
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeLaterVersion(Item value) {
	Base.remove(this.model, this.getResource(), LATERVERSION, value);
    }

    /**
     * Removes all values of property LaterVersion * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllLaterVersions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, LATERVERSION);
    }

    /**
     * Removes all values of property LaterVersion * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllLaterVersions() {
	Base.removeAll(this.model, this.getResource(), LATERVERSION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@234b74fd has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasLatestVersions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, LATESTVERSION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@234b74fd has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasLatestVersions() {
	return Base.has(this.model, this.getResource(), LATESTVERSION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@234b74fd has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasLatestVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, LATESTVERSION, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@234b74fd has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasLatestVersion(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), LATESTVERSION,
		value);
    }

    /**
     * Get all values of property LatestVersion as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLatestVersions_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, LATESTVERSION);
    }

    /**
     * Get all values of property LatestVersion as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLatestVersions_asNode() {
	return Base
		.getAll_asNode(this.model, this.getResource(), LATESTVERSION);
    }

    /**
     * Get all values of property LatestVersion * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Item> getAllLatestVersions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, LATESTVERSION, Item.class);
    }

    /**
     * Get all values of property LatestVersion * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Item> getAllLatestVersions() {
	return Base.getAll(this.model, this.getResource(), LATESTVERSION,
		Item.class);
    }

    /**
     * Get all values of property LatestVersion as a ReactorResult of Item
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Item getLatestVersion() {
	return Base.getAll_as(this.model, this.getResource(), LATESTVERSION,
		Item.class).firstValue();
    }

    /**
     * Adds a value to property LatestVersion as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addLatestVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, LATESTVERSION, value);
    }

    /**
     * Adds a value to property LatestVersion as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addLatestVersion(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), LATESTVERSION, value);
    }

    /**
     * Adds a value to property LatestVersion from an instance of Item
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addLatestVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.add(model, instanceResource, LATESTVERSION, value);
    }

    /**
     * Adds a value to property LatestVersion from an instance of Item
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addLatestVersion(Item value) {
	Base.add(this.model, this.getResource(), LATESTVERSION, value);
    }

    /**
     * Sets a value of property LatestVersion from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setLatestVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, LATESTVERSION, value);
    }

    /**
     * Sets a value of property LatestVersion from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setLatestVersion(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), LATESTVERSION, value);
    }

    /**
     * Sets a value of property LatestVersion from an instance of Item First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setLatestVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.set(model, instanceResource, LATESTVERSION, value);
    }

    /**
     * Sets a value of property LatestVersion from an instance of Item First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setLatestVersion(Item value) {
	Base.set(this.model, this.getResource(), LATESTVERSION, value);
    }

    /**
     * Removes a value of property LatestVersion as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeLatestVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, LATESTVERSION, value);
    }

    /**
     * Removes a value of property LatestVersion as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeLatestVersion(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), LATESTVERSION, value);
    }

    /**
     * Removes a value of property LatestVersion given as an instance of Item
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeLatestVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.remove(model, instanceResource, LATESTVERSION, value);
    }

    /**
     * Removes a value of property LatestVersion given as an instance of Item
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeLatestVersion(Item value) {
	Base.remove(this.model, this.getResource(), LATESTVERSION, value);
    }

    /**
     * Removes all values of property LatestVersion * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllLatestVersions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, LATESTVERSION);
    }

    /**
     * Removes all values of property LatestVersion * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllLatestVersions() {
	Base.removeAll(this.model, this.getResource(), LATESTVERSION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d1fa1ed has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasModifiers(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, MODIFIER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d1fa1ed has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasModifiers() {
	return Base.has(this.model, this.getResource(), MODIFIER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d1fa1ed has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasModifier(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, MODIFIER, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d1fa1ed has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasModifier(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), MODIFIER, value);
    }

    /**
     * Get all values of property Modifier as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllModifiers_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, MODIFIER);
    }

    /**
     * Get all values of property Modifier as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllModifiers_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), MODIFIER);
    }

    /**
     * Get all values of property Modifier * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<UserAccount> getAllModifiers(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base
		.getAll(model, instanceResource, MODIFIER, UserAccount.class);
    }

    /**
     * Get all values of property Modifier * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<UserAccount> getAllModifiers() {
	return Base.getAll(this.model, this.getResource(), MODIFIER,
		UserAccount.class);
    }

    /**
     * Get all values of property Modifier as a ReactorResult of UserAccount
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public UserAccount getModifier() {
	return Base.getAll_as(this.model, this.getResource(), MODIFIER,
		UserAccount.class).firstValue();
    }

    /**
     * Adds a value to property Modifier as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addModifier(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, MODIFIER, value);
    }

    /**
     * Adds a value to property Modifier as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addModifier(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), MODIFIER, value);
    }

    /**
     * Adds a value to property Modifier from an instance of UserAccount
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addModifier(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    UserAccount value) {
	Base.add(model, instanceResource, MODIFIER, value);
    }

    /**
     * Adds a value to property Modifier from an instance of UserAccount
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addModifier(UserAccount value) {
	Base.add(this.model, this.getResource(), MODIFIER, value);
    }

    /**
     * Sets a value of property Modifier from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setModifier(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, MODIFIER, value);
    }

    /**
     * Sets a value of property Modifier from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setModifier(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), MODIFIER, value);
    }

    /**
     * Sets a value of property Modifier from an instance of UserAccount First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setModifier(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    UserAccount value) {
	Base.set(model, instanceResource, MODIFIER, value);
    }

    /**
     * Sets a value of property Modifier from an instance of UserAccount First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setModifier(UserAccount value) {
	Base.set(this.model, this.getResource(), MODIFIER, value);
    }

    /**
     * Removes a value of property Modifier as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeModifier(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, MODIFIER, value);
    }

    /**
     * Removes a value of property Modifier as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeModifier(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), MODIFIER, value);
    }

    /**
     * Removes a value of property Modifier given as an instance of UserAccount
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeModifier(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    UserAccount value) {
	Base.remove(model, instanceResource, MODIFIER, value);
    }

    /**
     * Removes a value of property Modifier given as an instance of UserAccount
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeModifier(UserAccount value) {
	Base.remove(this.model, this.getResource(), MODIFIER, value);
    }

    /**
     * Removes all values of property Modifier * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllModifiers(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, MODIFIER);
    }

    /**
     * Removes all values of property Modifier * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllModifiers() {
	Base.removeAll(this.model, this.getResource(), MODIFIER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23541e79 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNextByDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, NEXTBYDATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23541e79 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNextByDate() {
	return Base.has(this.model, this.getResource(), NEXTBYDATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23541e79 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNextByDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, NEXTBYDATE, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23541e79 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNextByDate(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), NEXTBYDATE, value);
    }

    /**
     * Get all values of property NextByDate as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNextByDate_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, NEXTBYDATE);
    }

    /**
     * Get all values of property NextByDate as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNextByDate_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), NEXTBYDATE);
    }

    /**
     * Get all values of property NextByDate * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Item> getAllNextByDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, NEXTBYDATE, Item.class);
    }

    /**
     * Get all values of property NextByDate * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Item> getAllNextByDate() {
	return Base.getAll(this.model, this.getResource(), NEXTBYDATE,
		Item.class);
    }

    /**
     * Get all values of property NextByDate as a ReactorResult of Item
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Item getNextByDate() {
	return Base.getAll_as(this.model, this.getResource(), NEXTBYDATE,
		Item.class).firstValue();
    }

    /**
     * Adds a value to property NextByDate as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNextByDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, NEXTBYDATE, value);
    }

    /**
     * Adds a value to property NextByDate as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNextByDate(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), NEXTBYDATE, value);
    }

    /**
     * Adds a value to property NextByDate from an instance of Item
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNextByDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.add(model, instanceResource, NEXTBYDATE, value);
    }

    /**
     * Adds a value to property NextByDate from an instance of Item
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNextByDate(Item value) {
	Base.add(this.model, this.getResource(), NEXTBYDATE, value);
    }

    /**
     * Sets a value of property NextByDate from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNextByDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, NEXTBYDATE, value);
    }

    /**
     * Sets a value of property NextByDate from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNextByDate(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), NEXTBYDATE, value);
    }

    /**
     * Sets a value of property NextByDate from an instance of Item First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNextByDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.set(model, instanceResource, NEXTBYDATE, value);
    }

    /**
     * Sets a value of property NextByDate from an instance of Item First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNextByDate(Item value) {
	Base.set(this.model, this.getResource(), NEXTBYDATE, value);
    }

    /**
     * Removes a value of property NextByDate as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNextByDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, NEXTBYDATE, value);
    }

    /**
     * Removes a value of property NextByDate as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNextByDate(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), NEXTBYDATE, value);
    }

    /**
     * Removes a value of property NextByDate given as an instance of Item
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNextByDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.remove(model, instanceResource, NEXTBYDATE, value);
    }

    /**
     * Removes a value of property NextByDate given as an instance of Item
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNextByDate(Item value) {
	Base.remove(this.model, this.getResource(), NEXTBYDATE, value);
    }

    /**
     * Removes all values of property NextByDate * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNextByDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, NEXTBYDATE);
    }

    /**
     * Removes all values of property NextByDate * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNextByDate() {
	Base.removeAll(this.model, this.getResource(), NEXTBYDATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5629fbc9 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNextVersions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, NEXTVERSION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5629fbc9 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNextVersions() {
	return Base.has(this.model, this.getResource(), NEXTVERSION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5629fbc9 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNextVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, NEXTVERSION, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5629fbc9 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNextVersion(org.ontoware.rdf2go.model.node.Node value) {
	return Base
		.hasValue(this.model, this.getResource(), NEXTVERSION, value);
    }

    /**
     * Get all values of property NextVersion as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNextVersions_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, NEXTVERSION);
    }

    /**
     * Get all values of property NextVersion as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNextVersions_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), NEXTVERSION);
    }

    /**
     * Get all values of property NextVersion * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Item> getAllNextVersions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, NEXTVERSION, Item.class);
    }

    /**
     * Get all values of property NextVersion * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Item> getAllNextVersions() {
	return Base.getAll(this.model, this.getResource(), NEXTVERSION,
		Item.class);
    }

    /**
     * Get all values of property NextVersion as a ReactorResult of Item
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Item getNextVersion() {
	return Base.getAll_as(this.model, this.getResource(), NEXTVERSION,
		Item.class).firstValue();
    }

    /**
     * Adds a value to property NextVersion as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNextVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, NEXTVERSION, value);
    }

    /**
     * Adds a value to property NextVersion as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNextVersion(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), NEXTVERSION, value);
    }

    /**
     * Adds a value to property NextVersion from an instance of Item
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNextVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.add(model, instanceResource, NEXTVERSION, value);
    }

    /**
     * Adds a value to property NextVersion from an instance of Item
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNextVersion(Item value) {
	Base.add(this.model, this.getResource(), NEXTVERSION, value);
    }

    /**
     * Sets a value of property NextVersion from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNextVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, NEXTVERSION, value);
    }

    /**
     * Sets a value of property NextVersion from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNextVersion(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), NEXTVERSION, value);
    }

    /**
     * Sets a value of property NextVersion from an instance of Item First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNextVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.set(model, instanceResource, NEXTVERSION, value);
    }

    /**
     * Sets a value of property NextVersion from an instance of Item First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNextVersion(Item value) {
	Base.set(this.model, this.getResource(), NEXTVERSION, value);
    }

    /**
     * Removes a value of property NextVersion as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNextVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, NEXTVERSION, value);
    }

    /**
     * Removes a value of property NextVersion as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNextVersion(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), NEXTVERSION, value);
    }

    /**
     * Removes a value of property NextVersion given as an instance of Item
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNextVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.remove(model, instanceResource, NEXTVERSION, value);
    }

    /**
     * Removes a value of property NextVersion given as an instance of Item
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNextVersion(Item value) {
	Base.remove(this.model, this.getResource(), NEXTVERSION, value);
    }

    /**
     * Removes all values of property NextVersion * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNextVersions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, NEXTVERSION);
    }

    /**
     * Removes all values of property NextVersion * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNextVersions() {
	Base.removeAll(this.model, this.getResource(), NEXTVERSION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@90f2b4a has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasPreviousByDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, PREVIOUSBYDATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@90f2b4a has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasPreviousByDate() {
	return Base.has(this.model, this.getResource(), PREVIOUSBYDATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@90f2b4a has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasPreviousByDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, PREVIOUSBYDATE, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@90f2b4a has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasPreviousByDate(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), PREVIOUSBYDATE,
		value);
    }

    /**
     * Get all values of property PreviousByDate as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPreviousByDate_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, PREVIOUSBYDATE);
    }

    /**
     * Get all values of property PreviousByDate as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPreviousByDate_asNode_(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_as(model, instanceResource, PREVIOUSBYDATE,
		org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property PreviousByDate as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPreviousByDate_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(),
		PREVIOUSBYDATE);
    }

    /**
     * Get all values of property PreviousByDate as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPreviousByDate_asNode_() {
	return Base.getAll_as(this.model, this.getResource(), PREVIOUSBYDATE,
		org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property PreviousByDate * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Item> getAllPreviousByDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, PREVIOUSBYDATE, Item.class);
    }

    /**
     * Get all values of property PreviousByDate as a ReactorResult of Item
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Item> getAllPreviousByDate_as(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_as(model, instanceResource, PREVIOUSBYDATE,
		Item.class);
    }

    /**
     * Get all values of property PreviousByDate * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Item> getAllPreviousByDate() {
	return Base.getAll(this.model, this.getResource(), PREVIOUSBYDATE,
		Item.class);
    }

    /**
     * Get all values of property PreviousByDate as a ReactorResult of Item
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Item> getAllPreviousByDate_as() {
	return Base.getAll_as(this.model, this.getResource(), PREVIOUSBYDATE,
		Item.class);
    }

    /**
     * Get all values of property PreviousByDate as a ReactorResult of Item
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Item getPreviousByDate() {
	return Base.getAll_as(this.model, this.getResource(), PREVIOUSBYDATE,
		Item.class).firstValue();
    }

    /**
     * Adds a value to property PreviousByDate as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addPreviousByDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, PREVIOUSBYDATE, value);
    }

    /**
     * Adds a value to property PreviousByDate as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addPreviousByDate(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), PREVIOUSBYDATE, value);
    }

    /**
     * Adds a value to property PreviousByDate from an instance of Item
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addPreviousByDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.add(model, instanceResource, PREVIOUSBYDATE, value);
    }

    /**
     * Adds a value to property PreviousByDate from an instance of Item
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addPreviousByDate(Item value) {
	Base.add(this.model, this.getResource(), PREVIOUSBYDATE, value);
    }

    /**
     * Sets a value of property PreviousByDate from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setPreviousByDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, PREVIOUSBYDATE, value);
    }

    /**
     * Sets a value of property PreviousByDate from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setPreviousByDate(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), PREVIOUSBYDATE, value);
    }

    /**
     * Sets a value of property PreviousByDate from an instance of Item First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setPreviousByDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.set(model, instanceResource, PREVIOUSBYDATE, value);
    }

    /**
     * Sets a value of property PreviousByDate from an instance of Item First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setPreviousByDate(Item value) {
	Base.set(this.model, this.getResource(), PREVIOUSBYDATE, value);
    }

    /**
     * Removes a value of property PreviousByDate as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removePreviousByDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, PREVIOUSBYDATE, value);
    }

    /**
     * Removes a value of property PreviousByDate as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removePreviousByDate(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), PREVIOUSBYDATE, value);
    }

    /**
     * Removes a value of property PreviousByDate given as an instance of Item
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removePreviousByDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.remove(model, instanceResource, PREVIOUSBYDATE, value);
    }

    /**
     * Removes a value of property PreviousByDate given as an instance of Item
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removePreviousByDate(Item value) {
	Base.remove(this.model, this.getResource(), PREVIOUSBYDATE, value);
    }

    /**
     * Removes all values of property PreviousByDate * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllPreviousByDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, PREVIOUSBYDATE);
    }

    /**
     * Removes all values of property PreviousByDate * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllPreviousByDate() {
	Base.removeAll(this.model, this.getResource(), PREVIOUSBYDATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@39f46204 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasPreviousVersions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, PREVIOUSVERSION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@39f46204 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasPreviousVersions() {
	return Base.has(this.model, this.getResource(), PREVIOUSVERSION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@39f46204 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasPreviousVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, PREVIOUSVERSION, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@39f46204 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasPreviousVersion(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), PREVIOUSVERSION,
		value);
    }

    /**
     * Get all values of property PreviousVersion as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPreviousVersions_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, PREVIOUSVERSION);
    }

    /**
     * Get all values of property PreviousVersion as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPreviousVersions_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(),
		PREVIOUSVERSION);
    }

    /**
     * Get all values of property PreviousVersion * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Item> getAllPreviousVersions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base
		.getAll(model, instanceResource, PREVIOUSVERSION, Item.class);
    }

    /**
     * Get all values of property PreviousVersion * @return a ClosableIterator
     * of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Item> getAllPreviousVersions() {
	return Base.getAll(this.model, this.getResource(), PREVIOUSVERSION,
		Item.class);
    }

    /**
     * Get all values of property PreviousVersion as a ReactorResult of Item
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Item getPreviousVersion() {
	return Base.getAll_as(this.model, this.getResource(), PREVIOUSVERSION,
		Item.class).firstValue();
    }

    /**
     * Adds a value to property PreviousVersion as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addPreviousVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, PREVIOUSVERSION, value);
    }

    /**
     * Adds a value to property PreviousVersion as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addPreviousVersion(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), PREVIOUSVERSION, value);
    }

    /**
     * Adds a value to property PreviousVersion from an instance of Item
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addPreviousVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.add(model, instanceResource, PREVIOUSVERSION, value);
    }

    /**
     * Adds a value to property PreviousVersion from an instance of Item
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addPreviousVersion(Item value) {
	Base.add(this.model, this.getResource(), PREVIOUSVERSION, value);
    }

    /**
     * Sets a value of property PreviousVersion from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setPreviousVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, PREVIOUSVERSION, value);
    }

    /**
     * Sets a value of property PreviousVersion from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setPreviousVersion(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), PREVIOUSVERSION, value);
    }

    /**
     * Sets a value of property PreviousVersion from an instance of Item First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setPreviousVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.set(model, instanceResource, PREVIOUSVERSION, value);
    }

    /**
     * Sets a value of property PreviousVersion from an instance of Item First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setPreviousVersion(Item value) {
	Base.set(this.model, this.getResource(), PREVIOUSVERSION, value);
    }

    /**
     * Removes a value of property PreviousVersion as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removePreviousVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, PREVIOUSVERSION, value);
    }

    /**
     * Removes a value of property PreviousVersion as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removePreviousVersion(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), PREVIOUSVERSION, value);
    }

    /**
     * Removes a value of property PreviousVersion given as an instance of Item
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removePreviousVersion(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.remove(model, instanceResource, PREVIOUSVERSION, value);
    }

    /**
     * Removes a value of property PreviousVersion given as an instance of Item
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removePreviousVersion(Item value) {
	Base.remove(this.model, this.getResource(), PREVIOUSVERSION, value);
    }

    /**
     * Removes all values of property PreviousVersion * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllPreviousVersions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, PREVIOUSVERSION);
    }

    /**
     * Removes all values of property PreviousVersion * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllPreviousVersions() {
	Base.removeAll(this.model, this.getResource(), PREVIOUSVERSION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4bdacf2 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasReplies(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, REPLY);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4bdacf2 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasReplies() {
	return Base.has(this.model, this.getResource(), REPLY);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4bdacf2 has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasReply(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, REPLY, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4bdacf2 has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasReply(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), REPLY, value);
    }

    /**
     * Get all values of property Reply as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllReplies_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, REPLY);
    }

    /**
     * Get all values of property Reply as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllReplies_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), REPLY);
    }

    /**
     * Get all values of property Reply * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Item> getAllReplies(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, REPLY, Item.class);
    }

    /**
     * Get all values of property Reply * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Item> getAllReplies() {
	return Base.getAll(this.model, this.getResource(), REPLY, Item.class);
    }

    /**
     * Get all values of property Reply as a ReactorResult of Item
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Item getReply() {
	return Base
		.getAll_as(this.model, this.getResource(), REPLY, Item.class)
		.firstValue();
    }

    /**
     * Adds a value to property Reply as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addReply(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, REPLY, value);
    }

    /**
     * Adds a value to property Reply as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addReply(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), REPLY, value);
    }

    /**
     * Adds a value to property Reply from an instance of Item
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addReply(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.add(model, instanceResource, REPLY, value);
    }

    /**
     * Adds a value to property Reply from an instance of Item
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addReply(Item value) {
	Base.add(this.model, this.getResource(), REPLY, value);
    }

    /**
     * Sets a value of property Reply from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setReply(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, REPLY, value);
    }

    /**
     * Sets a value of property Reply from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setReply(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), REPLY, value);
    }

    /**
     * Sets a value of property Reply from an instance of Item First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setReply(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.set(model, instanceResource, REPLY, value);
    }

    /**
     * Sets a value of property Reply from an instance of Item First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setReply(Item value) {
	Base.set(this.model, this.getResource(), REPLY, value);
    }

    /**
     * Removes a value of property Reply as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeReply(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, REPLY, value);
    }

    /**
     * Removes a value of property Reply as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeReply(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), REPLY, value);
    }

    /**
     * Removes a value of property Reply given as an instance of Item
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeReply(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.remove(model, instanceResource, REPLY, value);
    }

    /**
     * Removes a value of property Reply given as an instance of Item
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeReply(Item value) {
	Base.remove(this.model, this.getResource(), REPLY, value);
    }

    /**
     * Removes all values of property Reply * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllReplies(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, REPLY);
    }

    /**
     * Removes all values of property Reply * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllReplies() {
	Base.removeAll(this.model, this.getResource(), REPLY);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2fb8c90 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasReplyOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, REPLYOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2fb8c90 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasReplyOf() {
	return Base.has(this.model, this.getResource(), REPLYOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2fb8c90 has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasReplyOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, REPLYOF, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2fb8c90 has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasReplyOf(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), REPLYOF, value);
    }

    /**
     * Get all values of property ReplyOf as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllReplyOf_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, REPLYOF);
    }

    /**
     * Get all values of property ReplyOf as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllReplyOf_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), REPLYOF);
    }

    /**
     * Get all values of property ReplyOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Item> getAllReplysof(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, REPLYOF, Item.class);
    }

    /**
     * Get all values of property ReplyOf * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Item> getAllReplyOf() {
	return Base.getAll(this.model, this.getResource(), REPLYOF, Item.class);
    }

    /**
     * Get all values of property ReplyOf as a ReactorResult of Item
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Item getReplyOf() {
	return Base.getAll_as(this.model, this.getResource(), REPLYOF,
		Item.class).firstValue();
    }

    /**
     * Adds a value to property ReplyOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addReplyOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, REPLYOF, value);
    }

    /**
     * Adds a value to property ReplyOf as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addReplyOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), REPLYOF, value);
    }

    /**
     * Adds a value to property ReplyOf from an instance of Item
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addReplyOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.add(model, instanceResource, REPLYOF, value);
    }

    /**
     * Adds a value to property ReplyOf from an instance of Item
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addReplyOf(Item value) {
	Base.add(this.model, this.getResource(), REPLYOF, value);
    }

    /**
     * Sets a value of property ReplyOf from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setReplyOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, REPLYOF, value);
    }

    /**
     * Sets a value of property ReplyOf from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setReplyOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), REPLYOF, value);
    }

    /**
     * Sets a value of property ReplyOf from an instance of Item First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setReplyOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.set(model, instanceResource, REPLYOF, value);
    }

    /**
     * Sets a value of property ReplyOf from an instance of Item First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setReplyOf(Item value) {
	Base.set(this.model, this.getResource(), REPLYOF, value);
    }

    /**
     * Removes a value of property ReplyOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeReplyOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, REPLYOF, value);
    }

    /**
     * Removes a value of property ReplyOf as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeReplyOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), REPLYOF, value);
    }

    /**
     * Removes a value of property ReplyOf given as an instance of Item
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeReplyOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.remove(model, instanceResource, REPLYOF, value);
    }

    /**
     * Removes a value of property ReplyOf given as an instance of Item
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeReplyOf(Item value) {
	Base.remove(this.model, this.getResource(), REPLYOF, value);
    }

    /**
     * Removes all values of property ReplyOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllReplyOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, REPLYOF);
    }

    /**
     * Removes all values of property ReplyOf * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllReplyOf() {
	Base.removeAll(this.model, this.getResource(), REPLYOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d2f7354 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSiblings(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, SIBLING);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d2f7354 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSiblings() {
	return Base.has(this.model, this.getResource(), SIBLING);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d2f7354 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSibling(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, SIBLING, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d2f7354 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasSibling(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), SIBLING, value);
    }

    /**
     * Get all values of property Sibling as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSiblings_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, SIBLING);
    }

    /**
     * Get all values of property Sibling as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSiblings_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), SIBLING);
    }

    /**
     * Get all values of property Sibling * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Item> getAllSiblings(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, SIBLING, Item.class);
    }

    /**
     * Get all values of property Sibling * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Item> getAllSiblings() {
	return Base.getAll(this.model, this.getResource(), SIBLING, Item.class);
    }

    /**
     * Get all values of property Sibling as a ReactorResult of Item
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Item getSibling() {
	return Base.getAll_as(this.model, this.getResource(), SIBLING,
		Item.class).firstValue();
    }

    /**
     * Adds a value to property Sibling as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSibling(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, SIBLING, value);
    }

    /**
     * Adds a value to property Sibling as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSibling(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), SIBLING, value);
    }

    /**
     * Adds a value to property Sibling from an instance of Item
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSibling(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.add(model, instanceResource, SIBLING, value);
    }

    /**
     * Adds a value to property Sibling from an instance of Item
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSibling(Item value) {
	Base.add(this.model, this.getResource(), SIBLING, value);
    }

    /**
     * Sets a value of property Sibling from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSibling(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, SIBLING, value);
    }

    /**
     * Sets a value of property Sibling from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSibling(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), SIBLING, value);
    }

    /**
     * Sets a value of property Sibling from an instance of Item First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSibling(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.set(model, instanceResource, SIBLING, value);
    }

    /**
     * Sets a value of property Sibling from an instance of Item First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSibling(Item value) {
	Base.set(this.model, this.getResource(), SIBLING, value);
    }

    /**
     * Removes a value of property Sibling as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSibling(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, SIBLING, value);
    }

    /**
     * Removes a value of property Sibling as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeSibling(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), SIBLING, value);
    }

    /**
     * Removes a value of property Sibling given as an instance of Item
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSibling(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.remove(model, instanceResource, SIBLING, value);
    }

    /**
     * Removes a value of property Sibling given as an instance of Item
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSibling(Item value) {
	Base.remove(this.model, this.getResource(), SIBLING, value);
    }

    /**
     * Removes all values of property Sibling * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSiblings(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, SIBLING);
    }

    /**
     * Removes all values of property Sibling * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllSiblings() {
	Base.removeAll(this.model, this.getResource(), SIBLING);
    }
}