/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765
 * 2010-02-11 09:51:13Z max.at.xam.de $) on 21.12.12 17:00
 */
package org.rdfs.sioc;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.schema.owl.OwlThing;

/**
 * This class manages access to these properties:
 * <ul>
 * <li>Subject</li>
 * <li>hasPart</li>
 * <li>isPart</li>
 * <li>created</li>
 * <li>Creator</li>
 * <li>Date</li>
 * <li>Description</li>
 * <li>Function</li>
 * <li>Id</li>
 * <li>LastActivityDate</li>
 * <li>LastReplyDate</li>
 * <li>LinksTo</li>
 * <li>modified</li>
 * <li>Name</li>
 * <li>Note</li>
 * <li>NumAuthors</li>
 * <li>NumReplies</li>
 * <li>NumViews</li>
 * <li>Owner</li>
 * <li>part</li>
 * <li>References</li>
 * <li>RelatedTo</li>
 * <li>ScopeOf</li>
 * <li>Space</li>
 * <li>Title</li>
 * <li>Topic</li>
 * </ul>
 * 
 * This class was generated by <a
 * href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 21.12.12 17:00
 */
public class Thing extends OwlThing {
    /**
     * 
     */
    private static final long serialVersionUID = 9047324362517530425L;

    /** http://www.w3.org/2000/01/rdf-schema#Class */
    public static final URI RDFS_CLASS = OwlThing.RDFS_CLASS;

    /** http://purl.org/dc/terms/subject */
    public static final URI SUBJECT = new URIImpl(
	    "http://purl.org/dc/terms/subject", false);

    /** http://purl.org/dc/terms/title */
    public static final URI TITLE = new URIImpl(
	    "http://purl.org/dc/terms/title", false);

    /** http://purl.org/dc/terms/date */
    public static final URI DATE = new URIImpl("http://purl.org/dc/terms/date",
	    false);

    /** http://purl.org/dc/terms/created */
    public static final URI CREATED = new URIImpl(
	    "http://purl.org/dc/terms/created", false);

    /** http://purl.org/dc/terms/modified */
    public static final URI MODIFIED = new URIImpl(
	    "http://purl.org/dc/terms/modified", false);

    /** http://purl.org/dc/terms/hasPart */
    public static final URI HASPART = new URIImpl(
	    "http://purl.org/dc/terms/hasPart", false);

    /** http://purl.org/dc/terms/isPartOf */
    public static final URI ISPARTOF = new URIImpl(
	    "http://purl.org/dc/terms/isPartOf", false);

    /** http://purl.org/dc/terms/description */
    public static final URI DESCRIPTION = new URIImpl(
	    "http://purl.org/dc/terms/description", false);

    /** http://purl.org/dc/terms/references */
    public static final URI REFERENCES = new URIImpl(
	    "http://purl.org/dc/terms/references", false);

    /** http://rdfs.org/sioc/ns#has_creator */
    public static final URI CREATOR = new URIImpl(
	    "http://rdfs.org/sioc/ns#has_creator", false);

    /** http://rdfs.org/sioc/ns#has_function */
    public static final URI FUNCTION = new URIImpl(
	    "http://rdfs.org/sioc/ns#has_function", false);

    /** http://rdfs.org/sioc/ns#id */
    public static final URI ID = new URIImpl("http://rdfs.org/sioc/ns#id",
	    false);

    /** http://rdfs.org/sioc/ns#last_activity_date */
    public static final URI LASTACTIVITYDATE = new URIImpl(
	    "http://rdfs.org/sioc/ns#last_activity_date", false);

    /** http://rdfs.org/sioc/ns#last_reply_date */
    public static final URI LASTREPLYDATE = new URIImpl(
	    "http://rdfs.org/sioc/ns#last_reply_date", false);

    /** http://rdfs.org/sioc/ns#links_to */
    public static final URI LINKSTO = new URIImpl(
	    "http://rdfs.org/sioc/ns#links_to", false);

    /** http://rdfs.org/sioc/ns#name */
    public static final URI _NAME = new URIImpl("http://rdfs.org/sioc/ns#name",
	    false);

    /** http://rdfs.org/sioc/ns#note */
    public static final URI NOTE = new URIImpl("http://rdfs.org/sioc/ns#note",
	    false);

    /** http://rdfs.org/sioc/ns#num_authors */
    public static final URI NUMAUTHORS = new URIImpl(
	    "http://rdfs.org/sioc/ns#num_authors", false);

    /** http://rdfs.org/sioc/ns#num_replies */
    public static final URI NUMREPLIES = new URIImpl(
	    "http://rdfs.org/sioc/ns#num_replies", false);

    /** http://rdfs.org/sioc/ns#num_views */
    public static final URI NUMVIEWS = new URIImpl(
	    "http://rdfs.org/sioc/ns#num_views", false);

    /** http://rdfs.org/sioc/ns#has_owner */
    public static final URI OWNER = new URIImpl(
	    "http://rdfs.org/sioc/ns#has_owner", false);

    /** http://rdfs.org/sioc/ns#related_to */
    public static final URI RELATEDTO = new URIImpl(
	    "http://rdfs.org/sioc/ns#related_to", false);

    /** http://rdfs.org/sioc/ns#scope_of */
    public static final URI SCOPEOF = new URIImpl(
	    "http://rdfs.org/sioc/ns#scope_of", false);

    /** http://rdfs.org/sioc/ns#has_space */
    public static final URI SPACE = new URIImpl(
	    "http://rdfs.org/sioc/ns#has_space", false);

    /** http://rdfs.org/sioc/ns#topic */
    public static final URI TOPIC = new URIImpl(
	    "http://rdfs.org/sioc/ns#topic", false);

    /**
     * All property-URIs with this class as domain. All properties of all
     * super-classes are also available.
     */
    public static final URI[] MANAGED_URIS = {
	    new URIImpl("http://purl.org/dc/terms/subject", false),
	    new URIImpl("http://purl.org/dc/terms/title", false),
	    new URIImpl("http://purl.org/dc/terms/created", false),
	    new URIImpl("http://purl.org/dc/terms/date", false),
	    new URIImpl("http://purl.org/dc/terms/description", false),
	    new URIImpl("http://purl.org/dc/terms/references", false),
	    new URIImpl("http://rdfs.org/sioc/ns#has_creator", false),
	    new URIImpl("http://rdfs.org/sioc/ns#has_function", false),
	    new URIImpl("http://rdfs.org/sioc/ns#id", false),
	    new URIImpl("http://rdfs.org/sioc/ns#last_activity_date", false),
	    new URIImpl("http://rdfs.org/sioc/ns#last_reply_date", false),
	    new URIImpl("http://rdfs.org/sioc/ns#links_to", false),
	    new URIImpl("http://rdfs.org/sioc/ns#name", false),
	    new URIImpl("http://rdfs.org/sioc/ns#note", false),
	    new URIImpl("http://rdfs.org/sioc/ns#num_authors", false),
	    new URIImpl("http://rdfs.org/sioc/ns#num_replies", false),
	    new URIImpl("http://rdfs.org/sioc/ns#num_views", false),
	    new URIImpl("http://rdfs.org/sioc/ns#has_owner", false),
	    new URIImpl("http://rdfs.org/sioc/ns#related_to", false),
	    new URIImpl("http://rdfs.org/sioc/ns#scope_of", false),
	    new URIImpl("http://rdfs.org/sioc/ns#has_space", false),
	    new URIImpl("http://rdfs.org/sioc/ns#topic", false) };

    // protected constructors needed for inheritance

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.semweb4j.org
     * @param classURI
     *            URI of RDFS class
     * @param instanceIdentifier
     *            Resource that identifies this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c1]
     */
    protected Thing(Model model, URI classURI,
	    org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
	    boolean write) {
	super(model, classURI, instanceIdentifier, write);
    }

    // public constructors

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param instanceIdentifier
     *            an RDF2Go Resource identifying this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c2]
     */
    public Thing(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
	    boolean write) {
	super(model, RDFS_CLASS, instanceIdentifier, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a URI, given as
     * a String. Creating two wrappers for the same URI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param uriString
     *            a URI given as a String
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * @throws ModelRuntimeException
     *             if URI syntax is wrong
     * 
     *             [Generated from RDFReactor template rule #c7]
     */
    public Thing(Model model, String uriString, boolean write)
	    throws ModelRuntimeException {
	super(model, RDFS_CLASS, new URIImpl(uriString, false), write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a blank node.
     * Creating two wrappers for the same blank node is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param bnode
     *            BlankNode of this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c8]
     */
    public Thing(Model model, BlankNode bnode, boolean write) {
	super(model, RDFS_CLASS, bnode, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a randomly
     * generated URI. Creating two wrappers results in different URIs.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c9]
     */
    public Thing(Model model, boolean write) {
	super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
    }

    // /////////////////////////////////////////////////////////////////
    // typing

    /**
     * Return an existing instance of this class in the model. No statements are
     * written.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return an instance of Thing or null if none existst
     * 
     *         [Generated from RDFReactor template rule #class0]
     */
    public static Thing getInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getInstance(model, instanceResource, Thing.class);
    }

    /**
     * Create a new instance of this class in the model. That is, create the
     * statement (instanceResource, RDF.type,
     * http://www.w3.org/2000/01/rdf-schema#Class).
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class1]
     */
    public static void createInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.createInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return true if instanceResource is an instance of this class in the
     *         model
     * 
     *         [Generated from RDFReactor template rule #class2]
     */
    public static boolean hasInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.hasInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @return all instances of this class in Model 'model' as RDF resources
     * 
     *         [Generated from RDFReactor template rule #class3]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(
	    Model model) {
	return Base.getAllInstances(model, RDFS_CLASS,
		org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * Remove rdf:type Thing from this instance. Other triples are not affected.
     * To delete more, use deleteAllProperties
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class4]
     */
    public static void deleteInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.deleteInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * Delete all (this, *, *), i.e. including rdf:type
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     */
    public static void deleteAllProperties(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.deleteAllProperties(model, instanceResource);
    }

    // /////////////////////////////////////////////////////////////////
    // property access methods

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'HasPart' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHasPart_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Thing.HASPART, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'HasPart' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllHasPart_Inverse() {
	return Base.getAll_Inverse(this.model, Thing.HASPART,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'IsPartOf' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIsPartOf_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Thing.ISPARTOF, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'IsPartOf' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllIsPartOf_Inverse() {
	return Base.getAll_Inverse(this.model, Thing.ISPARTOF,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Date' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDatess_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Thing.DATE, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Date' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDatess_Inverse() {
	return Base.getAll_Inverse(this.model, Thing.DATE,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Description' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDescriptionss_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Thing.DESCRIPTION, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Description' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDescriptionss_Inverse() {
	return Base.getAll_Inverse(this.model, Thing.DESCRIPTION,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'LinksTo' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLinksTo_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Thing.LINKSTO, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'LinksTo' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllLinksTo_Inverse() {
	return Base.getAll_Inverse(this.model, Thing.LINKSTO,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'References' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllReferences_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Thing.REFERENCES, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'References' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllReferences_Inverse() {
	return Base.getAll_Inverse(this.model, Thing.REFERENCES,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'RelatedTo' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRelatedTo_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Thing.RELATEDTO, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'RelatedTo' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllRelatedTo_Inverse() {
	return Base.getAll_Inverse(this.model, Thing.RELATEDTO,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Subject' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSubjects_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Thing.SUBJECT, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Subject' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSubjects_Inverse() {
	return Base.getAll_Inverse(this.model, Thing.SUBJECT,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Title' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTitles_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Thing.TITLE, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Title' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTitles_Inverse() {
	return Base.getAll_Inverse(this.model, Thing.TITLE,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Topic' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTopics_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Thing.TOPIC, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Topic' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllTopics_Inverse() {
	return Base.getAll_Inverse(this.model, Thing.TOPIC,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Functionof' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFunctionsOf_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Role.FUNCTIONOF, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Functionof' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFunctionsOf_Inverse() {
	return Base.getAll_Inverse(this.model, Role.FUNCTIONOF,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Scope' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllScopes_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Role.SCOPE, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Scope' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllScopes_Inverse() {
	return Base.getAll_Inverse(this.model, Role.SCOPE, this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'About' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAbout_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Item.ABOUT, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'About' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAbout_Inverse() {
	return Base.getAll_Inverse(this.model, Item.ABOUT, this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Addressedto' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAddressedTo_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Item.ADDRESSEDTO, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Addressedto' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAddressedTo_Inverse() {
	return Base.getAll_Inverse(this.model, Item.ADDRESSEDTO,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Attachment' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAttachments_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Item.ATTACHMENT, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Attachment' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAttachments_Inverse() {
	return Base.getAll_Inverse(this.model, Item.ATTACHMENT,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Discussion' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDiscussions_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Item.DISCUSSION, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Discussion' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllDiscussions_Inverse() {
	return Base.getAll_Inverse(this.model, Item.DISCUSSION,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Avatar' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAvatars_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, UserAccount.AVATAR, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Avatar' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAvatars_Inverse() {
	return Base.getAll_Inverse(this.model, UserAccount.AVATAR,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Creatorof' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCreatorsOf_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, UserAccount.CREATOROF, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Creatorof' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCreatorsOf_Inverse() {
	return Base.getAll_Inverse(this.model, UserAccount.CREATOROF,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Email' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEmails_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, UserAccount.EMAIL, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Email' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllEmails_Inverse() {
	return Base.getAll_Inverse(this.model, UserAccount.EMAIL,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Ownerof' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOwnerOf_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, UserAccount.OWNEROF, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Ownerof' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOwnerOf_Inverse() {
	return Base.getAll_Inverse(this.model, UserAccount.OWNEROF,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Spaceof' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSpaceOf_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Space.SPACEOF, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Spaceof' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSpaceOf_Inverse() {
	return Base.getAll_Inverse(this.model, Space.SPACEOF,
		this.getResource());
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3a7b4d34 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasCreators(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, CREATOR);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3a7b4d34 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasCreators() {
	return Base.has(this.model, this.getResource(), CREATOR);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3a7b4d34 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasCreator(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, CREATOR, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3a7b4d34 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasCreator(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), CREATOR, value);
    }

    /**
     * Get all values of property Creator as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCreators_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, CREATOR);
    }

    /**
     * Get all values of property Creator as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCreators_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), CREATOR);
    }

    /**
     * Get all values of property Creator * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<UserAccount> getAllCreators(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, CREATOR, UserAccount.class);
    }

    /**
     * Get all values of property Creator * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<UserAccount> getAllCreators() {
	return Base.getAll(this.model, this.getResource(), CREATOR,
		UserAccount.class);
    }

    /**
     * Get value of property Creator as a UserAccount
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public UserAccount getCreator() {
	return Base.getAll_as(this.model, this.getResource(), CREATOR,
		UserAccount.class).firstValue();
    }

    /**
     * Adds a value to property Creator as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addCreator(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, CREATOR, value);
    }

    /**
     * Adds a value to property Creator as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addCreator(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), CREATOR, value);
    }

    /**
     * Adds a value to property Creator from an instance of UserAccount
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addCreator(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    UserAccount value) {
	Base.add(model, instanceResource, CREATOR, value);
    }

    /**
     * Adds a value to property Creator from an instance of UserAccount
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addCreator(UserAccount value) {
	Base.add(this.model, this.getResource(), CREATOR, value);
    }

    /**
     * Sets a value of property Creator from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setCreator(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, CREATOR, value);
    }

    /**
     * Sets a value of property Creator from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setCreator(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), CREATOR, value);
    }

    /**
     * Sets a value of property Creator from an instance of UserAccount First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setCreator(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    UserAccount value) {
	Base.set(model, instanceResource, CREATOR, value);
    }

    /**
     * Sets a value of property Creator from an instance of UserAccount First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setCreator(UserAccount value) {
	Base.set(this.model, this.getResource(), CREATOR, value);
    }

    /**
     * Removes a value of property Creator as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeCreator(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, CREATOR, value);
    }

    /**
     * Removes a value of property Creator as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeCreator(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), CREATOR, value);
    }

    /**
     * Removes a value of property Creator given as an instance of UserAccount
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeCreator(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    UserAccount value) {
	Base.remove(model, instanceResource, CREATOR, value);
    }

    /**
     * Removes a value of property Creator given as an instance of UserAccount
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeCreator(UserAccount value) {
	Base.remove(this.model, this.getResource(), CREATOR, value);
    }

    /**
     * Removes all values of property Creator * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllCreators(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, CREATOR);
    }

    /**
     * Removes all values of property Creator * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllCreators() {
	Base.removeAll(this.model, this.getResource(), CREATOR);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389aee72 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasDates(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, DATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389aee72 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasDates() {
	return Base.has(this.model, this.getResource(), DATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389aee72 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, DATE, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389aee72 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasDate(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), DATE, value);
    }

    /**
     * Get all values of property Date as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDates_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, DATE);
    }

    /**
     * Get all values of property Date as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDates_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), DATE);
    }

    /**
     * Get all values of property Date * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<String> getAllDates(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, DATE, String.class);
    }

    /**
     * Get all values of property Date * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<String> getAllDates() {
	return Base.getAll(this.model, this.getResource(), DATE, String.class);
    }

    /**
     * Get value of property Date as a String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getDate() {
	return Base.getAll_as(this.model, this.getResource(), DATE,
		String.class).firstValue();
    }

    /**
     * Adds a value to property Date as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, DATE, value);
    }

    /**
     * Adds a value to property Date as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addDate(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), DATE, value);
    }

    /**
     * Adds a value to property Date from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	Base.add(model, instanceResource, DATE, value);
    }

    /**
     * Adds a value to property Date from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addDate(String value) {
	Base.add(this.model, this.getResource(), DATE, value);
    }

    /**
     * Sets a value of property Date from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, DATE, value);
    }

    /**
     * Sets a value of property Date from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setDate(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), DATE, value);
    }

    /**
     * Sets a value of property Date from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	Base.set(model, instanceResource, DATE, value);
    }

    /**
     * Sets a value of property Date from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setDate(String value) {
	Base.set(this.model, this.getResource(), DATE, value);
    }

    /**
     * Removes a value of property Date as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, DATE, value);
    }

    /**
     * Removes a value of property Date as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeDate(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), DATE, value);
    }

    /**
     * Removes a value of property Date given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	Base.remove(model, instanceResource, DATE, value);
    }

    /**
     * Removes a value of property Date given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeDate(Thing value) {
	Base.remove(this.model, this.getResource(), DATE, value);
    }

    /**
     * Removes all values of property Date * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllDates(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, DATE);
    }

    /**
     * Removes all values of property Date * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllDates() {
	Base.removeAll(this.model, this.getResource(), DATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d41b16b has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasDescriptions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, DESCRIPTION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d41b16b has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasDescriptions() {
	return Base.has(this.model, this.getResource(), DESCRIPTION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d41b16b has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasDescription(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, DESCRIPTION, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d41b16b has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasDescription(org.ontoware.rdf2go.model.node.Node value) {
	return Base
		.hasValue(this.model, this.getResource(), DESCRIPTION, value);
    }

    /**
     * Get all values of property Description as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDescriptions_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, DESCRIPTION);
    }

    /**
     * Get all values of property Description as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDescriptions_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), DESCRIPTION);
    }

    /**
     * Get all values of property Description * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<String> getAllDescriptions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, DESCRIPTION, String.class);
    }

    /**
     * Get all values of property Description * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<String> getAllDescriptions() {
	return Base.getAll(this.model, this.getResource(), DESCRIPTION,
		String.class);
    }

    /**
     * Get value of property Description as a String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     */
    public String getDescription() {
	return Base.getAll_as(this.model, this.getResource(), DESCRIPTION,
		String.class).firstValue();
    }

    /**
     * Adds a value to property Description as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addDescription(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, DESCRIPTION, value);
    }

    /**
     * Adds a value to property Description as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addDescription(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), DESCRIPTION, value);
    }

    /**
     * Adds a value to property Description from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addDescription(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	Base.add(model, instanceResource, DESCRIPTION, value);
    }

    /**
     * Adds a value to property Description from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addDescription(String value) {
	Base.add(this.model, this.getResource(), DESCRIPTION, value);
    }

    /**
     * Sets a value of property Description from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setDescription(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, DESCRIPTION, value);
    }

    /**
     * Sets a value of property Description from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setDescription(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), DESCRIPTION, value);
    }

    /**
     * Sets a value of property Description from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setDescription(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	Base.set(model, instanceResource, DESCRIPTION, value);
    }

    /**
     * Sets a value of property Description from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setDescription(String value) {
	Base.set(this.model, this.getResource(), DESCRIPTION, value);
    }

    /**
     * Removes a value of property Description as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeDescription(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, DESCRIPTION, value);
    }

    /**
     * Removes a value of property Description as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeDescription(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), DESCRIPTION, value);
    }

    /**
     * Removes a value of property Description given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeDescription(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.remove(model, instanceResource, DESCRIPTION, value);
    }

    /**
     * Removes a value of property Description given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeDescription(Thing value) {
	Base.remove(this.model, this.getResource(), DESCRIPTION, value);
    }

    /**
     * Removes all values of property Description * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllDescriptions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, DESCRIPTION);
    }

    /**
     * Removes all values of property Description * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllDescriptions() {
	Base.removeAll(this.model, this.getResource(), DESCRIPTION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a5dae04 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasFunctions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, FUNCTION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a5dae04 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasFunctions() {
	return Base.has(this.model, this.getResource(), FUNCTION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a5dae04 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasFunction(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, FUNCTION, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a5dae04 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasFunction(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), FUNCTION, value);
    }

    /**
     * Get all values of property Function as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFunctions_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, FUNCTION);
    }

    /**
     * Get all values of property Function as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFunctions_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), FUNCTION);
    }

    /**
     * Get all values of property Function * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Role> getAllFunctions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, FUNCTION, Role.class);
    }

    /**
     * Get all values of property Function * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Role> getAllFunctions() {
	return Base
		.getAll(this.model, this.getResource(), FUNCTION, Role.class);
    }

    /**
     * Get all values of property Function as a ReactorResult of Role
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Role getFunction() {
	return Base.getAll_as(this.model, this.getResource(), FUNCTION,
		Role.class).firstValue();
    }

    /**
     * Adds a value to property Function as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addFunction(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, FUNCTION, value);
    }

    /**
     * Adds a value to property Function as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addFunction(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), FUNCTION, value);
    }

    /**
     * Adds a value to property Function from an instance of Role
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addFunction(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Role value) {
	Base.add(model, instanceResource, FUNCTION, value);
    }

    /**
     * Adds a value to property Function from an instance of Role
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addFunction(Role value) {
	Base.add(this.model, this.getResource(), FUNCTION, value);
    }

    /**
     * Sets a value of property Function from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setFunction(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, FUNCTION, value);
    }

    /**
     * Sets a value of property Function from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setFunction(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), FUNCTION, value);
    }

    /**
     * Sets a value of property Function from an instance of Role First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setFunction(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Role value) {
	Base.set(model, instanceResource, FUNCTION, value);
    }

    /**
     * Sets a value of property Function from an instance of Role First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setFunction(Role value) {
	Base.set(this.model, this.getResource(), FUNCTION, value);
    }

    /**
     * Removes a value of property Function as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeFunction(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, FUNCTION, value);
    }

    /**
     * Removes a value of property Function as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeFunction(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), FUNCTION, value);
    }

    /**
     * Removes a value of property Function given as an instance of Role
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeFunction(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Role value) {
	Base.remove(model, instanceResource, FUNCTION, value);
    }

    /**
     * Removes a value of property Function given as an instance of Role
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeFunction(Role value) {
	Base.remove(this.model, this.getResource(), FUNCTION, value);
    }

    /**
     * Removes all values of property Function * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllFunctions(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, FUNCTION);
    }

    /**
     * Removes all values of property Function * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllFunctions() {
	Base.removeAll(this.model, this.getResource(), FUNCTION);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27cd61b has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasIds(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, ID);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27cd61b has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasIds() {
	return Base.has(this.model, this.getResource(), ID);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27cd61b has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasId(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, ID, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27cd61b has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasId(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), ID, value);
    }

    /**
     * Get all values of property Id as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIds_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, ID);
    }

    /**
     * Get all values of property Id as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIds_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), ID);
    }

    /**
     * Get all values of property Id * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllIds(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, ID, java.lang.String.class);
    }

    /**
     * Get all values of property Id * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllIds() {
	return Base.getAll(this.model, this.getResource(), ID,
		java.lang.String.class);
    }

    /**
     * Get all values of property Id as a ReactorResult of java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getId() {
	return Base.getAll_as(this.model, this.getResource(), ID,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property Id as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addId(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, ID, value);
    }

    /**
     * Adds a value to property Id as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addId(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), ID, value);
    }

    /**
     * Adds a value to property Id from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addId(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, ID, value);
    }

    /**
     * Adds a value to property Id from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addId(java.lang.String value) {
	Base.add(this.model, this.getResource(), ID, value);
    }

    /**
     * Sets a value of property Id from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setId(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, ID, value);
    }

    /**
     * Sets a value of property Id from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setId(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), ID, value);
    }

    /**
     * Sets a value of property Id from an instance of java.lang.String First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setId(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, ID, value);
    }

    /**
     * Sets a value of property Id from an instance of java.lang.String First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setId(java.lang.String value) {
	Base.set(this.model, this.getResource(), ID, value);
    }

    /**
     * Removes a value of property Id as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeId(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, ID, value);
    }

    /**
     * Removes a value of property Id as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeId(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), ID, value);
    }

    /**
     * Removes a value of property Id given as an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeId(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, ID, value);
    }

    /**
     * Removes a value of property Id given as an instance of java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeId(java.lang.String value) {
	Base.remove(this.model, this.getResource(), ID, value);
    }

    /**
     * Removes all values of property Id * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllIds(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, ID);
    }

    /**
     * Removes all values of property Id * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllIds() {
	Base.removeAll(this.model, this.getResource(), ID);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b223cc6 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasLastActivityDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, LASTACTIVITYDATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b223cc6 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasLastActivityDate() {
	return Base.has(this.model, this.getResource(), LASTACTIVITYDATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b223cc6 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasLastActivityDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, LASTACTIVITYDATE, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b223cc6 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasLastActivityDate(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), LASTACTIVITYDATE,
		value);
    }

    /**
     * Get all values of property LastActivityDate as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLastActivityDate_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, LASTACTIVITYDATE);
    }

    /**
     * Get all values of property LastActivityDate as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLastActivityDate_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(),
		LASTACTIVITYDATE);
    }

    /**
     * Get all values of property LastActivityDate * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllLastActivityDate(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, LASTACTIVITYDATE,
		java.lang.String.class);
    }

    /**
     * Get all values of property LastActivityDate * @return a ClosableIterator
     * of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllLastActivityDate() {
	return Base.getAll(this.model, this.getResource(), LASTACTIVITYDATE,
		java.lang.String.class);
    }

    /**
     * Get all values of property LastActivityDate as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getLastActivityDate() {
	return Base.getAll_as(this.model, this.getResource(), LASTACTIVITYDATE,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property LastActivityDate as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addLastActivityDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, LASTACTIVITYDATE, value);
    }

    /**
     * Adds a value to property LastActivityDate as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addLastActivityDate(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), LASTACTIVITYDATE, value);
    }

    /**
     * Adds a value to property LastActivityDate from an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addLastActivityDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, LASTACTIVITYDATE, value);
    }

    /**
     * Adds a value to property LastActivityDate from an instance of
     * java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addLastActivityDate(java.lang.String value) {
	Base.add(this.model, this.getResource(), LASTACTIVITYDATE, value);
    }

    /**
     * Sets a value of property LastActivityDate from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setLastActivityDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, LASTACTIVITYDATE, value);
    }

    /**
     * Sets a value of property LastActivityDate from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setLastActivityDate(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), LASTACTIVITYDATE, value);
    }

    /**
     * Sets a value of property LastActivityDate from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setLastActivityDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, LASTACTIVITYDATE, value);
    }

    /**
     * Sets a value of property LastActivityDate from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setLastActivityDate(java.lang.String value) {
	Base.set(this.model, this.getResource(), LASTACTIVITYDATE, value);
    }

    /**
     * Removes a value of property LastActivityDate as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeLastActivityDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, LASTACTIVITYDATE, value);
    }

    /**
     * Removes a value of property LastActivityDate as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeLastActivityDate(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), LASTACTIVITYDATE, value);
    }

    /**
     * Removes a value of property LastActivityDate given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeLastActivityDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, LASTACTIVITYDATE, value);
    }

    /**
     * Removes a value of property LastActivityDate given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeLastActivityDate(java.lang.String value) {
	Base.remove(this.model, this.getResource(), LASTACTIVITYDATE, value);
    }

    /**
     * Removes all values of property LastActivityDate * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllLastActivityDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, LASTACTIVITYDATE);
    }

    /**
     * Removes all values of property LastActivityDate * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllLastActivityDate() {
	Base.removeAll(this.model, this.getResource(), LASTACTIVITYDATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4721e1bb has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasLastReplyDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, LASTREPLYDATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4721e1bb has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasLastReplyDate() {
	return Base.has(this.model, this.getResource(), LASTREPLYDATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4721e1bb has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasLastReplyDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, LASTREPLYDATE, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4721e1bb has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasLastReplyDate(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), LASTREPLYDATE,
		value);
    }

    /**
     * Get all values of property LastReplyDate as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLastReplyDate_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, LASTREPLYDATE);
    }

    /**
     * Get all values of property LastReplyDate as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLastReplyDate_asNode() {
	return Base
		.getAll_asNode(this.model, this.getResource(), LASTREPLYDATE);
    }

    /**
     * Get all values of property LastReplyDate * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllLastReplyDate(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, LASTREPLYDATE,
		java.lang.String.class);
    }

    /**
     * Get all values of property LastReplyDate * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllLastReplyDate() {
	return Base.getAll(this.model, this.getResource(), LASTREPLYDATE,
		java.lang.String.class);
    }

    /**
     * Get all values of property LastReplyDate as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getLastReplyDate() {
	return Base.getAll_as(this.model, this.getResource(), LASTREPLYDATE,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property LastReplyDate as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addLastReplyDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, LASTREPLYDATE, value);
    }

    /**
     * Adds a value to property LastReplyDate as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addLastReplyDate(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), LASTREPLYDATE, value);
    }

    /**
     * Adds a value to property LastReplyDate from an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addLastReplyDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, LASTREPLYDATE, value);
    }

    /**
     * Adds a value to property LastReplyDate from an instance of
     * java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addLastReplyDate(java.lang.String value) {
	Base.add(this.model, this.getResource(), LASTREPLYDATE, value);
    }

    /**
     * Sets a value of property LastReplyDate from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setLastReplyDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, LASTREPLYDATE, value);
    }

    /**
     * Sets a value of property LastReplyDate from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setLastReplyDate(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), LASTREPLYDATE, value);
    }

    /**
     * Sets a value of property LastReplyDate from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setLastReplyDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, LASTREPLYDATE, value);
    }

    /**
     * Sets a value of property LastReplyDate from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setLastReplyDate(java.lang.String value) {
	Base.set(this.model, this.getResource(), LASTREPLYDATE, value);
    }

    /**
     * Removes a value of property LastReplyDate as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeLastReplyDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, LASTREPLYDATE, value);
    }

    /**
     * Removes a value of property LastReplyDate as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeLastReplyDate(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), LASTREPLYDATE, value);
    }

    /**
     * Removes a value of property LastReplyDate given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeLastReplyDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, LASTREPLYDATE, value);
    }

    /**
     * Removes a value of property LastReplyDate given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeLastReplyDate(java.lang.String value) {
	Base.remove(this.model, this.getResource(), LASTREPLYDATE, value);
    }

    /**
     * Removes all values of property LastReplyDate * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllLastReplyDate(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, LASTREPLYDATE);
    }

    /**
     * Removes all values of property LastReplyDate * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllLastReplyDate() {
	Base.removeAll(this.model, this.getResource(), LASTREPLYDATE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3764253e has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasLinksTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, LINKSTO);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3764253e has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasLinksTo() {
	return Base.has(this.model, this.getResource(), LINKSTO);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3764253e has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasLinksTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, LINKSTO, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3764253e has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasLinksTo(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), LINKSTO, value);
    }

    /**
     * Get all values of property LinksTo as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLinksTo_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, LINKSTO);
    }

    /**
     * Get all values of property LinksTo as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllLinksTo_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), LINKSTO);
    }

    /**
     * Get all values of property LinksTo * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllLinksTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, LINKSTO, Thing.class);
    }

    /**
     * Get all values of property LinksTo * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllLinksTo() {
	return Base.getAll(this.model, this.getResource(), LINKSTO,
		Thing.class);
    }

    /**
     * Get all values of property LinksTo as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Thing getLinksTo() {
	return Base.getAll_as(this.model, this.getResource(), LINKSTO,
		Thing.class).firstValue();
    }

    /**
     * Adds a value to property LinksTo as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addLinksTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, LINKSTO, value);
    }

    /**
     * Adds a value to property LinksTo as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addLinksTo(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), LINKSTO, value);
    }

    /**
     * Adds a value to property LinksTo from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addLinksTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.add(model, instanceResource, LINKSTO, value);
    }

    /**
     * Adds a value to property LinksTo from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addLinksTo(Thing value) {
	Base.add(this.model, this.getResource(), LINKSTO, value);
    }

    /**
     * Sets a value of property LinksTo from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setLinksTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, LINKSTO, value);
    }

    /**
     * Sets a value of property LinksTo from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setLinksTo(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), LINKSTO, value);
    }

    /**
     * Sets a value of property LinksTo from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setLinksTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.set(model, instanceResource, LINKSTO, value);
    }

    /**
     * Sets a value of property LinksTo from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setLinksTo(Thing value) {
	Base.set(this.model, this.getResource(), LINKSTO, value);
    }

    /**
     * Removes a value of property LinksTo as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeLinksTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, LINKSTO, value);
    }

    /**
     * Removes a value of property LinksTo as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeLinksTo(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), LINKSTO, value);
    }

    /**
     * Removes a value of property LinksTo given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeLinksTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.remove(model, instanceResource, LINKSTO, value);
    }

    /**
     * Removes a value of property LinksTo given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeLinksTo(Thing value) {
	Base.remove(this.model, this.getResource(), LINKSTO, value);
    }

    /**
     * Removes all values of property LinksTo * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllLinksTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, LINKSTO);
    }

    /**
     * Removes all values of property LinksTo * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllLinksTo() {
	Base.removeAll(this.model, this.getResource(), LINKSTO);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c53a57a has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, _NAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c53a57a has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasName() {
	return Base.has(this.model, this.getResource(), _NAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c53a57a has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, _NAME, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c53a57a has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasName(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), _NAME, value);
    }

    /**
     * Get all values of property Name as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllName_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, _NAME);
    }

    /**
     * Get all values of property Name as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllName_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), _NAME);
    }

    /**
     * Get all values of property Name * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, _NAME,
		java.lang.String.class);
    }

    /**
     * Get all values of property Name * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllName() {
	return Base.getAll(this.model, this.getResource(), _NAME,
		java.lang.String.class);
    }

    /**
     * Get all values of property Name as a ReactorResult of java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getName() {
	return Base.getAll_as(this.model, this.getResource(), _NAME,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property Name as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, _NAME, value);
    }

    /**
     * Adds a value to property Name as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addName(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), _NAME, value);
    }

    /**
     * Adds a value to property Name from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, _NAME, value);
    }

    /**
     * Adds a value to property Name from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addName(java.lang.String value) {
	Base.add(this.model, this.getResource(), _NAME, value);
    }

    /**
     * Sets a value of property Name from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, _NAME, value);
    }

    /**
     * Sets a value of property Name from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setName(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), _NAME, value);
    }

    /**
     * Sets a value of property Name from an instance of java.lang.String First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, _NAME, value);
    }

    /**
     * Sets a value of property Name from an instance of java.lang.String First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setName(java.lang.String value) {
	Base.set(this.model, this.getResource(), _NAME, value);
    }

    /**
     * Removes a value of property Name as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, _NAME, value);
    }

    /**
     * Removes a value of property Name as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeName(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), _NAME, value);
    }

    /**
     * Removes a value of property Name given as an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, _NAME, value);
    }

    /**
     * Removes a value of property Name given as an instance of java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeName(java.lang.String value) {
	Base.remove(this.model, this.getResource(), _NAME, value);
    }

    /**
     * Removes all values of property Name * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, _NAME);
    }

    /**
     * Removes all values of property Name * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllName() {
	Base.removeAll(this.model, this.getResource(), _NAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4e9fd887 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNote(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, NOTE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4e9fd887 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNote() {
	return Base.has(this.model, this.getResource(), NOTE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4e9fd887 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNote(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, NOTE, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4e9fd887 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNote(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), NOTE, value);
    }

    /**
     * Get all values of property Note as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNote_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, NOTE);
    }

    /**
     * Get all values of property Note as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNote_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), NOTE);
    }

    /**
     * Get all values of property Note * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllNote(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, NOTE,
		java.lang.String.class);
    }

    /**
     * Get all values of property Note * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllNote() {
	return Base.getAll(this.model, this.getResource(), NOTE,
		java.lang.String.class);
    }

    /**
     * Get all values of property Note as a ReactorResult of java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getNote() {
	return Base.getAll_as(this.model, this.getResource(), NOTE,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property Note as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNote(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, NOTE, value);
    }

    /**
     * Adds a value to property Note as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNote(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), NOTE, value);
    }

    /**
     * Adds a value to property Note from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNote(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, NOTE, value);
    }

    /**
     * Adds a value to property Note from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNote(java.lang.String value) {
	Base.add(this.model, this.getResource(), NOTE, value);
    }

    /**
     * Sets a value of property Note from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNote(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, NOTE, value);
    }

    /**
     * Sets a value of property Note from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNote(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), NOTE, value);
    }

    /**
     * Sets a value of property Note from an instance of java.lang.String First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNote(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, NOTE, value);
    }

    /**
     * Sets a value of property Note from an instance of java.lang.String First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNote(java.lang.String value) {
	Base.set(this.model, this.getResource(), NOTE, value);
    }

    /**
     * Removes a value of property Note as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNote(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, NOTE, value);
    }

    /**
     * Removes a value of property Note as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNote(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), NOTE, value);
    }

    /**
     * Removes a value of property Note given as an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNote(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, NOTE, value);
    }

    /**
     * Removes a value of property Note given as an instance of java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNote(java.lang.String value) {
	Base.remove(this.model, this.getResource(), NOTE, value);
    }

    /**
     * Removes all values of property Note * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNote(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, NOTE);
    }

    /**
     * Removes all values of property Note * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllNote() {
	Base.removeAll(this.model, this.getResource(), NOTE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14be60b has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNumAuthors(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, NUMAUTHORS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14be60b has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNumAuthors() {
	return Base.has(this.model, this.getResource(), NUMAUTHORS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14be60b has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNumAuthors(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, NUMAUTHORS, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14be60b has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNumAuthors(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), NUMAUTHORS, value);
    }

    /**
     * Get all values of property NumAuthors as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNumAuthors_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, NUMAUTHORS);
    }

    /**
     * Get all values of property NumAuthors as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNumAuthors_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), NUMAUTHORS);
    }

    /**
     * Get all values of property NumAuthors * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.Integer> getAllNumAuthors(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, NUMAUTHORS,
		java.lang.Integer.class);
    }

    /**
     * Get all values of property NumAuthors * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.Integer> getAllNumAuthors() {
	return Base.getAll(this.model, this.getResource(), NUMAUTHORS,
		java.lang.Integer.class);
    }

    /**
     * Get all values of property NumAuthors as a ReactorResult of
     * java.lang.Integer
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Integer getNumAuthors() {
	return Base.getAll_as(this.model, this.getResource(), NUMAUTHORS,
		java.lang.Integer.class).firstValue();
    }

    /**
     * Adds a value to property NumAuthors as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNumAuthors(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, NUMAUTHORS, value);
    }

    /**
     * Adds a value to property NumAuthors as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNumAuthors(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), NUMAUTHORS, value);
    }

    /**
     * Adds a value to property NumAuthors from an instance of java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNumAuthors(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.Integer value) {
	Base.add(model, instanceResource, NUMAUTHORS, value);
    }

    /**
     * Adds a value to property NumAuthors from an instance of java.lang.Integer
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNumAuthors(java.lang.Integer value) {
	Base.add(this.model, this.getResource(), NUMAUTHORS, value);
    }

    /**
     * Sets a value of property NumAuthors from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNumAuthors(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, NUMAUTHORS, value);
    }

    /**
     * Sets a value of property NumAuthors from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNumAuthors(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), NUMAUTHORS, value);
    }

    /**
     * Sets a value of property NumAuthors from an instance of java.lang.Integer
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNumAuthors(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.Integer value) {
	Base.set(model, instanceResource, NUMAUTHORS, value);
    }

    /**
     * Sets a value of property NumAuthors from an instance of java.lang.Integer
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNumAuthors(java.lang.Integer value) {
	Base.set(this.model, this.getResource(), NUMAUTHORS, value);
    }

    /**
     * Removes a value of property NumAuthors as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNumAuthors(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, NUMAUTHORS, value);
    }

    /**
     * Removes a value of property NumAuthors as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNumAuthors(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), NUMAUTHORS, value);
    }

    /**
     * Removes a value of property NumAuthors given as an instance of
     * java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNumAuthors(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.Integer value) {
	Base.remove(model, instanceResource, NUMAUTHORS, value);
    }

    /**
     * Removes a value of property NumAuthors given as an instance of
     * java.lang.Integer
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNumAuthors(java.lang.Integer value) {
	Base.remove(this.model, this.getResource(), NUMAUTHORS, value);
    }

    /**
     * Removes all values of property NumAuthors * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNumAuthors(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, NUMAUTHORS);
    }

    /**
     * Removes all values of property NumAuthors * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNumAuthors() {
	Base.removeAll(this.model, this.getResource(), NUMAUTHORS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@452d9a56 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNumReplies(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, NUMREPLIES);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@452d9a56 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNumReplies() {
	return Base.has(this.model, this.getResource(), NUMREPLIES);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@452d9a56 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNumReplies(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, NUMREPLIES, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@452d9a56 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNumReplies(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), NUMREPLIES, value);
    }

    /**
     * Get all values of property NumReplies as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNumReplies_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, NUMREPLIES);
    }

    /**
     * Get all values of property NumReplies as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNumReplies_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), NUMREPLIES);
    }

    /**
     * Get all values of property NumReplies * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.Integer> getAllNumReplies(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, NUMREPLIES,
		java.lang.Integer.class);
    }

    /**
     * Get all values of property NumReplies * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.Integer> getAllNumReplies() {
	return Base.getAll(this.model, this.getResource(), NUMREPLIES,
		java.lang.Integer.class);
    }

    /**
     * Get all values of property NumReplies as a ReactorResult of
     * java.lang.Integer
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public java.lang.Integer getNumReplies() {
	return Base.getAll_as(this.model, this.getResource(), NUMREPLIES,
		java.lang.Integer.class).firstValue();
    }

    /**
     * Adds a value to property NumReplies as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNumReplies(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, NUMREPLIES, value);
    }

    /**
     * Adds a value to property NumReplies as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNumReplies(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), NUMREPLIES, value);
    }

    /**
     * Adds a value to property NumReplies from an instance of java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNumReplies(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.Integer value) {
	Base.add(model, instanceResource, NUMREPLIES, value);
    }

    /**
     * Adds a value to property NumReplies from an instance of java.lang.Integer
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNumReplies(java.lang.Integer value) {
	Base.add(this.model, this.getResource(), NUMREPLIES, value);
    }

    /**
     * Sets a value of property NumReplies from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNumReplies(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, NUMREPLIES, value);
    }

    /**
     * Sets a value of property NumReplies from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNumReplies(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), NUMREPLIES, value);
    }

    /**
     * Sets a value of property NumReplies from an instance of java.lang.Integer
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNumReplies(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.Integer value) {
	Base.set(model, instanceResource, NUMREPLIES, value);
    }

    /**
     * Sets a value of property NumReplies from an instance of java.lang.Integer
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNumReplies(java.lang.Integer value) {
	Base.set(this.model, this.getResource(), NUMREPLIES, value);
    }

    /**
     * Removes a value of property NumReplies as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNumReplies(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, NUMREPLIES, value);
    }

    /**
     * Removes a value of property NumReplies as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNumReplies(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), NUMREPLIES, value);
    }

    /**
     * Removes a value of property NumReplies given as an instance of
     * java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNumReplies(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.Integer value) {
	Base.remove(model, instanceResource, NUMREPLIES, value);
    }

    /**
     * Removes a value of property NumReplies given as an instance of
     * java.lang.Integer
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNumReplies(java.lang.Integer value) {
	Base.remove(this.model, this.getResource(), NUMREPLIES, value);
    }

    /**
     * Removes all values of property NumReplies * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNumReplies(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, NUMREPLIES);
    }

    /**
     * Removes all values of property NumReplies * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNumReplies() {
	Base.removeAll(this.model, this.getResource(), NUMREPLIES);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61d7f705 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNumViews(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, NUMVIEWS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61d7f705 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNumViews() {
	return Base.has(this.model, this.getResource(), NUMVIEWS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61d7f705 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNumViews(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, NUMVIEWS, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61d7f705 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNumViews(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), NUMVIEWS, value);
    }

    /**
     * Get all values of property NumViews as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNumViews_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, NUMVIEWS);
    }

    /**
     * Get all values of property NumViews as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllNumViews_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), NUMVIEWS);
    }

    /**
     * Get all values of property NumViews * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.Integer> getAllNumViews(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, NUMVIEWS,
		java.lang.Integer.class);
    }

    /**
     * Get all values of property NumViews * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.Integer> getAllNumViews() {
	return Base.getAll(this.model, this.getResource(), NUMVIEWS,
		java.lang.Integer.class);
    }

    /**
     * Get all values of property NumViews as a ReactorResult of
     * java.lang.Integer
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Integer getNumViews() {
	return Base.getAll_as(this.model, this.getResource(), NUMVIEWS,
		java.lang.Integer.class).firstValue();
    }

    /**
     * Adds a value to property NumViews as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNumViews(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, NUMVIEWS, value);
    }

    /**
     * Adds a value to property NumViews as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNumViews(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), NUMVIEWS, value);
    }

    /**
     * Adds a value to property NumViews from an instance of java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNumViews(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.Integer value) {
	Base.add(model, instanceResource, NUMVIEWS, value);
    }

    /**
     * Adds a value to property NumViews from an instance of java.lang.Integer
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNumViews(java.lang.Integer value) {
	Base.add(this.model, this.getResource(), NUMVIEWS, value);
    }

    /**
     * Sets a value of property NumViews from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNumViews(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, NUMVIEWS, value);
    }

    /**
     * Sets a value of property NumViews from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNumViews(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), NUMVIEWS, value);
    }

    /**
     * Sets a value of property NumViews from an instance of java.lang.Integer
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNumViews(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.Integer value) {
	Base.set(model, instanceResource, NUMVIEWS, value);
    }

    /**
     * Sets a value of property NumViews from an instance of java.lang.Integer
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNumViews(java.lang.Integer value) {
	Base.set(this.model, this.getResource(), NUMVIEWS, value);
    }

    /**
     * Removes a value of property NumViews as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNumViews(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, NUMVIEWS, value);
    }

    /**
     * Removes a value of property NumViews as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNumViews(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), NUMVIEWS, value);
    }

    /**
     * Removes a value of property NumViews given as an instance of
     * java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNumViews(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.Integer value) {
	Base.remove(model, instanceResource, NUMVIEWS, value);
    }

    /**
     * Removes a value of property NumViews given as an instance of
     * java.lang.Integer
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNumViews(java.lang.Integer value) {
	Base.remove(this.model, this.getResource(), NUMVIEWS, value);
    }

    /**
     * Removes all values of property NumViews * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNumViews(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, NUMVIEWS);
    }

    /**
     * Removes all values of property NumViews * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNumViews() {
	Base.removeAll(this.model, this.getResource(), NUMVIEWS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@759bade4 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasOwner(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, OWNER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@759bade4 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasOwner() {
	return Base.has(this.model, this.getResource(), OWNER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@759bade4 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasOwner(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, OWNER, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@759bade4 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasOwner(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), OWNER, value);
    }

    /**
     * Get all values of property Owner as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOwner_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, OWNER);
    }

    /**
     * Get all values of property Owner as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOwner_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), OWNER);
    }

    /**
     * Get all values of property Owner * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<UserAccount> getAllOwner(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, OWNER, UserAccount.class);
    }

    /**
     * Get all values of property Owner * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<UserAccount> getAllOwner() {
	return Base.getAll(this.model, this.getResource(), OWNER,
		UserAccount.class);
    }

    /**
     * Get all values of property Owner as a ReactorResult of UserAccount
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public UserAccount getOwner() {
	return Base.getAll_as(this.model, this.getResource(), OWNER,
		UserAccount.class).firstValue();
    }

    /**
     * Adds a value to property Owner as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addOwner(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, OWNER, value);
    }

    /**
     * Adds a value to property Owner as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addOwner(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), OWNER, value);
    }

    /**
     * Adds a value to property Owner from an instance of UserAccount
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addOwner(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    UserAccount value) {
	Base.add(model, instanceResource, OWNER, value);
    }

    /**
     * Adds a value to property Owner from an instance of UserAccount
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addOwner(UserAccount value) {
	Base.add(this.model, this.getResource(), OWNER, value);
    }

    /**
     * Sets a value of property Owner from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setOwner(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, OWNER, value);
    }

    /**
     * Sets a value of property Owner from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setOwner(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), OWNER, value);
    }

    /**
     * Sets a value of property Owner from an instance of UserAccount First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setOwner(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    UserAccount value) {
	Base.set(model, instanceResource, OWNER, value);
    }

    /**
     * Sets a value of property Owner from an instance of UserAccount First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setOwner(UserAccount value) {
	Base.set(this.model, this.getResource(), OWNER, value);
    }

    /**
     * Removes a value of property Owner as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeOwner(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, OWNER, value);
    }

    /**
     * Removes a value of property Owner as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeOwner(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), OWNER, value);
    }

    /**
     * Removes a value of property Owner given as an instance of UserAccount
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeOwner(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    UserAccount value) {
	Base.remove(model, instanceResource, OWNER, value);
    }

    /**
     * Removes a value of property Owner given as an instance of UserAccount
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeOwner(UserAccount value) {
	Base.remove(this.model, this.getResource(), OWNER, value);
    }

    /**
     * Removes all values of property Owner * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllOwner(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, OWNER);
    }

    /**
     * Removes all values of property Owner * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllOwner() {
	Base.removeAll(this.model, this.getResource(), OWNER);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b01812b has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasReferences(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, REFERENCES);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b01812b has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasReferences() {
	return Base.has(this.model, this.getResource(), REFERENCES);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b01812b has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasReferences(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, REFERENCES, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b01812b has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasReferences(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), REFERENCES, value);
    }

    /**
     * Get all values of property References as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllReferences_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, REFERENCES);
    }

    /**
     * Get all values of property References as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllReferences_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), REFERENCES);
    }

    /**
     * Get all values of property References * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllReferences(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base
		.getAll(model, instanceResource, REFERENCES, Thing.class);
    }

    /**
     * Get all values of property References * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllReferences() {
	return Base.getAll(this.model, this.getResource(), REFERENCES,
		Thing.class);
    }

    /**
     * Get all values of property References as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Thing getReferences() {
	return Base.getAll_as(this.model, this.getResource(), REFERENCES,
		Thing.class).firstValue();
    }

    /**
     * Adds a value to property References as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addReferences(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, REFERENCES, value);
    }

    /**
     * Adds a value to property References as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addReferences(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), REFERENCES, value);
    }

    /**
     * Adds a value to property References from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addReferences(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.add(model, instanceResource, REFERENCES, value);
    }

    /**
     * Adds a value to property References from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addReferences(Thing value) {
	Base.add(this.model, this.getResource(), REFERENCES, value);
    }

    /**
     * Sets a value of property References from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setReferences(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, REFERENCES, value);
    }

    /**
     * Sets a value of property References from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setReferences(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), REFERENCES, value);
    }

    /**
     * Sets a value of property References from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setReferences(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.set(model, instanceResource, REFERENCES, value);
    }

    /**
     * Sets a value of property References from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setReferences(Thing value) {
	Base.set(this.model, this.getResource(), REFERENCES, value);
    }

    /**
     * Removes a value of property References as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeReferences(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, REFERENCES, value);
    }

    /**
     * Removes a value of property References as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeReferences(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), REFERENCES, value);
    }

    /**
     * Removes a value of property References given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeReferences(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.remove(model, instanceResource, REFERENCES, value);
    }

    /**
     * Removes a value of property References given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeReferences(Thing value) {
	Base.remove(this.model, this.getResource(), REFERENCES, value);
    }

    /**
     * Removes all values of property References * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllReferences(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, REFERENCES);
    }

    /**
     * Removes all values of property References * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllReferences() {
	Base.removeAll(this.model, this.getResource(), REFERENCES);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@194e65cf has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasRelatedTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, RELATEDTO);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@194e65cf has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasRelatedTo() {
	return Base.has(this.model, this.getResource(), RELATEDTO);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@194e65cf has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasRelatedTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, RELATEDTO, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@194e65cf has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasRelatedTo(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), RELATEDTO, value);
    }

    /**
     * Get all values of property RelatedTo as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRelatedTo_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, RELATEDTO);
    }

    /**
     * Get all values of property RelatedTo as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllRelatedTo_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), RELATEDTO);
    }

    /**
     * Get all values of property RelatedTo * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllRelatedTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, RELATEDTO, Thing.class);
    }

    /**
     * Get all values of property RelatedTo * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllRelatedTo() {
	return Base.getAll(this.model, this.getResource(), RELATEDTO,
		Thing.class);
    }

    /**
     * Get all values of property RelatedTo as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Thing getRelatedTo() {
	return Base.getAll_as(this.model, this.getResource(), RELATEDTO,
		Thing.class).firstValue();
    }

    /**
     * Adds a value to property RelatedTo as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addRelatedTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, RELATEDTO, value);
    }

    /**
     * Adds a value to property RelatedTo as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addRelatedTo(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), RELATEDTO, value);
    }

    /**
     * Adds a value to property RelatedTo from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addRelatedTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.add(model, instanceResource, RELATEDTO, value);
    }

    /**
     * Adds a value to property RelatedTo from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addRelatedTo(Thing value) {
	Base.add(this.model, this.getResource(), RELATEDTO, value);
    }

    /**
     * Sets a value of property RelatedTo from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setRelatedTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, RELATEDTO, value);
    }

    /**
     * Sets a value of property RelatedTo from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setRelatedTo(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), RELATEDTO, value);
    }

    /**
     * Sets a value of property RelatedTo from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setRelatedTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.set(model, instanceResource, RELATEDTO, value);
    }

    /**
     * Sets a value of property RelatedTo from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setRelatedTo(Thing value) {
	Base.set(this.model, this.getResource(), RELATEDTO, value);
    }

    /**
     * Removes a value of property RelatedTo as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeRelatedTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, RELATEDTO, value);
    }

    /**
     * Removes a value of property RelatedTo as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeRelatedTo(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), RELATEDTO, value);
    }

    /**
     * Removes a value of property RelatedTo given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeRelatedTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.remove(model, instanceResource, RELATEDTO, value);
    }

    /**
     * Removes a value of property RelatedTo given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeRelatedTo(Thing value) {
	Base.remove(this.model, this.getResource(), RELATEDTO, value);
    }

    /**
     * Removes all values of property RelatedTo * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllRelatedTo(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, RELATEDTO);
    }

    /**
     * Removes all values of property RelatedTo * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllRelatedTo() {
	Base.removeAll(this.model, this.getResource(), RELATEDTO);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c7f8123 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasScopeOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, SCOPEOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c7f8123 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasScopeOf() {
	return Base.has(this.model, this.getResource(), SCOPEOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c7f8123 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasScopeOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, SCOPEOF, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c7f8123 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasScopeOf(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), SCOPEOF, value);
    }

    /**
     * Get all values of property ScopeOf as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllScopeOf_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, SCOPEOF);
    }

    /**
     * Get all values of property ScopeOf as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllScopeOf_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), SCOPEOF);
    }

    /**
     * Get all values of property ScopeOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Role> getAllScopeOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, SCOPEOF, Role.class);
    }

    /**
     * Get all values of property ScopeOf * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Role> getAllScopeOf() {
	return Base.getAll(this.model, this.getResource(), SCOPEOF, Role.class);
    }

    /**
     * Get all values of property ScopeOf as a ReactorResult of Role
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Role getScopeOf() {
	return Base.getAll_as(this.model, this.getResource(), SCOPEOF,
		Role.class).firstValue();
    }

    /**
     * Adds a value to property ScopeOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addScopeOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, SCOPEOF, value);
    }

    /**
     * Adds a value to property ScopeOf as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addScopeOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), SCOPEOF, value);
    }

    /**
     * Adds a value to property ScopeOf from an instance of Role
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addScopeOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Role value) {
	Base.add(model, instanceResource, SCOPEOF, value);
    }

    /**
     * Adds a value to property ScopeOf from an instance of Role
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addScopeOf(Role value) {
	Base.add(this.model, this.getResource(), SCOPEOF, value);
    }

    /**
     * Sets a value of property ScopeOf from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setScopeOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, SCOPEOF, value);
    }

    /**
     * Sets a value of property ScopeOf from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setScopeOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), SCOPEOF, value);
    }

    /**
     * Sets a value of property ScopeOf from an instance of Role First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setScopeOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Role value) {
	Base.set(model, instanceResource, SCOPEOF, value);
    }

    /**
     * Sets a value of property ScopeOf from an instance of Role First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setScopeOf(Role value) {
	Base.set(this.model, this.getResource(), SCOPEOF, value);
    }

    /**
     * Removes a value of property ScopeOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeScopeOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, SCOPEOF, value);
    }

    /**
     * Removes a value of property ScopeOf as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeScopeOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), SCOPEOF, value);
    }

    /**
     * Removes a value of property ScopeOf given as an instance of Role
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeScopeOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Role value) {
	Base.remove(model, instanceResource, SCOPEOF, value);
    }

    /**
     * Removes a value of property ScopeOf given as an instance of Role
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeScopeOf(Role value) {
	Base.remove(this.model, this.getResource(), SCOPEOF, value);
    }

    /**
     * Removes all values of property ScopeOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllScopeOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, SCOPEOF);
    }

    /**
     * Removes all values of property ScopeOf * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAlls() {
	Base.removeAll(this.model, this.getResource(), SCOPEOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e71f06c has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSpace(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, SPACE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e71f06c has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSpace() {
	return Base.has(this.model, this.getResource(), SPACE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e71f06c has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSpace(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, SPACE, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e71f06c has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasSpace(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), SPACE, value);
    }

    /**
     * Get all values of property Space as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSpace_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, SPACE);
    }

    /**
     * Get all values of property Space as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSpace_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), SPACE);
    }

    /**
     * Get all values of property Space * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Space> getAllSpace(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, SPACE, Space.class);
    }

    /**
     * Get all values of property Space * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Space> getAllSpace() {
	return Base.getAll(this.model, this.getResource(), SPACE, Space.class);
    }

    /**
     * Get all values of property Space as a ReactorResult of Space
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Space getSpace() {
	return Base.getAll_as(this.model, this.getResource(), SPACE,
		Space.class).firstValue();
    }

    /**
     * Adds a value to property Space as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSpace(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, SPACE, value);
    }

    /**
     * Adds a value to property Space as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSpace(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), SPACE, value);
    }

    /**
     * Adds a value to property Space from an instance of Space
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSpace(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Space value) {
	Base.add(model, instanceResource, SPACE, value);
    }

    /**
     * Adds a value to property Space from an instance of Space
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSpace(Space value) {
	Base.add(this.model, this.getResource(), SPACE, value);
    }

    /**
     * Sets a value of property Space from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSpace(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, SPACE, value);
    }

    /**
     * Sets a value of property Space from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSpace(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), SPACE, value);
    }

    /**
     * Sets a value of property Space from an instance of Space First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSpace(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Space value) {
	Base.set(model, instanceResource, SPACE, value);
    }

    /**
     * Sets a value of property Space from an instance of Space First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSpace(Space value) {
	Base.set(this.model, this.getResource(), SPACE, value);
    }

    /**
     * Removes a value of property Space as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSpace(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, SPACE, value);
    }

    /**
     * Removes a value of property Space as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeSpace(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), SPACE, value);
    }

    /**
     * Removes a value of property Space given as an instance of Space
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSpace(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Space value) {
	Base.remove(model, instanceResource, SPACE, value);
    }

    /**
     * Removes a value of property Space given as an instance of Space
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSpace(Space value) {
	Base.remove(this.model, this.getResource(), SPACE, value);
    }

    /**
     * Removes all values of property Space * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSpace(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, SPACE);
    }

    /**
     * Removes all values of property Space * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllSpace() {
	Base.removeAll(this.model, this.getResource(), SPACE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3efc68a7 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSubject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, SUBJECT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3efc68a7 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSubject() {
	return Base.has(this.model, this.getResource(), SUBJECT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3efc68a7 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSubject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, SUBJECT, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3efc68a7 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasSubject(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), SUBJECT, value);
    }

    /**
     * Get all values of property Subject as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubject_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, SUBJECT);
    }

    /**
     * Get all values of property Subject as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubject_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), SUBJECT);
    }

    /**
     * Get all values of property Subject * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<String> getAllSubject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, SUBJECT, String.class);
    }

    /**
     * Get all values of property Subject * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<String> getAllSubject() {
	return Base.getAll(this.model, this.getResource(), SUBJECT,
		String.class);
    }

    /**
     * Get all values of property Subject as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getSubject() {
	return Base.getAll_as(this.model, this.getResource(), SUBJECT,
		String.class).firstValue();
    }

    /**
     * Adds a value to property Subject as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSubject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, SUBJECT, value);
    }

    /**
     * Adds a value to property Subject as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSubject(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), SUBJECT, value);
    }

    /**
     * Adds a value to property Subject from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSubject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	Base.add(model, instanceResource, SUBJECT, value);
    }

    /**
     * Adds a value to property Subject from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSubject(String value) {
	Base.add(this.model, this.getResource(), SUBJECT, value);
    }

    /**
     * Sets a value of property Subject from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSubject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, SUBJECT, value);
    }

    /**
     * Sets a value of property Subject from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSubject(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), SUBJECT, value);
    }

    /**
     * Sets a value of property Subject from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSubject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	Base.set(model, instanceResource, SUBJECT, value);
    }

    /**
     * Sets a value of property Subject from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSubject(String value) {
	Base.set(this.model, this.getResource(), SUBJECT, value);
    }

    /**
     * Removes a value of property Subject as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSubject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, SUBJECT, value);
    }

    /**
     * Removes a value of property Subject as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeSubject(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), SUBJECT, value);
    }

    /**
     * Removes a value of property Subject given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSubject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	Base.remove(model, instanceResource, SUBJECT, value);
    }

    /**
     * Removes a value of property Subject given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSubject(Thing value) {
	Base.remove(this.model, this.getResource(), SUBJECT, value);
    }

    /**
     * Removes all values of property Subject * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSubject(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, SUBJECT);
    }

    /**
     * Removes all values of property Subject * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllSubject() {
	Base.removeAll(this.model, this.getResource(), SUBJECT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bbe2ed3 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasTitle(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, TITLE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bbe2ed3 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasTitle() {
	return Base.has(this.model, this.getResource(), TITLE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bbe2ed3 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasTitle(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, TITLE, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bbe2ed3 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasTitle(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), TITLE, value);
    }

    /**
     * Get all values of property Title as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTitle_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, TITLE);
    }

    /**
     * Get all values of property Title as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTitle_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), TITLE);
    }

    /**
     * Get all values of property Title * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<String> getAllTitle(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, TITLE, String.class);
    }

    /**
     * Get all values of property Title * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<String> getAllTitle() {
	return Base.getAll(this.model, this.getResource(), TITLE, String.class);
    }

    /**
     * Get all values of property Title as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getTitle() {
	return Base.getAll_as(this.model, this.getResource(), TITLE,
		String.class).firstValue();
    }

    /**
     * Adds a value to property Title as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addTitle(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, TITLE, value);
    }

    /**
     * Adds a value to property Title as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addTitle(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), TITLE, value);
    }

    /**
     * Adds a value to property Title from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addTitle(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	Base.add(model, instanceResource, TITLE, value);
    }

    /**
     * Adds a value to property Title from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addTitle(String value) {
	Base.add(this.model, this.getResource(), TITLE, value);
    }

    /**
     * Sets a value of property Title from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setTitle(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, TITLE, value);
    }

    /**
     * Sets a value of property Title from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setTitle(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), TITLE, value);
    }

    /**
     * Sets a value of property Title from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setTitle(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	Base.set(model, instanceResource, TITLE, value);
    }

    /**
     * Sets a value of property Title from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setTitle(String value) {
	Base.set(this.model, this.getResource(), TITLE, value);
    }

    /**
     * Removes a value of property Title as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeTitle(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, TITLE, value);
    }

    /**
     * Removes a value of property Title as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeTitle(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), TITLE, value);
    }

    /**
     * Removes a value of property Title given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeTitle(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	Base.remove(model, instanceResource, TITLE, value);
    }

    /**
     * Removes a value of property Title given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeTitle(Thing value) {
	Base.remove(this.model, this.getResource(), TITLE, value);
    }

    /**
     * Removes all values of property Title * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllTitle(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, TITLE);
    }

    /**
     * Removes all values of property Title * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllTitle() {
	Base.removeAll(this.model, this.getResource(), TITLE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@334d545c has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasTopic(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, TITLE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@334d545c has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasTopic() {
	return Base.has(this.model, this.getResource(), TOPIC);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@334d545c has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasTopic(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, TOPIC, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@334d545c has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasTopic(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), TOPIC, value);
    }

    /**
     * Get all values of property Topic as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTopic_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, TOPIC);
    }

    /**
     * Get all values of property Topic as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllTopic_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), TOPIC);
    }

    /**
     * Get all values of property Topic * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<String> getAllTopic(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, TOPIC, String.class);
    }

    /**
     * Get all values of property Topic * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<String> getAllTopic() {
	return Base.getAll(this.model, this.getResource(), TOPIC, String.class);
    }

    /**
     * Get all values of property Topic as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getTopic() {
	return Base.getAll_as(this.model, this.getResource(), TOPIC,
		String.class).firstValue();
    }

    /**
     * Adds a value to property Topic as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addTopic(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, TOPIC, value);
    }

    /**
     * Adds a value to property Topic as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addTopic(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), TOPIC, value);
    }

    /**
     * Adds a value to property Topic from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addTopic(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	Base.add(model, instanceResource, TOPIC, value);
    }

    /**
     * Adds a value to property Topic from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addTopic(String value) {
	Base.add(this.model, this.getResource(), TOPIC, value);
    }

    /**
     * Sets a value of property Topic from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setTopic(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, TOPIC, value);
    }

    /**
     * Sets a value of property Topic from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setTopic(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), TOPIC, value);
    }

    /**
     * Sets a value of property Topic from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setTopic(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	Base.set(model, instanceResource, TOPIC, value);
    }

    /**
     * Sets a value of property Topic from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setTopic(String value) {
	Base.set(this.model, this.getResource(), TOPIC, value);
    }

    /**
     * Removes a value of property Topic as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeTopic(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, TOPIC, value);
    }

    /**
     * Removes a value of property Topic as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeTopic(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), TOPIC, value);
    }

    /**
     * Removes a value of property Topic given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeTopic(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    String value) {
	Base.remove(model, instanceResource, TOPIC, value);
    }

    /**
     * Removes a value of property Topic given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeTopic(Thing value) {
	Base.remove(this.model, this.getResource(), TOPIC, value);
    }

    /**
     * Removes all values of property Topic * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllTopic(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, TOPIC);
    }

    /**
     * Removes all values of property Topic * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllTopic() {
	Base.removeAll(this.model, this.getResource(), TOPIC);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@121c77b has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasModified(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, MODIFIED);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@121c77b has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasModified() {
	return Base.has(this.model, this.getResource(), MODIFIED);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@121c77b has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasModified(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, MODIFIED, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@121c77b has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasModified(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), MODIFIED, value);
    }

    /**
     * Get all values of property DateModified as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllModified_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, MODIFIED);
    }

    /**
     * Get all values of property DateModified as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllModified_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), MODIFIED);
    }

    /**
     * Get all values of property DateModified * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllModified(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, MODIFIED,
		java.lang.String.class);
    }

    /**
     * Get all values of property DateModified * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllModified() {
	return Base.getAll(this.model, this.getResource(), MODIFIED,
		java.lang.String.class);
    }

    /**
     * Get all values of property DateModified as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getModified() {
	return Base.getAll_as(this.model, this.getResource(), MODIFIED,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property DateModified as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addModified(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, MODIFIED, value);
    }

    /**
     * Adds a value to property DateModified as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addModified(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), MODIFIED, value);
    }

    /**
     * Adds a value to property DateModified from an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addModified(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, MODIFIED, value);
    }

    /**
     * Adds a value to property DateModified from an instance of
     * java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addModified(java.lang.String value) {
	Base.add(this.model, this.getResource(), MODIFIED, value);
    }

    /**
     * Sets a value of property DateModified from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setModified(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, MODIFIED, value);
    }

    /**
     * Sets a value of property DateModified from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setModified(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), MODIFIED, value);
    }

    /**
     * Sets a value of property DateModified from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setModified(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, MODIFIED, value);
    }

    /**
     * Sets a value of property DateModified from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setModified(java.lang.String value) {
	Base.set(this.model, this.getResource(), MODIFIED, value);
    }

    /**
     * Removes a value of property DateModified as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeModified(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, MODIFIED, value);
    }

    /**
     * Removes a value of property DateModified as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeModified(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), MODIFIED, value);
    }

    /**
     * Removes a value of property DateModified given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeModified(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, MODIFIED, value);
    }

    /**
     * Removes a value of property DateModified given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeModified(java.lang.String value) {
	Base.remove(this.model, this.getResource(), MODIFIED, value);
    }

    /**
     * Removes all values of property DateModified * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllModified(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, MODIFIED);
    }

    /**
     * Removes all values of property DateModified * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllModified() {
	Base.removeAll(this.model, this.getResource(), MODIFIED);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a56f0 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasCreated(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, CREATED);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a56f0 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasCreated() {
	return Base.has(this.model, this.getResource(), CREATED);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a56f0 has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasCreated(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, CREATED, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a56f0 has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasCreated(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), CREATED, value);
    }

    /**
     * Get all values of property DateCreated as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCreated_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, CREATED);
    }

    /**
     * Get all values of property DateCreated as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCreated_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), CREATED);
    }

    /**
     * Get all values of property DateCreated * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllCreated(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, CREATED,
		java.lang.String.class);
    }

    /**
     * Get all values of property DateCreated * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllCreated() {
	return Base.getAll(this.model, this.getResource(), CREATED,
		java.lang.String.class);
    }

    /**
     * Get all values of property DateCreated as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getCreated() {
	return Base.getAll_as(this.model, this.getResource(), CREATED,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property DateCreated as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addCreated(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, CREATED, value);
    }

    /**
     * Adds a value to property DateCreated as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addCreated(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), CREATED, value);
    }

    /**
     * Adds a value to property DateCreated from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addCreated(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, CREATED, value);
    }

    /**
     * Adds a value to property DateCreated from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addCreated(java.lang.String value) {
	Base.add(this.model, this.getResource(), CREATED, value);
    }

    /**
     * Sets a value of property DateCreated from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setCreated(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, CREATED, value);
    }

    /**
     * Sets a value of property DateCreated from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setCreated(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), CREATED, value);
    }

    /**
     * Sets a value of property DateCreated from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setCreated(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, CREATED, value);
    }

    /**
     * Sets a value of property DateCreated from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setCreated(java.lang.String value) {
	Base.set(this.model, this.getResource(), CREATED, value);
    }

    /**
     * Removes a value of property DateCreated as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeCreated(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, CREATED, value);
    }

    /**
     * Removes a value of property DateCreated as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeCreated(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), CREATED, value);
    }

    /**
     * Removes a value of property DateCreated given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeCreated(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, CREATED, value);
    }

    /**
     * Removes a value of property DateCreated given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeCreated(java.lang.String value) {
	Base.remove(this.model, this.getResource(), CREATED, value);
    }

    /**
     * Removes all values of property DateCreated * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllCreated(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, CREATED);
    }

    /**
     * Removes all values of property DateCreated * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllCreated() {
	Base.removeAll(this.model, this.getResource(), CREATED);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10a73bc has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasHasPart(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, HASPART);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10a73bc has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasHasPart() {
	return Base.has(this.model, this.getResource(), HASPART);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10a73bc has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasHasPart(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, HASPART, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10a73bc has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasHasPart(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Get all values of property HasPart as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasPart_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, HASPART);
    }

    /**
     * Get all values of property HasPart as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllHasPart_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), HASPART);
    }

    /**
     * Get all values of property HasPart * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllHasPart(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, HASPART, Thing.class);
    }

    /**
     * Get all values of property HasPart * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllHasPart() {
	return Base.getAll(this.model, this.getResource(), HASPART,
		Thing.class);
    }

    /**
     * Get all values of property HasPart as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Thing getHasPart() {
	return Base.getAll_as(this.model, this.getResource(), HASPART,
		Thing.class).firstValue();
    }

    /**
     * Adds a value to property HasPart as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addHasPart(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, HASPART, value);
    }

    /**
     * Adds a value to property HasPart as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addHasPart(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Adds a value to property HasPart from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addHasPart(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.add(model, instanceResource, HASPART, value);
    }

    /**
     * Adds a value to property HasPart from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addHasPart(Thing value) {
	Base.add(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Sets a value of property HasPart from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setHasPart(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, HASPART, value);
    }

    /**
     * Sets a value of property HasPart from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setHasPart(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Sets a value of property HasPart from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setHasPart(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.set(model, instanceResource, HASPART, value);
    }

    /**
     * Sets a value of property HasPart from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setHasPart(Thing value) {
	Base.set(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Removes a value of property HasPart as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeHasPart(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, HASPART, value);
    }

    /**
     * Removes a value of property HasPart as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeHasPart(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Removes a value of property HasPart given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeHasPart(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.remove(model, instanceResource, HASPART, value);
    }

    /**
     * Removes a value of property HasPart given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeHasPart(Thing value) {
	Base.remove(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Removes all values of property HasPart * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllHasPart(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, HASPART);
    }

    /**
     * Removes all values of property HasPart * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllHasPart() {
	Base.removeAll(this.model, this.getResource(), HASPART);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1391b1a has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasIsPartOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, ISPARTOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1391b1a has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasIsPartOf() {
	return Base.has(this.model, this.getResource(), ISPARTOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1391b1a has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasIsPartOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, ISPARTOF, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1391b1a has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasIsPartOf(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), ISPARTOF, value);
    }

    /**
     * Get all values of property IsPartOf as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIsPartOf_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, ISPARTOF);
    }

    /**
     * Get all values of property IsPartOf as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllIsPartOf_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), ISPARTOF);
    }

    /**
     * Get all values of property IsPartOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Thing> getAllIsPartOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, ISPARTOF, Thing.class);
    }

    /**
     * Get all values of property IsPartOf * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Thing> getAllIsPartOf() {
	return Base.getAll(this.model, this.getResource(), ISPARTOF,
		Thing.class);
    }

    /**
     * Get all values of property IsPartOf as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Thing getIsPartOf() {
	return Base.getAll_as(this.model, this.getResource(), ISPARTOF,
		Thing.class).firstValue();
    }

    /**
     * Adds a value to property IsPartOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addIsPartOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, ISPARTOF, value);
    }

    /**
     * Adds a value to property IsPartOf as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addIsPartOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), ISPARTOF, value);
    }

    /**
     * Adds a value to property IsPartOf from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addIsPartOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.add(model, instanceResource, ISPARTOF, value);
    }

    /**
     * Adds a value to property IsPartOf from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addIsPartOf(Thing value) {
	Base.add(this.model, this.getResource(), ISPARTOF, value);
    }

    /**
     * Sets a value of property IsPartOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setIsPartOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, ISPARTOF, value);
    }

    /**
     * Sets a value of property IsPartOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setIsPartOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), ISPARTOF, value);
    }

    /**
     * Sets a value of property IsPartOf from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setIsPartOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.set(model, instanceResource, ISPARTOF, value);
    }

    /**
     * Sets a value of property IsPartOf from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setIsPartOf(Thing value) {
	Base.set(this.model, this.getResource(), ISPARTOF, value);
    }

    /**
     * Removes a value of property IsPartOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeIsPartOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, ISPARTOF, value);
    }

    /**
     * Removes a value of property IsPartOf as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeIsPartOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), ISPARTOF, value);
    }

    /**
     * Removes a value of property IsPartOf given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeIsPartOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Thing value) {
	Base.remove(model, instanceResource, ISPARTOF, value);
    }

    /**
     * Removes a value of property IsPartOf given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeIsPartOf(Thing value) {
	Base.remove(this.model, this.getResource(), ISPARTOF, value);
    }

    /**
     * Removes all values of property IsPartOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllIsPartOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, ISPARTOF);
    }

    /**
     * Removes all values of property IsPartOf * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllIsPartOf() {
	Base.removeAll(this.model, this.getResource(), ISPARTOF);
    }
}