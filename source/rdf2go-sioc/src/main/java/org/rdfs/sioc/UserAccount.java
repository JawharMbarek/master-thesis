/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) on 21.12.12 17:00
 */
package org.rdfs.sioc;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;

import com.xmlns.foaf.Agent;
import com.xmlns.foaf.Document;

/**
 * This class manages access to these properties:
 * <ul>
 * <li>AccountOf</li>
 * <li>AdministratorOf</li>
 * <li>Avatar</li>
 * <li>CreatorOf</li>
 * <li>Email</li>
 * <li>EmailSha1</li>
 * <li>Follows</li>
 * <li>MemberOf</li>
 * <li>ModeratorOf</li>
 * <li>ModifierOf</li>
 * <li>OwnerOf</li>
 * <li>SubscriberOf</li>
 * <li>accountName</li>
 * <li>accountServiceHomepage</li>
 * </ul>
 * 
 * This class was generated by <a
 * href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 21.12.12 17:00
 */
public class UserAccount extends SIOCThing {

    /**
     * 
     */
    private static final long serialVersionUID = -7551135349428975021L;

    /** http://rdfs.org/sioc/ns#UserAccount */
    public static final URI RDFS_CLASS = new URIImpl(
	    "http://rdfs.org/sioc/ns#UserAccount", false);

    /** http://rdfs.org/sioc/ns#account_of */
    public static final URI ACCOUNTOF = new URIImpl(
	    "http://rdfs.org/sioc/ns#account_of", false);

    /** http://rdfs.org/sioc/ns#administrator_of */
    public static final URI ADMINISTRATOROF = new URIImpl(
	    "http://rdfs.org/sioc/ns#administrator_of", false);

    /** http://rdfs.org/sioc/ns#avatar */
    public static final URI AVATAR = new URIImpl(
	    "http://rdfs.org/sioc/ns#avatar", false);

    /** http://rdfs.org/sioc/ns#creator_of */
    public static final URI CREATOROF = new URIImpl(
	    "http://rdfs.org/sioc/ns#creator_of", false);

    /** http://rdfs.org/sioc/ns#email */
    public static final URI EMAIL = new URIImpl(
	    "http://rdfs.org/sioc/ns#email", false);

    /** http://rdfs.org/sioc/ns#email_sha1 */
    public static final URI EMAILSHA1 = new URIImpl(
	    "http://rdfs.org/sioc/ns#email_sha1", false);

    /** http://rdfs.org/sioc/ns#follows */
    public static final URI FOLLOWS = new URIImpl(
	    "http://rdfs.org/sioc/ns#follows", false);

    /** http://rdfs.org/sioc/ns#member_of */
    public static final URI MEMBEROF = new URIImpl(
	    "http://rdfs.org/sioc/ns#member_of", false);

    /** http://rdfs.org/sioc/ns#moderator_of */
    public static final URI MODERATOROF = new URIImpl(
	    "http://rdfs.org/sioc/ns#moderator_of", false);

    /** http://rdfs.org/sioc/ns#modifier_of */
    public static final URI MODIFIEROF = new URIImpl(
	    "http://rdfs.org/sioc/ns#modifier_of", false);

    /** http://rdfs.org/sioc/ns#owner_of */
    public static final URI OWNEROF = new URIImpl(
	    "http://rdfs.org/sioc/ns#owner_of", false);

    /** http://rdfs.org/sioc/ns#subscriber_of */
    public static final URI SUBSCRIBEROF = new URIImpl(
	    "http://rdfs.org/sioc/ns#subscriber_of", false);

    /** http://xmlns.com/foaf/0.1/accountName */
    public static final URI ACCOUNTNAME = new URIImpl(
	    "http://xmlns.com/foaf/0.1/accountName", false);

    /** http://xmlns.com/foaf/0.1/accountServiceHomepage */
    public static final URI ACCOUNTSERVICEHOMEPAGE = new URIImpl(
	    "http://xmlns.com/foaf/0.1/accountServiceHomepage", false);

    /**
     * All property-URIs with this class as domain. All properties of all
     * super-classes are also available.
     */
    public static final URI[] MANAGED_URIS = {
	    new URIImpl("http://rdfs.org/sioc/ns#account_of", false),
	    new URIImpl("http://rdfs.org/sioc/ns#administrator_of", false),
	    new URIImpl("http://rdfs.org/sioc/ns#avatar", false),
	    new URIImpl("http://rdfs.org/sioc/ns#creator_of", false),
	    new URIImpl("http://rdfs.org/sioc/ns#email", false),
	    new URIImpl("http://rdfs.org/sioc/ns#email_sha1", false),
	    new URIImpl("http://rdfs.org/sioc/ns#follows", false),
	    new URIImpl("http://rdfs.org/sioc/ns#member_of", false),
	    new URIImpl("http://rdfs.org/sioc/ns#moderator_of", false),
	    new URIImpl("http://rdfs.org/sioc/ns#modifier_of", false),
	    new URIImpl("http://rdfs.org/sioc/ns#owner_of", false),
	    new URIImpl("http://rdfs.org/sioc/ns#subscriber_of", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/accountName", false),
	    new URIImpl("http://xmlns.com/foaf/0.1/accountServiceHomepage",
		    false) };

    // protected constructors needed for inheritance

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.semweb4j.org
     * @param classURI
     *            URI of RDFS class
     * @param instanceIdentifier
     *            Resource that identifies this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c1]
     */
    protected UserAccount(Model model, URI classURI,
	    org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
	    boolean write) {
	super(model, classURI, instanceIdentifier, write);
    }

    // public constructors

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param instanceIdentifier
     *            an RDF2Go Resource identifying this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c2]
     */
    public UserAccount(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
	    boolean write) {
	super(model, RDFS_CLASS, instanceIdentifier, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a URI, given as
     * a String. Creating two wrappers for the same URI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param uriString
     *            a URI given as a String
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * @throws ModelRuntimeException
     *             if URI syntax is wrong
     * 
     *             [Generated from RDFReactor template rule #c7]
     */
    public UserAccount(Model model, String uriString, boolean write)
	    throws ModelRuntimeException {
	super(model, RDFS_CLASS, new URIImpl(uriString, false), write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a blank node.
     * Creating two wrappers for the same blank node is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param bnode
     *            BlankNode of this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c8]
     */
    public UserAccount(Model model, BlankNode bnode, boolean write) {
	super(model, RDFS_CLASS, bnode, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a randomly
     * generated URI. Creating two wrappers results in different URIs.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c9]
     */
    public UserAccount(Model model, boolean write) {
	super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
    }

    // /////////////////////////////////////////////////////////////////
    // typing

    /**
     * Return an existing instance of this class in the model. No statements are
     * written.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return an instance of UserAccount or null if none existst
     * 
     *         [Generated from RDFReactor template rule #class0]
     */
    public static UserAccount getInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getInstance(model, instanceResource, UserAccount.class);
    }

    /**
     * Create a new instance of this class in the model. That is, create the
     * statement (instanceResource, RDF.type,
     * http://rdfs.org/sioc/ns#UserAccount).
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class1]
     */
    public static void createInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.createInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return true if instanceResource is an instance of this class in the
     *         model
     * 
     *         [Generated from RDFReactor template rule #class2]
     */
    public static boolean hasInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.hasInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @return all instances of this class in Model 'model' as RDF resources
     * 
     *         [Generated from RDFReactor template rule #class3]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(
	    Model model) {
	return Base.getAllInstances(model, RDFS_CLASS,
		org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * Remove rdf:type UserAccount from this instance. Other triples are not
     * affected. To delete more, use deleteAllProperties
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class4]
     */
    public static void deleteInstance(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.deleteInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * Delete all (this, *, *), i.e. including rdf:type
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     */
    public static void deleteAllProperties(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.deleteAllProperties(model, instanceResource);
    }

    // /////////////////////////////////////////////////////////////////
    // property access methods

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Creator' to this
     *         UserAccount instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCreator_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, SIOCThing.CREATOR, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Creator' to this
     *         UserAccount instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllCreator_Inverse() {
	return Base.getAll_Inverse(this.model, SIOCThing.CREATOR,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Owner' to this
     *         UserAccount instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOwner_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, SIOCThing.OWNER, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Owner' to this
     *         UserAccount instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllOwner_Inverse() {
	return Base.getAll_Inverse(this.model, SIOCThing.OWNER,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Subscriber' to
     *         this UserAccount instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSubscriber_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Container.SUBSCRIBER, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Subscriber' to
     *         this UserAccount instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSubscriber_Inverse() {
	return Base.getAll_Inverse(this.model, Container.SUBSCRIBER,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Member' to this
     *         UserAccount instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMember_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Usergroup.MEMBER, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Member' to this
     *         UserAccount instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllMember_Inverse() {
	return Base.getAll_Inverse(this.model, Usergroup.MEMBER,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Administrator' to
     *         this UserAccount instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAdministrator_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Site.ADMINISTRATOR, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Administrator' to
     *         this UserAccount instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllAdministrator_Inverse() {
	return Base.getAll_Inverse(this.model, Site.ADMINISTRATOR,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Moderator' to
     *         this UserAccount instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllModerator_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Forum.MODERATOR, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Moderator' to
     *         this UserAccount instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllModerator_Inverse() {
	return Base.getAll_Inverse(this.model, Forum.MODERATOR,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Modifier' to this
     *         UserAccount instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllModifier_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, Item.MODIFIER, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Modifier' to this
     *         UserAccount instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllModifier_Inverse() {
	return Base.getAll_Inverse(this.model, Item.MODIFIER,
		this.getResource());
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Follows' to this
     *         UserAccount instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFollows_Inverse(
	    Model model, Object objectValue) {
	return Base.getAll_Inverse(model, UserAccount.FOLLOWS, objectValue);
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Follows' to this
     *         UserAccount instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllFollows_Inverse() {
	return Base.getAll_Inverse(this.model, UserAccount.FOLLOWS,
		this.getResource());
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@60b964af has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasAccountOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, ACCOUNTOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@60b964af has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasAccountOf() {
	return Base.has(this.model, this.getResource(), ACCOUNTOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@60b964af has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasAccountOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, ACCOUNTOF, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@60b964af has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasAccountOf(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), ACCOUNTOF, value);
    }

    /**
     * Get all values of property AccountOf as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAccountOf_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, ACCOUNTOF);
    }

    /**
     * Get all values of property AccountOf as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAccountOf_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), ACCOUNTOF);
    }

    /**
     * Get all values of property AccountOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Agent> getAllAccountOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, ACCOUNTOF, Agent.class);
    }

    /**
     * Get all values of property AccountOf * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Agent> getAllAccountOf() {
	return Base.getAll(this.model, this.getResource(), ACCOUNTOF,
		Agent.class);
    }

    /**
     * Get all values of property AccountOf as a ReactorResult of Agent
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Agent getAccountOf() {
	return Base.getAll_as(this.model, this.getResource(), ACCOUNTOF,
		Agent.class).firstValue();
    }

    /**
     * Adds a value to property AccountOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addAccountOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, ACCOUNTOF, value);
    }

    /**
     * Adds a value to property AccountOf as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addAccountOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), ACCOUNTOF, value);
    }

    /**
     * Adds a value to property AccountOf from an instance of Agent
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addAccountOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Agent value) {
	Base.add(model, instanceResource, ACCOUNTOF, value);
    }

    /**
     * Adds a value to property AccountOf from an instance of Agent
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addAccountOf(Agent value) {
	Base.add(this.model, this.getResource(), ACCOUNTOF, value);
    }

    /**
     * Sets a value of property AccountOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setAccountOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, ACCOUNTOF, value);
    }

    /**
     * Sets a value of property AccountOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setAccountOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), ACCOUNTOF, value);
    }

    /**
     * Sets a value of property AccountOf from an instance of Agent First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setAccountOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Agent value) {
	Base.set(model, instanceResource, ACCOUNTOF, value);
    }

    /**
     * Sets a value of property AccountOf from an instance of Agent First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setAccountOf(Agent value) {
	Base.set(this.model, this.getResource(), ACCOUNTOF, value);
    }

    /**
     * Removes a value of property AccountOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeAccountOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, ACCOUNTOF, value);
    }

    /**
     * Removes a value of property AccountOf as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeAccountOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), ACCOUNTOF, value);
    }

    /**
     * Removes a value of property AccountOf given as an instance of Agent
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeAccountOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Agent value) {
	Base.remove(model, instanceResource, ACCOUNTOF, value);
    }

    /**
     * Removes a value of property AccountOf given as an instance of Agent
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeAccountOf(Agent value) {
	Base.remove(this.model, this.getResource(), ACCOUNTOF, value);
    }

    /**
     * Removes all values of property AccountOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllAccountOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, ACCOUNTOF);
    }

    /**
     * Removes all values of property AccountOf * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllAccountOf() {
	Base.removeAll(this.model, this.getResource(), ACCOUNTOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18010d30 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasAdministratorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, ADMINISTRATOROF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18010d30 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasAdministratorOf() {
	return Base.has(this.model, this.getResource(), ADMINISTRATOROF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18010d30 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasAdministratorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, ADMINISTRATOROF, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18010d30 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasAdministratorOf(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), ADMINISTRATOROF,
		value);
    }

    /**
     * Get all values of property AdministratorOf as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAdministratorOf_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, ADMINISTRATOROF);
    }

    /**
     * Get all values of property AdministratorOf as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAdministratorOf_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(),
		ADMINISTRATOROF);
    }

    /**
     * Get all values of property AdministratorOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Site> getAllAdministratorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base
		.getAll(model, instanceResource, ADMINISTRATOROF, Site.class);
    }

    /**
     * Get all values of property AdministratorOf * @return a ClosableIterator
     * of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Site> getAllAdministratorOf() {
	return Base.getAll(this.model, this.getResource(), ADMINISTRATOROF,
		Site.class);
    }

    /**
     * Get all values of property AdministratorOf as a ReactorResult of Site
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Site getAdministratorOf() {
	return Base.getAll_as(this.model, this.getResource(), ADMINISTRATOROF,
		Site.class).firstValue();
    }

    /**
     * Adds a value to property AdministratorOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addAdministratorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, ADMINISTRATOROF, value);
    }

    /**
     * Adds a value to property AdministratorOf as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addAdministratorOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), ADMINISTRATOROF, value);
    }

    /**
     * Adds a value to property AdministratorOf from an instance of Site
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addAdministratorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Site value) {
	Base.add(model, instanceResource, ADMINISTRATOROF, value);
    }

    /**
     * Adds a value to property AdministratorOf from an instance of Site
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addAdministratorOf(Site value) {
	Base.add(this.model, this.getResource(), ADMINISTRATOROF, value);
    }

    /**
     * Sets a value of property AdministratorOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setAdministratorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, ADMINISTRATOROF, value);
    }

    /**
     * Sets a value of property AdministratorOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setAdministratorOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), ADMINISTRATOROF, value);
    }

    /**
     * Sets a value of property AdministratorOf from an instance of Site First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setAdministratorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Site value) {
	Base.set(model, instanceResource, ADMINISTRATOROF, value);
    }

    /**
     * Sets a value of property AdministratorOf from an instance of Site First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setAdministratorOf(Site value) {
	Base.set(this.model, this.getResource(), ADMINISTRATOROF, value);
    }

    /**
     * Removes a value of property AdministratorOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeAdministratorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, ADMINISTRATOROF, value);
    }

    /**
     * Removes a value of property AdministratorOf as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeAdministratorOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), ADMINISTRATOROF, value);
    }

    /**
     * Removes a value of property AdministratorOf given as an instance of Site
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeAdministratorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Site value) {
	Base.remove(model, instanceResource, ADMINISTRATOROF, value);
    }

    /**
     * Removes a value of property AdministratorOf given as an instance of Site
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeAdministratorOf(Site value) {
	Base.remove(this.model, this.getResource(), ADMINISTRATOROF, value);
    }

    /**
     * Removes all values of property AdministratorOf * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllAdministratorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, ADMINISTRATOROF);
    }

    /**
     * Removes all values of property AdministratorOf * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllAdministratorOf() {
	Base.removeAll(this.model, this.getResource(), ADMINISTRATOROF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d1841f8 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasAvatar(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, AVATAR);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d1841f8 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasAvatar() {
	return Base.has(this.model, this.getResource(), AVATAR);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d1841f8 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasAvatar(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, AVATAR, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d1841f8 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasAvatar(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), AVATAR, value);
    }

    /**
     * Get all values of property Avatar as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAvatar_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, AVATAR);
    }

    /**
     * Get all values of property Avatar as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAvatar_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), AVATAR);
    }

    /**
     * Get all values of property Avatar * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<SIOCThing> getAllAvatar(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, AVATAR, SIOCThing.class);
    }

    /**
     * Get all values of property Avatar * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<SIOCThing> getAllAvatar() {
	return Base.getAll(this.model, this.getResource(), AVATAR,
		SIOCThing.class);
    }

    /**
     * Get all values of property Avatar as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public SIOCThing getAvatar() {
	return Base.getAll_as(this.model, this.getResource(), AVATAR,
		SIOCThing.class).firstValue();
    }

    /**
     * Adds a value to property Avatar as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addAvatar(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, AVATAR, value);
    }

    /**
     * Adds a value to property Avatar as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addAvatar(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), AVATAR, value);
    }

    /**
     * Adds a value to property Avatar from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addAvatar(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    SIOCThing value) {
	Base.add(model, instanceResource, AVATAR, value);
    }

    /**
     * Adds a value to property Avatar from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addAvatar(SIOCThing value) {
	Base.add(this.model, this.getResource(), AVATAR, value);
    }

    /**
     * Sets a value of property Avatar from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setAvatar(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, AVATAR, value);
    }

    /**
     * Sets a value of property Avatar from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setAvatar(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), AVATAR, value);
    }

    /**
     * Sets a value of property Avatar from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setAvatar(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    SIOCThing value) {
	Base.set(model, instanceResource, AVATAR, value);
    }

    /**
     * Sets a value of property Avatar from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setAvatar(SIOCThing value) {
	Base.set(this.model, this.getResource(), AVATAR, value);
    }

    /**
     * Removes a value of property Avatar as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeAvatar(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, AVATAR, value);
    }

    /**
     * Removes a value of property Avatar as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeAvatar(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), AVATAR, value);
    }

    /**
     * Removes a value of property Avatar given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeAvatar(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    SIOCThing value) {
	Base.remove(model, instanceResource, AVATAR, value);
    }

    /**
     * Removes a value of property Avatar given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeAvatar(SIOCThing value) {
	Base.remove(this.model, this.getResource(), AVATAR, value);
    }

    /**
     * Removes all values of property Avatar * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllAvatar(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, AVATAR);
    }

    /**
     * Removes all values of property Avatar * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllAvatar() {
	Base.removeAll(this.model, this.getResource(), AVATAR);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2199ea11 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasCreatorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, CREATOROF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2199ea11 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasCreatorOf() {
	return Base.has(this.model, this.getResource(), CREATOROF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2199ea11 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasCreatorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, CREATOROF, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2199ea11 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasCreatorOf(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), CREATOROF, value);
    }

    /**
     * Get all values of property CreatorOf as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCreatorOf_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, CREATOROF);
    }

    /**
     * Get all values of property CreatorOf as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllCreatorOf_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), CREATOROF);
    }

    /**
     * Get all values of property CreatorOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<SIOCThing> getAllCreatorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, CREATOROF, SIOCThing.class);
    }

    /**
     * Get all values of property CreatorOf * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<SIOCThing> getAllCreatorOf() {
	return Base.getAll(this.model, this.getResource(), CREATOROF,
		SIOCThing.class);
    }

    /**
     * Get all values of property CreatorOf as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public SIOCThing getCreatorOf() {
	return Base.getAll_as(this.model, this.getResource(), CREATOROF,
		SIOCThing.class).firstValue();
    }

    /**
     * Adds a value to property CreatorOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addCreatorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, CREATOROF, value);
    }

    /**
     * Adds a value to property CreatorOf as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addCreatorOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), CREATOROF, value);
    }

    /**
     * Adds a value to property CreatorOf from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addCreatorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    SIOCThing value) {
	Base.add(model, instanceResource, CREATOROF, value);
    }

    /**
     * Adds a value to property CreatorOf from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addCreatorOf(SIOCThing value) {
	Base.add(this.model, this.getResource(), CREATOROF, value);
    }

    /**
     * Sets a value of property CreatorOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setCreatorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, CREATOROF, value);
    }

    /**
     * Sets a value of property CreatorOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setCreatorOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), CREATOROF, value);
    }

    /**
     * Sets a value of property CreatorOf from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setCreatorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    SIOCThing value) {
	Base.set(model, instanceResource, CREATOROF, value);
    }

    /**
     * Sets a value of property CreatorOf from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setCreatorOf(SIOCThing value) {
	Base.set(this.model, this.getResource(), CREATOROF, value);
    }

    /**
     * Removes a value of property CreatorOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeCreatorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, CREATOROF, value);
    }

    /**
     * Removes a value of property CreatorOf as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeCreatorOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), CREATOROF, value);
    }

    /**
     * Removes a value of property CreatorOf given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeCreatorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    SIOCThing value) {
	Base.remove(model, instanceResource, CREATOROF, value);
    }

    /**
     * Removes a value of property CreatorOf given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeCreatorOf(SIOCThing value) {
	Base.remove(this.model, this.getResource(), CREATOROF, value);
    }

    /**
     * Removes all values of property CreatorOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllCreatorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, CREATOROF);
    }

    /**
     * Removes all values of property CreatorOf * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllCreatorOf() {
	Base.removeAll(this.model, this.getResource(), CREATOROF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@312ad978 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasEmail(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, EMAIL);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@312ad978 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasEmail() {
	return Base.has(this.model, this.getResource(), EMAIL);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@312ad978 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasEmail(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, EMAIL, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@312ad978 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasEmail(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), EMAIL, value);
    }

    /**
     * Get all values of property Email as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEmail_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, EMAIL);
    }

    /**
     * Get all values of property Email as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEmail_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), EMAIL);
    }

    /**
     * Get all values of property Email * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<SIOCThing> getAllEmail(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, EMAIL, SIOCThing.class);
    }

    /**
     * Get all values of property Email * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<SIOCThing> getAllEmail() {
	return Base.getAll(this.model, this.getResource(), EMAIL,
		SIOCThing.class);
    }

    /**
     * Get all values of property Email as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public SIOCThing getEmail() {
	return Base.getAll_as(this.model, this.getResource(), EMAIL,
		SIOCThing.class).firstValue();
    }

    /**
     * Adds a value to property Email as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addEmail(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, EMAIL, value);
    }

    /**
     * Adds a value to property Email as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addEmail(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), EMAIL, value);
    }

    /**
     * Adds a value to property Email from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addEmail(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    SIOCThing value) {
	Base.add(model, instanceResource, EMAIL, value);
    }

    /**
     * Adds a value to property Email from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addEmail(SIOCThing value) {
	Base.add(this.model, this.getResource(), EMAIL, value);
    }

    /**
     * Sets a value of property Email from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setEmail(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, EMAIL, value);
    }

    /**
     * Sets a value of property Email from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setEmail(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), EMAIL, value);
    }

    /**
     * Sets a value of property Email from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setEmail(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    SIOCThing value) {
	Base.set(model, instanceResource, EMAIL, value);
    }

    /**
     * Sets a value of property Email from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setEmail(SIOCThing value) {
	Base.set(this.model, this.getResource(), EMAIL, value);
    }

    /**
     * Removes a value of property Email as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeEmail(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, EMAIL, value);
    }

    /**
     * Removes a value of property Email as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeEmail(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), EMAIL, value);
    }

    /**
     * Removes a value of property Email given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeEmail(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    SIOCThing value) {
	Base.remove(model, instanceResource, EMAIL, value);
    }

    /**
     * Removes a value of property Email given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeEmail(SIOCThing value) {
	Base.remove(this.model, this.getResource(), EMAIL, value);
    }

    /**
     * Removes all values of property Email * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllEmail(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, EMAIL);
    }

    /**
     * Removes all values of property Email * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllEmail() {
	Base.removeAll(this.model, this.getResource(), EMAIL);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f4da460 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasEmailSha1(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, EMAILSHA1);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f4da460 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasEmailSha1() {
	return Base.has(this.model, this.getResource(), EMAILSHA1);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f4da460 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasEmailSha1(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, EMAILSHA1, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f4da460 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasEmailSha1(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), EMAILSHA1, value);
    }

    /**
     * Get all values of property EmailSha1 as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEmailSha1_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, EMAILSHA1);
    }

    /**
     * Get all values of property EmailSha1 as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllEmailSha1_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), EMAILSHA1);
    }

    /**
     * Get all values of property EmailSha1 * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllEmailSha1(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, EMAILSHA1,
		java.lang.String.class);
    }

    /**
     * Get all values of property EmailSha1 * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllEmailSha1() {
	return Base.getAll(this.model, this.getResource(), EMAILSHA1,
		java.lang.String.class);
    }

    /**
     * Get all values of property EmailSha1 as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getEmailSha1() {
	return Base.getAll_as(this.model, this.getResource(), EMAILSHA1,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property EmailSha1 as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addEmailSha1(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, EMAILSHA1, value);
    }

    /**
     * Adds a value to property EmailSha1 as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addEmailSha1(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), EMAILSHA1, value);
    }

    /**
     * Adds a value to property EmailSha1 from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addEmailSha1(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, EMAILSHA1, value);
    }

    /**
     * Adds a value to property EmailSha1 from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addEmailSha1(java.lang.String value) {
	Base.add(this.model, this.getResource(), EMAILSHA1, value);
    }

    /**
     * Sets a value of property EmailSha1 from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setEmailSha1(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, EMAILSHA1, value);
    }

    /**
     * Sets a value of property EmailSha1 from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setEmailSha1(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), EMAILSHA1, value);
    }

    /**
     * Sets a value of property EmailSha1 from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setEmailSha1(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, EMAILSHA1, value);
    }

    /**
     * Sets a value of property EmailSha1 from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setEmailSha1(java.lang.String value) {
	Base.set(this.model, this.getResource(), EMAILSHA1, value);
    }

    /**
     * Removes a value of property EmailSha1 as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeEmailSha1(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, EMAILSHA1, value);
    }

    /**
     * Removes a value of property EmailSha1 as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeEmailSha1(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), EMAILSHA1, value);
    }

    /**
     * Removes a value of property EmailSha1 given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeEmailSha1(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, EMAILSHA1, value);
    }

    /**
     * Removes a value of property EmailSha1 given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeEmailSha1(java.lang.String value) {
	Base.remove(this.model, this.getResource(), EMAILSHA1, value);
    }

    /**
     * Removes all values of property EmailSha1 * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllEmailSha1(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, EMAILSHA1);
    }

    /**
     * Removes all values of property EmailSha1 * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllEmailSha1() {
	Base.removeAll(this.model, this.getResource(), EMAILSHA1);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@173bb17a has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasFollows(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, FOLLOWS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@173bb17a has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasFollows() {
	return Base.has(this.model, this.getResource(), FOLLOWS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@173bb17a has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasFollows(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, FOLLOWS, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@173bb17a has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasFollows(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), FOLLOWS, value);
    }

    /**
     * Get all values of property Follows as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFollows_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, FOLLOWS);
    }

    /**
     * Get all values of property Follows as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllFollows_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), FOLLOWS);
    }

    /**
     * Get all values of property Follows * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<UserAccount> getAllFollows(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, FOLLOWS, UserAccount.class);
    }

    /**
     * Get all values of property Follows * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<UserAccount> getAllFollows() {
	return Base.getAll(this.model, this.getResource(), FOLLOWS,
		UserAccount.class);
    }

    /**
     * Get all values of property Follows as a ReactorResult of UserAccount
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public UserAccount getFollows() {
	return Base.getAll_as(this.model, this.getResource(), FOLLOWS,
		UserAccount.class).firstValue();
    }

    /**
     * Adds a value to property Follows as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addFollows(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, FOLLOWS, value);
    }

    /**
     * Adds a value to property Follows as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addFollows(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), FOLLOWS, value);
    }

    /**
     * Adds a value to property Follows from an instance of UserAccount
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addFollows(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    UserAccount value) {
	Base.add(model, instanceResource, FOLLOWS, value);
    }

    /**
     * Adds a value to property Follows from an instance of UserAccount
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addFollows(UserAccount value) {
	Base.add(this.model, this.getResource(), FOLLOWS, value);
    }

    /**
     * Sets a value of property Follows from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setFollows(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, FOLLOWS, value);
    }

    /**
     * Sets a value of property Follows from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setFollows(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), FOLLOWS, value);
    }

    /**
     * Sets a value of property Follows from an instance of UserAccount First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setFollows(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    UserAccount value) {
	Base.set(model, instanceResource, FOLLOWS, value);
    }

    /**
     * Sets a value of property Follows from an instance of UserAccount First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setFollows(UserAccount value) {
	Base.set(this.model, this.getResource(), FOLLOWS, value);
    }

    /**
     * Removes a value of property Follows as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeFollows(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, FOLLOWS, value);
    }

    /**
     * Removes a value of property Follows as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeFollows(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), FOLLOWS, value);
    }

    /**
     * Removes a value of property Follows given as an instance of UserAccount
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeFollows(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    UserAccount value) {
	Base.remove(model, instanceResource, FOLLOWS, value);
    }

    /**
     * Removes a value of property Follows given as an instance of UserAccount
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeFollows(UserAccount value) {
	Base.remove(this.model, this.getResource(), FOLLOWS, value);
    }

    /**
     * Removes all values of property Follows * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllFollows(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, FOLLOWS);
    }

    /**
     * Removes all values of property Follows * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllFollows() {
	Base.removeAll(this.model, this.getResource(), FOLLOWS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3cd5cdab has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasMemberOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, MEMBEROF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3cd5cdab has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasMemberOf() {
	return Base.has(this.model, this.getResource(), MEMBEROF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3cd5cdab has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasMemberOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, MEMBEROF, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3cd5cdab has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasMemberOf(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), MEMBEROF, value);
    }

    /**
     * Get all values of property MemberOf as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMemberOf_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, MEMBEROF);
    }

    /**
     * Get all values of property MemberOf as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllMemberOf_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), MEMBEROF);
    }

    /**
     * Get all values of property MemberOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Usergroup> getAllMemberOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, MEMBEROF, Usergroup.class);
    }

    /**
     * Get all values of property MemberOf * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Usergroup> getAllMemberOf() {
	return Base.getAll(this.model, this.getResource(), MEMBEROF,
		Usergroup.class);
    }

    /**
     * Get all values of property MemberOf as a ReactorResult of Usergroup
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Usergroup getMemberOf() {
	return Base.getAll_as(this.model, this.getResource(), MEMBEROF,
		Usergroup.class).firstValue();
    }

    /**
     * Adds a value to property MemberOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addMemberOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, MEMBEROF, value);
    }

    /**
     * Adds a value to property MemberOf as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addMemberOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), MEMBEROF, value);
    }

    /**
     * Adds a value to property MemberOf from an instance of Usergroup
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addMemberOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Usergroup value) {
	Base.add(model, instanceResource, MEMBEROF, value);
    }

    /**
     * Adds a value to property MemberOf from an instance of Usergroup
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addMemberOf(Usergroup value) {
	Base.add(this.model, this.getResource(), MEMBEROF, value);
    }

    /**
     * Sets a value of property MemberOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setMemberOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, MEMBEROF, value);
    }

    /**
     * Sets a value of property MemberOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setMemberOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), MEMBEROF, value);
    }

    /**
     * Sets a value of property MemberOf from an instance of Usergroup First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setMemberOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Usergroup value) {
	Base.set(model, instanceResource, MEMBEROF, value);
    }

    /**
     * Sets a value of property MemberOf from an instance of Usergroup First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setMemberOf(Usergroup value) {
	Base.set(this.model, this.getResource(), MEMBEROF, value);
    }

    /**
     * Removes a value of property MemberOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeMemberOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, MEMBEROF, value);
    }

    /**
     * Removes a value of property MemberOf as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeMemberOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), MEMBEROF, value);
    }

    /**
     * Removes a value of property MemberOf given as an instance of Usergroup
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeMemberOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Usergroup value) {
	Base.remove(model, instanceResource, MEMBEROF, value);
    }

    /**
     * Removes a value of property MemberOf given as an instance of Usergroup
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeMemberOf(Usergroup value) {
	Base.remove(this.model, this.getResource(), MEMBEROF, value);
    }

    /**
     * Removes all values of property MemberOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllMemberOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, MEMBEROF);
    }

    /**
     * Removes all values of property MemberOf * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllMemberOf() {
	Base.removeAll(this.model, this.getResource(), MEMBEROF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@51fdfe5 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasModeratorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, MODERATOROF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@51fdfe5 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasModeratorOf() {
	return Base.has(this.model, this.getResource(), MODERATOROF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@51fdfe5 has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasModeratorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, MODERATOROF, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@51fdfe5 has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasModeratorOf(org.ontoware.rdf2go.model.node.Node value) {
	return Base
		.hasValue(this.model, this.getResource(), MODERATOROF, value);
    }

    /**
     * Get all values of property ModeratorOf as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllModeratorOf_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, MODERATOROF);
    }

    /**
     * Get all values of property ModeratorOf as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllModeratorOf_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), MODERATOROF);
    }

    /**
     * Get all values of property ModeratorOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Forum> getAllModeratorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, MODERATOROF, Forum.class);
    }

    /**
     * Get all values of property ModeratorOf * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Forum> getAllModeratorOf() {
	return Base.getAll(this.model, this.getResource(), MODERATOROF,
		Forum.class);
    }

    /**
     * Get all values of property ModeratorOf as a ReactorResult of Forum
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Forum getModeratorOf() {
	return Base.getAll_as(this.model, this.getResource(), MODERATOROF,
		Forum.class).firstValue();
    }

    /**
     * Adds a value to property ModeratorOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addModeratorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, MODERATOROF, value);
    }

    /**
     * Adds a value to property ModeratorOf as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addModeratorOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), MODERATOROF, value);
    }

    /**
     * Adds a value to property ModeratorOf from an instance of Forum
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addModeratorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Forum value) {
	Base.add(model, instanceResource, MODERATOROF, value);
    }

    /**
     * Adds a value to property ModeratorOf from an instance of Forum
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addModeratorOf(Forum value) {
	Base.add(this.model, this.getResource(), MODERATOROF, value);
    }

    /**
     * Sets a value of property ModeratorOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setModeratorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, MODERATOROF, value);
    }

    /**
     * Sets a value of property ModeratorOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setModeratorOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), MODERATOROF, value);
    }

    /**
     * Sets a value of property ModeratorOf from an instance of Forum First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setModeratorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Forum value) {
	Base.set(model, instanceResource, MODERATOROF, value);
    }

    /**
     * Sets a value of property ModeratorOf from an instance of Forum First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setModeratorOf(Forum value) {
	Base.set(this.model, this.getResource(), MODERATOROF, value);
    }

    /**
     * Removes a value of property ModeratorOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeModeratorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, MODERATOROF, value);
    }

    /**
     * Removes a value of property ModeratorOf as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeModeratorOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), MODERATOROF, value);
    }

    /**
     * Removes a value of property ModeratorOf given as an instance of Forum
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeModeratorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Forum value) {
	Base.remove(model, instanceResource, MODERATOROF, value);
    }

    /**
     * Removes a value of property ModeratorOf given as an instance of Forum
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeModeratorOf(Forum value) {
	Base.remove(this.model, this.getResource(), MODERATOROF, value);
    }

    /**
     * Removes all values of property ModeratorOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllModeratorOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, MODERATOROF);
    }

    /**
     * Removes all values of property ModeratorOf * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllModeratorOf() {
	Base.removeAll(this.model, this.getResource(), MODERATOROF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61e7f8de has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasModifierOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, MODIFIEROF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61e7f8de has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasModifierOf() {
	return Base.has(this.model, this.getResource(), MODIFIEROF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61e7f8de has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasModifierOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, MODIFIEROF, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61e7f8de has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasModifierOf(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), MODIFIEROF, value);
    }

    /**
     * Get all values of property ModifierOf as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllModifierOf_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, MODIFIEROF);
    }

    /**
     * Get all values of property ModifierOf as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllModifierOf_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), MODIFIEROF);
    }

    /**
     * Get all values of property ModifierOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Item> getAllModifierOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, MODIFIEROF, Item.class);
    }

    /**
     * Get all values of property ModifierOf * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Item> getAllModifierOf() {
	return Base.getAll(this.model, this.getResource(), MODIFIEROF,
		Item.class);
    }

    /**
     * Get all values of property ModifierOf as a ReactorResult of Item
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Item getModifierOf() {
	return Base.getAll_as(this.model, this.getResource(), MODIFIEROF,
		Item.class).firstValue();
    }

    /**
     * Adds a value to property ModifierOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addModifierOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, MODIFIEROF, value);
    }

    /**
     * Adds a value to property ModifierOf as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addModifierOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), MODIFIEROF, value);
    }

    /**
     * Adds a value to property ModifierOf from an instance of Item
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addModifierOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.add(model, instanceResource, MODIFIEROF, value);
    }

    /**
     * Adds a value to property ModifierOf from an instance of Item
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addModifierOf(Item value) {
	Base.add(this.model, this.getResource(), MODIFIEROF, value);
    }

    /**
     * Sets a value of property ModifierOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setModifierOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, MODIFIEROF, value);
    }

    /**
     * Sets a value of property ModifierOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setModifierOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), MODIFIEROF, value);
    }

    /**
     * Sets a value of property ModifierOf from an instance of Item First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setModifierOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.set(model, instanceResource, MODIFIEROF, value);
    }

    /**
     * Sets a value of property ModifierOf from an instance of Item First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setModifierOf(Item value) {
	Base.set(this.model, this.getResource(), MODIFIEROF, value);
    }

    /**
     * Removes a value of property ModifierOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeModifierOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, MODIFIEROF, value);
    }

    /**
     * Removes a value of property ModifierOf as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeModifierOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), MODIFIEROF, value);
    }

    /**
     * Removes a value of property ModifierOf given as an instance of Item
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeModifierOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
	Base.remove(model, instanceResource, MODIFIEROF, value);
    }

    /**
     * Removes a value of property ModifierOf given as an instance of Item
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeModifierOf(Item value) {
	Base.remove(this.model, this.getResource(), MODIFIEROF, value);
    }

    /**
     * Removes all values of property ModifierOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllModifierOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, MODIFIEROF);
    }

    /**
     * Removes all values of property ModifierOf * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllModifierOf() {
	Base.removeAll(this.model, this.getResource(), MODIFIEROF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@743e4500 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasOwnerOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, OWNEROF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@743e4500 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasOwnerOf() {
	return Base.has(this.model, this.getResource(), OWNEROF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@743e4500 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasOwnerOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, OWNEROF, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@743e4500 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasOwnerOf(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), OWNEROF, value);
    }

    /**
     * Get all values of property OwnerOf as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOwnerOf_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, OWNEROF);
    }

    /**
     * Get all values of property OwnerOf as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllOwnerOf_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), OWNEROF);
    }

    /**
     * Get all values of property OwnerOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<SIOCThing> getAllOwnerOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, OWNEROF, SIOCThing.class);
    }

    /**
     * Get all values of property OwnerOf * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<SIOCThing> getAllOwnerOf() {
	return Base.getAll(this.model, this.getResource(), OWNEROF,
		SIOCThing.class);
    }

    /**
     * Get all values of property OwnerOf as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public SIOCThing getOwnerOf() {
	return Base.getAll_as(this.model, this.getResource(), OWNEROF,
		SIOCThing.class).firstValue();
    }

    /**
     * Adds a value to property OwnerOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addOwnerOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, OWNEROF, value);
    }

    /**
     * Adds a value to property OwnerOf as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addOwnerOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), OWNEROF, value);
    }

    /**
     * Adds a value to property OwnerOf from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addOwnerOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    SIOCThing value) {
	Base.add(model, instanceResource, OWNEROF, value);
    }

    /**
     * Adds a value to property OwnerOf from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addOwnerOf(SIOCThing value) {
	Base.add(this.model, this.getResource(), OWNEROF, value);
    }

    /**
     * Sets a value of property OwnerOf from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setOwnerOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, OWNEROF, value);
    }

    /**
     * Sets a value of property OwnerOf from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setOwnerOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), OWNEROF, value);
    }

    /**
     * Sets a value of property OwnerOf from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setOwnerOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    SIOCThing value) {
	Base.set(model, instanceResource, OWNEROF, value);
    }

    /**
     * Sets a value of property OwnerOf from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setOwnerOf(SIOCThing value) {
	Base.set(this.model, this.getResource(), OWNEROF, value);
    }

    /**
     * Removes a value of property OwnerOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeOwnerOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, OWNEROF, value);
    }

    /**
     * Removes a value of property OwnerOf as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeOwnerOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), OWNEROF, value);
    }

    /**
     * Removes a value of property OwnerOf given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeOwnerOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    SIOCThing value) {
	Base.remove(model, instanceResource, OWNEROF, value);
    }

    /**
     * Removes a value of property OwnerOf given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeOwnerOf(SIOCThing value) {
	Base.remove(this.model, this.getResource(), OWNEROF, value);
    }

    /**
     * Removes all values of property OwnerOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllOwnerOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, OWNEROF);
    }

    /**
     * Removes all values of property OwnerOf * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllOwnerOf() {
	Base.removeAll(this.model, this.getResource(), OWNEROF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@59194827 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSubscriberOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, SUBSCRIBEROF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@59194827 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSubscriberOf() {
	return Base.has(this.model, this.getResource(), SUBSCRIBEROF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@59194827 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSubscriberOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, SUBSCRIBEROF, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@59194827 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasSubscriberOf(org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(), SUBSCRIBEROF,
		value);
    }

    /**
     * Get all values of property SubscriberOf as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubscriberOf_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, SUBSCRIBEROF);
    }

    /**
     * Get all values of property SubscriberOf as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSubscriberOf_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), SUBSCRIBEROF);
    }

    /**
     * Get all values of property SubscriberOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Container> getAllSubscriberOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, SUBSCRIBEROF,
		Container.class);
    }

    /**
     * Get all values of property SubscriberOf * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Container> getAllSubscriberOf() {
	return Base.getAll(this.model, this.getResource(), SUBSCRIBEROF,
		Container.class);
    }

    /**
     * Get all values of property SubscriberOf as a ReactorResult of Container
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Container getSubscriberOf() {
	return Base.getAll_as(this.model, this.getResource(), SUBSCRIBEROF,
		Container.class).firstValue();
    }

    /**
     * Adds a value to property SubscriberOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSubscriberOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, SUBSCRIBEROF, value);
    }

    /**
     * Adds a value to property SubscriberOf as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSubscriberOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), SUBSCRIBEROF, value);
    }

    /**
     * Adds a value to property SubscriberOf from an instance of Container
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSubscriberOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Container value) {
	Base.add(model, instanceResource, SUBSCRIBEROF, value);
    }

    /**
     * Adds a value to property SubscriberOf from an instance of Container
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSubscriberOf(Container value) {
	Base.add(this.model, this.getResource(), SUBSCRIBEROF, value);
    }

    /**
     * Sets a value of property SubscriberOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSubscriberOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, SUBSCRIBEROF, value);
    }

    /**
     * Sets a value of property SubscriberOf from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSubscriberOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), SUBSCRIBEROF, value);
    }

    /**
     * Sets a value of property SubscriberOf from an instance of Container
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSubscriberOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Container value) {
	Base.set(model, instanceResource, SUBSCRIBEROF, value);
    }

    /**
     * Sets a value of property SubscriberOf from an instance of Container
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSubscriberOf(Container value) {
	Base.set(this.model, this.getResource(), SUBSCRIBEROF, value);
    }

    /**
     * Removes a value of property SubscriberOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSubscriberOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, SUBSCRIBEROF, value);
    }

    /**
     * Removes a value of property SubscriberOf as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeSubscriberOf(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), SUBSCRIBEROF, value);
    }

    /**
     * Removes a value of property SubscriberOf given as an instance of
     * Container
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSubscriberOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Container value) {
	Base.remove(model, instanceResource, SUBSCRIBEROF, value);
    }

    /**
     * Removes a value of property SubscriberOf given as an instance of
     * Container
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSubscriberOf(Container value) {
	Base.remove(this.model, this.getResource(), SUBSCRIBEROF, value);
    }

    /**
     * Removes all values of property SubscriberOf * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSubscriberOf(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, SUBSCRIBEROF);
    }

    /**
     * Removes all values of property SubscriberOf * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllSubscriberOf() {
	Base.removeAll(this.model, this.getResource(), SUBSCRIBEROF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@22e5a644 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasAccountName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, ACCOUNTNAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@22e5a644 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasAccountName() {
	return Base.has(this.model, this.getResource(), ACCOUNTNAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@22e5a644 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasAccountName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, ACCOUNTNAME, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@22e5a644 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasAccountName(org.ontoware.rdf2go.model.node.Node value) {
	return Base
		.hasValue(this.model, this.getResource(), ACCOUNTNAME, value);
    }

    /**
     * Get all values of property AccountName as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAccountName_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource, ACCOUNTNAME);
    }

    /**
     * Get all values of property AccountName as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAccountName_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(), ACCOUNTNAME);
    }

    /**
     * Get all values of property AccountName * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllAccountName(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, ACCOUNTNAME,
		java.lang.String.class);
    }

    /**
     * Get all values of property AccountName * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllAccountName() {
	return Base.getAll(this.model, this.getResource(), ACCOUNTNAME,
		java.lang.String.class);
    }

    /**
     * Get all values of property AccountName as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public String getAccountName() {
	return Base.getAll_as(this.model, this.getResource(), ACCOUNTNAME,
		java.lang.String.class).firstValue();
    }

    /**
     * Adds a value to property AccountName as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addAccountName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, ACCOUNTNAME, value);
    }

    /**
     * Adds a value to property AccountName as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addAccountName(org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), ACCOUNTNAME, value);
    }

    /**
     * Adds a value to property AccountName from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addAccountName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.add(model, instanceResource, ACCOUNTNAME, value);
    }

    /**
     * Adds a value to property AccountName from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addAccountName(java.lang.String value) {
	Base.add(this.model, this.getResource(), ACCOUNTNAME, value);
    }

    /**
     * Sets a value of property AccountName from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setAccountName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, ACCOUNTNAME, value);
    }

    /**
     * Sets a value of property AccountName from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setAccountName(org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), ACCOUNTNAME, value);
    }

    /**
     * Sets a value of property AccountName from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setAccountName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.set(model, instanceResource, ACCOUNTNAME, value);
    }

    /**
     * Sets a value of property AccountName from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setAccountName(java.lang.String value) {
	Base.set(this.model, this.getResource(), ACCOUNTNAME, value);
    }

    /**
     * Removes a value of property AccountName as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeAccountName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, ACCOUNTNAME, value);
    }

    /**
     * Removes a value of property AccountName as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeAccountName(org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), ACCOUNTNAME, value);
    }

    /**
     * Removes a value of property AccountName given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeAccountName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    java.lang.String value) {
	Base.remove(model, instanceResource, ACCOUNTNAME, value);
    }

    /**
     * Removes a value of property AccountName given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeAccountName(java.lang.String value) {
	Base.remove(this.model, this.getResource(), ACCOUNTNAME, value);
    }

    /**
     * Removes all values of property AccountName * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllAccountName(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, ACCOUNTNAME);
    }

    /**
     * Removes all values of property AccountName * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllAccountName() {
	Base.removeAll(this.model, this.getResource(), ACCOUNTNAME);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12082570 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasAccountServiceHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.has(model, instanceResource, ACCOUNTSERVICEHOMEPAGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12082570 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasAccountServiceHomepage() {
	return Base.has(this.model, this.getResource(), ACCOUNTSERVICEHOMEPAGE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12082570 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasAccountServiceHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(model, instanceResource, ACCOUNTSERVICEHOMEPAGE,
		value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12082570 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasAccountServiceHomepage(
	    org.ontoware.rdf2go.model.node.Node value) {
	return Base.hasValue(this.model, this.getResource(),
		ACCOUNTSERVICEHOMEPAGE, value);
    }

    /**
     * Get all values of property AccountServiceHomepage as an Iterator over
     * RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAccountServiceHomepage_asNode(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll_asNode(model, instanceResource,
		ACCOUNTSERVICEHOMEPAGE);
    }

    /**
     * Get all values of property AccountServiceHomepage as an Iterator over
     * RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAccountServiceHomepage_asNode() {
	return Base.getAll_asNode(this.model, this.getResource(),
		ACCOUNTSERVICEHOMEPAGE);
    }

    /**
     * Get all values of property AccountServiceHomepage * @param model an
     * RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Document> getAllAccountServiceHomepage(
	    Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	return Base.getAll(model, instanceResource, ACCOUNTSERVICEHOMEPAGE,
		Document.class);
    }

    /**
     * Get all values of property AccountServiceHomepage * @return a
     * ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Document> getAllAccountServiceHomepage() {
	return Base.getAll(this.model, this.getResource(),
		ACCOUNTSERVICEHOMEPAGE, Document.class);
    }

    /**
     * Get all values of property AccountServiceHomepage as a ReactorResult of
     * Document
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public Document getAccountServiceHomepage() {
	return Base.getAll_as(this.model, this.getResource(),
		ACCOUNTSERVICEHOMEPAGE, Document.class).firstValue();
    }

    /**
     * Adds a value to property AccountServiceHomepage as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addAccountServiceHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(model, instanceResource, ACCOUNTSERVICEHOMEPAGE, value);
    }

    /**
     * Adds a value to property AccountServiceHomepage as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addAccountServiceHomepage(
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.add(this.model, this.getResource(), ACCOUNTSERVICEHOMEPAGE, value);
    }

    /**
     * Adds a value to property AccountServiceHomepage from an instance of
     * Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addAccountServiceHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.add(model, instanceResource, ACCOUNTSERVICEHOMEPAGE, value);
    }

    /**
     * Adds a value to property AccountServiceHomepage from an instance of
     * Document
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addAccountServiceHomepage(Document value) {
	Base.add(this.model, this.getResource(), ACCOUNTSERVICEHOMEPAGE, value);
    }

    /**
     * Sets a value of property AccountServiceHomepage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setAccountServiceHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(model, instanceResource, ACCOUNTSERVICEHOMEPAGE, value);
    }

    /**
     * Sets a value of property AccountServiceHomepage from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setAccountServiceHomepage(
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.set(this.model, this.getResource(), ACCOUNTSERVICEHOMEPAGE, value);
    }

    /**
     * Sets a value of property AccountServiceHomepage from an instance of
     * Document First, all existing values are removed, then this value is
     * added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setAccountServiceHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.set(model, instanceResource, ACCOUNTSERVICEHOMEPAGE, value);
    }

    /**
     * Sets a value of property AccountServiceHomepage from an instance of
     * Document First, all existing values are removed, then this value is
     * added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setAccountServiceHomepage(Document value) {
	Base.set(this.model, this.getResource(), ACCOUNTSERVICEHOMEPAGE, value);
    }

    /**
     * Removes a value of property AccountServiceHomepage as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeAccountServiceHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(model, instanceResource, ACCOUNTSERVICEHOMEPAGE, value);
    }

    /**
     * Removes a value of property AccountServiceHomepage as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeAccountServiceHomepage(
	    org.ontoware.rdf2go.model.node.Node value) {
	Base.remove(this.model, this.getResource(), ACCOUNTSERVICEHOMEPAGE,
		value);
    }

    /**
     * Removes a value of property AccountServiceHomepage given as an instance
     * of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeAccountServiceHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource,
	    Document value) {
	Base.remove(model, instanceResource, ACCOUNTSERVICEHOMEPAGE, value);
    }

    /**
     * Removes a value of property AccountServiceHomepage given as an instance
     * of Document
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeAccountServiceHomepage(Document value) {
	Base.remove(this.model, this.getResource(), ACCOUNTSERVICEHOMEPAGE,
		value);
    }

    /**
     * Removes all values of property AccountServiceHomepage * @param model an
     * RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllAccountServiceHomepage(Model model,
	    org.ontoware.rdf2go.model.node.Resource instanceResource) {
	Base.removeAll(model, instanceResource, ACCOUNTSERVICEHOMEPAGE);
    }

    /**
     * Removes all values of property AccountServiceHomepage * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllAccountServiceHomepage() {
	Base.removeAll(this.model, this.getResource(), ACCOUNTSERVICEHOMEPAGE);
    }
}