/*
 * generated by http://RDFReactor.semweb4j.org 
 * ($Id: CodeGenerator.java 1895 2013-02-09 17:39:56Z max.at.xam.de@gmail.com $) 
 * on 7/10/13 1:55 PM
 */

package de.m0ep.socc.config;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.Node;
import org.ontoware.rdf2go.model.node.Resource;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;
import org.ontoware.rdfreactor.schema.owl.OwlThing;
import org.rdfs.sioc.UserAccount;
import org.rdfs.sioc.services.Service;

/**
 * This class manages access to these properties:
 * <ul>
 * <li>DefaultUser</li>
 * <li>Id</li>
 * <li>Service</li>
 * </ul>
 * This class was generated by <a
 * href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 7/10/13 1:55 PM
 */
public class ConnectorCfg extends OwlThing {

    private static final long serialVersionUID = 9003203370683683480L;

    /** http://www.m0ep.de/ontologies/2013/soccconfig#Configuration */
    public static final URI RDFS_CLASS = new URIImpl(
            "http://www.m0ep.de/ontologies/2013/soccconfig#ConnectorCfg", false);

    /** http://www.m0ep.de/ontologies/2013/soccconfig#defaultUser */
    public static final URI DEFAULTUSER = new URIImpl(
            "http://www.m0ep.de/ontologies/2013/soccconfig#defaultUser", false);

    /** http://www.m0ep.de/ontologies/2013/soccconfig#id */
    public static final URI ID = new URIImpl("http://www.m0ep.de/ontologies/2013/soccconfig#id",
            false);

    /** http://www.m0ep.de/ontologies/2013/soccconfig#service */
    public static final URI SERVICE = new URIImpl(
            "http://www.m0ep.de/ontologies/2013/soccconfig#service", false);

    /**
     * All property-URIs with this class as domain. All properties of all
     * super-classes are also available.
     */
    public static final URI[] MANAGED_URIS = {
            new URIImpl("http://www.m0ep.de/ontologies/2013/soccconfig#defaultUser", false),
            new URIImpl("http://www.m0ep.de/ontologies/2013/soccconfig#id", false),
            new URIImpl("http://www.m0ep.de/ontologies/2013/soccconfig#service", false)
    };

    // protected constructors needed for inheritance

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.semweb4j.org
     * @param classURI
     *            URI of RDFS class
     * @param instanceIdentifier
     *            Resource that identifies this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model [Generated from RDFReactor template rule #c1]
     */
    protected ConnectorCfg(Model model, URI classURI, Resource instanceIdentifier, boolean write) {
        super(model, classURI, instanceIdentifier, write);
    }

    // public constructors

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param instanceIdentifier
     *            an RDF2Go Resource identifying this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model [Generated from RDFReactor template rule #c2]
     */
    public ConnectorCfg(Model model, Resource instanceIdentifier, boolean write) {
        super(model, RDFS_CLASS, instanceIdentifier, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a URI, given as
     * a String. Creating two wrappers for the same URI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param uriString
     *            a URI given as a String
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * @throws ModelRuntimeException
     *             if URI syntax is wrong [Generated from RDFReactor template
     *             rule #c7]
     */
    public ConnectorCfg(Model model, String uriString, boolean write) throws ModelRuntimeException {
        super(model, RDFS_CLASS, new URIImpl(uriString, false), write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a blank node.
     * Creating two wrappers for the same blank node is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param bnode
     *            BlankNode of this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model [Generated from RDFReactor template rule #c8]
     */
    public ConnectorCfg(Model model, BlankNode bnode, boolean write) {
        super(model, RDFS_CLASS, bnode, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a randomly
     * generated URI. Creating two wrappers results in different URIs.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model [Generated from RDFReactor template rule #c9]
     */
    public ConnectorCfg(Model model, boolean write) {
        super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
    }

    // /////////////////////////////////////////////////////////////////
    // typing

    /**
     * Return an existing instance of this class in the model. No statements are
     * written.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return an instance of Configuration or null if none exists [Generated
     *         from RDFReactor template rule #class0]
     */
    public static ConnectorCfg getInstance(Model model, Resource instanceResource) {
        return Base.getInstance(model, instanceResource, ConnectorCfg.class);
    }

    /**
     * Create a new instance of this class in the model. That is, create the
     * statement (instanceResource, RDF.type,
     * http://www.m0ep.de/ontologies/2013/soccconfig#Configuration).
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource [Generated from RDFReactor template rule
     *            #class1]
     */
    public static void createInstance(Model model, Resource instanceResource) {
        Base.createInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return true if instanceResource is an instance of this class in the
     *         model [Generated from RDFReactor template rule #class2]
     */
    public static boolean hasInstance(Model model, Resource instanceResource) {
        return Base.hasInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @return all instances of this class in Model 'model' as RDF resources
     *         [Generated from RDFReactor template rule #class3]
     */
    public static ClosableIterator<Resource> getAllInstances(Model model) {
        return Base.getAllInstances(model, RDFS_CLASS, Resource.class);
    }

    /**
     * @param model
     *            an RDF2Go model
     * @return all instances of this class in Model 'model' as a ReactorResult,
     *         which can conveniently be converted to iterator, list or array.
     *         [Generated from RDFReactor template rule #class3-as]
     */
    public static ReactorResult<? extends ConnectorCfg> getAllInstances_as(Model model) {
        return Base.getAllInstances_as(model, RDFS_CLASS, ConnectorCfg.class);
    }

    /**
     * Remove triple {@code (this, rdf:type, Configuration)} from this instance.
     * Other triples are not affected. To delete more, use deleteAllProperties
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource [Generated from RDFReactor template rule
     *            #class4]
     */
    public static void deleteInstance(Model model, Resource instanceResource) {
        Base.deleteInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * Delete all triples {@code (this, *, *)}, i.e. including {@code rdf:type}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource [Generated from RDFReactor template rule
     *            #class5]
     */
    public static void deleteAllProperties(Model model, Resource instanceResource) {
        Base.deleteAllProperties(model, instanceResource);
    }

    // /////////////////////////////////////////////////////////////////
    // property access methods

    /**
     * Check if {@code DefaultUser} has at least one value set.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return true if this property has at least one value [Generated from
     *         RDFReactor template rule #get0has-static]
     */
    public static boolean hasDefaultUser(Model model, Resource instanceResource) {
        return Base.has(model, instanceResource, DEFAULTUSER);
    }

    /**
     * Check if {@code DefaultUser} has at least one value set.
     * 
     * @return true if this property has at least one value [Generated from
     *         RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasDefaultUser() {
        return Base.has(this.model, this.getResource(), DEFAULTUSER);
    }

    /**
     * Check if {@code DefaultUser} has the given value (maybe among other
     * values).
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value [Generated from RDFReactor template rule
     *         #get0has-value-static]
     */
    public static boolean hasDefaultUser(Model model, Resource instanceResource, Node value) {
        return Base.hasValue(model, instanceResource, DEFAULTUSER, value);
    }

    /**
     * Check if {@code DefaultUser} has the given value (maybe among other
     * values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value [Generated from RDFReactor template rule
     *         #get0has-value-dynamic]
     */
    public boolean hasDefaultUser(Node value) {
        return Base.hasValue(this.model, this.getResource(), DEFAULTUSER, value);
    }

    /**
     * Get all values of property {@code DefaultUser} as an Iterator over RDF2Go
     * nodes.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes [Generated from RDFReactor
     *         template rule #get7static]
     */
    public static ClosableIterator<Node> getAllDefaultUser_asNode(Model model,
            Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, DEFAULTUSER);
    }

    /**
     * Get all values of property {@code DefaultUser} as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes [Generated from RDFReactor
     *         template rule #get8dynamic]
     */
    public ClosableIterator<Node> getAllDefaultUser_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), DEFAULTUSER);
    }

    /**
     * Get all values of property {@code DefaultUser}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type [Generated from RDFReactor template
     *         rule #get11static]
     */
    public static ClosableIterator<UserAccount> getAllDefaultUser(Model model,
            Resource instanceResource) {
        return Base.getAll(model, instanceResource, DEFAULTUSER, UserAccount.class);
    }

    /**
     * Get all values of property {@code DefaultUser}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type [Generated from RDFReactor template
     *         rule #get11static]
     */
    public static UserAccount getDefaultUser(Model model,
            Resource instanceResource) {
        return Base.getAll_as(model, instanceResource, DEFAULTUSER, UserAccount.class).firstValue();
    }

    /**
     * Get all values of property {@code DefaultUser}.
     * 
     * @return a ClosableIterator of $type [Generated from RDFReactor template
     *         rule #get12dynamic]
     */
    public ClosableIterator<UserAccount> getAllDefaultUser() {
        return Base.getAll(this.model, this.getResource(), DEFAULTUSER, UserAccount.class);
    }

    /**
     * Get first value of property {@code DefaultUser}.
     * 
     * @return a ClosableIterator of $type [Generated from RDFReactor template
     *         rule #get12dynamic]
     */
    public UserAccount getDefaultUser() {
        return Base.getAll_as(this.model, this.getResource(), DEFAULTUSER, UserAccount.class)
                .firstValue();
    }

    /**
     * Adds a value to property {@code DefaultUser} as an RDF2Go
     * {@linkplain Node}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @param value
     *            the value to be added [Generated from RDFReactor template rule
     *            #add1static]
     */
    public static void addDefaultUser(Model model, Resource instanceResource, Node value) {
        Base.add(model, instanceResource, DEFAULTUSER, value);
    }

    /**
     * Adds a value to property {@code DefaultUser} as an RDF2Go
     * {@linkplain Node}.
     * 
     * @param value
     *            the value to be added [Generated from RDFReactor template rule
     *            #add1dynamic]
     */
    public void addDefaultUser(Node value) {
        Base.add(this.model, this.getResource(), DEFAULTUSER, value);
    }

    /**
     * Adds a value to property {@code DefaultUser} from an instance of
     * {@linkplain UserAccount}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @param value
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addDefaultUser(Model model, Resource instanceResource, UserAccount value) {
        Base.add(model, instanceResource, DEFAULTUSER, value);
    }

    /**
     * Adds a value to property {@code DefaultUser} from an instance of
     * {@linkplain UserAccount}. [Generated from RDFReactor template rule
     * #add4dynamic]
     */
    public void addDefaultUser(UserAccount value) {
        Base.add(this.model, this.getResource(), DEFAULTUSER, value);
    }

    /**
     * Sets a value of property {@code DefaultUser} from an RDF2Go
     * {@linkplain Node}. First, all existing values are removed, then this
     * value is added. Cardinality constraints are not checked, but this method
     * exists only for properties with no {@code minCardinality} or
     * {@code minCardinality == 1}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @param value
     *            the value to be set [Generated from RDFReactor template rule
     *            #set1static]
     */
    public static void setDefaultUser(Model model, Resource instanceResource, Node value) {
        Base.set(model, instanceResource, DEFAULTUSER, value);
    }

    /**
     * Sets a value of property {@code DefaultUser} from an RDF2Go
     * {@linkplain Node}. First, all existing values are removed, then this
     * value is added. Cardinality constraints are not checked, but this method
     * exists only for properties with no {@code minCardinality} or
     * {@code minCardinality == 1}.
     * 
     * @param value
     *            the value to be added [Generated from RDFReactor template rule
     *            #set1dynamic]
     */
    public void setDefaultUser(Node value) {
        Base.set(this.model, this.getResource(), DEFAULTUSER, value);
    }

    /**
     * Sets a value of property {@code DefaultUser} from an instance of
     * {@linkplain UserAccount}. First, all existing values are removed, then
     * this value is added. Cardinality constraints are not checked, but this
     * method exists only for properties with no {@code minCardinality} or
     * {@code minCardinality == 1}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @param value
     *            the value to be added [Generated from RDFReactor template rule
     *            #set3static]
     */
    public static void setDefaultUser(Model model, Resource instanceResource, UserAccount value) {
        Base.set(model, instanceResource, DEFAULTUSER, value);
    }

    /**
     * Sets a value of property {@code DefaultUser} from an instance of
     * {@linkplain UserAccount}. First, all existing values are removed, then
     * this value is added. Cardinality constraints are not checked, but this
     * method exists only for properties with no {@code minCardinality} or
     * {@code minCardinality == 1}.
     * 
     * @param value
     *            the value to be added [Generated from RDFReactor template rule
     *            #set4dynamic]
     */
    public void setDefaultUser(UserAccount value) {
        Base.set(this.model, this.getResource(), DEFAULTUSER, value);
    }

    /**
     * Removes a value of property {@code DefaultUser} as an RDF2Go
     * {@linkplain Node}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed [Generated from RDFReactor template
     *            rule #remove1static]
     */
    public static void removeDefaultUser(Model model, Resource instanceResource, Node value) {
        Base.remove(model, instanceResource, DEFAULTUSER, value);
    }

    /**
     * Removes a value of property {@code DefaultUser} as an RDF2Go
     * {@linkplain Node}.
     * 
     * @param value
     *            the value to be removed [Generated from RDFReactor template
     *            rule #remove1dynamic]
     */
    public void removeDefaultUser(Node value) {
        Base.remove(this.model, this.getResource(), DEFAULTUSER, value);
    }

    /**
     * Removes a value of property {@code DefaultUser} given as an instance of
     * {@linkplain UserAccount}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed [Generated from RDFReactor template
     *            rule #remove3static]
     */
    public static void removeDefaultUser(Model model, Resource instanceResource,
            UserAccount value) {
        Base.remove(model, instanceResource, DEFAULTUSER, value);
    }

    /**
     * Removes a value of property {@code DefaultUser} given as an instance of
     * {@linkplain UserAccount}.
     * 
     * @param value
     *            the value to be removed [Generated from RDFReactor template
     *            rule #remove4dynamic]
     */
    public void removeDefaultUser(UserAccount value) {
        Base.remove(this.model, this.getResource(), DEFAULTUSER, value);
    }

    /**
     * Removes all values of property {@code DefaultUser}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource [Generated from RDFReactor template rule
     *            #removeall1static]
     */
    public static void removeAllDefaultUser(Model model, Resource instanceResource) {
        Base.removeAll(model, instanceResource, DEFAULTUSER);
    }

    /**
     * Removes all values of property {@code DefaultUser}. [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllDefaultUser() {
        Base.removeAll(this.model, this.getResource(), DEFAULTUSER);
    }

    /**
     * Check if {@code Id} has at least one value set.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return true if this property has at least one value [Generated from
     *         RDFReactor template rule #get0has-static]
     */
    public static boolean hasId(Model model, Resource instanceResource) {
        return Base.has(model, instanceResource, ID);
    }

    /**
     * Check if {@code Id} has at least one value set.
     * 
     * @return true if this property has at least one value [Generated from
     *         RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasId() {
        return Base.has(this.model, this.getResource(), ID);
    }

    /**
     * Check if {@code Id} has the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value [Generated from RDFReactor template rule
     *         #get0has-value-static]
     */
    public static boolean hasId(Model model, Resource instanceResource, Node value) {
        return Base.hasValue(model, instanceResource, ID, value);
    }

    /**
     * Check if {@code Id} has the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value [Generated from RDFReactor template rule
     *         #get0has-value-dynamic]
     */
    public boolean hasId(Node value) {
        return Base.hasValue(this.model, this.getResource(), ID, value);
    }

    /**
     * Get all values of property {@code Id} as an Iterator over RDF2Go nodes.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes [Generated from RDFReactor
     *         template rule #get7static]
     */
    public static ClosableIterator<Node> getAllId_asNode(Model model, Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, ID);
    }

    /**
     * Get all values of property {@code Id} as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes [Generated from RDFReactor
     *         template rule #get8dynamic]
     */
    public ClosableIterator<Node> getAllId_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), ID);
    }

    /**
     * Get all values of property {@code Id}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type [Generated from RDFReactor template
     *         rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllId(Model model,
            Resource instanceResource) {
        return Base.getAll(model, instanceResource, ID, java.lang.String.class);
    }

    /**
     * Get all values of property {@code Id}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type [Generated from RDFReactor template
     *         rule #get11static]
     */
    public static java.lang.String getId(Model model,
            Resource instanceResource) {
        return Base.getAll_as(model, instanceResource, ID, java.lang.String.class).firstValue();
    }

    /**
     * Get all values of property {@code Id}.
     * 
     * @return a ClosableIterator of $type [Generated from RDFReactor template
     *         rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllId() {
        return Base.getAll(this.model, this.getResource(), ID, java.lang.String.class);
    }

    /**
     * Get first value of property {@code Id}.
     * 
     * @return a ClosableIterator of $type [Generated from RDFReactor template
     *         rule #get12dynamic]
     */
    public java.lang.String getId() {
        return Base.getAll_as(this.model, this.getResource(), ID, java.lang.String.class)
                .firstValue();
    }

    /**
     * Adds a value to property {@code Id} as an RDF2Go {@linkplain Node}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @param value
     *            the value to be added [Generated from RDFReactor template rule
     *            #add1static]
     */
    public static void addId(Model model, Resource instanceResource, Node value) {
        Base.add(model, instanceResource, ID, value);
    }

    /**
     * Adds a value to property {@code Id} as an RDF2Go {@linkplain Node}.
     * 
     * @param value
     *            the value to be added [Generated from RDFReactor template rule
     *            #add1dynamic]
     */
    public void addId(Node value) {
        Base.add(this.model, this.getResource(), ID, value);
    }

    /**
     * Adds a value to property {@code Id} from an instance of
     * {@linkplain java.lang.String}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @param value
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addId(Model model, Resource instanceResource, java.lang.String value) {
        Base.add(model, instanceResource, ID, value);
    }

    /**
     * Adds a value to property {@code Id} from an instance of
     * {@linkplain java.lang.String}. [Generated from RDFReactor template rule
     * #add4dynamic]
     */
    public void addId(java.lang.String value) {
        Base.add(this.model, this.getResource(), ID, value);
    }

    /**
     * Sets a value of property {@code Id} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no {@code minCardinality} or {@code minCardinality == 1}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @param value
     *            the value to be set [Generated from RDFReactor template rule
     *            #set1static]
     */
    public static void setId(Model model, Resource instanceResource, Node value) {
        Base.set(model, instanceResource, ID, value);
    }

    /**
     * Sets a value of property {@code Id} from an RDF2Go {@linkplain Node}.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no {@code minCardinality} or {@code minCardinality == 1}.
     * 
     * @param value
     *            the value to be added [Generated from RDFReactor template rule
     *            #set1dynamic]
     */
    public void setId(Node value) {
        Base.set(this.model, this.getResource(), ID, value);
    }

    /**
     * Sets a value of property {@code Id} from an instance of
     * {@linkplain java.lang.String}. First, all existing values are removed,
     * then this value is added. Cardinality constraints are not checked, but
     * this method exists only for properties with no {@code minCardinality} or
     * {@code minCardinality == 1}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @param value
     *            the value to be added [Generated from RDFReactor template rule
     *            #set3static]
     */
    public static void setId(Model model, Resource instanceResource, java.lang.String value) {
        Base.set(model, instanceResource, ID, value);
    }

    /**
     * Sets a value of property {@code Id} from an instance of
     * {@linkplain java.lang.String}. First, all existing values are removed,
     * then this value is added. Cardinality constraints are not checked, but
     * this method exists only for properties with no {@code minCardinality} or
     * {@code minCardinality == 1}.
     * 
     * @param value
     *            the value to be added [Generated from RDFReactor template rule
     *            #set4dynamic]
     */
    public void setId(java.lang.String value) {
        Base.set(this.model, this.getResource(), ID, value);
    }

    /**
     * Removes a value of property {@code Id} as an RDF2Go {@linkplain Node}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed [Generated from RDFReactor template
     *            rule #remove1static]
     */
    public static void removeId(Model model, Resource instanceResource, Node value) {
        Base.remove(model, instanceResource, ID, value);
    }

    /**
     * Removes a value of property {@code Id} as an RDF2Go {@linkplain Node}.
     * 
     * @param value
     *            the value to be removed [Generated from RDFReactor template
     *            rule #remove1dynamic]
     */
    public void removeId(Node value) {
        Base.remove(this.model, this.getResource(), ID, value);
    }

    /**
     * Removes a value of property {@code Id} given as an instance of
     * {@linkplain java.lang.String}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed [Generated from RDFReactor template
     *            rule #remove3static]
     */
    public static void removeId(Model model, Resource instanceResource, java.lang.String value) {
        Base.remove(model, instanceResource, ID, value);
    }

    /**
     * Removes a value of property {@code Id} given as an instance of
     * {@linkplain java.lang.String}.
     * 
     * @param value
     *            the value to be removed [Generated from RDFReactor template
     *            rule #remove4dynamic]
     */
    public void removeId(java.lang.String value) {
        Base.remove(this.model, this.getResource(), ID, value);
    }

    /**
     * Removes all values of property {@code Id}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource [Generated from RDFReactor template rule
     *            #removeall1static]
     */
    public static void removeAllId(Model model, Resource instanceResource) {
        Base.removeAll(model, instanceResource, ID);
    }

    /**
     * Removes all values of property {@code Id}. [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllId() {
        Base.removeAll(this.model, this.getResource(), ID);
    }

    /**
     * Check if {@code Service} has at least one value set.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return true if this property has at least one value [Generated from
     *         RDFReactor template rule #get0has-static]
     */
    public static boolean hasService(Model model, Resource instanceResource) {
        return Base.has(model, instanceResource, SERVICE);
    }

    /**
     * Check if {@code Service} has at least one value set.
     * 
     * @return true if this property has at least one value [Generated from
     *         RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasService() {
        return Base.has(this.model, this.getResource(), SERVICE);
    }

    /**
     * Check if {@code Service} has the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value [Generated from RDFReactor template rule
     *         #get0has-value-static]
     */
    public static boolean hasService(Model model, Resource instanceResource, Node value) {
        return Base.hasValue(model, instanceResource, SERVICE, value);
    }

    /**
     * Check if {@code Service} has the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value [Generated from RDFReactor template rule
     *         #get0has-value-dynamic]
     */
    public boolean hasService(Node value) {
        return Base.hasValue(this.model, this.getResource(), SERVICE, value);
    }

    /**
     * Get all values of property {@code Service} as an Iterator over RDF2Go
     * nodes.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes [Generated from RDFReactor
     *         template rule #get7static]
     */
    public static ClosableIterator<Node> getAllService_asNode(Model model,
            Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, SERVICE);
    }

    /**
     * Get all values of property {@code Service} as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes [Generated from RDFReactor
     *         template rule #get8dynamic]
     */
    public ClosableIterator<Node> getAllService_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), SERVICE);
    }

    /**
     * Get all values of property {@code Service}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type [Generated from RDFReactor template
     *         rule #get11static]
     */
    public static ClosableIterator<Service> getAllService(Model model, Resource instanceResource) {
        return Base.getAll(model, instanceResource, SERVICE, Service.class);
    }

    /**
     * Get all values of property {@code Service}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type [Generated from RDFReactor template
     *         rule #get11static]
     */
    public static Service getService(Model model, Resource instanceResource) {
        return Base.getAll_as(model, instanceResource, SERVICE, Service.class).firstValue();
    }

    /**
     * Get all values of property {@code Service}.
     * 
     * @return a ClosableIterator of $type [Generated from RDFReactor template
     *         rule #get12dynamic]
     */
    public ClosableIterator<Service> getAllService() {
        return Base.getAll(this.model, this.getResource(), SERVICE, Service.class);
    }

    /**
     * Get all values of property {@code Service}.
     * 
     * @return a ClosableIterator of $type [Generated from RDFReactor template
     *         rule #get12dynamic]
     */
    public Service getService() {
        return Base.getAll_as(this.model, this.getResource(), SERVICE, Service.class).firstValue();
    }

    /**
     * Adds a value to property {@code Service} as an RDF2Go {@linkplain Node}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @param value
     *            the value to be added [Generated from RDFReactor template rule
     *            #add1static]
     */
    public static void addService(Model model, Resource instanceResource, Node value) {
        Base.add(model, instanceResource, SERVICE, value);
    }

    /**
     * Adds a value to property {@code Service} as an RDF2Go {@linkplain Node}.
     * 
     * @param value
     *            the value to be added [Generated from RDFReactor template rule
     *            #add1dynamic]
     */
    public void addService(Node value) {
        Base.add(this.model, this.getResource(), SERVICE, value);
    }

    /**
     * Adds a value to property {@code Service} from an instance of
     * {@linkplain Service}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @param value
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addService(Model model, Resource instanceResource, Service value) {
        Base.add(model, instanceResource, SERVICE, value);
    }

    /**
     * Adds a value to property {@code Service} from an instance of
     * {@linkplain Service}. [Generated from RDFReactor template rule
     * #add4dynamic]
     */
    public void addService(Service value) {
        Base.add(this.model, this.getResource(), SERVICE, value);
    }

    /**
     * Sets a value of property {@code Service} from an RDF2Go {@linkplain Node}
     * . First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no {@code minCardinality} or {@code minCardinality == 1}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @param value
     *            the value to be set [Generated from RDFReactor template rule
     *            #set1static]
     */
    public static void setService(Model model, Resource instanceResource, Node value) {
        Base.set(model, instanceResource, SERVICE, value);
    }

    /**
     * Sets a value of property {@code Service} from an RDF2Go {@linkplain Node}
     * . First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no {@code minCardinality} or {@code minCardinality == 1}.
     * 
     * @param value
     *            the value to be added [Generated from RDFReactor template rule
     *            #set1dynamic]
     */
    public void setService(Node value) {
        Base.set(this.model, this.getResource(), SERVICE, value);
    }

    /**
     * Sets a value of property {@code Service} from an instance of
     * {@linkplain Service}. First, all existing values are removed, then this
     * value is added. Cardinality constraints are not checked, but this method
     * exists only for properties with no {@code minCardinality} or
     * {@code minCardinality == 1}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @param value
     *            the value to be added [Generated from RDFReactor template rule
     *            #set3static]
     */
    public static void setService(Model model, Resource instanceResource, Service value) {
        Base.set(model, instanceResource, SERVICE, value);
    }

    /**
     * Sets a value of property {@code Service} from an instance of
     * {@linkplain Service}. First, all existing values are removed, then this
     * value is added. Cardinality constraints are not checked, but this method
     * exists only for properties with no {@code minCardinality} or
     * {@code minCardinality == 1}.
     * 
     * @param value
     *            the value to be added [Generated from RDFReactor template rule
     *            #set4dynamic]
     */
    public void setService(Service value) {
        Base.set(this.model, this.getResource(), SERVICE, value);
    }

    /**
     * Removes a value of property {@code Service} as an RDF2Go
     * {@linkplain Node}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed [Generated from RDFReactor template
     *            rule #remove1static]
     */
    public static void removeService(Model model, Resource instanceResource, Node value) {
        Base.remove(model, instanceResource, SERVICE, value);
    }

    /**
     * Removes a value of property {@code Service} as an RDF2Go
     * {@linkplain Node}.
     * 
     * @param value
     *            the value to be removed [Generated from RDFReactor template
     *            rule #remove1dynamic]
     */
    public void removeService(Node value) {
        Base.remove(this.model, this.getResource(), SERVICE, value);
    }

    /**
     * Removes a value of property {@code Service} given as an instance of
     * {@linkplain Service}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed [Generated from RDFReactor template
     *            rule #remove3static]
     */
    public static void removeService(Model model, Resource instanceResource, Service value) {
        Base.remove(model, instanceResource, SERVICE, value);
    }

    /**
     * Removes a value of property {@code Service} given as an instance of
     * {@linkplain Service}.
     * 
     * @param value
     *            the value to be removed [Generated from RDFReactor template
     *            rule #remove4dynamic]
     */
    public void removeService(Service value) {
        Base.remove(this.model, this.getResource(), SERVICE, value);
    }

    /**
     * Removes all values of property {@code Service}.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource [Generated from RDFReactor template rule
     *            #removeall1static]
     */
    public static void removeAllService(Model model, Resource instanceResource) {
        Base.removeAll(model, instanceResource, SERVICE);
    }

    /**
     * Removes all values of property {@code Service}. [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllService() {
        Base.removeAll(this.model, this.getResource(), SERVICE);
    }
}
