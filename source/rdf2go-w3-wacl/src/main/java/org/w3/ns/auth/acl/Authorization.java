/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) on 5/28/13 8:39 PM
 */

package org.w3.ns.auth.acl;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.Resource;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

import com.xmlns.foaf.Agent;

/**
 * This class manages access to these properties:
 * <ul>
 * <li>AccessMode</li>
 * <li>Agent</li>
 * <li>AgentClass</li>
 * <li>DefaultAccessForNew</li>
 * <li>To</li>
 * <li>AccessToClass</li>
 * </ul>
 * This class was generated by <a
 * href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 5/28/13 8:39 PM
 */
public class Authorization extends Thing {
    private static final long serialVersionUID = -3875209920931093825L;

    /** http://www.w3.org/ns/auth/acl#Authorization */
    public static final URI RDFS_CLASS = new URIImpl(
            "http://www.w3.org/ns/auth/acl#Authorization", false);

    /** http://www.w3.org/ns/auth/acl#mode */
    public static final URI ACCESSMODE = new URIImpl(
            "http://www.w3.org/ns/auth/acl#mode", false);

    /** http://www.w3.org/ns/auth/acl#agent */
    public static final URI AGENT = new URIImpl(
            "http://www.w3.org/ns/auth/acl#agent", false);

    /** http://www.w3.org/ns/auth/acl#agentClass */
    public static final URI AGENTCLASS = new URIImpl(
            "http://www.w3.org/ns/auth/acl#agentClass", false);

    /** http://www.w3.org/ns/auth/acl#defaultForNew */
    public static final URI DEFAULT_ACCESS_FOR_NEW = new URIImpl(
            "http://www.w3.org/ns/auth/acl#defaultForNew", false);

    /** http://www.w3.org/ns/auth/acl#accessTo */
    public static final URI ACCESS_TO = new URIImpl(
            "http://www.w3.org/ns/auth/acl#accessTo", false);

    /** http://www.w3.org/ns/auth/acl#accessToClass */
    public static final URI ACCESS_TO_CLASS = new URIImpl(
            "http://www.w3.org/ns/auth/acl#accessToClass", false);

    /**
     * All property-URIs with this class as domain. All properties of all
     * super-classes are also available.
     */
    public static final URI[] MANAGED_URIS = {
            new URIImpl("http://www.w3.org/ns/auth/acl#mode", false),
            new URIImpl("http://www.w3.org/ns/auth/acl#agent", false),
            new URIImpl("http://www.w3.org/ns/auth/acl#agentClass", false),
            new URIImpl("http://www.w3.org/ns/auth/acl#defaultForNew", false),
            new URIImpl("http://www.w3.org/ns/auth/acl#accessTo", false),
            new URIImpl("http://www.w3.org/ns/auth/acl#accessToClass", false),
    };

    // protected constructors needed for inheritance

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
     * @param classURI URI of RDFS class
     * @param instanceIdentifier Resource that identifies this instance
     * @param write if true, the statement (this, rdf:type, TYPE) is written to
     *            the model [Generated from RDFReactor template rule #c1]
     */
    protected Authorization(Model model, URI classURI,
            org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
            boolean write) {
        super(model, classURI, instanceIdentifier, write);
    }

    // public constructors

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param instanceIdentifier an RDF2Go Resource identifying this instance
     * @param write if true, the statement (this, rdf:type, TYPE) is written to
     *            the model [Generated from RDFReactor template rule #c2]
     */
    public Authorization(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
            boolean write) {
        super(model, RDFS_CLASS, instanceIdentifier, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a URI, given as
     * a String. Creating two wrappers for the same URI is legal.
     * 
     * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param uriString a URI given as a String
     * @param write if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * @throws ModelRuntimeException if URI syntax is wrong [Generated from
     *             RDFReactor template rule #c7]
     */
    public Authorization(Model model, String uriString, boolean write)
            throws ModelRuntimeException {
        super(model, RDFS_CLASS, new URIImpl(uriString, false), write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a blank node.
     * Creating two wrappers for the same blank node is legal.
     * 
     * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param bnode BlankNode of this instance
     * @param write if true, the statement (this, rdf:type, TYPE) is written to
     *            the model [Generated from RDFReactor template rule #c8]
     */
    public Authorization(Model model, BlankNode bnode, boolean write) {
        super(model, RDFS_CLASS, bnode, write);
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a randomly
     * generated URI. Creating two wrappers results in different URIs.
     * 
     * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param write if true, the statement (this, rdf:type, TYPE) is written to
     *            the model [Generated from RDFReactor template rule #c9]
     */
    public Authorization(Model model, boolean write) {
        super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
    }

    // /////////////////////////////////////////////////////////////////
    // typing

    /**
     * Return an existing instance of this class in the model. No statements are
     * written.
     * 
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return an instance of Authorization or null if none existst [Generated
     *         from RDFReactor template rule #class0]
     */
    public static Authorization getInstance(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getInstance(model, instanceResource, Authorization.class);
    }

    /**
     * Create a new instance of this class in the model. That is, create the
     * statement (instanceResource, RDF.type,
     * http://www.w3.org/ns/auth/acl#Authorization).
     * 
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource [Generated from RDFReactor
     *            template rule #class1]
     */
    public static void createInstance(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.createInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource
     * @return true if instanceResource is an instance of this class in the
     *         model [Generated from RDFReactor template rule #class2]
     */
    public static boolean hasInstance(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.hasInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * @param model an RDF2Go model
     * @return all instances of this class in Model 'model' as RDF resources
     *         [Generated from RDFReactor template rule #class3]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(
            Model model) {
        return Base.getAllInstances(model, RDFS_CLASS,
                org.ontoware.rdf2go.model.node.Resource.class);
    }

    /**
     * @param model an RDF2Go model
     * @return all instances of this class in Model 'model' as a ReactorResult,
     *         which can conveniently be converted to iterator, list or array.
     *         [Generated from RDFReactor template rule #class3-as]
     */
    public static ReactorResult<? extends Authorization> getAllInstances_as(
            Model model) {
        return Base.getAllInstances_as(model, RDFS_CLASS, Authorization.class);
    }

    /**
     * Remove rdf:type Authorization from this instance. Other triples are not
     * affected. To delete more, use deleteAllProperties
     * 
     * @param model an RDF2Go model
     * @param instanceResource an RDF2Go resource [Generated from RDFReactor
     *            template rule #class4]
     */
    public static void deleteInstance(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.deleteInstance(model, RDFS_CLASS, instanceResource);
    }

    /**
     * Delete all (this, *, *), i.e. including rdf:type
     * 
     * @param model an RDF2Go model
     * @param resource
     */
    public static void deleteAllProperties(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.deleteAllProperties(model, instanceResource);
    }

    // /////////////////////////////////////////////////////////////////
    // property access methods

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33037ca5 has at
     * least one value set
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value [Generated from
     *         RDFReactor template rule #get0has-static]
     */
    public static boolean hasAccessMode(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, ACCESSMODE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33037ca5 has at
     * least one value set
     * 
     * @return true if this property has at least one value [Generated from
     *         RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasAccessMode() {
        return Base.has(this.model, this.getResource(), ACCESSMODE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33037ca5 has
     * the given value (maybe among other values).
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value [Generated from RDFReactor template rule
     *         #get0has-value-static]
     */
    public static boolean hasAccessMode(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, ACCESSMODE, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@33037ca5 has
     * the given value (maybe among other values).
     * 
     * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value [Generated from RDFReactor template rule
     *         #get0has-value-dynamic]
     */
    public boolean hasAccessMode(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), ACCESSMODE, value);
    }

    /**
     * Get all values of property AccessMode as an Iterator over RDF2Go nodes
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes [Generated from RDFReactor
     *         template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAccessMode_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, ACCESSMODE);
    }

    /**
     * Get all values of property AccessMode as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes [Generated from RDFReactor
     *         template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAccessMode_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), ACCESSMODE);
    }

    /**
     * Get all values of property AccessMode * @param model an RDF2Go model
     * 
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type [Generated from RDFReactor template
     *         rule #get11static]
     */
    public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Class> getAllAccessMode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model, instanceResource, ACCESSMODE,
                org.ontoware.rdfreactor.schema.rdfs.Class.class);
    }

    /**
     * Get all values of property AccessMode * @return a ClosableIterator of
     * $type [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Class> getAllAccessMode() {
        return Base.getAll(this.model, this.getResource(), ACCESSMODE,
                org.ontoware.rdfreactor.schema.rdfs.Class.class);
    }

    /**
     * Get all values of property AccessMode * @return a ClosableIterator of
     * $type [Generated from RDFReactor template rule #get12dynamic]
     */
    public org.ontoware.rdfreactor.schema.rdfs.Class getAccessMode() {
        return Base.getAll_as(this.model, this.getResource(), ACCESSMODE,
                org.ontoware.rdfreactor.schema.rdfs.Class.class).firstValue();
    }

    /**
     * Adds a value to property AccessMode as an RDF2Go node
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #add1static]
     */
    public static void addAccessMode(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, ACCESSMODE, value);
    }

    /**
     * Adds a value to property AccessMode as an RDF2Go node
     * 
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #add1dynamic]
     */
    public void addAccessMode(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), ACCESSMODE, value);
    }

    /**
     * Adds a value to property AccessMode from an instance of
     * org.ontoware.rdfreactor.schema.rdfs.Class
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource [Generated from RDFReactor template
     *            rule #add3static]
     */
    public static void addAccessMode(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdfreactor.schema.rdfs.Class value) {
        Base.add(model, instanceResource, ACCESSMODE, value);
    }

    /**
     * Adds a value to property AccessMode from an instance of
     * org.ontoware.rdfreactor.schema.rdfs.Class [Generated from RDFReactor
     * template rule #add4dynamic]
     */
    public void addAccessMode(org.ontoware.rdfreactor.schema.rdfs.Class value) {
        Base.add(this.model, this.getResource(), ACCESSMODE, value);
    }

    /**
     * Sets a value of property AccessMode from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be set [Generated from RDFReactor template rule
     *            #set1static]
     */
    public static void setAccessMode(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, ACCESSMODE, value);
    }

    /**
     * Sets a value of property AccessMode from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #set1dynamic]
     */
    public void setAccessMode(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), ACCESSMODE, value);
    }

    /**
     * Sets a value of property AccessMode from an instance of
     * org.ontoware.rdfreactor.schema.rdfs.Class First, all existing values are
     * removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #set3static]
     */
    public static void setAccessMode(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdfreactor.schema.rdfs.Class value) {
        Base.set(model, instanceResource, ACCESSMODE, value);
    }

    /**
     * Sets a value of property AccessMode from an instance of
     * org.ontoware.rdfreactor.schema.rdfs.Class First, all existing values are
     * removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #set4dynamic]
     */
    public void setAccessMode(org.ontoware.rdfreactor.schema.rdfs.Class value) {
        Base.set(this.model, this.getResource(), ACCESSMODE, value);
    }

    /**
     * Removes a value of property AccessMode as an RDF2Go node
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be removed [Generated from RDFReactor template
     *            rule #remove1static]
     */
    public static void removeAccessMode(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, ACCESSMODE, value);
    }

    /**
     * Removes a value of property AccessMode as an RDF2Go node
     * 
     * @param value the value to be removed [Generated from RDFReactor template
     *            rule #remove1dynamic]
     */
    public void removeAccessMode(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), ACCESSMODE, value);
    }

    /**
     * Removes a value of property AccessMode given as an instance of
     * org.ontoware.rdfreactor.schema.rdfs.Class
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be removed [Generated from RDFReactor template
     *            rule #remove3static]
     */
    public static void removeAccessMode(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdfreactor.schema.rdfs.Class value) {
        Base.remove(model, instanceResource, ACCESSMODE, value);
    }

    /**
     * Removes a value of property AccessMode given as an instance of
     * org.ontoware.rdfreactor.schema.rdfs.Class
     * 
     * @param value the value to be removed [Generated from RDFReactor template
     *            rule #remove4dynamic]
     */
    public void removeAccessMode(org.ontoware.rdfreactor.schema.rdfs.Class value) {
        Base.remove(this.model, this.getResource(), ACCESSMODE, value);
    }

    /**
     * Removes all values of property AccessMode * @param model an RDF2Go model
     * 
     * @param resource an RDF2Go resource [Generated from RDFReactor template
     *            rule #removeall1static]
     */
    public static void removeAllAccessMode(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, ACCESSMODE);
    }

    /**
     * Removes all values of property AccessMode * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllAccessMode() {
        Base.removeAll(this.model, this.getResource(), ACCESSMODE);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3e78c47c has at
     * least one value set
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value [Generated from
     *         RDFReactor template rule #get0has-static]
     */
    public static boolean hasAgent(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, AGENT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3e78c47c has at
     * least one value set
     * 
     * @return true if this property has at least one value [Generated from
     *         RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasAgent() {
        return Base.has(this.model, this.getResource(), AGENT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3e78c47c has
     * the given value (maybe among other values).
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value [Generated from RDFReactor template rule
     *         #get0has-value-static]
     */
    public static boolean hasAgent(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, AGENT, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3e78c47c has
     * the given value (maybe among other values).
     * 
     * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value [Generated from RDFReactor template rule
     *         #get0has-value-dynamic]
     */
    public boolean hasAgent(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), AGENT, value);
    }

    /**
     * Get all values of property Agent as an Iterator over RDF2Go nodes
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes [Generated from RDFReactor
     *         template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAgent_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, AGENT);
    }

    /**
     * Get all values of property Agent as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes [Generated from RDFReactor
     *         template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAgent_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), AGENT);
    }

    /**
     * Get all values of property Agent * @param model an RDF2Go model
     * 
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type [Generated from RDFReactor template
     *         rule #get11static]
     */
    public static ClosableIterator<Agent> getAllAgent(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model, instanceResource, AGENT, Agent.class);
    }

    /**
     * Get all values of property Agent * @return a ClosableIterator of $type
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Agent> getAllAgent() {
        return Base.getAll(this.model, this.getResource(), AGENT, Agent.class);
    }

    /**
     * Get all values of property Agent * @return a ClosableIterator of $type
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public Agent getAgent() {
        return Base.getAll_as(this.model, this.getResource(), AGENT,
                Agent.class).firstValue();
    }

    /**
     * Adds a value to property Agent as an RDF2Go node
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #add1static]
     */
    public static void addAgent(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, AGENT, value);
    }

    /**
     * Adds a value to property Agent as an RDF2Go node
     * 
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #add1dynamic]
     */
    public void addAgent(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), AGENT, value);
    }

    /**
     * Adds a value to property Agent from an instance of Agent
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource [Generated from RDFReactor template
     *            rule #add3static]
     */
    public static void addAgent(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Agent value) {
        Base.add(model, instanceResource, AGENT, value);
    }

    /**
     * Adds a value to property Agent from an instance of Agent [Generated from
     * RDFReactor template rule #add4dynamic]
     */
    public void addAgent(Agent value) {
        Base.add(this.model, this.getResource(), AGENT, value);
    }

    /**
     * Sets a value of property Agent from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be set [Generated from RDFReactor template rule
     *            #set1static]
     */
    public static void setAgent(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, AGENT, value);
    }

    /**
     * Sets a value of property Agent from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #set1dynamic]
     */
    public void setAgent(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), AGENT, value);
    }

    /**
     * Sets a value of property Agent from an instance of Agent First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #set3static]
     */
    public static void setAgent(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Agent value) {
        Base.set(model, instanceResource, AGENT, value);
    }

    /**
     * Sets a value of property Agent from an instance of Agent First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #set4dynamic]
     */
    public void setAgent(Agent value) {
        Base.set(this.model, this.getResource(), AGENT, value);
    }

    /**
     * Removes a value of property Agent as an RDF2Go node
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be removed [Generated from RDFReactor template
     *            rule #remove1static]
     */
    public static void removeAgent(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, AGENT, value);
    }

    /**
     * Removes a value of property Agent as an RDF2Go node
     * 
     * @param value the value to be removed [Generated from RDFReactor template
     *            rule #remove1dynamic]
     */
    public void removeAgent(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), AGENT, value);
    }

    /**
     * Removes a value of property Agent given as an instance of Agent
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be removed [Generated from RDFReactor template
     *            rule #remove3static]
     */
    public static void removeAgent(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Agent value) {
        Base.remove(model, instanceResource, AGENT, value);
    }

    /**
     * Removes a value of property Agent given as an instance of Agent
     * 
     * @param value the value to be removed [Generated from RDFReactor template
     *            rule #remove4dynamic]
     */
    public void removeAgent(Agent value) {
        Base.remove(this.model, this.getResource(), AGENT, value);
    }

    /**
     * Removes all values of property Agent * @param model an RDF2Go model
     * 
     * @param resource an RDF2Go resource [Generated from RDFReactor template
     *            rule #removeall1static]
     */
    public static void removeAllAgent(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, AGENT);
    }

    /**
     * Removes all values of property Agent * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllAgent() {
        Base.removeAll(this.model, this.getResource(), AGENT);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a781bc7 has at
     * least one value set
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value [Generated from
     *         RDFReactor template rule #get0has-static]
     */
    public static boolean hasAgentClass(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, AGENTCLASS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a781bc7 has at
     * least one value set
     * 
     * @return true if this property has at least one value [Generated from
     *         RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasAgentClass() {
        return Base.has(this.model, this.getResource(), AGENTCLASS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a781bc7 has
     * the given value (maybe among other values).
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value [Generated from RDFReactor template rule
     *         #get0has-value-static]
     */
    public static boolean hasAgentClass(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, AGENTCLASS, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a781bc7 has
     * the given value (maybe among other values).
     * 
     * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value [Generated from RDFReactor template rule
     *         #get0has-value-dynamic]
     */
    public boolean hasAgentClass(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), AGENTCLASS, value);
    }

    /**
     * Get all values of property AgentClass as an Iterator over RDF2Go nodes
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes [Generated from RDFReactor
     *         template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAgentClass_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, AGENTCLASS);
    }

    /**
     * Get all values of property AgentClass as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes [Generated from RDFReactor
     *         template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAgentClass_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), AGENTCLASS);
    }

    /**
     * Get all values of property AgentClass * @param model an RDF2Go model
     * 
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type [Generated from RDFReactor template
     *         rule #get11static]
     */
    public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Class> getAllAgentClass(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model, instanceResource, AGENTCLASS,
                org.ontoware.rdfreactor.schema.rdfs.Class.class);
    }

    /**
     * Get all values of property AgentClass * @return a ClosableIterator of
     * $type [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Class> getAllAgentClass() {
        return Base.getAll(this.model, this.getResource(), AGENTCLASS,
                org.ontoware.rdfreactor.schema.rdfs.Class.class);
    }

    /**
     * Get all values of property AgentClass * @return a ClosableIterator of
     * $type [Generated from RDFReactor template rule #get12dynamic]
     */
    public org.ontoware.rdfreactor.schema.rdfs.Class getAgentClass() {
        return Base.getAll_as(this.model, this.getResource(), AGENTCLASS,
                org.ontoware.rdfreactor.schema.rdfs.Class.class).firstValue();
    }

    /**
     * Adds a value to property AgentClass as an RDF2Go node
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #add1static]
     */
    public static void addAgentClass(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, AGENTCLASS, value);
    }

    /**
     * Adds a value to property AgentClass as an RDF2Go node
     * 
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #add1dynamic]
     */
    public void addAgentClass(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), AGENTCLASS, value);
    }

    /**
     * Adds a value to property AgentClass from an instance of
     * org.ontoware.rdfreactor.schema.rdfs.Class
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource [Generated from RDFReactor template
     *            rule #add3static]
     */
    public static void addAgentClass(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdfreactor.schema.rdfs.Class value) {
        Base.add(model, instanceResource, AGENTCLASS, value);
    }

    /**
     * Adds a value to property AgentClass from an instance of
     * org.ontoware.rdfreactor.schema.rdfs.Class [Generated from RDFReactor
     * template rule #add4dynamic]
     */
    public void addAgentClass(org.ontoware.rdfreactor.schema.rdfs.Class value) {
        Base.add(this.model, this.getResource(), AGENTCLASS, value);
    }

    /**
     * Sets a value of property AgentClass from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be set [Generated from RDFReactor template rule
     *            #set1static]
     */
    public static void setAgentClass(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, AGENTCLASS, value);
    }

    /**
     * Sets a value of property AgentClass from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #set1dynamic]
     */
    public void setAgentClass(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), AGENTCLASS, value);
    }

    /**
     * Sets a value of property AgentClass from an instance of
     * org.ontoware.rdfreactor.schema.rdfs.Class First, all existing values are
     * removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #set3static]
     */
    public static void setAgentClass(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdfreactor.schema.rdfs.Class value) {
        Base.set(model, instanceResource, AGENTCLASS, value);
    }

    /**
     * Sets a value of property AgentClass from an instance of
     * org.ontoware.rdfreactor.schema.rdfs.Class First, all existing values are
     * removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #set4dynamic]
     */
    public void setAgentClass(org.ontoware.rdfreactor.schema.rdfs.Class value) {
        Base.set(this.model, this.getResource(), AGENTCLASS, value);
    }

    /**
     * Removes a value of property AgentClass as an RDF2Go node
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be removed [Generated from RDFReactor template
     *            rule #remove1static]
     */
    public static void removeAgentClass(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, AGENTCLASS, value);
    }

    /**
     * Removes a value of property AgentClass as an RDF2Go node
     * 
     * @param value the value to be removed [Generated from RDFReactor template
     *            rule #remove1dynamic]
     */
    public void removeAgentClass(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), AGENTCLASS, value);
    }

    /**
     * Removes a value of property AgentClass given as an instance of
     * org.ontoware.rdfreactor.schema.rdfs.Class
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be removed [Generated from RDFReactor template
     *            rule #remove3static]
     */
    public static void removeAgentClass(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdfreactor.schema.rdfs.Class value) {
        Base.remove(model, instanceResource, AGENTCLASS, value);
    }

    /**
     * Removes a value of property AgentClass given as an instance of
     * org.ontoware.rdfreactor.schema.rdfs.Class
     * 
     * @param value the value to be removed [Generated from RDFReactor template
     *            rule #remove4dynamic]
     */
    public void removeAgentClass(org.ontoware.rdfreactor.schema.rdfs.Class value) {
        Base.remove(this.model, this.getResource(), AGENTCLASS, value);
    }

    /**
     * Removes all values of property AgentClass * @param model an RDF2Go model
     * 
     * @param resource an RDF2Go resource [Generated from RDFReactor template
     *            rule #removeall1static]
     */
    public static void removeAllAgentClass(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, AGENTCLASS);
    }

    /**
     * Removes all values of property AgentClass * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllAgentClass() {
        Base.removeAll(this.model, this.getResource(), AGENTCLASS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@409c8e14 has at
     * least one value set
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value [Generated from
     *         RDFReactor template rule #get0has-static]
     */
    public static boolean hasDefaultAccessForNew(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, DEFAULT_ACCESS_FOR_NEW);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@409c8e14 has at
     * least one value set
     * 
     * @return true if this property has at least one value [Generated from
     *         RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasDefaultAccessForNew() {
        return Base.has(this.model, this.getResource(),
                DEFAULT_ACCESS_FOR_NEW);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@409c8e14 has
     * the given value (maybe among other values).
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value [Generated from RDFReactor template rule
     *         #get0has-value-static]
     */
    public static boolean hasDefaultAccessForNew(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource,
                DEFAULT_ACCESS_FOR_NEW, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@409c8e14 has
     * the given value (maybe among other values).
     * 
     * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value [Generated from RDFReactor template rule
     *         #get0has-value-dynamic]
     */
    public boolean hasDefaultAccessForNew(
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(),
                DEFAULT_ACCESS_FOR_NEW, value);
    }

    /**
     * Get all values of property DefaultAccessForNew as an Iterator over RDF2Go
     * nodes
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes [Generated from RDFReactor
     *         template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDefaultAccessForNew_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource,
                DEFAULT_ACCESS_FOR_NEW);
    }

    /**
     * Get all values of property DefaultAccessForNew as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes [Generated from RDFReactor
     *         template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllDefaultAccessForNew_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(),
                DEFAULT_ACCESS_FOR_NEW);
    }

    /**
     * Get all values of property DefaultAccessForNew * @param model an RDF2Go
     * model
     * 
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type [Generated from RDFReactor template
     *         rule #get11static]
     */
    public static ClosableIterator<Thing> getAllDefaultAccessForNew(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model, instanceResource,
                DEFAULT_ACCESS_FOR_NEW, Thing.class);
    }

    /**
     * Get all values of property DefaultAccessForNew * @return a
     * ClosableIterator of $type [Generated from RDFReactor template rule
     * #get12dynamic]
     */
    public ClosableIterator<Thing> getAllDefaultAccessForNew() {
        return Base.getAll(this.model, this.getResource(),
                DEFAULT_ACCESS_FOR_NEW, Thing.class);
    }

    /**
     * Get all values of property DefaultAccessForNew * @return a
     * ClosableIterator of $type [Generated from RDFReactor template rule
     * #get12dynamic]
     */
    public Thing getDefaultAccessForNew() {
        return Base.getAll_as(this.model, this.getResource(),
                DEFAULT_ACCESS_FOR_NEW, Thing.class).firstValue();
    }

    /**
     * Adds a value to property DefaultAccessForNew as an RDF2Go node
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #add1static]
     */
    public static void addDefaultAccessForNew(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, DEFAULT_ACCESS_FOR_NEW, value);
    }

    /**
     * Adds a value to property DefaultAccessForNew as an RDF2Go node
     * 
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #add1dynamic]
     */
    public void addDefaultAccessForNew(
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), DEFAULT_ACCESS_FOR_NEW,
                value);
    }

    /**
     * Adds a value to property DefaultAccessForNew from an instance of Thing
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource [Generated from RDFReactor template
     *            rule #add3static]
     */
    public static void addDefaultAccessForNew(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.add(model, instanceResource, DEFAULT_ACCESS_FOR_NEW, value);
    }

    /**
     * Adds a value to property DefaultAccessForNew from an instance of Thing
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addDefaultAccessForNew(Thing value) {
        Base.add(this.model, this.getResource(), DEFAULT_ACCESS_FOR_NEW,
                value);
    }

    /**
     * Sets a value of property DefaultAccessForNew from an RDF2Go node. First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be set [Generated from RDFReactor template rule
     *            #set1static]
     */
    public static void setDefaultAccessForNew(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, DEFAULT_ACCESS_FOR_NEW, value);
    }

    /**
     * Sets a value of property DefaultAccessForNew from an RDF2Go node. First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #set1dynamic]
     */
    public void setDefaultAccessForNew(
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), DEFAULT_ACCESS_FOR_NEW,
                value);
    }

    /**
     * Sets a value of property DefaultAccessForNew from an instance of Thing
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #set3static]
     */
    public static void setDefaultAccessForNew(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.set(model, instanceResource, DEFAULT_ACCESS_FOR_NEW, value);
    }

    /**
     * Sets a value of property DefaultAccessForNew from an instance of Thing
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #set4dynamic]
     */
    public void setDefaultAccessForNew(Thing value) {
        Base.set(this.model, this.getResource(), DEFAULT_ACCESS_FOR_NEW,
                value);
    }

    /**
     * Removes a value of property DefaultAccessForNew as an RDF2Go node
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be removed [Generated from RDFReactor template
     *            rule #remove1static]
     */
    public static void removeDefaultAccessForNew(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, DEFAULT_ACCESS_FOR_NEW, value);
    }

    /**
     * Removes a value of property DefaultAccessForNew as an RDF2Go node
     * 
     * @param value the value to be removed [Generated from RDFReactor template
     *            rule #remove1dynamic]
     */
    public void removeDefaultAccessForNew(
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(),
                DEFAULT_ACCESS_FOR_NEW, value);
    }

    /**
     * Removes a value of property DefaultAccessForNew given as an instance of
     * Thing
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be removed [Generated from RDFReactor template
     *            rule #remove3static]
     */
    public static void removeDefaultAccessForNew(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Thing value) {
        Base.remove(model, instanceResource, DEFAULT_ACCESS_FOR_NEW, value);
    }

    /**
     * Removes a value of property DefaultAccessForNew given as an instance of
     * Thing
     * 
     * @param value the value to be removed [Generated from RDFReactor template
     *            rule #remove4dynamic]
     */
    public void removeDefaultAccessForNew(Thing value) {
        Base.remove(this.model, this.getResource(),
                DEFAULT_ACCESS_FOR_NEW, value);
    }

    /**
     * Removes all values of property DefaultAccessForNew * @param model an
     * RDF2Go model
     * 
     * @param resource an RDF2Go resource [Generated from RDFReactor template
     *            rule #removeall1static]
     */
    public static void removeAllDefaultAccessForNew(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, DEFAULT_ACCESS_FOR_NEW);
    }

    /**
     * Removes all values of property DefaultAccessForNew * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllDefaultAccessForNew() {
        Base.removeAll(this.model, this.getResource(),
                DEFAULT_ACCESS_FOR_NEW);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@743e4500 has at
     * least one value set
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value [Generated from
     *         RDFReactor template rule #get0has-static]
     */
    public static boolean hasAccessTo(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, ACCESS_TO);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@743e4500 has at
     * least one value set
     * 
     * @return true if this property has at least one value [Generated from
     *         RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasAccessTo() {
        return Base.has(this.model, this.getResource(), ACCESS_TO);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@743e4500 has
     * the given value (maybe among other values).
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value [Generated from RDFReactor template rule
     *         #get0has-value-static]
     */
    public static boolean hasAccessTo(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, ACCESS_TO, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@743e4500 has
     * the given value (maybe among other values).
     * 
     * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value [Generated from RDFReactor template rule
     *         #get0has-value-dynamic]
     */
    public boolean hasAccessTo(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), ACCESS_TO, value);
    }

    /**
     * Get all values of property To as an Iterator over RDF2Go nodes
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes [Generated from RDFReactor
     *         template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAccessTo_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, ACCESS_TO);
    }

    /**
     * Get all values of property To as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes [Generated from RDFReactor
     *         template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAccessTo_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(), ACCESS_TO);
    }

    /**
     * Get all values of property To * @param model an RDF2Go model
     * 
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type [Generated from RDFReactor template
     *         rule #get11static]
     */
    public static ClosableIterator<Resource> getAllAccessTo(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model, instanceResource, ACCESS_TO,
                Resource.class);
    }

    /**
     * Get all values of property To * @return a ClosableIterator of $type
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Resource> getAllAccessTo() {
        return Base.getAll(this.model, this.getResource(), ACCESS_TO,
                Resource.class);
    }

    /**
     * Get all values of property To * @return a ClosableIterator of $type
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public Resource getAccessTo() {
        return Base.getAll_as(this.model, this.getResource(), ACCESS_TO,
                Resource.class).firstValue();
    }

    /**
     * Adds a value to property To as an RDF2Go node
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #add1static]
     */
    public static void addAccessTo(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, ACCESS_TO, value);
    }

    /**
     * Adds a value to property To as an RDF2Go node
     * 
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #add1dynamic]
     */
    public void addAccessTo(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), ACCESS_TO, value);
    }

    /**
     * Adds a value to property To from an instance of Resource
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource [Generated from RDFReactor template
     *            rule #add3static]
     */
    public static void addAccessTo(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Resource value) {
        Base.add(model, instanceResource, ACCESS_TO, value);
    }

    /**
     * Adds a value to property To from an instance of Resource [Generated from
     * RDFReactor template rule #add4dynamic]
     */
    public void addAccessTo(Resource value) {
        Base.add(this.model, this.getResource(), ACCESS_TO, value);
    }

    /**
     * Sets a value of property To from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be set [Generated from RDFReactor template rule
     *            #set1static]
     */
    public static void setAccessTo(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, ACCESS_TO, value);
    }

    /**
     * Sets a value of property To from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #set1dynamic]
     */
    public void setAccessTo(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), ACCESS_TO, value);
    }

    /**
     * Sets a value of property To from an instance of Resource First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #set3static]
     */
    public static void setAccessTo(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Resource value) {
        Base.set(model, instanceResource, ACCESS_TO, value);
    }

    /**
     * Sets a value of property To from an instance of Resource First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #set4dynamic]
     */
    public void setAccessTo(Resource value) {
        Base.set(this.model, this.getResource(), ACCESS_TO, value);
    }

    /**
     * Removes a value of property To as an RDF2Go node
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be removed [Generated from RDFReactor template
     *            rule #remove1static]
     */
    public static void removeAccessTo(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, ACCESS_TO, value);
    }

    /**
     * Removes a value of property To as an RDF2Go node
     * 
     * @param value the value to be removed [Generated from RDFReactor template
     *            rule #remove1dynamic]
     */
    public void removeAccessTo(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), ACCESS_TO, value);
    }

    /**
     * Removes a value of property To given as an instance of Resource
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be removed [Generated from RDFReactor template
     *            rule #remove3static]
     */
    public static void removeAccessTo(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Resource value) {
        Base.remove(model, instanceResource, ACCESS_TO, value);
    }

    /**
     * Removes a value of property To given as an instance of Resource
     * 
     * @param value the value to be removed [Generated from RDFReactor template
     *            rule #remove4dynamic]
     */
    public void removeAccessTo(Resource value) {
        Base.remove(this.model, this.getResource(), ACCESS_TO, value);
    }

    /**
     * Removes all values of property To * @param model an RDF2Go model
     * 
     * @param resource an RDF2Go resource [Generated from RDFReactor template
     *            rule #removeall1static]
     */
    public static void removeAllAccessTo(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, ACCESS_TO);
    }

    /**
     * Removes all values of property To * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllAccessTo() {
        Base.removeAll(this.model, this.getResource(), ACCESS_TO);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c04d881 has at
     * least one value set
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value [Generated from
     *         RDFReactor template rule #get0has-static]
     */
    public static boolean hasAccessToClass(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.has(model, instanceResource, ACCESS_TO_CLASS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c04d881 has at
     * least one value set
     * 
     * @return true if this property has at least one value [Generated from
     *         RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasAccessToClass() {
        return Base.has(this.model, this.getResource(), ACCESS_TO_CLASS);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c04d881 has
     * the given value (maybe among other values).
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value [Generated from RDFReactor template rule
     *         #get0has-value-static]
     */
    public static boolean hasAccessToClass(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(model, instanceResource, ACCESS_TO_CLASS, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1c04d881 has
     * the given value (maybe among other values).
     * 
     * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value [Generated from RDFReactor template rule
     *         #get0has-value-dynamic]
     */
    public boolean hasAccessToClass(org.ontoware.rdf2go.model.node.Node value) {
        return Base.hasValue(this.model, this.getResource(), ACCESS_TO_CLASS,
                value);
    }

    /**
     * Get all values of property AccessToClass as an Iterator over RDF2Go nodes
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes [Generated from RDFReactor
     *         template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAccessToClass_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll_asNode(model, instanceResource, ACCESS_TO_CLASS);
    }

    /**
     * Get all values of property AccessToClass as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes [Generated from RDFReactor
     *         template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllAccessToClass_asNode() {
        return Base.getAll_asNode(this.model, this.getResource(),
                ACCESS_TO_CLASS);
    }

    /**
     * Get all values of property AccessToClass * @param model an RDF2Go model
     * 
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type [Generated from RDFReactor template
     *         rule #get11static]
     */
    public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Class> getAllAccessToClass(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        return Base.getAll(model, instanceResource, ACCESS_TO_CLASS,
                org.ontoware.rdfreactor.schema.rdfs.Class.class);
    }

    /**
     * Get all values of property AccessToClass * @return a ClosableIterator of
     * $type [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Class> getAllAccessToClass() {
        return Base.getAll(this.model, this.getResource(), ACCESS_TO_CLASS,
                org.ontoware.rdfreactor.schema.rdfs.Class.class);
    }

    /**
     * Get all values of property AccessToClass * @return a ClosableIterator of
     * $type [Generated from RDFReactor template rule #get12dynamic]
     */
    public org.ontoware.rdfreactor.schema.rdfs.Class getAccessToClass() {
        return Base.getAll_as(this.model, this.getResource(), ACCESS_TO_CLASS,
                org.ontoware.rdfreactor.schema.rdfs.Class.class).firstValue();
    }

    /**
     * Adds a value to property AccessToClass as an RDF2Go node
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #add1static]
     */
    public static void addAccessToClass(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.add(model, instanceResource, ACCESS_TO_CLASS, value);
    }

    /**
     * Adds a value to property AccessToClass as an RDF2Go node
     * 
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #add1dynamic]
     */
    public void addAccessToClass(org.ontoware.rdf2go.model.node.Node value) {
        Base.add(this.model, this.getResource(), ACCESS_TO_CLASS, value);
    }

    /**
     * Adds a value to property AccessToClass from an instance of
     * org.ontoware.rdfreactor.schema.rdfs.Class
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource [Generated from RDFReactor template
     *            rule #add3static]
     */
    public static void addAccessToClass(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdfreactor.schema.rdfs.Class value) {
        Base.add(model, instanceResource, ACCESS_TO_CLASS, value);
    }

    /**
     * Adds a value to property AccessToClass from an instance of
     * org.ontoware.rdfreactor.schema.rdfs.Class [Generated from RDFReactor
     * template rule #add4dynamic]
     */
    public void addAccessToClass(org.ontoware.rdfreactor.schema.rdfs.Class value) {
        Base.add(this.model, this.getResource(), ACCESS_TO_CLASS, value);
    }

    /**
     * Sets a value of property AccessToClass from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be set [Generated from RDFReactor template rule
     *            #set1static]
     */
    public static void setAccessToClass(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.set(model, instanceResource, ACCESS_TO_CLASS, value);
    }

    /**
     * Sets a value of property AccessToClass from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #set1dynamic]
     */
    public void setAccessToClass(org.ontoware.rdf2go.model.node.Node value) {
        Base.set(this.model, this.getResource(), ACCESS_TO_CLASS, value);
    }

    /**
     * Sets a value of property AccessToClass from an instance of
     * org.ontoware.rdfreactor.schema.rdfs.Class First, all existing values are
     * removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #set3static]
     */
    public static void setAccessToClass(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdfreactor.schema.rdfs.Class value) {
        Base.set(model, instanceResource, ACCESS_TO_CLASS, value);
    }

    /**
     * Sets a value of property AccessToClass from an instance of
     * org.ontoware.rdfreactor.schema.rdfs.Class First, all existing values are
     * removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value the value to be added [Generated from RDFReactor template
     *            rule #set4dynamic]
     */
    public void setAccessToClass(org.ontoware.rdfreactor.schema.rdfs.Class value) {
        Base.set(this.model, this.getResource(), ACCESS_TO_CLASS, value);
    }

    /**
     * Removes a value of property AccessToClass as an RDF2Go node
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be removed [Generated from RDFReactor template
     *            rule #remove1static]
     */
    public static void removeAccessToClass(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(model, instanceResource, ACCESS_TO_CLASS, value);
    }

    /**
     * Removes a value of property AccessToClass as an RDF2Go node
     * 
     * @param value the value to be removed [Generated from RDFReactor template
     *            rule #remove1dynamic]
     */
    public void removeAccessToClass(org.ontoware.rdf2go.model.node.Node value) {
        Base.remove(this.model, this.getResource(), ACCESS_TO_CLASS, value);
    }

    /**
     * Removes a value of property AccessToClass given as an instance of
     * org.ontoware.rdfreactor.schema.rdfs.Class
     * 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be removed [Generated from RDFReactor template
     *            rule #remove3static]
     */
    public static void removeAccessToClass(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdfreactor.schema.rdfs.Class value) {
        Base.remove(model, instanceResource, ACCESS_TO_CLASS, value);
    }

    /**
     * Removes a value of property AccessToClass given as an instance of
     * org.ontoware.rdfreactor.schema.rdfs.Class
     * 
     * @param value the value to be removed [Generated from RDFReactor template
     *            rule #remove4dynamic]
     */
    public void removeAccessToClass(
            org.ontoware.rdfreactor.schema.rdfs.Class value) {
        Base.remove(this.model, this.getResource(), ACCESS_TO_CLASS, value);
    }

    /**
     * Removes all values of property AccessToClass * @param model an RDF2Go
     * model
     * 
     * @param resource an RDF2Go resource [Generated from RDFReactor template
     *            rule #removeall1static]
     */
    public static void removeAllAccessToClass(Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource) {
        Base.removeAll(model, instanceResource, ACCESS_TO_CLASS);
    }

    /**
     * Removes all values of property AccessToClass * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllAccessToClass() {
        Base.removeAll(this.model, this.getResource(), ACCESS_TO_CLASS);
    }
}
