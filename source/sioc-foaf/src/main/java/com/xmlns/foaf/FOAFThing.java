/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765
 * 2010-02-11 09:51:13Z max.at.xam.de $) on 21.12.12 17:00
 */
package com.xmlns.foaf;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;


/**
 * This class manages access to these properties:
 * <ul>
 * <li>created</li>
 * <li>Date</li>
 * <li>Depiction</li>
 * <li>Description</li>
 * <li>modified</li>
 * <li>Name</li>
 * <li>Note</li>
 * <li>Subject</li>
 * <li>DNAchecksum</li>
 * <li>Depiction</li>
 * <li>Description</li>
 * <li>Elements1_1Title</li>
 * <li>FoafGivenname</li>
 * <li>Fundedby</li>
 * <li>Givenname</li>
 * <li>Homepage</li>
 * <li>Logo</li>
 * <li>Maker</li>
 * <li>MembershipClass</li>
 * <li>Name</li>
 * <li>Nickname</li>
 * <li>Page</li>
 * <li>Phone</li>
 * <li>Primarytopicof</li>
 * <li>Theme</li>
 * <li>Title</li>
 * </ul>
 * 
 * This class was generated by <a
 * href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 21.12.12 17:00
 */
public class FOAFThing extends org.ontoware.rdfreactor.schema.rdfs.Class {
    /**
     * 
     */
    private static final long serialVersionUID   = 9047324362517530425L;

    /** http://www.w3.org/2000/01/rdf-schema#Class */
    public static final URI   RDFS_CLASS         = new URIImpl(
                                                         "http://www.w3.org/2000/01/rdf-schema#Class",
                                                         false );

    /** http://purl.org/dc/terms/subject */
    public static final URI   SUBJECT            = new URIImpl(
                                                         "http://purl.org/dc/terms/subject",
                                                         false );

    /** http://purl.org/dc/terms/title */
    public static final URI   TITLE            = new URIImpl(
                                                         "http://purl.org/dc/terms/title",
                                                         false );

    /** http://purl.org/dc/terms/date */
    public static final URI   DATE               = new URIImpl(
                                                         "http://purl.org/dc/terms/date",
                                                         false );

    /** http://purl.org/dc/terms/created */
    public static final URI   CREATED          = new URIImpl(
                                                         "http://purl.org/dc/terms/created",
                                                         false );

    /** http://purl.org/dc/terms/modified */
    public static final URI   MODIFIED         = new URIImpl(
                                                         "http://purl.org/dc/terms/modified",
                                                         false );

    /** http://purl.org/dc/terms/hasPart */
    public static final URI   HASPART            = new URIImpl(
                                                         "http://purl.org/dc/terms/hasPart",
                                                         false );

    /** http://purl.org/dc/terms/isPartOf */
    public static final URI   ISPARTOF           = new URIImpl(
                                                         "http://purl.org/dc/terms/isPartOf",
                                                         false );

    /** http://purl.org/dc/terms/description */
    public static final URI   DESCRIPTION      = new URIImpl(
                                                       "http://purl.org/dc/terms/description",
                                                       false );

    /** http://purl.org/dc/terms/references */
    public static final URI   REFERENCES         = new URIImpl(
                                                         "http://purl.org/dc/terms/references",
                                                         false );

    /** http://xmlns.com/foaf/0.1/depiction */
    public static final URI   DEPICTION          = new URIImpl(
                                                         "http://xmlns.com/foaf/0.1/depiction",
                                                         false );

    /** http://xmlns.com/foaf/0.1/dnaChecksum */
    public static final URI   DNACHECKSUM        = new URIImpl(
                                                         "http://xmlns.com/foaf/0.1/dnaChecksum",
                                                         false );

    /** http://xmlns.com/foaf/0.1/fundedBy */
    public static final URI   FUNDEDBY           = new URIImpl(
                                                         "http://xmlns.com/foaf/0.1/fundedBy",
                                                         false );

    /** http://xmlns.com/foaf/0.1/givenName */
    public static final URI   GIVENNAME          = new URIImpl(
                                                         "http://xmlns.com/foaf/0.1/givenName",
                                                         false );

    /** http://xmlns.com/foaf/0.1/homepage */
    public static final URI   HOMEPAGE           = new URIImpl(
                                                         "http://xmlns.com/foaf/0.1/homepage",
                                                         false );

    /** http://xmlns.com/foaf/0.1/logo */
    public static final URI   LOGO               = new URIImpl(
                                                         "http://xmlns.com/foaf/0.1/logo",
                                                         false );

    /** http://xmlns.com/foaf/0.1/maker */
    public static final URI   MAKER              = new URIImpl(
                                                         "http://xmlns.com/foaf/0.1/maker",
                                                         false );

    /** http://xmlns.com/foaf/0.1/membershipClass */
    public static final URI   MEMBERSHIPCLASS    = new URIImpl(
                                                         "http://xmlns.com/foaf/0.1/membershipClass",
                                                         false );

    /** http://xmlns.com/foaf/0.1/name */
    public static final URI   NAME               = new URIImpl(
                                                         "http://xmlns.com/foaf/0.1/name",
                                                         false );

    /** http://xmlns.com/foaf/0.1/nick */
    public static final URI   NICKNAME           = new URIImpl(
                                                         "http://xmlns.com/foaf/0.1/nick",
                                                         false );

    /** http://xmlns.com/foaf/0.1/page */
    public static final URI   PAGE               = new URIImpl(
                                                         "http://xmlns.com/foaf/0.1/page",
                                                         false );

    /** http://xmlns.com/foaf/0.1/phone */
    public static final URI   PHONE              = new URIImpl(
                                                         "http://xmlns.com/foaf/0.1/phone",
                                                         false );

    /** http://xmlns.com/foaf/0.1/isPrimaryTopicOf */
    public static final URI   PRIMARYTOPICOF     = new URIImpl(
                                                         "http://xmlns.com/foaf/0.1/isPrimaryTopicOf",
                                                         false );

    /** http://xmlns.com/foaf/0.1/theme */
    public static final URI   THEME              = new URIImpl(
                                                         "http://xmlns.com/foaf/0.1/theme",
                                                         false );

    /**
     * All property-URIs with this class as domain. All properties of all
     * super-classes are also available.
     */
    public static final URI[] MANAGED_URIS       = {
            new URIImpl( "http://purl.org/dc/terms/subject", false ),
            new URIImpl( "http://purl.org/dc/terms/title", false ),
            new URIImpl( "http://purl.org/dc/terms/created", false ),
            new URIImpl( "http://purl.org/dc/terms/date", false ),
            new URIImpl( "http://purl.org/dc/terms/description", false ),
            new URIImpl( "http://purl.org/dc/terms/references", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/dnaChecksum", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/depiction", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/givenname", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/fundedBy", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/givenName", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/homepage", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/logo", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/maker", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/membershipClass", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/name", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/nick", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/page", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/phone", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/isPrimaryTopicOf", false ),
            new URIImpl( "http://xmlns.com/foaf/0.1/theme", false )
 };

    // protected constructors needed for inheritance

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.semweb4j.org
     * @param classURI
     *            URI of RDFS class
     * @param instanceIdentifier
     *            Resource that identifies this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c1]
     */
    protected FOAFThing( Model model, URI classURI,
            org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
            boolean write ) {
        super( model, classURI, instanceIdentifier, write );
    }

    // public constructors

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param instanceIdentifier
     *            an RDF2Go Resource identifying this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c2]
     */
    public FOAFThing( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
            boolean write ) {
        super( model, RDFS_CLASS, instanceIdentifier, write );
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a URI, given as
     * a String. Creating two wrappers for the same URI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param uriString
     *            a URI given as a String
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * @throws ModelRuntimeException
     *             if URI syntax is wrong
     * 
     *             [Generated from RDFReactor template rule #c7]
     */
    public FOAFThing( Model model, String uriString, boolean write )
            throws ModelRuntimeException {
        super( model, RDFS_CLASS, new URIImpl( uriString, false ), write );
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a blank node.
     * Creating two wrappers for the same blank node is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param bnode
     *            BlankNode of this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c8]
     */
    public FOAFThing( Model model, BlankNode bnode, boolean write ) {
        super( model, RDFS_CLASS, bnode, write );
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a randomly
     * generated URI. Creating two wrappers results in different URIs.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c9]
     */
    public FOAFThing( Model model, boolean write ) {
        super( model, RDFS_CLASS, model.newRandomUniqueURI(), write );
    }

    // /////////////////////////////////////////////////////////////////
    // typing

    /**
     * Return an existing instance of this class in the model. No statements are
     * written.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return an instance of Thing or null if none existst
     * 
     *         [Generated from RDFReactor template rule #class0]
     */
    public static FOAFThing getInstance( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getInstance( model, instanceResource, FOAFThing.class );
    }

    /**
     * Create a new instance of this class in the model. That is, create the
     * statement (instanceResource, RDF.type,
     * http://www.w3.org/2000/01/rdf-schema#Class).
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class1]
     */
    public static void createInstance( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.createInstance( model, RDFS_CLASS, instanceResource );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return true if instanceResource is an instance of this class in the
     *         model
     * 
     *         [Generated from RDFReactor template rule #class2]
     */
    public static boolean hasInstance( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.hasInstance( model, RDFS_CLASS, instanceResource );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @return all instances of this class in Model 'model' as RDF resources
     * 
     *         [Generated from RDFReactor template rule #class3]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(
            Model model ) {
        return Base.getAllInstances( model, RDFS_CLASS,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @return all instances of this class in Model 'model' as a ReactorResult,
     *         which can conveniently be converted to iterator, list or array.
     * 
     *         [Generated from RDFReactor template rule #class3-as]
     */
    public static ReactorResult<? extends FOAFThing> getAllInstances_as( Model model ) {
        return Base.getAllInstances_as( model, RDFS_CLASS, FOAFThing.class );
    }

    /**
     * Remove rdf:type Thing from this instance. Other triples are not affected.
     * To delete more, use deleteAllProperties
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class4]
     */
    public static void deleteInstance( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.deleteInstance( model, RDFS_CLASS, instanceResource );
    }

    /**
     * Delete all (this, *, *), i.e. including rdf:type
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     */
    public static void deleteAllProperties( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.deleteAllProperties( model, instanceResource );
    }

    // /////////////////////////////////////////////////////////////////
    // property access methods

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'HasPart' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllHasPart_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, FOAFThing.HASPART, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'HasPart' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllHasPart_Inverse() {
        return Base.getAll_Inverse( this.model, FOAFThing.HASPART,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'HasPart' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllHasPart_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, FOAFThing.HASPART, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'IsPartOf' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllIsPartOf_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, FOAFThing.ISPARTOF, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'IsPartOf' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllIsPartOf_Inverse() {
        return Base.getAll_Inverse( this.model, FOAFThing.ISPARTOF,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'IsPartOf' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllIsPartOf_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, FOAFThing.ISPARTOF, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Date' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllDate_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, FOAFThing.DATE, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Date' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllDate_Inverse() {
        return Base.getAll_Inverse( this.model, FOAFThing.DATE, this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Date' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllDate_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, FOAFThing.DATE, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Description' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllDescription_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, FOAFThing.DESCRIPTION, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Description' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllDescription_Inverse() {
        return Base.getAll_Inverse( this.model, FOAFThing.DESCRIPTION,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Description' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllDescription_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, FOAFThing.DESCRIPTION, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'References' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllReferences_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, FOAFThing.REFERENCES, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'References' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllReferences_Inverse() {
        return Base.getAll_Inverse( this.model, FOAFThing.REFERENCES,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'References' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllReferences_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, FOAFThing.REFERENCES, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Subject' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllSubject_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, FOAFThing.SUBJECT, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Subject' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllSubject_Inverse() {
        return Base.getAll_Inverse( this.model, FOAFThing.SUBJECT,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Subject' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllSubject_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, FOAFThing.SUBJECT, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Title' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllTitle_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, FOAFThing.TITLE, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Title' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllTitle_Inverse() {
        return Base
                .getAll_Inverse( this.model, FOAFThing.TITLE,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Title' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllTitle_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, FOAFThing.TITLE, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389aee72 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, DATE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389aee72 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasDate() {
        return Base.has( this.model, this.getResource(), DATE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389aee72 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, DATE, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389aee72 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasDate( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), DATE, value );
    }

    /**
     * Get all values of property Date as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllDate_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, DATE );
    }

    /**
     * Get all values of property Date as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllDate_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, DATE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Date as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllDate_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), DATE );
    }

    /**
     * Get all values of property Date as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllDate_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), DATE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Date * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<FOAFThing> getAllDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, DATE, FOAFThing.class );
    }

    /**
     * Get all values of property Date as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<FOAFThing> getAllDate_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, DATE, FOAFThing.class );
    }

    /**
     * Get all values of property Date * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<FOAFThing> getAllDate() {
        return Base.getAll( this.model, this.getResource(), DATE, FOAFThing.class );
    }

    /**
     * Get all values of property Date as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<FOAFThing> getAllDate_as() {
        return Base.getAll_as( this.model, this.getResource(), DATE,
                FOAFThing.class );
    }

    /**
     * Adds a value to property Date as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, DATE, value );
    }

    /**
     * Adds a value to property Date as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addDate( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), DATE, value );
    }

    /**
     * Adds a value to property Date from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
        Base.add( model, instanceResource, DATE, value );
    }

    /**
     * Adds a value to property Date from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addDate( FOAFThing value ) {
        Base.add( this.model, this.getResource(), DATE, value );
    }

    /**
     * Sets a value of property Date from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, DATE, value );
    }

    /**
     * Sets a value of property Date from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setDate( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), DATE, value );
    }

    /**
     * Sets a value of property Date from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
        Base.set( model, instanceResource, DATE, value );
    }

    /**
     * Sets a value of property Date from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setDate( FOAFThing value ) {
        Base.set( this.model, this.getResource(), DATE, value );
    }

    /**
     * Removes a value of property Date as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, DATE, value );
    }

    /**
     * Removes a value of property Date as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeDate( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), DATE, value );
    }

    /**
     * Removes a value of property Date given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
        Base.remove( model, instanceResource, DATE, value );
    }

    /**
     * Removes a value of property Date given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeDate( FOAFThing value ) {
        Base.remove( this.model, this.getResource(), DATE, value );
    }

    /**
     * Removes all values of property Date * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, DATE );
    }

    /**
     * Removes all values of property Date * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllDate() {
        Base.removeAll( this.model, this.getResource(), DATE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d41b16b has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasDescription( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, DESCRIPTION );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d41b16b has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasDescription() {
        return Base.has( this.model, this.getResource(), DESCRIPTION );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d41b16b has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasDescription( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, DESCRIPTION, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d41b16b has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasDescription(
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), DESCRIPTION,
                value );
    }

    /**
     * Get all values of property Description as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllDescription_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, DESCRIPTION );
    }

    /**
     * Get all values of property Description as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllDescription_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, DESCRIPTION,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Description as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllDescription_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), DESCRIPTION );
    }

    /**
     * Get all values of property Description as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllDescription_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), DESCRIPTION,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Description * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<FOAFThing> getAllDescription(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, DESCRIPTION, FOAFThing.class );
    }

    /**
     * Get all values of property Description as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<FOAFThing> getAllDescription_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, DESCRIPTION,
                FOAFThing.class );
    }

    /**
     * Get all values of property Description * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<FOAFThing> getAllDescription() {
        return Base.getAll( this.model, this.getResource(), DESCRIPTION,
                FOAFThing.class );
    }

    /**
     * Get all values of property Description as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<FOAFThing> getAllDescription_as() {
        return Base.getAll_as( this.model, this.getResource(), DESCRIPTION,
                FOAFThing.class );
    }

    /**
     * Adds a value to property Description as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addDescription( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, DESCRIPTION, value );
    }

    /**
     * Adds a value to property Description as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addDescription( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), DESCRIPTION, value );
    }

    /**
     * Adds a value to property Description from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addDescription( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
        Base.add( model, instanceResource, DESCRIPTION, value );
    }

    /**
     * Adds a value to property Description from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addDescription( FOAFThing value ) {
        Base.add( this.model, this.getResource(), DESCRIPTION, value );
    }

    /**
     * Sets a value of property Description from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setDescription( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, DESCRIPTION, value );
    }

    /**
     * Sets a value of property Description from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setDescription( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), DESCRIPTION, value );
    }

    /**
     * Sets a value of property Description from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setDescription( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
        Base.set( model, instanceResource, DESCRIPTION, value );
    }

    /**
     * Sets a value of property Description from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setDescription( FOAFThing value ) {
        Base.set( this.model, this.getResource(), DESCRIPTION, value );
    }

    /**
     * Removes a value of property Description as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeDescription( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, DESCRIPTION, value );
    }

    /**
     * Removes a value of property Description as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeDescription(
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), DESCRIPTION, value );
    }

    /**
     * Removes a value of property Description given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeDescription( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
        Base.remove( model, instanceResource, DESCRIPTION, value );
    }

    /**
     * Removes a value of property Description given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeDescription( FOAFThing value ) {
        Base.remove( this.model, this.getResource(), DESCRIPTION, value );
    }

    /**
     * Removes all values of property Description * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllDescription( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, DESCRIPTION );
    }

    /**
     * Removes all values of property Description * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllDescription() {
        Base.removeAll( this.model, this.getResource(), DESCRIPTION );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b01812b has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, REFERENCES );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b01812b has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasReferences() {
        return Base.has( this.model, this.getResource(), REFERENCES );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b01812b has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, REFERENCES, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b01812b has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasReferences(
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base
                .hasValue( this.model, this.getResource(), REFERENCES, value );
    }

    /**
     * Get all values of property References as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllReferences_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, REFERENCES );
    }

    /**
     * Get all values of property References as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllReferences_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, REFERENCES,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property References as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllReferences_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), REFERENCES );
    }

    /**
     * Get all values of property References as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllReferences_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), REFERENCES,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property References * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<FOAFThing> getAllReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, REFERENCES, FOAFThing.class );
    }

    /**
     * Get all values of property References as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<FOAFThing> getAllReferences_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base
                .getAll_as( model, instanceResource, REFERENCES, FOAFThing.class );
    }

    /**
     * Get all values of property References * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<FOAFThing> getAllReferences() {
        return Base.getAll( this.model, this.getResource(), REFERENCES,
                FOAFThing.class );
    }

    /**
     * Get all values of property References as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<FOAFThing> getAllReferences_as() {
        return Base.getAll_as( this.model, this.getResource(), REFERENCES,
                FOAFThing.class );
    }

    /**
     * Adds a value to property References as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, REFERENCES, value );
    }

    /**
     * Adds a value to property References as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addReferences( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), REFERENCES, value );
    }

    /**
     * Adds a value to property References from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
        Base.add( model, instanceResource, REFERENCES, value );
    }

    /**
     * Adds a value to property References from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addReferences( FOAFThing value ) {
        Base.add( this.model, this.getResource(), REFERENCES, value );
    }

    /**
     * Sets a value of property References from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, REFERENCES, value );
    }

    /**
     * Sets a value of property References from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setReferences( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), REFERENCES, value );
    }

    /**
     * Sets a value of property References from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
        Base.set( model, instanceResource, REFERENCES, value );
    }

    /**
     * Sets a value of property References from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setReferences( FOAFThing value ) {
        Base.set( this.model, this.getResource(), REFERENCES, value );
    }

    /**
     * Removes a value of property References as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, REFERENCES, value );
    }

    /**
     * Removes a value of property References as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeReferences(
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), REFERENCES, value );
    }

    /**
     * Removes a value of property References given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
        Base.remove( model, instanceResource, REFERENCES, value );
    }

    /**
     * Removes a value of property References given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeReferences( FOAFThing value ) {
        Base.remove( this.model, this.getResource(), REFERENCES, value );
    }

    /**
     * Removes all values of property References * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, REFERENCES );
    }

    /**
     * Removes all values of property References * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllReferences() {
        Base.removeAll( this.model, this.getResource(), REFERENCES );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3efc68a7 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, SUBJECT );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3efc68a7 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSubject() {
        return Base.has( this.model, this.getResource(), SUBJECT );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3efc68a7 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, SUBJECT, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3efc68a7 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasSubject( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), SUBJECT, value );
    }

    /**
     * Get all values of property Subject as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllSubject_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, SUBJECT );
    }

    /**
     * Get all values of property Subject as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllSubject_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, SUBJECT,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Subject as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllSubject_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), SUBJECT );
    }

    /**
     * Get all values of property Subject as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllSubject_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), SUBJECT,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Subject * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<FOAFThing> getAllSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, SUBJECT, FOAFThing.class );
    }

    /**
     * Get all values of property Subject as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<FOAFThing> getAllSubject_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, SUBJECT, FOAFThing.class );
    }

    /**
     * Get all values of property Subject * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<FOAFThing> getAllSubject() {
        return Base.getAll( this.model, this.getResource(), SUBJECT,
                FOAFThing.class );
    }

    /**
     * Get all values of property Subject as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<FOAFThing> getAllSubject_as() {
        return Base.getAll_as( this.model, this.getResource(), SUBJECT,
                FOAFThing.class );
    }

    /**
     * Adds a value to property Subject as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, SUBJECT, value );
    }

    /**
     * Adds a value to property Subject as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSubject( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), SUBJECT, value );
    }

    /**
     * Adds a value to property Subject from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
        Base.add( model, instanceResource, SUBJECT, value );
    }

    /**
     * Adds a value to property Subject from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSubject( FOAFThing value ) {
        Base.add( this.model, this.getResource(), SUBJECT, value );
    }

    /**
     * Sets a value of property Subject from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, SUBJECT, value );
    }

    /**
     * Sets a value of property Subject from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSubject( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), SUBJECT, value );
    }

    /**
     * Sets a value of property Subject from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
        Base.set( model, instanceResource, SUBJECT, value );
    }

    /**
     * Sets a value of property Subject from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSubject( FOAFThing value ) {
        Base.set( this.model, this.getResource(), SUBJECT, value );
    }

    /**
     * Removes a value of property Subject as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, SUBJECT, value );
    }

    /**
     * Removes a value of property Subject as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeSubject( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), SUBJECT, value );
    }

    /**
     * Removes a value of property Subject given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
        Base.remove( model, instanceResource, SUBJECT, value );
    }

    /**
     * Removes a value of property Subject given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSubject( FOAFThing value ) {
        Base.remove( this.model, this.getResource(), SUBJECT, value );
    }

    /**
     * Removes all values of property Subject * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, SUBJECT );
    }

    /**
     * Removes all values of property Subject * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllSubject() {
        Base.removeAll( this.model, this.getResource(), SUBJECT );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bbe2ed3 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, TITLE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bbe2ed3 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasTitle() {
        return Base.has( this.model, this.getResource(), TITLE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bbe2ed3 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, TITLE, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bbe2ed3 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasTitle( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), TITLE, value );
    }

    /**
     * Get all values of property Title as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllTitle_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, TITLE );
    }

    /**
     * Get all values of property Title as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllTitle_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, TITLE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Title as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllTitle_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), TITLE );
    }

    /**
     * Get all values of property Title as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllTitle_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), TITLE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Title * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<FOAFThing> getAllTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, TITLE, FOAFThing.class );
    }

    /**
     * Get all values of property Title as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<FOAFThing> getAllTitle_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, TITLE, FOAFThing.class );
    }

    /**
     * Get all values of property Title * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<FOAFThing> getAllTitle() {
        return Base.getAll( this.model, this.getResource(), TITLE,
                FOAFThing.class );
    }

    /**
     * Get all values of property Title as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<FOAFThing> getAllTitle_as() {
        return Base.getAll_as( this.model, this.getResource(), TITLE,
                FOAFThing.class );
    }

    /**
     * Adds a value to property Title as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, TITLE, value );
    }

    /**
     * Adds a value to property Title as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addTitle( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), TITLE, value );
    }

    /**
     * Adds a value to property Title from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
        Base.add( model, instanceResource, TITLE, value );
    }

    /**
     * Adds a value to property Title from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addTitle( FOAFThing value ) {
        Base.add( this.model, this.getResource(), TITLE, value );
    }

    /**
     * Sets a value of property Title from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, TITLE, value );
    }

    /**
     * Sets a value of property Title from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setTitle( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), TITLE, value );
    }

    /**
     * Sets a value of property Title from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
        Base.set( model, instanceResource, TITLE, value );
    }

    /**
     * Sets a value of property Title from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setTitle( FOAFThing value ) {
        Base.set( this.model, this.getResource(), TITLE, value );
    }

    /**
     * Removes a value of property Title as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, TITLE, value );
    }

    /**
     * Removes a value of property Title as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeTitle( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), TITLE, value );
    }

    /**
     * Removes a value of property Title given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
        Base.remove( model, instanceResource, TITLE, value );
    }

    /**
     * Removes a value of property Title given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeTitle( FOAFThing value ) {
        Base.remove( this.model, this.getResource(), TITLE, value );
    }

    /**
     * Removes all values of property Title * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, TITLE );
    }

    /**
     * Removes all values of property Title * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllTitle() {
        Base.removeAll( this.model, this.getResource(), TITLE );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Givenname' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllGivenname_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, FOAFThing.GIVENNAME, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Givenname' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllGivenname_Inverse() {
        return Base.getAll_Inverse( this.model, FOAFThing.GIVENNAME,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Givenname' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllGivenname_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, FOAFThing.GIVENNAME, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'MembershipClass'
     *         to this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllMembershipClass_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, FOAFThing.MEMBERSHIPCLASS, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'MembershipClass'
     *         to this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllMembershipClass_Inverse() {
        return Base.getAll_Inverse( this.model, FOAFThing.MEMBERSHIPCLASS,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation
     *         'MembershipClass' to this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllMembershipClass_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, FOAFThing.MEMBERSHIPCLASS,
                objectValue, org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Nickname' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllNickname_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, FOAFThing.NICKNAME, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Nickname' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllNickname_Inverse() {
        return Base.getAll_Inverse( this.model, FOAFThing.NICKNAME,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Nickname' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllNickname_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, FOAFThing.NICKNAME, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Phone' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllPhone_Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, FOAFThing.PHONE, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Phone' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllPhone_Inverse() {
        return Base
                .getAll_Inverse( this.model, FOAFThing.PHONE, this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Phone' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllPhone_Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, FOAFThing.PHONE, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Sha1sum_hex_' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllSha1sum_hex__Inverse(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Document.SHA1SUM_HEX_, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Sha1sum_hex_' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllSha1sum_hex__Inverse() {
        return Base.getAll_Inverse( this.model, Document.SHA1SUM_HEX_,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Sha1sum_hex_'
     *         to this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllSha1sum_hex__Inverse_as(
            Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Document.SHA1SUM_HEX_,
                objectValue, org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fff31e1 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasDNAchecksum( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, DNACHECKSUM );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fff31e1 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasDNAchecksum() {
        return Base.has( this.model, this.getResource(), DNACHECKSUM );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fff31e1 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasDNAchecksum( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, DNACHECKSUM, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4fff31e1 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasDNAchecksum( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), DNACHECKSUM,
                value );
    }

    /**
     * Get all values of property DNAchecksum as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllDNAchecksum_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, DNACHECKSUM );
    }

    /**
     * Get all values of property DNAchecksum as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllDNAchecksum_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, DNACHECKSUM,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property DNAchecksum as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllDNAchecksum_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), DNACHECKSUM );
    }

    /**
     * Get all values of property DNAchecksum as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllDNAchecksum_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), DNACHECKSUM,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property DNAchecksum * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllDNAchecksum(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, DNACHECKSUM,
                java.lang.String.class );
    }

    /**
     * Get all values of property DNAchecksum as a ReactorResult of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllDNAchecksum_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, DNACHECKSUM,
                java.lang.String.class );
    }

    /**
     * Get all values of property DNAchecksum * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllDNAchecksum() {
        return Base.getAll( this.model, this.getResource(), DNACHECKSUM,
                java.lang.String.class );
    }

    /**
     * Get all values of property DNAchecksum as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllDNAchecksum_as() {
        return Base.getAll_as( this.model, this.getResource(), DNACHECKSUM,
                java.lang.String.class );
    }

    /**
     * Adds a value to property DNAchecksum as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addDNAchecksum( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, DNACHECKSUM, value );
    }

    /**
     * Adds a value to property DNAchecksum as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addDNAchecksum( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), DNACHECKSUM, value );
    }

    /**
     * Adds a value to property DNAchecksum from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addDNAchecksum( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.add( model, instanceResource, DNACHECKSUM, value );
    }

    /**
     * Adds a value to property DNAchecksum from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addDNAchecksum( java.lang.String value ) {
        Base.add( this.model, this.getResource(), DNACHECKSUM, value );
    }

    /**
     * Sets a value of property DNAchecksum from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setDNAchecksum( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, DNACHECKSUM, value );
    }

    /**
     * Sets a value of property DNAchecksum from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setDNAchecksum( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), DNACHECKSUM, value );
    }

    /**
     * Sets a value of property DNAchecksum from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setDNAchecksum( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.set( model, instanceResource, DNACHECKSUM, value );
    }

    /**
     * Sets a value of property DNAchecksum from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setDNAchecksum( java.lang.String value ) {
        Base.set( this.model, this.getResource(), DNACHECKSUM, value );
    }

    /**
     * Removes a value of property DNAchecksum as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeDNAchecksum( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, DNACHECKSUM, value );
    }

    /**
     * Removes a value of property DNAchecksum as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeDNAchecksum( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), DNACHECKSUM, value );
    }

    /**
     * Removes a value of property DNAchecksum given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeDNAchecksum( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.remove( model, instanceResource, DNACHECKSUM, value );
    }

    /**
     * Removes a value of property DNAchecksum given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeDNAchecksum( java.lang.String value ) {
        Base.remove( this.model, this.getResource(), DNACHECKSUM, value );
    }

    /**
     * Removes all values of property DNAchecksum * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllDNAchecksum( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, DNACHECKSUM );
    }

    /**
     * Removes all values of property DNAchecksum * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllDNAchecksum() {
        Base.removeAll( this.model, this.getResource(), DNACHECKSUM );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f72eaa2 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasDepiction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, DEPICTION );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f72eaa2 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasDepiction() {
        return Base.has( this.model, this.getResource(), DEPICTION );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f72eaa2 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasDepiction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, DEPICTION, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1f72eaa2 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasDepiction( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), DEPICTION, value );
    }

    /**
     * Get all values of property Depiction as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllDepiction_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, DEPICTION );
    }

    /**
     * Get all values of property Depiction as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllDepiction_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, DEPICTION,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Depiction as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllDepiction_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), DEPICTION );
    }

    /**
     * Get all values of property Depiction as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllDepiction_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), DEPICTION,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Depiction * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Image> getAllDepiction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, DEPICTION, Image.class );
    }

    /**
     * Get all values of property Depiction as a ReactorResult of Image
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Image> getAllDepiction_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, DEPICTION, Image.class );
    }

    /**
     * Get all values of property Depiction * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Image> getAllDepiction() {
        return Base.getAll( this.model, this.getResource(), DEPICTION,
                Image.class );
    }

    /**
     * Get all values of property Depiction as a ReactorResult of Image
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Image> getAllDepiction_as() {
        return Base.getAll_as( this.model, this.getResource(), DEPICTION,
                Image.class );
    }

    /**
     * Adds a value to property Depiction as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addDepiction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, DEPICTION, value );
    }

    /**
     * Adds a value to property Depiction as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addDepiction( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), DEPICTION, value );
    }

    /**
     * Adds a value to property Depiction from an instance of Image
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addDepiction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Image value ) {
        Base.add( model, instanceResource, DEPICTION, value );
    }

    /**
     * Adds a value to property Depiction from an instance of Image
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addDepiction( Image value ) {
        Base.add( this.model, this.getResource(), DEPICTION, value );
    }

    /**
     * Sets a value of property Depiction from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setDepiction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, DEPICTION, value );
    }

    /**
     * Sets a value of property Depiction from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setDepiction( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), DEPICTION, value );
    }

    /**
     * Sets a value of property Depiction from an instance of Image First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setDepiction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Image value ) {
        Base.set( model, instanceResource, DEPICTION, value );
    }

    /**
     * Sets a value of property Depiction from an instance of Image First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setDepiction( Image value ) {
        Base.set( this.model, this.getResource(), DEPICTION, value );
    }

    /**
     * Removes a value of property Depiction as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeDepiction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, DEPICTION, value );
    }

    /**
     * Removes a value of property Depiction as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeDepiction( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), DEPICTION, value );
    }

    /**
     * Removes a value of property Depiction given as an instance of Image
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeDepiction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Image value ) {
        Base.remove( model, instanceResource, DEPICTION, value );
    }

    /**
     * Removes a value of property Depiction given as an instance of Image
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeDepiction( Image value ) {
        Base.remove( this.model, this.getResource(), DEPICTION, value );
    }

    /**
     * Removes all values of property Depiction * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllDepiction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, DEPICTION );
    }

    /**
     * Removes all values of property Depiction * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllDepiction() {
        Base.removeAll( this.model, this.getResource(), DEPICTION );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@78fb787f has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasFundedby( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, FUNDEDBY );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@78fb787f has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasFundedby() {
        return Base.has( this.model, this.getResource(), FUNDEDBY );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@78fb787f has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasFundedby( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, FUNDEDBY, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@78fb787f has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasFundedby( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), FUNDEDBY, value );
    }

    /**
     * Get all values of property Fundedby as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllFundedby_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, FUNDEDBY );
    }

    /**
     * Get all values of property Fundedby as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllFundedby_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, FUNDEDBY,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Fundedby as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllFundedby_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), FUNDEDBY );
    }

    /**
     * Get all values of property Fundedby as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllFundedby_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), FUNDEDBY,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Fundedby * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<org.ontoware.rdfreactor.schema.owl.OwlThing>
            getAllFundedby(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, FUNDEDBY,
                org.ontoware.rdfreactor.schema.owl.OwlThing.class );
    }

    /**
     * Get all values of property Fundedby as a ReactorResult of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<org.ontoware.rdfreactor.schema.owl.OwlThing>
            getAllFundedby_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, FUNDEDBY,
                org.ontoware.rdfreactor.schema.owl.OwlThing.class );
    }

    /**
     * Get all values of property Fundedby * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<org.ontoware.rdfreactor.schema.owl.OwlThing>
            getAllFundedby() {
        return Base.getAll( this.model, this.getResource(), FUNDEDBY,
                org.ontoware.rdfreactor.schema.owl.OwlThing.class );
    }

    /**
     * Get all values of property Fundedby as a ReactorResult of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<org.ontoware.rdfreactor.schema.owl.OwlThing>
            getAllFundedby_as() {
        return Base.getAll_as( this.model, this.getResource(), FUNDEDBY,
                org.ontoware.rdfreactor.schema.owl.OwlThing.class );
    }

    /**
     * Adds a value to property Fundedby as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addFundedby( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, FUNDEDBY, value );
    }

    /**
     * Adds a value to property Fundedby as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addFundedby( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), FUNDEDBY, value );
    }

    /**
     * Adds a value to property Fundedby from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addFundedby( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.add( model, instanceResource, FUNDEDBY, value );
    }

    /**
     * Adds a value to property Fundedby from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addFundedby(
            org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.add( this.model, this.getResource(), FUNDEDBY, value );
    }

    /**
     * Sets a value of property Fundedby from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setFundedby( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, FUNDEDBY, value );
    }

    /**
     * Sets a value of property Fundedby from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setFundedby( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), FUNDEDBY, value );
    }

    /**
     * Sets a value of property Fundedby from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing First, all existing values
     * are removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setFundedby( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.set( model, instanceResource, FUNDEDBY, value );
    }

    /**
     * Sets a value of property Fundedby from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing First, all existing values
     * are removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setFundedby(
            org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.set( this.model, this.getResource(), FUNDEDBY, value );
    }

    /**
     * Removes a value of property Fundedby as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeFundedby( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, FUNDEDBY, value );
    }

    /**
     * Removes a value of property Fundedby as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeFundedby( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), FUNDEDBY, value );
    }

    /**
     * Removes a value of property Fundedby given as an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeFundedby( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.remove( model, instanceResource, FUNDEDBY, value );
    }

    /**
     * Removes a value of property Fundedby given as an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeFundedby(
            org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.remove( this.model, this.getResource(), FUNDEDBY, value );
    }

    /**
     * Removes all values of property Fundedby * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllFundedby( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, FUNDEDBY );
    }

    /**
     * Removes all values of property Fundedby * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllFundedby() {
        Base.removeAll( this.model, this.getResource(), FUNDEDBY );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57506502 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasGivenname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, GIVENNAME );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57506502 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasGivenname() {
        return Base.has( this.model, this.getResource(), GIVENNAME );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57506502 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasGivenname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, GIVENNAME, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@57506502 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasGivenname( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), GIVENNAME, value );
    }

    /**
     * Get all values of property Givenname as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllGivenname_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, GIVENNAME );
    }

    /**
     * Get all values of property Givenname as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllGivenname_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, GIVENNAME,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Givenname as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllGivenname_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), GIVENNAME );
    }

    /**
     * Get all values of property Givenname as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllGivenname_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), GIVENNAME,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Givenname * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<FOAFThing> getAllGivenname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, GIVENNAME, FOAFThing.class );
    }

    /**
     * Get all values of property Givenname as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<FOAFThing> getAllGivenname_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, GIVENNAME, FOAFThing.class );
    }

    /**
     * Get all values of property Givenname * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<FOAFThing> getAllGivenname() {
        return Base.getAll( this.model, this.getResource(), GIVENNAME,
                FOAFThing.class );
    }

    /**
     * Get all values of property Givenname as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<FOAFThing> getAllGivenname_as() {
        return Base.getAll_as( this.model, this.getResource(), GIVENNAME,
                FOAFThing.class );
    }

    /**
     * Adds a value to property Givenname as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addGivenname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, GIVENNAME, value );
    }

    /**
     * Adds a value to property Givenname as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addGivenname( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), GIVENNAME, value );
    }

    /**
     * Adds a value to property Givenname from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addGivenname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
        Base.add( model, instanceResource, GIVENNAME, value );
    }

    /**
     * Adds a value to property Givenname from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addGivenname( FOAFThing value ) {
        Base.add( this.model, this.getResource(), GIVENNAME, value );
    }

    /**
     * Sets a value of property Givenname from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setGivenname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, GIVENNAME, value );
    }

    /**
     * Sets a value of property Givenname from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setGivenname( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), GIVENNAME, value );
    }

    /**
     * Sets a value of property Givenname from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setGivenname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
        Base.set( model, instanceResource, GIVENNAME, value );
    }

    /**
     * Sets a value of property Givenname from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setGivenname( FOAFThing value ) {
        Base.set( this.model, this.getResource(), GIVENNAME, value );
    }

    /**
     * Removes a value of property Givenname as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeGivenname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, GIVENNAME, value );
    }

    /**
     * Removes a value of property Givenname as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeGivenname( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), GIVENNAME, value );
    }

    /**
     * Removes a value of property Givenname given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeGivenname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
        Base.remove( model, instanceResource, GIVENNAME, value );
    }

    /**
     * Removes a value of property Givenname given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeGivenname( FOAFThing value ) {
        Base.remove( this.model, this.getResource(), GIVENNAME, value );
    }

    /**
     * Removes all values of property Givenname * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllGivenname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, GIVENNAME );
    }

    /**
     * Removes all values of property Givenname * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllGivenname() {
        Base.removeAll( this.model, this.getResource(), GIVENNAME );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@469b762c has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasHomepage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, HOMEPAGE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@469b762c has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasHomepage() {
        return Base.has( this.model, this.getResource(), HOMEPAGE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@469b762c has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasHomepage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, HOMEPAGE, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@469b762c has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasHomepage( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), HOMEPAGE, value );
    }

    /**
     * Get all values of property Homepage as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllHomepage_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, HOMEPAGE );
    }

    /**
     * Get all values of property Homepage as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllHomepage_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, HOMEPAGE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Homepage as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllHomepage_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), HOMEPAGE );
    }

    /**
     * Get all values of property Homepage as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllHomepage_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), HOMEPAGE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Homepage * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Document> getAllHomepage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, HOMEPAGE, Document.class );
    }

    /**
     * Get all values of property Homepage as a ReactorResult of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Document> getAllHomepage_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, HOMEPAGE,
                Document.class );
    }

    /**
     * Get all values of property Homepage * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Document> getAllHomepage() {
        return Base.getAll( this.model, this.getResource(), HOMEPAGE,
                Document.class );
    }

    /**
     * Get all values of property Homepage as a ReactorResult of Document
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Document> getAllHomepage_as() {
        return Base.getAll_as( this.model, this.getResource(), HOMEPAGE,
                Document.class );
    }

    /**
     * Adds a value to property Homepage as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addHomepage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, HOMEPAGE, value );
    }

    /**
     * Adds a value to property Homepage as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addHomepage( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), HOMEPAGE, value );
    }

    /**
     * Adds a value to property Homepage from an instance of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addHomepage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Document value ) {
        Base.add( model, instanceResource, HOMEPAGE, value );
    }

    /**
     * Adds a value to property Homepage from an instance of Document
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addHomepage( Document value ) {
        Base.add( this.model, this.getResource(), HOMEPAGE, value );
    }

    /**
     * Sets a value of property Homepage from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setHomepage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, HOMEPAGE, value );
    }

    /**
     * Sets a value of property Homepage from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setHomepage( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), HOMEPAGE, value );
    }

    /**
     * Sets a value of property Homepage from an instance of Document First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setHomepage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Document value ) {
        Base.set( model, instanceResource, HOMEPAGE, value );
    }

    /**
     * Sets a value of property Homepage from an instance of Document First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setHomepage( Document value ) {
        Base.set( this.model, this.getResource(), HOMEPAGE, value );
    }

    /**
     * Removes a value of property Homepage as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeHomepage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, HOMEPAGE, value );
    }

    /**
     * Removes a value of property Homepage as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeHomepage( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), HOMEPAGE, value );
    }

    /**
     * Removes a value of property Homepage given as an instance of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeHomepage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Document value ) {
        Base.remove( model, instanceResource, HOMEPAGE, value );
    }

    /**
     * Removes a value of property Homepage given as an instance of Document
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeHomepage( Document value ) {
        Base.remove( this.model, this.getResource(), HOMEPAGE, value );
    }

    /**
     * Removes all values of property Homepage * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllHomepage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, HOMEPAGE );
    }

    /**
     * Removes all values of property Homepage * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllHomepage() {
        Base.removeAll( this.model, this.getResource(), HOMEPAGE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5956c062 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasLogo( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, LOGO );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5956c062 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasLogo() {
        return Base.has( this.model, this.getResource(), LOGO );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5956c062 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasLogo( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, LOGO, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5956c062 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasLogo( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), LOGO, value );
    }

    /**
     * Get all values of property Logo as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllLogo_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, LOGO );
    }

    /**
     * Get all values of property Logo as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllLogo_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, LOGO,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Logo as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllLogo_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), LOGO );
    }

    /**
     * Get all values of property Logo as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllLogo_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), LOGO,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Logo * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<org.ontoware.rdfreactor.schema.owl.OwlThing>
            getAllLogo(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, LOGO,
                org.ontoware.rdfreactor.schema.owl.OwlThing.class );
    }

    /**
     * Get all values of property Logo as a ReactorResult of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<org.ontoware.rdfreactor.schema.owl.OwlThing>
            getAllLogo_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, LOGO,
                org.ontoware.rdfreactor.schema.owl.OwlThing.class );
    }

    /**
     * Get all values of property Logo * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<org.ontoware.rdfreactor.schema.owl.OwlThing>
            getAllLogo() {
        return Base.getAll( this.model, this.getResource(), LOGO,
                org.ontoware.rdfreactor.schema.owl.OwlThing.class );
    }

    /**
     * Get all values of property Logo as a ReactorResult of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<org.ontoware.rdfreactor.schema.owl.OwlThing>
            getAllLogo_as() {
        return Base.getAll_as( this.model, this.getResource(), LOGO,
                org.ontoware.rdfreactor.schema.owl.OwlThing.class );
    }

    /**
     * Adds a value to property Logo as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addLogo( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, LOGO, value );
    }

    /**
     * Adds a value to property Logo as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addLogo( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), LOGO, value );
    }

    /**
     * Adds a value to property Logo from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addLogo( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.add( model, instanceResource, LOGO, value );
    }

    /**
     * Adds a value to property Logo from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addLogo( org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.add( this.model, this.getResource(), LOGO, value );
    }

    /**
     * Sets a value of property Logo from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setLogo( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, LOGO, value );
    }

    /**
     * Sets a value of property Logo from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setLogo( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), LOGO, value );
    }

    /**
     * Sets a value of property Logo from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing First, all existing values
     * are removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setLogo( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.set( model, instanceResource, LOGO, value );
    }

    /**
     * Sets a value of property Logo from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing First, all existing values
     * are removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setLogo( org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.set( this.model, this.getResource(), LOGO, value );
    }

    /**
     * Removes a value of property Logo as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeLogo( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, LOGO, value );
    }

    /**
     * Removes a value of property Logo as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeLogo( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), LOGO, value );
    }

    /**
     * Removes a value of property Logo given as an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeLogo( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.remove( model, instanceResource, LOGO, value );
    }

    /**
     * Removes a value of property Logo given as an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeLogo(
            org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.remove( this.model, this.getResource(), LOGO, value );
    }

    /**
     * Removes all values of property Logo * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllLogo( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, LOGO );
    }

    /**
     * Removes all values of property Logo * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllLogo() {
        Base.removeAll( this.model, this.getResource(), LOGO );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1275a539 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasMaker( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, MAKER );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1275a539 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasMaker() {
        return Base.has( this.model, this.getResource(), MAKER );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1275a539 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasMaker( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, MAKER, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1275a539 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasMaker( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), MAKER, value );
    }

    /**
     * Get all values of property Maker as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllMaker_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, MAKER );
    }

    /**
     * Get all values of property Maker as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllMaker_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, MAKER,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Maker as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllMaker_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), MAKER );
    }

    /**
     * Get all values of property Maker as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllMaker_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), MAKER,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Maker * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Agent> getAllMaker( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, MAKER, Agent.class );
    }

    /**
     * Get all values of property Maker as a ReactorResult of Agent
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Agent> getAllMaker_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, MAKER, Agent.class );
    }

    /**
     * Get all values of property Maker * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Agent> getAllMaker() {
        return Base.getAll( this.model, this.getResource(), MAKER, Agent.class );
    }

    /**
     * Get all values of property Maker as a ReactorResult of Agent
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Agent> getAllMaker_as() {
        return Base.getAll_as( this.model, this.getResource(), MAKER,
                Agent.class );
    }

    /**
     * Adds a value to property Maker as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addMaker( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, MAKER, value );
    }

    /**
     * Adds a value to property Maker as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addMaker( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), MAKER, value );
    }

    /**
     * Adds a value to property Maker from an instance of Agent
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addMaker( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Agent value ) {
        Base.add( model, instanceResource, MAKER, value );
    }

    /**
     * Adds a value to property Maker from an instance of Agent
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addMaker( Agent value ) {
        Base.add( this.model, this.getResource(), MAKER, value );
    }

    /**
     * Sets a value of property Maker from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setMaker( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, MAKER, value );
    }

    /**
     * Sets a value of property Maker from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setMaker( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), MAKER, value );
    }

    /**
     * Sets a value of property Maker from an instance of Agent First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setMaker( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Agent value ) {
        Base.set( model, instanceResource, MAKER, value );
    }

    /**
     * Sets a value of property Maker from an instance of Agent First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setMaker( Agent value ) {
        Base.set( this.model, this.getResource(), MAKER, value );
    }

    /**
     * Removes a value of property Maker as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeMaker( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, MAKER, value );
    }

    /**
     * Removes a value of property Maker as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeMaker( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), MAKER, value );
    }

    /**
     * Removes a value of property Maker given as an instance of Agent
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeMaker( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Agent value ) {
        Base.remove( model, instanceResource, MAKER, value );
    }

    /**
     * Removes a value of property Maker given as an instance of Agent
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeMaker( Agent value ) {
        Base.remove( this.model, this.getResource(), MAKER, value );
    }

    /**
     * Removes all values of property Maker * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllMaker( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, MAKER );
    }

    /**
     * Removes all values of property Maker * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllMaker() {
        Base.removeAll( this.model, this.getResource(), MAKER );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31245703 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasMembershipClass( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, MEMBERSHIPCLASS );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31245703 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasMembershipClass() {
        return Base.has( this.model, this.getResource(), MEMBERSHIPCLASS );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31245703 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasMembershipClass( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, MEMBERSHIPCLASS, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@31245703 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean
            hasMembershipClass(
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), MEMBERSHIPCLASS,
                value );
    }

    /**
     * Get all values of property MembershipClass as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllMembershipClass_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, MEMBERSHIPCLASS );
    }

    /**
     * Get all values of property MembershipClass as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllMembershipClass_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, MEMBERSHIPCLASS,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property MembershipClass as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllMembershipClass_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(),
                MEMBERSHIPCLASS );
    }

    /**
     * Get all values of property MembershipClass as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllMembershipClass_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), MEMBERSHIPCLASS,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property MembershipClass * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<FOAFThing> getAllMembershipClass(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, MEMBERSHIPCLASS,
                FOAFThing.class );
    }

    /**
     * Get all values of property MembershipClass as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<FOAFThing> getAllMembershipClass_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, MEMBERSHIPCLASS,
                FOAFThing.class );
    }

    /**
     * Get all values of property MembershipClass * @return a ClosableIterator
     * of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<FOAFThing> getAllMembershipClass() {
        return Base.getAll( this.model, this.getResource(), MEMBERSHIPCLASS,
                FOAFThing.class );
    }

    /**
     * Get all values of property MembershipClass as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<FOAFThing> getAllMembershipClass_as() {
        return Base.getAll_as( this.model, this.getResource(), MEMBERSHIPCLASS,
                FOAFThing.class );
    }

    /**
     * Adds a value to property MembershipClass as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addMembershipClass( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, MEMBERSHIPCLASS, value );
    }

    /**
     * Adds a value to property MembershipClass as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addMembershipClass(
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), MEMBERSHIPCLASS, value );
    }

    /**
     * Adds a value to property MembershipClass from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addMembershipClass( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
        Base.add( model, instanceResource, MEMBERSHIPCLASS, value );
    }

    /**
     * Adds a value to property MembershipClass from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addMembershipClass( FOAFThing value ) {
        Base.add( this.model, this.getResource(), MEMBERSHIPCLASS, value );
    }

    /**
     * Sets a value of property MembershipClass from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setMembershipClass( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, MEMBERSHIPCLASS, value );
    }

    /**
     * Sets a value of property MembershipClass from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setMembershipClass(
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), MEMBERSHIPCLASS, value );
    }

    /**
     * Sets a value of property MembershipClass from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setMembershipClass( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
        Base.set( model, instanceResource, MEMBERSHIPCLASS, value );
    }

    /**
     * Sets a value of property MembershipClass from an instance of Thing First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setMembershipClass( FOAFThing value ) {
        Base.set( this.model, this.getResource(), MEMBERSHIPCLASS, value );
    }

    /**
     * Removes a value of property MembershipClass as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeMembershipClass( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, MEMBERSHIPCLASS, value );
    }

    /**
     * Removes a value of property MembershipClass as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void
            removeMembershipClass(
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), MEMBERSHIPCLASS, value );
    }

    /**
     * Removes a value of property MembershipClass given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeMembershipClass( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
        Base.remove( model, instanceResource, MEMBERSHIPCLASS, value );
    }

    /**
     * Removes a value of property MembershipClass given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeMembershipClass( FOAFThing value ) {
        Base.remove( this.model, this.getResource(), MEMBERSHIPCLASS, value );
    }

    /**
     * Removes all values of property MembershipClass * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllMembershipClass( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, MEMBERSHIPCLASS );
    }

    /**
     * Removes all values of property MembershipClass * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllMembershipClass() {
        Base.removeAll( this.model, this.getResource(), MEMBERSHIPCLASS );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@272e6498 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, NAME );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@272e6498 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasName() {
        return Base.has( this.model, this.getResource(), NAME );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@272e6498 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, NAME, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@272e6498 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasName( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), NAME, value );
    }

    /**
     * Get all values of property Name as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllName_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, NAME );
    }

    /**
     * Get all values of property Name as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllName_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, NAME,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Name as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllName_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), NAME );
    }

    /**
     * Get all values of property Name as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllName_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), NAME,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Name * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllName(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, NAME,
                java.lang.String.class );
    }

    /**
     * Get all values of property Name as a ReactorResult of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllName_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, NAME,
                java.lang.String.class );
    }

    /**
     * Get all values of property Name * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllName() {
        return Base.getAll( this.model, this.getResource(), NAME,
                java.lang.String.class );
    }

    /**
     * Get all values of property Name as a ReactorResult of java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllName_as() {
        return Base.getAll_as( this.model, this.getResource(), NAME,
                java.lang.String.class );
    }

    /**
     * Adds a value to property Name as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, NAME, value );
    }

    /**
     * Adds a value to property Name as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addName( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), NAME, value );
    }

    /**
     * Adds a value to property Name from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.add( model, instanceResource, NAME, value );
    }

    /**
     * Adds a value to property Name from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addName( java.lang.String value ) {
        Base.add( this.model, this.getResource(), NAME, value );
    }

    /**
     * Sets a value of property Name from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, NAME, value );
    }

    /**
     * Sets a value of property Name from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setName( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), NAME, value );
    }

    /**
     * Sets a value of property Name from an instance of java.lang.String First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.set( model, instanceResource, NAME, value );
    }

    /**
     * Sets a value of property Name from an instance of java.lang.String First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setName( java.lang.String value ) {
        Base.set( this.model, this.getResource(), NAME, value );
    }

    /**
     * Removes a value of property Name as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, NAME, value );
    }

    /**
     * Removes a value of property Name as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeName( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), NAME, value );
    }

    /**
     * Removes a value of property Name given as an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.remove( model, instanceResource, NAME, value );
    }

    /**
     * Removes a value of property Name given as an instance of java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeName( java.lang.String value ) {
        Base.remove( this.model, this.getResource(), NAME, value );
    }

    /**
     * Removes all values of property Name * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, NAME );
    }

    /**
     * Removes all values of property Name * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllName() {
        Base.removeAll( this.model, this.getResource(), NAME );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@523ed23c has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNickname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, NICKNAME );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@523ed23c has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNickname() {
        return Base.has( this.model, this.getResource(), NICKNAME );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@523ed23c has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNickname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, NICKNAME, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@523ed23c has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNickname( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), NICKNAME, value );
    }

    /**
     * Get all values of property Nickname as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllNickname_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, NICKNAME );
    }

    /**
     * Get all values of property Nickname as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllNickname_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, NICKNAME,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Nickname as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllNickname_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), NICKNAME );
    }

    /**
     * Get all values of property Nickname as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllNickname_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), NICKNAME,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Nickname * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<FOAFThing> getAllNickname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, NICKNAME, FOAFThing.class );
    }

    /**
     * Get all values of property Nickname as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<FOAFThing> getAllNickname_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, NICKNAME, FOAFThing.class );
    }

    /**
     * Get all values of property Nickname * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<FOAFThing> getAllNickname() {
        return Base.getAll( this.model, this.getResource(), NICKNAME,
                FOAFThing.class );
    }

    /**
     * Get all values of property Nickname as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<FOAFThing> getAllNickname_as() {
        return Base.getAll_as( this.model, this.getResource(), NICKNAME,
                FOAFThing.class );
    }

    /**
     * Adds a value to property Nickname as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNickname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, NICKNAME, value );
    }

    /**
     * Adds a value to property Nickname as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNickname( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), NICKNAME, value );
    }

    /**
     * Adds a value to property Nickname from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNickname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
        Base.add( model, instanceResource, NICKNAME, value );
    }

    /**
     * Adds a value to property Nickname from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNickname( FOAFThing value ) {
        Base.add( this.model, this.getResource(), NICKNAME, value );
    }

    /**
     * Sets a value of property Nickname from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNickname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, NICKNAME, value );
    }

    /**
     * Sets a value of property Nickname from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNickname( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), NICKNAME, value );
    }

    /**
     * Sets a value of property Nickname from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNickname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
        Base.set( model, instanceResource, NICKNAME, value );
    }

    /**
     * Sets a value of property Nickname from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNickname( FOAFThing value ) {
        Base.set( this.model, this.getResource(), NICKNAME, value );
    }

    /**
     * Removes a value of property Nickname as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNickname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, NICKNAME, value );
    }

    /**
     * Removes a value of property Nickname as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNickname( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), NICKNAME, value );
    }

    /**
     * Removes a value of property Nickname given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNickname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
        Base.remove( model, instanceResource, NICKNAME, value );
    }

    /**
     * Removes a value of property Nickname given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNickname( FOAFThing value ) {
        Base.remove( this.model, this.getResource(), NICKNAME, value );
    }

    /**
     * Removes all values of property Nickname * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNickname( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, NICKNAME );
    }

    /**
     * Removes all values of property Nickname * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNickname() {
        Base.removeAll( this.model, this.getResource(), NICKNAME );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47a89031 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasPage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, PAGE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47a89031 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasPage() {
        return Base.has( this.model, this.getResource(), PAGE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47a89031 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasPage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, PAGE, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@47a89031 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasPage( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), PAGE, value );
    }

    /**
     * Get all values of property Page as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllPage_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, PAGE );
    }

    /**
     * Get all values of property Page as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllPage_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, PAGE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Page as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllPage_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), PAGE );
    }

    /**
     * Get all values of property Page as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllPage_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), PAGE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Page * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Document> getAllPage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, PAGE, Document.class );
    }

    /**
     * Get all values of property Page as a ReactorResult of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Document> getAllPage_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, PAGE, Document.class );
    }

    /**
     * Get all values of property Page * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Document> getAllPage() {
        return Base.getAll( this.model, this.getResource(), PAGE,
                Document.class );
    }

    /**
     * Get all values of property Page as a ReactorResult of Document
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Document> getAllPage_as() {
        return Base.getAll_as( this.model, this.getResource(), PAGE,
                Document.class );
    }

    /**
     * Adds a value to property Page as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addPage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, PAGE, value );
    }

    /**
     * Adds a value to property Page as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addPage( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), PAGE, value );
    }

    /**
     * Adds a value to property Page from an instance of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addPage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Document value ) {
        Base.add( model, instanceResource, PAGE, value );
    }

    /**
     * Adds a value to property Page from an instance of Document
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addPage( Document value ) {
        Base.add( this.model, this.getResource(), PAGE, value );
    }

    /**
     * Sets a value of property Page from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setPage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, PAGE, value );
    }

    /**
     * Sets a value of property Page from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setPage( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), PAGE, value );
    }

    /**
     * Sets a value of property Page from an instance of Document First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setPage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Document value ) {
        Base.set( model, instanceResource, PAGE, value );
    }

    /**
     * Sets a value of property Page from an instance of Document First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setPage( Document value ) {
        Base.set( this.model, this.getResource(), PAGE, value );
    }

    /**
     * Removes a value of property Page as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removePage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, PAGE, value );
    }

    /**
     * Removes a value of property Page as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removePage( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), PAGE, value );
    }

    /**
     * Removes a value of property Page given as an instance of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removePage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Document value ) {
        Base.remove( model, instanceResource, PAGE, value );
    }

    /**
     * Removes a value of property Page given as an instance of Document
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removePage( Document value ) {
        Base.remove( this.model, this.getResource(), PAGE, value );
    }

    /**
     * Removes all values of property Page * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllPage( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, PAGE );
    }

    /**
     * Removes all values of property Page * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllPage() {
        Base.removeAll( this.model, this.getResource(), PAGE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49c3c8e has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasPhone( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, PHONE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49c3c8e has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasPhone() {
        return Base.has( this.model, this.getResource(), PHONE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49c3c8e has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasPhone( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, PHONE, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@49c3c8e has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasPhone( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), PHONE, value );
    }

    /**
     * Get all values of property Phone as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllPhone_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, PHONE );
    }

    /**
     * Get all values of property Phone as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllPhone_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, PHONE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Phone as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllPhone_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), PHONE );
    }

    /**
     * Get all values of property Phone as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllPhone_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), PHONE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Phone * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<FOAFThing> getAllPhone( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, PHONE, FOAFThing.class );
    }

    /**
     * Get all values of property Phone as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<FOAFThing> getAllPhone_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, PHONE, FOAFThing.class );
    }

    /**
     * Get all values of property Phone * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<FOAFThing> getAllPhone() {
        return Base.getAll( this.model, this.getResource(), PHONE, FOAFThing.class );
    }

    /**
     * Get all values of property Phone as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<FOAFThing> getAllPhone_as() {
        return Base.getAll_as( this.model, this.getResource(), PHONE,
                FOAFThing.class );
    }

    /**
     * Adds a value to property Phone as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addPhone( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, PHONE, value );
    }

    /**
     * Adds a value to property Phone as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addPhone( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), PHONE, value );
    }

    /**
     * Adds a value to property Phone from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addPhone( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
        Base.add( model, instanceResource, PHONE, value );
    }

    /**
     * Adds a value to property Phone from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addPhone( FOAFThing value ) {
        Base.add( this.model, this.getResource(), PHONE, value );
    }

    /**
     * Sets a value of property Phone from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setPhone( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, PHONE, value );
    }

    /**
     * Sets a value of property Phone from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setPhone( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), PHONE, value );
    }

    /**
     * Sets a value of property Phone from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setPhone( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
        Base.set( model, instanceResource, PHONE, value );
    }

    /**
     * Sets a value of property Phone from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setPhone( FOAFThing value ) {
        Base.set( this.model, this.getResource(), PHONE, value );
    }

    /**
     * Removes a value of property Phone as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removePhone( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, PHONE, value );
    }

    /**
     * Removes a value of property Phone as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removePhone( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), PHONE, value );
    }

    /**
     * Removes a value of property Phone given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removePhone( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
        Base.remove( model, instanceResource, PHONE, value );
    }

    /**
     * Removes a value of property Phone given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removePhone( FOAFThing value ) {
        Base.remove( this.model, this.getResource(), PHONE, value );
    }

    /**
     * Removes all values of property Phone * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllPhone( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, PHONE );
    }

    /**
     * Removes all values of property Phone * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllPhone() {
        Base.removeAll( this.model, this.getResource(), PHONE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bd6075d has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasPrimarytopicof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, PRIMARYTOPICOF );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bd6075d has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasPrimarytopicof() {
        return Base.has( this.model, this.getResource(), PRIMARYTOPICOF );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bd6075d has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasPrimarytopicof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, PRIMARYTOPICOF, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bd6075d has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean
            hasPrimarytopicof(
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), PRIMARYTOPICOF,
                value );
    }

    /**
     * Get all values of property Primarytopicof as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllPrimarytopicof_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, PRIMARYTOPICOF );
    }

    /**
     * Get all values of property Primarytopicof as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllPrimarytopicof_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, PRIMARYTOPICOF,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Primarytopicof as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllPrimarytopicof_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(),
                PRIMARYTOPICOF );
    }

    /**
     * Get all values of property Primarytopicof as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllPrimarytopicof_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), PRIMARYTOPICOF,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Primarytopicof * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Document> getAllPrimarytopicof(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, PRIMARYTOPICOF,
                Document.class );
    }

    /**
     * Get all values of property Primarytopicof as a ReactorResult of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Document> getAllPrimarytopicof_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, PRIMARYTOPICOF,
                Document.class );
    }

    /**
     * Get all values of property Primarytopicof * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Document> getAllPrimarytopicof() {
        return Base.getAll( this.model, this.getResource(), PRIMARYTOPICOF,
                Document.class );
    }

    /**
     * Get all values of property Primarytopicof as a ReactorResult of Document
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Document> getAllPrimarytopicof_as() {
        return Base.getAll_as( this.model, this.getResource(), PRIMARYTOPICOF,
                Document.class );
    }

    /**
     * Adds a value to property Primarytopicof as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addPrimarytopicof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, PRIMARYTOPICOF, value );
    }

    /**
     * Adds a value to property Primarytopicof as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addPrimarytopicof( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), PRIMARYTOPICOF, value );
    }

    /**
     * Adds a value to property Primarytopicof from an instance of Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addPrimarytopicof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Document value ) {
        Base.add( model, instanceResource, PRIMARYTOPICOF, value );
    }

    /**
     * Adds a value to property Primarytopicof from an instance of Document
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addPrimarytopicof( Document value ) {
        Base.add( this.model, this.getResource(), PRIMARYTOPICOF, value );
    }

    /**
     * Sets a value of property Primarytopicof from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setPrimarytopicof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, PRIMARYTOPICOF, value );
    }

    /**
     * Sets a value of property Primarytopicof from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setPrimarytopicof( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), PRIMARYTOPICOF, value );
    }

    /**
     * Sets a value of property Primarytopicof from an instance of Document
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setPrimarytopicof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Document value ) {
        Base.set( model, instanceResource, PRIMARYTOPICOF, value );
    }

    /**
     * Sets a value of property Primarytopicof from an instance of Document
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setPrimarytopicof( Document value ) {
        Base.set( this.model, this.getResource(), PRIMARYTOPICOF, value );
    }

    /**
     * Removes a value of property Primarytopicof as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removePrimarytopicof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, PRIMARYTOPICOF, value );
    }

    /**
     * Removes a value of property Primarytopicof as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void
            removePrimarytopicof(
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), PRIMARYTOPICOF, value );
    }

    /**
     * Removes a value of property Primarytopicof given as an instance of
     * Document
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removePrimarytopicof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Document value ) {
        Base.remove( model, instanceResource, PRIMARYTOPICOF, value );
    }

    /**
     * Removes a value of property Primarytopicof given as an instance of
     * Document
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removePrimarytopicof( Document value ) {
        Base.remove( this.model, this.getResource(), PRIMARYTOPICOF, value );
    }

    /**
     * Removes all values of property Primarytopicof * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllPrimarytopicof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, PRIMARYTOPICOF );
    }

    /**
     * Removes all values of property Primarytopicof * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllPrimarytopicof() {
        Base.removeAll( this.model, this.getResource(), PRIMARYTOPICOF );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c84d9d has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasTheme( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, THEME );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c84d9d has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasTheme() {
        return Base.has( this.model, this.getResource(), THEME );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c84d9d has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasTheme( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, THEME, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c84d9d has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasTheme( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), THEME, value );
    }

    /**
     * Get all values of property Theme as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllTheme_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, THEME );
    }

    /**
     * Get all values of property Theme as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllTheme_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, THEME,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Theme as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllTheme_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), THEME );
    }

    /**
     * Get all values of property Theme as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllTheme_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), THEME,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Theme * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<org.ontoware.rdfreactor.schema.owl.OwlThing>
            getAllTheme(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, THEME,
                org.ontoware.rdfreactor.schema.owl.OwlThing.class );
    }

    /**
     * Get all values of property Theme as a ReactorResult of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<org.ontoware.rdfreactor.schema.owl.OwlThing>
            getAllTheme_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, THEME,
                org.ontoware.rdfreactor.schema.owl.OwlThing.class );
    }

    /**
     * Get all values of property Theme * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<org.ontoware.rdfreactor.schema.owl.OwlThing>
            getAllTheme() {
        return Base.getAll( this.model, this.getResource(), THEME,
                org.ontoware.rdfreactor.schema.owl.OwlThing.class );
    }

    /**
     * Get all values of property Theme as a ReactorResult of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<org.ontoware.rdfreactor.schema.owl.OwlThing>
            getAllTheme_as() {
        return Base.getAll_as( this.model, this.getResource(), THEME,
                org.ontoware.rdfreactor.schema.owl.OwlThing.class );
    }

    /**
     * Adds a value to property Theme as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addTheme( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, THEME, value );
    }

    /**
     * Adds a value to property Theme as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addTheme( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), THEME, value );
    }

    /**
     * Adds a value to property Theme from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addTheme( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.add( model, instanceResource, THEME, value );
    }

    /**
     * Adds a value to property Theme from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addTheme( org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.add( this.model, this.getResource(), THEME, value );
    }

    /**
     * Sets a value of property Theme from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setTheme( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, THEME, value );
    }

    /**
     * Sets a value of property Theme from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setTheme( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), THEME, value );
    }

    /**
     * Sets a value of property Theme from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing First, all existing values
     * are removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setTheme( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.set( model, instanceResource, THEME, value );
    }

    /**
     * Sets a value of property Theme from an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing First, all existing values
     * are removed, then this value is added. Cardinality constraints are not
     * checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setTheme( org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.set( this.model, this.getResource(), THEME, value );
    }

    /**
     * Removes a value of property Theme as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeTheme( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, THEME, value );
    }

    /**
     * Removes a value of property Theme as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeTheme( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), THEME, value );
    }

    /**
     * Removes a value of property Theme given as an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeTheme( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.remove( model, instanceResource, THEME, value );
    }

    /**
     * Removes a value of property Theme given as an instance of
     * org.ontoware.rdfreactor.schema.owl.OwlThing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeTheme(
            org.ontoware.rdfreactor.schema.owl.OwlThing value ) {
        Base.remove( this.model, this.getResource(), THEME, value );
    }

    /**
     * Removes all values of property Theme * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllTheme( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, THEME );
    }

    /**
     * Removes all values of property Theme * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllTheme() {
        Base.removeAll( this.model, this.getResource(), THEME );
    }


    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@121c77b has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasModified( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, MODIFIED );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@121c77b has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasModified() {
        return Base.has( this.model, this.getResource(), MODIFIED );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@121c77b has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasModified( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, MODIFIED, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@121c77b has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasModified(
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), MODIFIED,
                value );
    }

    /**
     * Get all values of property DateModified as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllModified_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, MODIFIED );
    }

    /**
     * Get all values of property DateModified as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllModified_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, MODIFIED,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property DateModified as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllModified_asNode() {
        return Base
.getAll_asNode( this.model, this.getResource(), MODIFIED );
    }

    /**
     * Get all values of property DateModified as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllModified_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), MODIFIED,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property DateModified * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllModified(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, MODIFIED,
                java.lang.String.class );
    }

    /**
     * Get all values of property DateModified as a ReactorResult of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllModified_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, MODIFIED,
                java.lang.String.class );
    }

    /**
     * Get all values of property DateModified * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllModified() {
        return Base.getAll( this.model, this.getResource(), MODIFIED,
                java.lang.String.class );
    }

    /**
     * Get all values of property DateModified as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllModified_as() {
        return Base.getAll_as( this.model, this.getResource(), MODIFIED,
                java.lang.String.class );
    }

    /**
     * Adds a value to property DateModified as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addModified( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, MODIFIED, value );
    }

    /**
     * Adds a value to property DateModified as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addModified(
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), MODIFIED, value );
    }

    /**
     * Adds a value to property DateModified from an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addModified( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.add( model, instanceResource, MODIFIED, value );
    }

    /**
     * Adds a value to property DateModified from an instance of
     * java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addModified( java.lang.String value ) {
        Base.add( this.model, this.getResource(), MODIFIED, value );
    }

    /**
     * Sets a value of property DateModified from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setModified( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, MODIFIED, value );
    }

    /**
     * Sets a value of property DateModified from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setModified(
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), MODIFIED, value );
    }

    /**
     * Sets a value of property DateModified from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setModified( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.set( model, instanceResource, MODIFIED, value );
    }

    /**
     * Sets a value of property DateModified from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setModified( java.lang.String value ) {
        Base.set( this.model, this.getResource(), MODIFIED, value );
    }

    /**
     * Removes a value of property DateModified as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeModified( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, MODIFIED, value );
    }

    /**
     * Removes a value of property DateModified as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeModified(
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), MODIFIED, value );
    }

    /**
     * Removes a value of property DateModified given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeModified( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.remove( model, instanceResource, MODIFIED, value );
    }

    /**
     * Removes a value of property DateModified given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeModified( java.lang.String value ) {
        Base.remove( this.model, this.getResource(), MODIFIED, value );
    }

    /**
     * Removes all values of property DateModified * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllModified( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, MODIFIED );
    }

    /**
     * Removes all values of property DateModified * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllModified() {
        Base.removeAll( this.model, this.getResource(), MODIFIED );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a56f0 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
     *
     * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasCreated( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, CREATED );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a56f0 has at least one value set 
     * @return true if this property has at least one value
     *
     * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasCreated() {
        return Base.has( this.model, this.getResource(), CREATED );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a56f0 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
     *
     * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasCreated( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, CREATED, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a56f0 has the given value (maybe among other values).  
     * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
     *
     * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasCreated( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), CREATED, value );
    }

    /**
     * Get all values of property DateCreated as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     *
     * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllCreated_asNode(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, CREATED );
    }

    /**
     * Get all values of property DateCreated as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
     *
     * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllCreated_asNode_(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, CREATED,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property DateCreated as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
     *
     * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllCreated_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), CREATED );
    }

    /**
     * Get all values of property DateCreated as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
     *
     * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllCreated_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), CREATED,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property DateCreated     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
     *
     * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<java.lang.String> getAllCreated(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, CREATED,
                java.lang.String.class );
    }

    /**
     * Get all values of property DateCreated as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
     *
     * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<java.lang.String> getAllCreated_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, CREATED,
                java.lang.String.class );
    }

    /**
     * Get all values of property DateCreated     * @return a ClosableIterator of $type
     *
     * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<java.lang.String> getAllCreated() {
        return Base.getAll( this.model, this.getResource(), CREATED,
                java.lang.String.class );
    }

    /**
     * Get all values of property DateCreated as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
     *
     * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<java.lang.String> getAllCreated_as() {
        return Base.getAll_as( this.model, this.getResource(), CREATED,
                java.lang.String.class );
    }

    /**
     * Adds a value to property DateCreated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addCreated( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, CREATED, value );
    }

    /**
     * Adds a value to property DateCreated as an RDF2Go node 
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addCreated( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), CREATED, value );
    }

    /**
     * Adds a value to property DateCreated from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     *
     * [Generated from RDFReactor template rule #add3static] 
     */
    public static void addCreated( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.add( model, instanceResource, CREATED, value );
    }

    /**
     * Adds a value to property DateCreated from an instance of java.lang.String 
     *
     * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addCreated( java.lang.String value ) {
        Base.add( this.model, this.getResource(), CREATED, value );
    }

    /**
     * Sets a value of property DateCreated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be set
     *
     * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setCreated( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, CREATED, value );
    }

    /**
     * Sets a value of property DateCreated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setCreated( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), CREATED, value );
    }

    /**
     * Sets a value of property DateCreated from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #set3static] 
     */
    public static void setCreated( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.set( model, instanceResource, CREATED, value );
    }

    /**
     * Sets a value of property DateCreated from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setCreated( java.lang.String value ) {
        Base.set( this.model, this.getResource(), CREATED, value );
    }

    /**
     * Removes a value of property DateCreated as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be removed
     *
     * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeCreated( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, CREATED, value );
    }

    /**
     * Removes a value of property DateCreated as an RDF2Go node
     * @param value the value to be removed
     *
     * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeCreated( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), CREATED, value );
    }

    /**
     * Removes a value of property DateCreated given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be removed
     *
     * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void removeCreated( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.remove( model, instanceResource, CREATED, value );
    }

    /**
     * Removes a value of property DateCreated given as an instance of java.lang.String 
     * @param value the value to be removed
     *
     * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeCreated( java.lang.String value ) {
        Base.remove( this.model, this.getResource(), CREATED, value );
    }

    /**
     * Removes all values of property DateCreated     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     *
     * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllCreated( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, CREATED );
    }

    /**
     * Removes all values of property DateCreated	 *
     * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllCreated() {
        Base.removeAll( this.model, this.getResource(), CREATED );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10a73bc has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
     *
     * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasHasPart( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
    	return Base.has(model, instanceResource, HASPART);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10a73bc has at least one value set 
     * @return true if this property has at least one value
     *
     * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasHasPart() {
    	return Base.has(this.model, this.getResource(), HASPART);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10a73bc has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
     *
     * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasHasPart( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
    	return Base.hasValue(model, instanceResource, HASPART, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10a73bc has the given value (maybe among other values).  
     * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
     *
     * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasHasPart( org.ontoware.rdf2go.model.node.Node value ) {
    	return Base.hasValue(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Get all values of property HasPart as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     *
     * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllHasPart_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
    	return Base.getAll_asNode(model, instanceResource, HASPART);
    }

    /**
     * Get all values of property HasPart as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
     *
     * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllHasPart_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
    	return Base.getAll_as(model, instanceResource, HASPART, org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property HasPart as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
     *
     * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllHasPart_asNode() {
    	return Base.getAll_asNode(this.model, this.getResource(), HASPART);
    }

    /**
     * Get all values of property HasPart as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
     *
     * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllHasPart_asNode_() {
    	return Base.getAll_as(this.model, this.getResource(), HASPART, org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property HasPart     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
     *
     * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<FOAFThing> getAllHasPart( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
    	return Base.getAll(model, instanceResource, HASPART, FOAFThing.class);
    }

    /**
     * Get all values of property HasPart as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
     *
     * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<FOAFThing> getAllHasPart_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
    	return Base.getAll_as(model, instanceResource, HASPART, FOAFThing.class);
    }

    /**
     * Get all values of property HasPart     * @return a ClosableIterator of $type
     *
     * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<FOAFThing> getAllHasPart() {
    	return Base.getAll(this.model, this.getResource(), HASPART, FOAFThing.class);
    }

    /**
     * Get all values of property HasPart as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
     *
     * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<FOAFThing> getAllHasPart_as() {
    	return Base.getAll_as(this.model, this.getResource(), HASPART, FOAFThing.class);
    }

    /**
     * Adds a value to property HasPart as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addHasPart( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
    	Base.add(model, instanceResource, HASPART, value);
    }

    /**
     * Adds a value to property HasPart as an RDF2Go node 
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addHasPart( org.ontoware.rdf2go.model.node.Node value ) {
    	Base.add(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Adds a value to property HasPart from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     *
     * [Generated from RDFReactor template rule #add3static] 
     */
    public static void addHasPart( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
    	Base.add(model, instanceResource, HASPART, value);
    }

    /**
     * Adds a value to property HasPart from an instance of Thing 
     *
     * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addHasPart( FOAFThing value ) {
    	Base.add(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Sets a value of property HasPart from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be set
     *
     * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setHasPart( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
    	Base.set(model, instanceResource, HASPART, value);
    }

    /**
     * Sets a value of property HasPart from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setHasPart( org.ontoware.rdf2go.model.node.Node value ) {
    	Base.set(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Sets a value of property HasPart from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #set3static] 
     */
    public static void setHasPart( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
    	Base.set(model, instanceResource, HASPART, value);
    }

    /**
     * Sets a value of property HasPart from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setHasPart( FOAFThing value ) {
    	Base.set(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Removes a value of property HasPart as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be removed
     *
     * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeHasPart( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
    	Base.remove(model, instanceResource, HASPART, value);
    }

    /**
     * Removes a value of property HasPart as an RDF2Go node
     * @param value the value to be removed
     *
     * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeHasPart( org.ontoware.rdf2go.model.node.Node value ) {
    	Base.remove(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Removes a value of property HasPart given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be removed
     *
     * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void removeHasPart( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
    	Base.remove(model, instanceResource, HASPART, value);
    }

    /**
     * Removes a value of property HasPart given as an instance of Thing 
     * @param value the value to be removed
     *
     * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeHasPart( FOAFThing value ) {
    	Base.remove(this.model, this.getResource(), HASPART, value);
    }

    /**
     * Removes all values of property HasPart     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     *
     * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllHasPart( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
    	Base.removeAll(model, instanceResource, HASPART);
    }

    /**
     * Removes all values of property HasPart	 *
     * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllHasPart() {
    	Base.removeAll(this.model, this.getResource(), HASPART);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1391b1a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
     *
     * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasIsPartOf( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
    	return Base.has(model, instanceResource, ISPARTOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1391b1a has at least one value set 
     * @return true if this property has at least one value
     *
     * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasIsPartOf() {
    	return Base.has(this.model, this.getResource(), ISPARTOF);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1391b1a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
     *
     * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasIsPartOf( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
    	return Base.hasValue(model, instanceResource, ISPARTOF, value);
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1391b1a has the given value (maybe among other values).  
     * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
     *
     * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasIsPartOf( org.ontoware.rdf2go.model.node.Node value ) {
    	return Base.hasValue(this.model, this.getResource(), ISPARTOF, value);
    }

    /**
     * Get all values of property IsPartOf as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     *
     * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllIsPartOf_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
    	return Base.getAll_asNode(model, instanceResource, ISPARTOF);
    }

    /**
     * Get all values of property IsPartOf as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
     *
     * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllIsPartOf_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
    	return Base.getAll_as(model, instanceResource, ISPARTOF, org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property IsPartOf as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
     *
     * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllIsPartOf_asNode() {
    	return Base.getAll_asNode(this.model, this.getResource(), ISPARTOF);
    }

    /**
     * Get all values of property IsPartOf as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
     *
     * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllIsPartOf_asNode_() {
    	return Base.getAll_as(this.model, this.getResource(), ISPARTOF, org.ontoware.rdf2go.model.node.Node.class);
    }

    /**
     * Get all values of property IsPartOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
     *
     * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<FOAFThing> getAllIsPartOf( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
    	return Base.getAll(model, instanceResource, ISPARTOF, FOAFThing.class);
    }

    /**
     * Get all values of property IsPartOf as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
     *
     * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<FOAFThing> getAllIsPartOf_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
    	return Base.getAll_as(model, instanceResource, ISPARTOF, FOAFThing.class);
    }

    /**
     * Get all values of property IsPartOf     * @return a ClosableIterator of $type
     *
     * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<FOAFThing> getAllIsPartOf() {
    	return Base.getAll(this.model, this.getResource(), ISPARTOF, FOAFThing.class);
    }

    /**
     * Get all values of property IsPartOf as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
     *
     * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<FOAFThing> getAllIsPartOf_as() {
    	return Base.getAll_as(this.model, this.getResource(), ISPARTOF, FOAFThing.class);
    }

    /**
     * Adds a value to property IsPartOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addIsPartOf( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
    	Base.add(model, instanceResource, ISPARTOF, value);
    }

    /**
     * Adds a value to property IsPartOf as an RDF2Go node 
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addIsPartOf( org.ontoware.rdf2go.model.node.Node value ) {
    	Base.add(this.model, this.getResource(), ISPARTOF, value);
    }

    /**
     * Adds a value to property IsPartOf from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     *
     * [Generated from RDFReactor template rule #add3static] 
     */
    public static void addIsPartOf( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
    	Base.add(model, instanceResource, ISPARTOF, value);
    }

    /**
     * Adds a value to property IsPartOf from an instance of Thing 
     *
     * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addIsPartOf( FOAFThing value ) {
    	Base.add(this.model, this.getResource(), ISPARTOF, value);
    }

    /**
     * Sets a value of property IsPartOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be set
     *
     * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setIsPartOf( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
    	Base.set(model, instanceResource, ISPARTOF, value);
    }

    /**
     * Sets a value of property IsPartOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setIsPartOf( org.ontoware.rdf2go.model.node.Node value ) {
    	Base.set(this.model, this.getResource(), ISPARTOF, value);
    }

    /**
     * Sets a value of property IsPartOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #set3static] 
     */
    public static void setIsPartOf( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
    	Base.set(model, instanceResource, ISPARTOF, value);
    }

    /**
     * Sets a value of property IsPartOf from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param value the value to be added
     *
     * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setIsPartOf( FOAFThing value ) {
    	Base.set(this.model, this.getResource(), ISPARTOF, value);
    }

    /**
     * Removes a value of property IsPartOf as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be removed
     *
     * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeIsPartOf( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
    	Base.remove(model, instanceResource, ISPARTOF, value);
    }

    /**
     * Removes a value of property IsPartOf as an RDF2Go node
     * @param value the value to be removed
     *
     * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeIsPartOf( org.ontoware.rdf2go.model.node.Node value ) {
    	Base.remove(this.model, this.getResource(), ISPARTOF, value);
    }

    /**
     * Removes a value of property IsPartOf given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @param value the value to be removed
     *
     * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void removeIsPartOf( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            FOAFThing value ) {
    	Base.remove(model, instanceResource, ISPARTOF, value);
    }

    /**
     * Removes a value of property IsPartOf given as an instance of Thing 
     * @param value the value to be removed
     *
     * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeIsPartOf( FOAFThing value ) {
    	Base.remove(this.model, this.getResource(), ISPARTOF, value);
    }

    /**
     * Removes all values of property IsPartOf     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     *
     * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllIsPartOf( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
    	Base.removeAll(model, instanceResource, ISPARTOF);
    }

    /**
     * Removes all values of property IsPartOf	 *
     * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllIsPartOf() {
    	Base.removeAll(this.model, this.getResource(), ISPARTOF);
    }
}