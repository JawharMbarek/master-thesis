/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) on 21.12.12 17:00
 */
package org.rdfs.sioc;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> About </li>
 *   <li> Addressedto </li>
 *   <li> Attachment </li>
 *   <li> Container </li>
 *   <li> Content </li>
 *   <li> Discussion </li>
 *   <li> Earlierversion </li>
 *   <li> Embedsknowledge </li>
 *   <li> Ipaddress </li>
 *   <li> Laterversion </li>
 *   <li> Latestversion </li>
 *   <li> Modifier </li>
 *   <li> Nextbydate </li>
 *   <li> Nextversion </li>
 *   <li> Previousbydate </li>
 *   <li> Previousversion </li>
 *   <li> Reply </li>
 *   <li> Replyof </li>
 *   <li> Sibling </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 21.12.12 17:00
 */
public class Item extends SIOCThing {

    /**
     * 
     */
    private static final long serialVersionUID = -3861203006621654845L;

    /** http://rdfs.org/sioc/ns#Item */
	public static final URI RDFS_CLASS = new URIImpl("http://rdfs.org/sioc/ns#Item", false);

    /** http://rdfs.org/sioc/ns#about */
	public static final URI ABOUT = new URIImpl("http://rdfs.org/sioc/ns#about",false);

    /** http://rdfs.org/sioc/ns#addressed_to */
	public static final URI ADDRESSEDTO = new URIImpl("http://rdfs.org/sioc/ns#addressed_to",false);

    /** http://rdfs.org/sioc/ns#attachment */
	public static final URI ATTACHMENT = new URIImpl("http://rdfs.org/sioc/ns#attachment",false);

    /** http://rdfs.org/sioc/ns#has_container */
	public static final URI CONTAINER = new URIImpl("http://rdfs.org/sioc/ns#has_container",false);

    /** http://rdfs.org/sioc/ns#content */
	public static final URI CONTENT = new URIImpl("http://rdfs.org/sioc/ns#content",false);

    /** http://rdfs.org/sioc/ns#has_discussion */
	public static final URI DISCUSSION = new URIImpl("http://rdfs.org/sioc/ns#has_discussion",false);

    /** http://rdfs.org/sioc/ns#earlier_version */
	public static final URI EARLIERVERSION = new URIImpl("http://rdfs.org/sioc/ns#earlier_version",false);

    /** http://rdfs.org/sioc/ns#embeds_knowledge */
	public static final URI EMBEDSKNOWLEDGE = new URIImpl("http://rdfs.org/sioc/ns#embeds_knowledge",false);

    /** http://rdfs.org/sioc/ns#ip_address */
	public static final URI IPADDRESS = new URIImpl("http://rdfs.org/sioc/ns#ip_address",false);

    /** http://rdfs.org/sioc/ns#later_version */
	public static final URI LATERVERSION = new URIImpl("http://rdfs.org/sioc/ns#later_version",false);

    /** http://rdfs.org/sioc/ns#latest_version */
	public static final URI LATESTVERSION = new URIImpl("http://rdfs.org/sioc/ns#latest_version",false);

    /** http://rdfs.org/sioc/ns#has_modifier */
	public static final URI MODIFIER = new URIImpl("http://rdfs.org/sioc/ns#has_modifier",false);

    /** http://rdfs.org/sioc/ns#next_by_date */
	public static final URI NEXTBYDATE = new URIImpl("http://rdfs.org/sioc/ns#next_by_date",false);

    /** http://rdfs.org/sioc/ns#next_version */
	public static final URI NEXTVERSION = new URIImpl("http://rdfs.org/sioc/ns#next_version",false);

    /** http://rdfs.org/sioc/ns#previous_by_date */
	public static final URI PREVIOUSBYDATE = new URIImpl("http://rdfs.org/sioc/ns#previous_by_date",false);

    /** http://rdfs.org/sioc/ns#previous_version */
	public static final URI PREVIOUSVERSION = new URIImpl("http://rdfs.org/sioc/ns#previous_version",false);

    /** http://rdfs.org/sioc/ns#has_reply */
	public static final URI REPLY = new URIImpl("http://rdfs.org/sioc/ns#has_reply",false);

    /** http://rdfs.org/sioc/ns#reply_of */
	public static final URI REPLYOF = new URIImpl("http://rdfs.org/sioc/ns#reply_of",false);

    /** http://rdfs.org/sioc/ns#sibling */
	public static final URI SIBLING = new URIImpl("http://rdfs.org/sioc/ns#sibling",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://rdfs.org/sioc/ns#about",false),
      new URIImpl("http://rdfs.org/sioc/ns#addressed_to",false),
      new URIImpl("http://rdfs.org/sioc/ns#attachment",false),
      new URIImpl("http://rdfs.org/sioc/ns#has_container",false),
      new URIImpl("http://rdfs.org/sioc/ns#content",false),
      new URIImpl("http://rdfs.org/sioc/ns#has_discussion",false),
      new URIImpl("http://rdfs.org/sioc/ns#earlier_version",false),
      new URIImpl("http://rdfs.org/sioc/ns#embeds_knowledge",false),
      new URIImpl("http://rdfs.org/sioc/ns#ip_address",false),
      new URIImpl("http://rdfs.org/sioc/ns#later_version",false),
      new URIImpl("http://rdfs.org/sioc/ns#latest_version",false),
      new URIImpl("http://rdfs.org/sioc/ns#has_modifier",false),
      new URIImpl("http://rdfs.org/sioc/ns#next_by_date",false),
      new URIImpl("http://rdfs.org/sioc/ns#next_version",false),
      new URIImpl("http://rdfs.org/sioc/ns#previous_by_date",false),
      new URIImpl("http://rdfs.org/sioc/ns#previous_version",false),
      new URIImpl("http://rdfs.org/sioc/ns#has_reply",false),
      new URIImpl("http://rdfs.org/sioc/ns#reply_of",false),
      new URIImpl("http://rdfs.org/sioc/ns#sibling",false),
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected Item ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public Item ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public Item ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public Item ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public Item ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of Item  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static Item  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, Item.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://rdfs.org/sioc/ns#Item).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends Item> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, Item.class );
	}

    /**
	 * Remove rdf:type Item from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Containerof' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllContainerof_Inverse( Model model, Object objectValue ) {
		return Base.getAll_Inverse(model, Container.CONTAINEROF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Containerof' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllContainerof_Inverse() {
		return Base.getAll_Inverse(this.model, Container.CONTAINEROF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Containerof' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllContainerof_Inverse_as( Model model, Object objectValue ) {
		return Base.getAll_Inverse_as(model, Container.CONTAINEROF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Earlierversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllEarlierversion_Inverse( Model model, Object objectValue ) {
		return Base.getAll_Inverse(model, Item.EARLIERVERSION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Earlierversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllEarlierversion_Inverse() {
		return Base.getAll_Inverse(this.model, Item.EARLIERVERSION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Earlierversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllEarlierversion_Inverse_as( Model model, Object objectValue ) {
		return Base.getAll_Inverse_as(model, Item.EARLIERVERSION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Laterversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllLaterversion_Inverse( Model model, Object objectValue ) {
		return Base.getAll_Inverse(model, Item.LATERVERSION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Laterversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllLaterversion_Inverse() {
		return Base.getAll_Inverse(this.model, Item.LATERVERSION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Laterversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllLaterversion_Inverse_as( Model model, Object objectValue ) {
		return Base.getAll_Inverse_as(model, Item.LATERVERSION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Latestversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllLatestversion_Inverse( Model model, Object objectValue ) {
		return Base.getAll_Inverse(model, Item.LATESTVERSION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Latestversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllLatestversion_Inverse() {
		return Base.getAll_Inverse(this.model, Item.LATESTVERSION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Latestversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllLatestversion_Inverse_as( Model model, Object objectValue ) {
		return Base.getAll_Inverse_as(model, Item.LATESTVERSION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Nextbydate' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllNextbydate_Inverse( Model model, Object objectValue ) {
		return Base.getAll_Inverse(model, Item.NEXTBYDATE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Nextbydate' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllNextbydate_Inverse() {
		return Base.getAll_Inverse(this.model, Item.NEXTBYDATE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Nextbydate' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllNextbydate_Inverse_as( Model model, Object objectValue ) {
		return Base.getAll_Inverse_as(model, Item.NEXTBYDATE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Nextversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllNextversion_Inverse( Model model, Object objectValue ) {
		return Base.getAll_Inverse(model, Item.NEXTVERSION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Nextversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllNextversion_Inverse() {
		return Base.getAll_Inverse(this.model, Item.NEXTVERSION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Nextversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllNextversion_Inverse_as( Model model, Object objectValue ) {
		return Base.getAll_Inverse_as(model, Item.NEXTVERSION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Previousbydate' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllPreviousbydate_Inverse( Model model, Object objectValue ) {
		return Base.getAll_Inverse(model, Item.PREVIOUSBYDATE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Previousbydate' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllPreviousbydate_Inverse() {
		return Base.getAll_Inverse(this.model, Item.PREVIOUSBYDATE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Previousbydate' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllPreviousbydate_Inverse_as( Model model, Object objectValue ) {
		return Base.getAll_Inverse_as(model, Item.PREVIOUSBYDATE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Previousversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllPreviousversion_Inverse( Model model, Object objectValue ) {
		return Base.getAll_Inverse(model, Item.PREVIOUSVERSION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Previousversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllPreviousversion_Inverse() {
		return Base.getAll_Inverse(this.model, Item.PREVIOUSVERSION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Previousversion' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllPreviousversion_Inverse_as( Model model, Object objectValue ) {
		return Base.getAll_Inverse_as(model, Item.PREVIOUSVERSION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Reply' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllReply_Inverse( Model model, Object objectValue ) {
		return Base.getAll_Inverse(model, Item.REPLY, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Reply' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllReply_Inverse() {
		return Base.getAll_Inverse(this.model, Item.REPLY, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Reply' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllReply_Inverse_as( Model model, Object objectValue ) {
		return Base.getAll_Inverse_as(model, Item.REPLY, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Replyof' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllReplyof_Inverse( Model model, Object objectValue ) {
		return Base.getAll_Inverse(model, Item.REPLYOF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Replyof' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllReplyof_Inverse() {
		return Base.getAll_Inverse(this.model, Item.REPLYOF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Replyof' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllReplyof_Inverse_as( Model model, Object objectValue ) {
		return Base.getAll_Inverse_as(model, Item.REPLYOF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Sibling' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllSibling_Inverse( Model model, Object objectValue ) {
		return Base.getAll_Inverse(model, Item.SIBLING, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Sibling' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllSibling_Inverse() {
		return Base.getAll_Inverse(this.model, Item.SIBLING, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Sibling' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllSibling_Inverse_as( Model model, Object objectValue ) {
		return Base.getAll_Inverse_as(model, Item.SIBLING, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Modifierof' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllModifierof_Inverse( Model model, Object objectValue ) {
		return Base.getAll_Inverse(model, UserAccount.MODIFIEROF, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Modifierof' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllModifierof_Inverse() {
		return Base.getAll_Inverse(this.model, UserAccount.MODIFIEROF, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Modifierof' to this Item instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllModifierof_Inverse_as( Model model, Object objectValue ) {
		return Base.getAll_Inverse_as(model, UserAccount.MODIFIEROF, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@208ee9c9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasAbout( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, ABOUT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@208ee9c9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasAbout() {
		return Base.has(this.model, this.getResource(), ABOUT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@208ee9c9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasAbout( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ABOUT, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@208ee9c9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasAbout( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ABOUT, value);
	}

     /**
     * Get all values of property About as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllAbout_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, ABOUT);
	}
	
    /**
     * Get all values of property About as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllAbout_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, ABOUT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property About as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllAbout_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ABOUT);
	}

    /**
     * Get all values of property About as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllAbout_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ABOUT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property About     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<SIOCThing> getAllAbout( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, ABOUT, SIOCThing.class);
	}
	
    /**
     * Get all values of property About as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<SIOCThing> getAllAbout_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, ABOUT, SIOCThing.class);
	}

    /**
     * Get all values of property About     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<SIOCThing> getAllAbout() {
		return Base.getAll(this.model, this.getResource(), ABOUT, SIOCThing.class);
	}

    /**
     * Get all values of property About as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<SIOCThing> getAllAbout_as() {
		return Base.getAll_as(this.model, this.getResource(), ABOUT, SIOCThing.class);
	}
 
    /**
     * Adds a value to property About as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addAbout( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, ABOUT, value);
	}
	
    /**
     * Adds a value to property About as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addAbout( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), ABOUT, value);
	}
    /**
     * Adds a value to property About from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void addAbout( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
		Base.add(model, instanceResource, ABOUT, value);
	}
	
    /**
     * Adds a value to property About from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addAbout( SIOCThing value ) {
		Base.add(this.model, this.getResource(), ABOUT, value);
	}
  

    /**
     * Sets a value of property About from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setAbout( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, ABOUT, value);
	}
	
    /**
     * Sets a value of property About from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setAbout( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), ABOUT, value);
	}
    /**
     * Sets a value of property About from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void setAbout( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
		Base.set(model, instanceResource, ABOUT, value);
	}
	
    /**
     * Sets a value of property About from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setAbout( SIOCThing value ) {
		Base.set(this.model, this.getResource(), ABOUT, value);
	}
  


    /**
     * Removes a value of property About as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeAbout( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, ABOUT, value);
	}
	
    /**
     * Removes a value of property About as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeAbout( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), ABOUT, value);
	}
    /**
     * Removes a value of property About given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void removeAbout( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
		Base.remove(model, instanceResource, ABOUT, value);
	}
	
    /**
     * Removes a value of property About given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeAbout( SIOCThing value ) {
		Base.remove(this.model, this.getResource(), ABOUT, value);
	}
  
    /**
     * Removes all values of property About     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllAbout( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, ABOUT);
	}
	
    /**
     * Removes all values of property About	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllAbout() {
		Base.removeAll(this.model, this.getResource(), ABOUT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6e67a769 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasAddressedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, ADDRESSEDTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6e67a769 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasAddressedto() {
		return Base.has(this.model, this.getResource(), ADDRESSEDTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6e67a769 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasAddressedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ADDRESSEDTO, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6e67a769 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasAddressedto( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ADDRESSEDTO, value);
	}

     /**
     * Get all values of property Addressedto as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllAddressedto_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, ADDRESSEDTO);
	}
	
    /**
     * Get all values of property Addressedto as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllAddressedto_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, ADDRESSEDTO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Addressedto as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllAddressedto_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ADDRESSEDTO);
	}

    /**
     * Get all values of property Addressedto as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllAddressedto_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ADDRESSEDTO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Addressedto     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<SIOCThing> getAllAddressedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, ADDRESSEDTO, SIOCThing.class);
	}
	
    /**
     * Get all values of property Addressedto as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<SIOCThing> getAllAddressedto_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, ADDRESSEDTO, SIOCThing.class);
	}

    /**
     * Get all values of property Addressedto     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<SIOCThing> getAllAddressedto() {
		return Base.getAll(this.model, this.getResource(), ADDRESSEDTO, SIOCThing.class);
	}

    /**
     * Get all values of property Addressedto as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<SIOCThing> getAllAddressedto_as() {
		return Base.getAll_as(this.model, this.getResource(), ADDRESSEDTO, SIOCThing.class);
	}
 
    /**
     * Adds a value to property Addressedto as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addAddressedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, ADDRESSEDTO, value);
	}
	
    /**
     * Adds a value to property Addressedto as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addAddressedto( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), ADDRESSEDTO, value);
	}
    /**
     * Adds a value to property Addressedto from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void addAddressedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
		Base.add(model, instanceResource, ADDRESSEDTO, value);
	}
	
    /**
     * Adds a value to property Addressedto from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addAddressedto( SIOCThing value ) {
		Base.add(this.model, this.getResource(), ADDRESSEDTO, value);
	}
  

    /**
     * Sets a value of property Addressedto from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setAddressedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, ADDRESSEDTO, value);
	}
	
    /**
     * Sets a value of property Addressedto from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setAddressedto( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), ADDRESSEDTO, value);
	}
    /**
     * Sets a value of property Addressedto from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void setAddressedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
		Base.set(model, instanceResource, ADDRESSEDTO, value);
	}
	
    /**
     * Sets a value of property Addressedto from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setAddressedto( SIOCThing value ) {
		Base.set(this.model, this.getResource(), ADDRESSEDTO, value);
	}
  


    /**
     * Removes a value of property Addressedto as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeAddressedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, ADDRESSEDTO, value);
	}
	
    /**
     * Removes a value of property Addressedto as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeAddressedto( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), ADDRESSEDTO, value);
	}
    /**
     * Removes a value of property Addressedto given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void removeAddressedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
		Base.remove(model, instanceResource, ADDRESSEDTO, value);
	}
	
    /**
     * Removes a value of property Addressedto given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeAddressedto( SIOCThing value ) {
		Base.remove(this.model, this.getResource(), ADDRESSEDTO, value);
	}
  
    /**
     * Removes all values of property Addressedto     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllAddressedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, ADDRESSEDTO);
	}
	
    /**
     * Removes all values of property Addressedto	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllAddressedto() {
		Base.removeAll(this.model, this.getResource(), ADDRESSEDTO);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70c44470 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasAttachment( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, ATTACHMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70c44470 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasAttachment() {
		return Base.has(this.model, this.getResource(), ATTACHMENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70c44470 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasAttachment( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ATTACHMENT, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@70c44470 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasAttachment( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ATTACHMENT, value);
	}

     /**
     * Get all values of property Attachment as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllAttachment_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, ATTACHMENT);
	}
	
    /**
     * Get all values of property Attachment as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllAttachment_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, ATTACHMENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Attachment as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllAttachment_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ATTACHMENT);
	}

    /**
     * Get all values of property Attachment as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllAttachment_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ATTACHMENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Attachment     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<SIOCThing> getAllAttachment( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, ATTACHMENT, SIOCThing.class);
	}
	
    /**
     * Get all values of property Attachment as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<SIOCThing> getAllAttachment_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, ATTACHMENT, SIOCThing.class);
	}

    /**
     * Get all values of property Attachment     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<SIOCThing> getAllAttachment() {
		return Base.getAll(this.model, this.getResource(), ATTACHMENT, SIOCThing.class);
	}

    /**
     * Get all values of property Attachment as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<SIOCThing> getAllAttachment_as() {
		return Base.getAll_as(this.model, this.getResource(), ATTACHMENT, SIOCThing.class);
	}
 
    /**
     * Adds a value to property Attachment as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addAttachment( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, ATTACHMENT, value);
	}
	
    /**
     * Adds a value to property Attachment as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addAttachment( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), ATTACHMENT, value);
	}
    /**
     * Adds a value to property Attachment from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void addAttachment( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
		Base.add(model, instanceResource, ATTACHMENT, value);
	}
	
    /**
     * Adds a value to property Attachment from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addAttachment( SIOCThing value ) {
		Base.add(this.model, this.getResource(), ATTACHMENT, value);
	}
  

    /**
     * Sets a value of property Attachment from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setAttachment( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, ATTACHMENT, value);
	}
	
    /**
     * Sets a value of property Attachment from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setAttachment( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), ATTACHMENT, value);
	}
    /**
     * Sets a value of property Attachment from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void setAttachment( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
		Base.set(model, instanceResource, ATTACHMENT, value);
	}
	
    /**
     * Sets a value of property Attachment from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setAttachment( SIOCThing value ) {
		Base.set(this.model, this.getResource(), ATTACHMENT, value);
	}
  


    /**
     * Removes a value of property Attachment as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeAttachment( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, ATTACHMENT, value);
	}
	
    /**
     * Removes a value of property Attachment as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeAttachment( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), ATTACHMENT, value);
	}
    /**
     * Removes a value of property Attachment given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void removeAttachment( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
		Base.remove(model, instanceResource, ATTACHMENT, value);
	}
	
    /**
     * Removes a value of property Attachment given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeAttachment( SIOCThing value ) {
		Base.remove(this.model, this.getResource(), ATTACHMENT, value);
	}
  
    /**
     * Removes all values of property Attachment     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllAttachment( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, ATTACHMENT);
	}
	
    /**
     * Removes all values of property Attachment	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllAttachment() {
		Base.removeAll(this.model, this.getResource(), ATTACHMENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7394743b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasContainer( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, CONTAINER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7394743b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasContainer() {
		return Base.has(this.model, this.getResource(), CONTAINER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7394743b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasContainer( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONTAINER, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7394743b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasContainer( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTAINER, value);
	}

     /**
     * Get all values of property Container as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllContainer_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, CONTAINER);
	}
	
    /**
     * Get all values of property Container as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllContainer_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, CONTAINER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Container as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllContainer_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CONTAINER);
	}

    /**
     * Get all values of property Container as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllContainer_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CONTAINER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Container     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<Container> getAllContainer( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, CONTAINER, Container.class);
	}
	
    /**
     * Get all values of property Container as a ReactorResult of Container 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<Container> getAllContainer_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, CONTAINER, Container.class);
	}

    /**
     * Get all values of property Container     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<Container> getAllContainer() {
		return Base.getAll(this.model, this.getResource(), CONTAINER, Container.class);
	}

    /**
     * Get all values of property Container as a ReactorResult of Container 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<Container> getAllContainer_as() {
		return Base.getAll_as(this.model, this.getResource(), CONTAINER, Container.class);
	}
 
    /**
     * Adds a value to property Container as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addContainer( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, CONTAINER, value);
	}
	
    /**
     * Adds a value to property Container as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addContainer( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), CONTAINER, value);
	}
    /**
     * Adds a value to property Container from an instance of Container 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void addContainer( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Container value ) {
		Base.add(model, instanceResource, CONTAINER, value);
	}
	
    /**
     * Adds a value to property Container from an instance of Container 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addContainer( Container value ) {
		Base.add(this.model, this.getResource(), CONTAINER, value);
	}
  

    /**
     * Sets a value of property Container from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setContainer( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, CONTAINER, value);
	}
	
    /**
     * Sets a value of property Container from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setContainer( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), CONTAINER, value);
	}
    /**
     * Sets a value of property Container from an instance of Container 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void setContainer( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Container value ) {
		Base.set(model, instanceResource, CONTAINER, value);
	}
	
    /**
     * Sets a value of property Container from an instance of Container 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setContainer( Container value ) {
		Base.set(this.model, this.getResource(), CONTAINER, value);
	}
  


    /**
     * Removes a value of property Container as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeContainer( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, CONTAINER, value);
	}
	
    /**
     * Removes a value of property Container as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeContainer( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), CONTAINER, value);
	}
    /**
     * Removes a value of property Container given as an instance of Container 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void removeContainer( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Container value ) {
		Base.remove(model, instanceResource, CONTAINER, value);
	}
	
    /**
     * Removes a value of property Container given as an instance of Container 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeContainer( Container value ) {
		Base.remove(this.model, this.getResource(), CONTAINER, value);
	}
  
    /**
     * Removes all values of property Container     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllContainer( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, CONTAINER);
	}
	
    /**
     * Removes all values of property Container	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllContainer() {
		Base.removeAll(this.model, this.getResource(), CONTAINER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e9384fb has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasContent( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, CONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e9384fb has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasContent() {
		return Base.has(this.model, this.getResource(), CONTENT);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e9384fb has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasContent( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CONTENT, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5e9384fb has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasContent( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CONTENT, value);
	}

     /**
     * Get all values of property Content as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllContent_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, CONTENT);
	}
	
    /**
     * Get all values of property Content as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllContent_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, CONTENT, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Content as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllContent_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CONTENT);
	}

    /**
     * Get all values of property Content as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllContent_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CONTENT, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Content     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<java.lang.String> getAllContent(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, CONTENT, java.lang.String.class);
	}
	
    /**
     * Get all values of property Content as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<java.lang.String> getAllContent_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, CONTENT, java.lang.String.class);
	}

    /**
     * Get all values of property Content     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<java.lang.String> getAllContent() {
		return Base.getAll(this.model, this.getResource(), CONTENT, java.lang.String.class);
	}

    /**
     * Get all values of property Content as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<java.lang.String> getAllContent_as() {
		return Base.getAll_as(this.model, this.getResource(), CONTENT, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Content as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addContent( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, CONTENT, value);
	}
	
    /**
     * Adds a value to property Content as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addContent( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), CONTENT, value);
	}
    /**
     * Adds a value to property Content from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void addContent( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
		Base.add(model, instanceResource, CONTENT, value);
	}
	
    /**
     * Adds a value to property Content from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addContent( java.lang.String value ) {
		Base.add(this.model, this.getResource(), CONTENT, value);
	}
  

    /**
     * Sets a value of property Content from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setContent( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, CONTENT, value);
	}
	
    /**
     * Sets a value of property Content from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setContent( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), CONTENT, value);
	}
    /**
     * Sets a value of property Content from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void setContent( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
		Base.set(model, instanceResource, CONTENT, value);
	}
	
    /**
     * Sets a value of property Content from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setContent( java.lang.String value ) {
		Base.set(this.model, this.getResource(), CONTENT, value);
	}
  


    /**
     * Removes a value of property Content as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeContent( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, CONTENT, value);
	}
	
    /**
     * Removes a value of property Content as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeContent( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), CONTENT, value);
	}
    /**
     * Removes a value of property Content given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void removeContent( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
		Base.remove(model, instanceResource, CONTENT, value);
	}
	
    /**
     * Removes a value of property Content given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeContent( java.lang.String value ) {
		Base.remove(this.model, this.getResource(), CONTENT, value);
	}
  
    /**
     * Removes all values of property Content     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllContent( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, CONTENT);
	}
	
    /**
     * Removes all values of property Content	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllContent() {
		Base.removeAll(this.model, this.getResource(), CONTENT);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23dc51cb has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasDiscussion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, DISCUSSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23dc51cb has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasDiscussion() {
		return Base.has(this.model, this.getResource(), DISCUSSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23dc51cb has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasDiscussion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, DISCUSSION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23dc51cb has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasDiscussion( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), DISCUSSION, value);
	}

     /**
     * Get all values of property Discussion as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllDiscussion_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, DISCUSSION);
	}
	
    /**
     * Get all values of property Discussion as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllDiscussion_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, DISCUSSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Discussion as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllDiscussion_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), DISCUSSION);
	}

    /**
     * Get all values of property Discussion as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllDiscussion_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), DISCUSSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Discussion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<SIOCThing> getAllDiscussion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, DISCUSSION, SIOCThing.class);
	}
	
    /**
     * Get all values of property Discussion as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<SIOCThing> getAllDiscussion_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, DISCUSSION, SIOCThing.class);
	}

    /**
     * Get all values of property Discussion     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<SIOCThing> getAllDiscussion() {
		return Base.getAll(this.model, this.getResource(), DISCUSSION, SIOCThing.class);
	}

    /**
     * Get all values of property Discussion as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<SIOCThing> getAllDiscussion_as() {
		return Base.getAll_as(this.model, this.getResource(), DISCUSSION, SIOCThing.class);
	}
 
    /**
     * Adds a value to property Discussion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addDiscussion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, DISCUSSION, value);
	}
	
    /**
     * Adds a value to property Discussion as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addDiscussion( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), DISCUSSION, value);
	}
    /**
     * Adds a value to property Discussion from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void addDiscussion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
		Base.add(model, instanceResource, DISCUSSION, value);
	}
	
    /**
     * Adds a value to property Discussion from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addDiscussion( SIOCThing value ) {
		Base.add(this.model, this.getResource(), DISCUSSION, value);
	}
  

    /**
     * Sets a value of property Discussion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setDiscussion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, DISCUSSION, value);
	}
	
    /**
     * Sets a value of property Discussion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setDiscussion( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), DISCUSSION, value);
	}
    /**
     * Sets a value of property Discussion from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void setDiscussion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
		Base.set(model, instanceResource, DISCUSSION, value);
	}
	
    /**
     * Sets a value of property Discussion from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setDiscussion( SIOCThing value ) {
		Base.set(this.model, this.getResource(), DISCUSSION, value);
	}
  


    /**
     * Removes a value of property Discussion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeDiscussion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, DISCUSSION, value);
	}
	
    /**
     * Removes a value of property Discussion as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeDiscussion( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), DISCUSSION, value);
	}
    /**
     * Removes a value of property Discussion given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void removeDiscussion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
		Base.remove(model, instanceResource, DISCUSSION, value);
	}
	
    /**
     * Removes a value of property Discussion given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeDiscussion( SIOCThing value ) {
		Base.remove(this.model, this.getResource(), DISCUSSION, value);
	}
  
    /**
     * Removes all values of property Discussion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllDiscussion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, DISCUSSION);
	}
	
    /**
     * Removes all values of property Discussion	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllDiscussion() {
		Base.removeAll(this.model, this.getResource(), DISCUSSION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12911b4f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasEarlierversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, EARLIERVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12911b4f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasEarlierversion() {
		return Base.has(this.model, this.getResource(), EARLIERVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12911b4f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasEarlierversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EARLIERVERSION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@12911b4f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean
            hasEarlierversion( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EARLIERVERSION, value);
	}

     /**
     * Get all values of property Earlierversion as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllEarlierversion_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, EARLIERVERSION);
	}
	
    /**
     * Get all values of property Earlierversion as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllEarlierversion_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, EARLIERVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Earlierversion as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllEarlierversion_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EARLIERVERSION);
	}

    /**
     * Get all values of property Earlierversion as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllEarlierversion_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EARLIERVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Earlierversion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<Item> getAllEarlierversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, EARLIERVERSION, Item.class);
	}
	
    /**
     * Get all values of property Earlierversion as a ReactorResult of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<Item> getAllEarlierversion_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, EARLIERVERSION, Item.class);
	}

    /**
     * Get all values of property Earlierversion     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<Item> getAllEarlierversion() {
		return Base.getAll(this.model, this.getResource(), EARLIERVERSION, Item.class);
	}

    /**
     * Get all values of property Earlierversion as a ReactorResult of Item 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<Item> getAllEarlierversion_as() {
		return Base.getAll_as(this.model, this.getResource(), EARLIERVERSION, Item.class);
	}
 
    /**
     * Adds a value to property Earlierversion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addEarlierversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, EARLIERVERSION, value);
	}
	
    /**
     * Adds a value to property Earlierversion as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addEarlierversion( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), EARLIERVERSION, value);
	}
    /**
     * Adds a value to property Earlierversion from an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void
            addEarlierversion( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.add(model, instanceResource, EARLIERVERSION, value);
	}
	
    /**
     * Adds a value to property Earlierversion from an instance of Item 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addEarlierversion( Item value ) {
		Base.add(this.model, this.getResource(), EARLIERVERSION, value);
	}
  

    /**
     * Sets a value of property Earlierversion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setEarlierversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, EARLIERVERSION, value);
	}
	
    /**
     * Sets a value of property Earlierversion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setEarlierversion( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), EARLIERVERSION, value);
	}
    /**
     * Sets a value of property Earlierversion from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void
            setEarlierversion( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.set(model, instanceResource, EARLIERVERSION, value);
	}
	
    /**
     * Sets a value of property Earlierversion from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setEarlierversion( Item value ) {
		Base.set(this.model, this.getResource(), EARLIERVERSION, value);
	}
  


    /**
     * Removes a value of property Earlierversion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeEarlierversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, EARLIERVERSION, value);
	}
	
    /**
     * Removes a value of property Earlierversion as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void
            removeEarlierversion( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), EARLIERVERSION, value);
	}
    /**
     * Removes a value of property Earlierversion given as an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void
            removeEarlierversion( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.remove(model, instanceResource, EARLIERVERSION, value);
	}
	
    /**
     * Removes a value of property Earlierversion given as an instance of Item 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeEarlierversion( Item value ) {
		Base.remove(this.model, this.getResource(), EARLIERVERSION, value);
	}
  
    /**
     * Removes all values of property Earlierversion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllEarlierversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, EARLIERVERSION);
	}
	
    /**
     * Removes all values of property Earlierversion	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllEarlierversion() {
		Base.removeAll(this.model, this.getResource(), EARLIERVERSION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2bce05fc has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasEmbedsknowledge( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, EMBEDSKNOWLEDGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2bce05fc has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasEmbedsknowledge() {
		return Base.has(this.model, this.getResource(), EMBEDSKNOWLEDGE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2bce05fc has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasEmbedsknowledge( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EMBEDSKNOWLEDGE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2bce05fc has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean
            hasEmbedsknowledge( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EMBEDSKNOWLEDGE, value);
	}

     /**
     * Get all values of property Embedsknowledge as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllEmbedsknowledge_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, EMBEDSKNOWLEDGE);
	}
	
    /**
     * Get all values of property Embedsknowledge as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllEmbedsknowledge_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, EMBEDSKNOWLEDGE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Embedsknowledge as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllEmbedsknowledge_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EMBEDSKNOWLEDGE);
	}

    /**
     * Get all values of property Embedsknowledge as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllEmbedsknowledge_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EMBEDSKNOWLEDGE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Embedsknowledge     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<Graph> getAllEmbedsknowledge( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, EMBEDSKNOWLEDGE, Graph.class);
	}
	
    /**
     * Get all values of property Embedsknowledge as a ReactorResult of Graph 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<Graph> getAllEmbedsknowledge_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, EMBEDSKNOWLEDGE, Graph.class);
	}

    /**
     * Get all values of property Embedsknowledge     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<Graph> getAllEmbedsknowledge() {
		return Base.getAll(this.model, this.getResource(), EMBEDSKNOWLEDGE, Graph.class);
	}

    /**
     * Get all values of property Embedsknowledge as a ReactorResult of Graph 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<Graph> getAllEmbedsknowledge_as() {
		return Base.getAll_as(this.model, this.getResource(), EMBEDSKNOWLEDGE, Graph.class);
	}
 
    /**
     * Adds a value to property Embedsknowledge as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addEmbedsknowledge( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, EMBEDSKNOWLEDGE, value);
	}
	
    /**
     * Adds a value to property Embedsknowledge as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addEmbedsknowledge( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), EMBEDSKNOWLEDGE, value);
	}
    /**
     * Adds a value to property Embedsknowledge from an instance of Graph 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void addEmbedsknowledge( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Graph value ) {
		Base.add(model, instanceResource, EMBEDSKNOWLEDGE, value);
	}
	
    /**
     * Adds a value to property Embedsknowledge from an instance of Graph 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addEmbedsknowledge( Graph value ) {
		Base.add(this.model, this.getResource(), EMBEDSKNOWLEDGE, value);
	}
  

    /**
     * Sets a value of property Embedsknowledge from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setEmbedsknowledge( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, EMBEDSKNOWLEDGE, value);
	}
	
    /**
     * Sets a value of property Embedsknowledge from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setEmbedsknowledge( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), EMBEDSKNOWLEDGE, value);
	}
    /**
     * Sets a value of property Embedsknowledge from an instance of Graph 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void setEmbedsknowledge( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Graph value ) {
		Base.set(model, instanceResource, EMBEDSKNOWLEDGE, value);
	}
	
    /**
     * Sets a value of property Embedsknowledge from an instance of Graph 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setEmbedsknowledge( Graph value ) {
		Base.set(this.model, this.getResource(), EMBEDSKNOWLEDGE, value);
	}
  


    /**
     * Removes a value of property Embedsknowledge as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeEmbedsknowledge( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, EMBEDSKNOWLEDGE, value);
	}
	
    /**
     * Removes a value of property Embedsknowledge as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void
            removeEmbedsknowledge( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), EMBEDSKNOWLEDGE, value);
	}
    /**
     * Removes a value of property Embedsknowledge given as an instance of Graph 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void removeEmbedsknowledge( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Graph value ) {
		Base.remove(model, instanceResource, EMBEDSKNOWLEDGE, value);
	}
	
    /**
     * Removes a value of property Embedsknowledge given as an instance of Graph 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeEmbedsknowledge( Graph value ) {
		Base.remove(this.model, this.getResource(), EMBEDSKNOWLEDGE, value);
	}
  
    /**
     * Removes all values of property Embedsknowledge     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllEmbedsknowledge( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, EMBEDSKNOWLEDGE);
	}
	
    /**
     * Removes all values of property Embedsknowledge	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllEmbedsknowledge() {
		Base.removeAll(this.model, this.getResource(), EMBEDSKNOWLEDGE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4792cf37 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasIpaddress( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, IPADDRESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4792cf37 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasIpaddress() {
		return Base.has(this.model, this.getResource(), IPADDRESS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4792cf37 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasIpaddress( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, IPADDRESS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4792cf37 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasIpaddress( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), IPADDRESS, value);
	}

     /**
     * Get all values of property Ipaddress as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllIpaddress_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, IPADDRESS);
	}
	
    /**
     * Get all values of property Ipaddress as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllIpaddress_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, IPADDRESS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Ipaddress as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllIpaddress_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), IPADDRESS);
	}

    /**
     * Get all values of property Ipaddress as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllIpaddress_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), IPADDRESS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Ipaddress     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<java.lang.String> getAllIpaddress(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, IPADDRESS, java.lang.String.class);
	}
	
    /**
     * Get all values of property Ipaddress as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<java.lang.String> getAllIpaddress_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, IPADDRESS, java.lang.String.class);
	}

    /**
     * Get all values of property Ipaddress     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<java.lang.String> getAllIpaddress() {
		return Base.getAll(this.model, this.getResource(), IPADDRESS, java.lang.String.class);
	}

    /**
     * Get all values of property Ipaddress as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<java.lang.String> getAllIpaddress_as() {
		return Base.getAll_as(this.model, this.getResource(), IPADDRESS, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Ipaddress as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addIpaddress( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, IPADDRESS, value);
	}
	
    /**
     * Adds a value to property Ipaddress as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addIpaddress( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), IPADDRESS, value);
	}
    /**
     * Adds a value to property Ipaddress from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void addIpaddress( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
		Base.add(model, instanceResource, IPADDRESS, value);
	}
	
    /**
     * Adds a value to property Ipaddress from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addIpaddress( java.lang.String value ) {
		Base.add(this.model, this.getResource(), IPADDRESS, value);
	}
  

    /**
     * Sets a value of property Ipaddress from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setIpaddress( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, IPADDRESS, value);
	}
	
    /**
     * Sets a value of property Ipaddress from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setIpaddress( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), IPADDRESS, value);
	}
    /**
     * Sets a value of property Ipaddress from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void setIpaddress( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
		Base.set(model, instanceResource, IPADDRESS, value);
	}
	
    /**
     * Sets a value of property Ipaddress from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setIpaddress( java.lang.String value ) {
		Base.set(this.model, this.getResource(), IPADDRESS, value);
	}
  


    /**
     * Removes a value of property Ipaddress as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeIpaddress( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, IPADDRESS, value);
	}
	
    /**
     * Removes a value of property Ipaddress as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeIpaddress( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), IPADDRESS, value);
	}
    /**
     * Removes a value of property Ipaddress given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void removeIpaddress( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
		Base.remove(model, instanceResource, IPADDRESS, value);
	}
	
    /**
     * Removes a value of property Ipaddress given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeIpaddress( java.lang.String value ) {
		Base.remove(this.model, this.getResource(), IPADDRESS, value);
	}
  
    /**
     * Removes all values of property Ipaddress     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllIpaddress( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, IPADDRESS);
	}
	
    /**
     * Removes all values of property Ipaddress	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllIpaddress() {
		Base.removeAll(this.model, this.getResource(), IPADDRESS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f9e0e7b has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasLaterversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, LATERVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f9e0e7b has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasLaterversion() {
		return Base.has(this.model, this.getResource(), LATERVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f9e0e7b has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasLaterversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LATERVERSION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f9e0e7b has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasLaterversion( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LATERVERSION, value);
	}

     /**
     * Get all values of property Laterversion as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllLaterversion_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, LATERVERSION);
	}
	
    /**
     * Get all values of property Laterversion as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllLaterversion_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, LATERVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Laterversion as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllLaterversion_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LATERVERSION);
	}

    /**
     * Get all values of property Laterversion as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllLaterversion_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LATERVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Laterversion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<Item> getAllLaterversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, LATERVERSION, Item.class);
	}
	
    /**
     * Get all values of property Laterversion as a ReactorResult of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<Item> getAllLaterversion_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, LATERVERSION, Item.class);
	}

    /**
     * Get all values of property Laterversion     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<Item> getAllLaterversion() {
		return Base.getAll(this.model, this.getResource(), LATERVERSION, Item.class);
	}

    /**
     * Get all values of property Laterversion as a ReactorResult of Item 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<Item> getAllLaterversion_as() {
		return Base.getAll_as(this.model, this.getResource(), LATERVERSION, Item.class);
	}
 
    /**
     * Adds a value to property Laterversion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addLaterversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, LATERVERSION, value);
	}
	
    /**
     * Adds a value to property Laterversion as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addLaterversion( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), LATERVERSION, value);
	}
    /**
     * Adds a value to property Laterversion from an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void
            addLaterversion( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.add(model, instanceResource, LATERVERSION, value);
	}
	
    /**
     * Adds a value to property Laterversion from an instance of Item 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addLaterversion( Item value ) {
		Base.add(this.model, this.getResource(), LATERVERSION, value);
	}
  

    /**
     * Sets a value of property Laterversion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setLaterversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, LATERVERSION, value);
	}
	
    /**
     * Sets a value of property Laterversion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setLaterversion( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), LATERVERSION, value);
	}
    /**
     * Sets a value of property Laterversion from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void
            setLaterversion( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.set(model, instanceResource, LATERVERSION, value);
	}
	
    /**
     * Sets a value of property Laterversion from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setLaterversion( Item value ) {
		Base.set(this.model, this.getResource(), LATERVERSION, value);
	}
  


    /**
     * Removes a value of property Laterversion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeLaterversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, LATERVERSION, value);
	}
	
    /**
     * Removes a value of property Laterversion as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeLaterversion( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), LATERVERSION, value);
	}
    /**
     * Removes a value of property Laterversion given as an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void
            removeLaterversion( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.remove(model, instanceResource, LATERVERSION, value);
	}
	
    /**
     * Removes a value of property Laterversion given as an instance of Item 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeLaterversion( Item value ) {
		Base.remove(this.model, this.getResource(), LATERVERSION, value);
	}
  
    /**
     * Removes all values of property Laterversion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllLaterversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, LATERVERSION);
	}
	
    /**
     * Removes all values of property Laterversion	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllLaterversion() {
		Base.removeAll(this.model, this.getResource(), LATERVERSION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@234b74fd has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasLatestversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, LATESTVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@234b74fd has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasLatestversion() {
		return Base.has(this.model, this.getResource(), LATESTVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@234b74fd has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasLatestversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, LATESTVERSION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@234b74fd has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasLatestversion( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), LATESTVERSION, value);
	}

     /**
     * Get all values of property Latestversion as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllLatestversion_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, LATESTVERSION);
	}
	
    /**
     * Get all values of property Latestversion as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllLatestversion_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, LATESTVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Latestversion as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllLatestversion_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), LATESTVERSION);
	}

    /**
     * Get all values of property Latestversion as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllLatestversion_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), LATESTVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Latestversion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<Item> getAllLatestversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, LATESTVERSION, Item.class);
	}
	
    /**
     * Get all values of property Latestversion as a ReactorResult of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<Item> getAllLatestversion_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, LATESTVERSION, Item.class);
	}

    /**
     * Get all values of property Latestversion     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<Item> getAllLatestversion() {
		return Base.getAll(this.model, this.getResource(), LATESTVERSION, Item.class);
	}

    /**
     * Get all values of property Latestversion as a ReactorResult of Item 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<Item> getAllLatestversion_as() {
		return Base.getAll_as(this.model, this.getResource(), LATESTVERSION, Item.class);
	}
 
    /**
     * Adds a value to property Latestversion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addLatestversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, LATESTVERSION, value);
	}
	
    /**
     * Adds a value to property Latestversion as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addLatestversion( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), LATESTVERSION, value);
	}
    /**
     * Adds a value to property Latestversion from an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void
            addLatestversion( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.add(model, instanceResource, LATESTVERSION, value);
	}
	
    /**
     * Adds a value to property Latestversion from an instance of Item 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addLatestversion( Item value ) {
		Base.add(this.model, this.getResource(), LATESTVERSION, value);
	}
  

    /**
     * Sets a value of property Latestversion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setLatestversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, LATESTVERSION, value);
	}
	
    /**
     * Sets a value of property Latestversion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setLatestversion( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), LATESTVERSION, value);
	}
    /**
     * Sets a value of property Latestversion from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void
            setLatestversion( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.set(model, instanceResource, LATESTVERSION, value);
	}
	
    /**
     * Sets a value of property Latestversion from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setLatestversion( Item value ) {
		Base.set(this.model, this.getResource(), LATESTVERSION, value);
	}
  


    /**
     * Removes a value of property Latestversion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeLatestversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, LATESTVERSION, value);
	}
	
    /**
     * Removes a value of property Latestversion as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeLatestversion( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), LATESTVERSION, value);
	}
    /**
     * Removes a value of property Latestversion given as an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void
            removeLatestversion( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.remove(model, instanceResource, LATESTVERSION, value);
	}
	
    /**
     * Removes a value of property Latestversion given as an instance of Item 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeLatestversion( Item value ) {
		Base.remove(this.model, this.getResource(), LATESTVERSION, value);
	}
  
    /**
     * Removes all values of property Latestversion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllLatestversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, LATESTVERSION);
	}
	
    /**
     * Removes all values of property Latestversion	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllLatestversion() {
		Base.removeAll(this.model, this.getResource(), LATESTVERSION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d1fa1ed has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasModifier( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, MODIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d1fa1ed has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasModifier() {
		return Base.has(this.model, this.getResource(), MODIFIER);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d1fa1ed has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasModifier( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MODIFIER, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d1fa1ed has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasModifier( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MODIFIER, value);
	}

     /**
     * Get all values of property Modifier as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllModifier_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, MODIFIER);
	}
	
    /**
     * Get all values of property Modifier as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllModifier_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, MODIFIER, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Modifier as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllModifier_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MODIFIER);
	}

    /**
     * Get all values of property Modifier as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllModifier_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MODIFIER, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Modifier     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<UserAccount> getAllModifier( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, MODIFIER, UserAccount.class);
	}
	
    /**
     * Get all values of property Modifier as a ReactorResult of UserAccount 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<UserAccount> getAllModifier_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, MODIFIER, UserAccount.class);
	}

    /**
     * Get all values of property Modifier     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<UserAccount> getAllModifier() {
		return Base.getAll(this.model, this.getResource(), MODIFIER, UserAccount.class);
	}

    /**
     * Get all values of property Modifier as a ReactorResult of UserAccount 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<UserAccount> getAllModifier_as() {
		return Base.getAll_as(this.model, this.getResource(), MODIFIER, UserAccount.class);
	}
 
    /**
     * Adds a value to property Modifier as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addModifier( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, MODIFIER, value);
	}
	
    /**
     * Adds a value to property Modifier as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addModifier( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), MODIFIER, value);
	}
    /**
     * Adds a value to property Modifier from an instance of UserAccount 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void addModifier( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            UserAccount value ) {
		Base.add(model, instanceResource, MODIFIER, value);
	}
	
    /**
     * Adds a value to property Modifier from an instance of UserAccount 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addModifier( UserAccount value ) {
		Base.add(this.model, this.getResource(), MODIFIER, value);
	}
  

    /**
     * Sets a value of property Modifier from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setModifier( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, MODIFIER, value);
	}
	
    /**
     * Sets a value of property Modifier from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setModifier( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), MODIFIER, value);
	}
    /**
     * Sets a value of property Modifier from an instance of UserAccount 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void setModifier( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            UserAccount value ) {
		Base.set(model, instanceResource, MODIFIER, value);
	}
	
    /**
     * Sets a value of property Modifier from an instance of UserAccount 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setModifier( UserAccount value ) {
		Base.set(this.model, this.getResource(), MODIFIER, value);
	}
  


    /**
     * Removes a value of property Modifier as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeModifier( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, MODIFIER, value);
	}
	
    /**
     * Removes a value of property Modifier as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeModifier( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), MODIFIER, value);
	}
    /**
     * Removes a value of property Modifier given as an instance of UserAccount 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void removeModifier( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            UserAccount value ) {
		Base.remove(model, instanceResource, MODIFIER, value);
	}
	
    /**
     * Removes a value of property Modifier given as an instance of UserAccount 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeModifier( UserAccount value ) {
		Base.remove(this.model, this.getResource(), MODIFIER, value);
	}
  
    /**
     * Removes all values of property Modifier     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllModifier( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, MODIFIER);
	}
	
    /**
     * Removes all values of property Modifier	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllModifier() {
		Base.removeAll(this.model, this.getResource(), MODIFIER);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23541e79 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasNextbydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, NEXTBYDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23541e79 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasNextbydate() {
		return Base.has(this.model, this.getResource(), NEXTBYDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23541e79 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasNextbydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NEXTBYDATE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@23541e79 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasNextbydate( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NEXTBYDATE, value);
	}

     /**
     * Get all values of property Nextbydate as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllNextbydate_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, NEXTBYDATE);
	}
	
    /**
     * Get all values of property Nextbydate as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllNextbydate_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, NEXTBYDATE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Nextbydate as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllNextbydate_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NEXTBYDATE);
	}

    /**
     * Get all values of property Nextbydate as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllNextbydate_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NEXTBYDATE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Nextbydate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<Item> getAllNextbydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, NEXTBYDATE, Item.class);
	}
	
    /**
     * Get all values of property Nextbydate as a ReactorResult of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<Item> getAllNextbydate_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, NEXTBYDATE, Item.class);
	}

    /**
     * Get all values of property Nextbydate     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<Item> getAllNextbydate() {
		return Base.getAll(this.model, this.getResource(), NEXTBYDATE, Item.class);
	}

    /**
     * Get all values of property Nextbydate as a ReactorResult of Item 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<Item> getAllNextbydate_as() {
		return Base.getAll_as(this.model, this.getResource(), NEXTBYDATE, Item.class);
	}
 
    /**
     * Adds a value to property Nextbydate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addNextbydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, NEXTBYDATE, value);
	}
	
    /**
     * Adds a value to property Nextbydate as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addNextbydate( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), NEXTBYDATE, value);
	}
    /**
     * Adds a value to property Nextbydate from an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void
            addNextbydate( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.add(model, instanceResource, NEXTBYDATE, value);
	}
	
    /**
     * Adds a value to property Nextbydate from an instance of Item 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addNextbydate( Item value ) {
		Base.add(this.model, this.getResource(), NEXTBYDATE, value);
	}
  

    /**
     * Sets a value of property Nextbydate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setNextbydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, NEXTBYDATE, value);
	}
	
    /**
     * Sets a value of property Nextbydate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setNextbydate( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), NEXTBYDATE, value);
	}
    /**
     * Sets a value of property Nextbydate from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void
            setNextbydate( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.set(model, instanceResource, NEXTBYDATE, value);
	}
	
    /**
     * Sets a value of property Nextbydate from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setNextbydate( Item value ) {
		Base.set(this.model, this.getResource(), NEXTBYDATE, value);
	}
  


    /**
     * Removes a value of property Nextbydate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeNextbydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, NEXTBYDATE, value);
	}
	
    /**
     * Removes a value of property Nextbydate as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeNextbydate( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), NEXTBYDATE, value);
	}
    /**
     * Removes a value of property Nextbydate given as an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void
            removeNextbydate( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.remove(model, instanceResource, NEXTBYDATE, value);
	}
	
    /**
     * Removes a value of property Nextbydate given as an instance of Item 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeNextbydate( Item value ) {
		Base.remove(this.model, this.getResource(), NEXTBYDATE, value);
	}
  
    /**
     * Removes all values of property Nextbydate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllNextbydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, NEXTBYDATE);
	}
	
    /**
     * Removes all values of property Nextbydate	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllNextbydate() {
		Base.removeAll(this.model, this.getResource(), NEXTBYDATE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5629fbc9 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasNextversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, NEXTVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5629fbc9 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasNextversion() {
		return Base.has(this.model, this.getResource(), NEXTVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5629fbc9 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasNextversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, NEXTVERSION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5629fbc9 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasNextversion( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), NEXTVERSION, value);
	}

     /**
     * Get all values of property Nextversion as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllNextversion_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, NEXTVERSION);
	}
	
    /**
     * Get all values of property Nextversion as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllNextversion_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, NEXTVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Nextversion as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllNextversion_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), NEXTVERSION);
	}

    /**
     * Get all values of property Nextversion as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllNextversion_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), NEXTVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Nextversion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<Item> getAllNextversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, NEXTVERSION, Item.class);
	}
	
    /**
     * Get all values of property Nextversion as a ReactorResult of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<Item> getAllNextversion_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, NEXTVERSION, Item.class);
	}

    /**
     * Get all values of property Nextversion     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<Item> getAllNextversion() {
		return Base.getAll(this.model, this.getResource(), NEXTVERSION, Item.class);
	}

    /**
     * Get all values of property Nextversion as a ReactorResult of Item 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<Item> getAllNextversion_as() {
		return Base.getAll_as(this.model, this.getResource(), NEXTVERSION, Item.class);
	}
 
    /**
     * Adds a value to property Nextversion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addNextversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, NEXTVERSION, value);
	}
	
    /**
     * Adds a value to property Nextversion as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addNextversion( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), NEXTVERSION, value);
	}
    /**
     * Adds a value to property Nextversion from an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void
            addNextversion( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.add(model, instanceResource, NEXTVERSION, value);
	}
	
    /**
     * Adds a value to property Nextversion from an instance of Item 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addNextversion( Item value ) {
		Base.add(this.model, this.getResource(), NEXTVERSION, value);
	}
  

    /**
     * Sets a value of property Nextversion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setNextversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, NEXTVERSION, value);
	}
	
    /**
     * Sets a value of property Nextversion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setNextversion( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), NEXTVERSION, value);
	}
    /**
     * Sets a value of property Nextversion from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void
            setNextversion( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.set(model, instanceResource, NEXTVERSION, value);
	}
	
    /**
     * Sets a value of property Nextversion from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setNextversion( Item value ) {
		Base.set(this.model, this.getResource(), NEXTVERSION, value);
	}
  


    /**
     * Removes a value of property Nextversion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeNextversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, NEXTVERSION, value);
	}
	
    /**
     * Removes a value of property Nextversion as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeNextversion( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), NEXTVERSION, value);
	}
    /**
     * Removes a value of property Nextversion given as an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void
            removeNextversion( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.remove(model, instanceResource, NEXTVERSION, value);
	}
	
    /**
     * Removes a value of property Nextversion given as an instance of Item 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeNextversion( Item value ) {
		Base.remove(this.model, this.getResource(), NEXTVERSION, value);
	}
  
    /**
     * Removes all values of property Nextversion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllNextversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, NEXTVERSION);
	}
	
    /**
     * Removes all values of property Nextversion	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllNextversion() {
		Base.removeAll(this.model, this.getResource(), NEXTVERSION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@90f2b4a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasPreviousbydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, PREVIOUSBYDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@90f2b4a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasPreviousbydate() {
		return Base.has(this.model, this.getResource(), PREVIOUSBYDATE);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@90f2b4a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasPreviousbydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PREVIOUSBYDATE, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@90f2b4a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean
            hasPreviousbydate( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PREVIOUSBYDATE, value);
	}

     /**
     * Get all values of property Previousbydate as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllPreviousbydate_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, PREVIOUSBYDATE);
	}
	
    /**
     * Get all values of property Previousbydate as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllPreviousbydate_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, PREVIOUSBYDATE, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Previousbydate as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllPreviousbydate_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PREVIOUSBYDATE);
	}

    /**
     * Get all values of property Previousbydate as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllPreviousbydate_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PREVIOUSBYDATE, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Previousbydate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<Item> getAllPreviousbydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, PREVIOUSBYDATE, Item.class);
	}
	
    /**
     * Get all values of property Previousbydate as a ReactorResult of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<Item> getAllPreviousbydate_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, PREVIOUSBYDATE, Item.class);
	}

    /**
     * Get all values of property Previousbydate     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<Item> getAllPreviousbydate() {
		return Base.getAll(this.model, this.getResource(), PREVIOUSBYDATE, Item.class);
	}

    /**
     * Get all values of property Previousbydate as a ReactorResult of Item 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<Item> getAllPreviousbydate_as() {
		return Base.getAll_as(this.model, this.getResource(), PREVIOUSBYDATE, Item.class);
	}
 
    /**
     * Adds a value to property Previousbydate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addPreviousbydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, PREVIOUSBYDATE, value);
	}
	
    /**
     * Adds a value to property Previousbydate as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addPreviousbydate( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), PREVIOUSBYDATE, value);
	}
    /**
     * Adds a value to property Previousbydate from an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void
            addPreviousbydate( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.add(model, instanceResource, PREVIOUSBYDATE, value);
	}
	
    /**
     * Adds a value to property Previousbydate from an instance of Item 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addPreviousbydate( Item value ) {
		Base.add(this.model, this.getResource(), PREVIOUSBYDATE, value);
	}
  

    /**
     * Sets a value of property Previousbydate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setPreviousbydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, PREVIOUSBYDATE, value);
	}
	
    /**
     * Sets a value of property Previousbydate from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setPreviousbydate( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), PREVIOUSBYDATE, value);
	}
    /**
     * Sets a value of property Previousbydate from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void
            setPreviousbydate( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.set(model, instanceResource, PREVIOUSBYDATE, value);
	}
	
    /**
     * Sets a value of property Previousbydate from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setPreviousbydate( Item value ) {
		Base.set(this.model, this.getResource(), PREVIOUSBYDATE, value);
	}
  


    /**
     * Removes a value of property Previousbydate as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removePreviousbydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, PREVIOUSBYDATE, value);
	}
	
    /**
     * Removes a value of property Previousbydate as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void
            removePreviousbydate( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), PREVIOUSBYDATE, value);
	}
    /**
     * Removes a value of property Previousbydate given as an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void
            removePreviousbydate( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.remove(model, instanceResource, PREVIOUSBYDATE, value);
	}
	
    /**
     * Removes a value of property Previousbydate given as an instance of Item 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removePreviousbydate( Item value ) {
		Base.remove(this.model, this.getResource(), PREVIOUSBYDATE, value);
	}
  
    /**
     * Removes all values of property Previousbydate     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllPreviousbydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, PREVIOUSBYDATE);
	}
	
    /**
     * Removes all values of property Previousbydate	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllPreviousbydate() {
		Base.removeAll(this.model, this.getResource(), PREVIOUSBYDATE);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@39f46204 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasPreviousversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, PREVIOUSVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@39f46204 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasPreviousversion() {
		return Base.has(this.model, this.getResource(), PREVIOUSVERSION);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@39f46204 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasPreviousversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, PREVIOUSVERSION, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@39f46204 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean
            hasPreviousversion( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), PREVIOUSVERSION, value);
	}

     /**
     * Get all values of property Previousversion as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllPreviousversion_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, PREVIOUSVERSION);
	}
	
    /**
     * Get all values of property Previousversion as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllPreviousversion_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, PREVIOUSVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Previousversion as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllPreviousversion_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), PREVIOUSVERSION);
	}

    /**
     * Get all values of property Previousversion as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllPreviousversion_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), PREVIOUSVERSION, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Previousversion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<Item> getAllPreviousversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, PREVIOUSVERSION, Item.class);
	}
	
    /**
     * Get all values of property Previousversion as a ReactorResult of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<Item> getAllPreviousversion_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, PREVIOUSVERSION, Item.class);
	}

    /**
     * Get all values of property Previousversion     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<Item> getAllPreviousversion() {
		return Base.getAll(this.model, this.getResource(), PREVIOUSVERSION, Item.class);
	}

    /**
     * Get all values of property Previousversion as a ReactorResult of Item 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<Item> getAllPreviousversion_as() {
		return Base.getAll_as(this.model, this.getResource(), PREVIOUSVERSION, Item.class);
	}
 
    /**
     * Adds a value to property Previousversion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addPreviousversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, PREVIOUSVERSION, value);
	}
	
    /**
     * Adds a value to property Previousversion as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addPreviousversion( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), PREVIOUSVERSION, value);
	}
    /**
     * Adds a value to property Previousversion from an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void
            addPreviousversion( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.add(model, instanceResource, PREVIOUSVERSION, value);
	}
	
    /**
     * Adds a value to property Previousversion from an instance of Item 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addPreviousversion( Item value ) {
		Base.add(this.model, this.getResource(), PREVIOUSVERSION, value);
	}
  

    /**
     * Sets a value of property Previousversion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setPreviousversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, PREVIOUSVERSION, value);
	}
	
    /**
     * Sets a value of property Previousversion from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setPreviousversion( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), PREVIOUSVERSION, value);
	}
    /**
     * Sets a value of property Previousversion from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void
            setPreviousversion( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.set(model, instanceResource, PREVIOUSVERSION, value);
	}
	
    /**
     * Sets a value of property Previousversion from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setPreviousversion( Item value ) {
		Base.set(this.model, this.getResource(), PREVIOUSVERSION, value);
	}
  


    /**
     * Removes a value of property Previousversion as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removePreviousversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, PREVIOUSVERSION, value);
	}
	
    /**
     * Removes a value of property Previousversion as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void
            removePreviousversion( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), PREVIOUSVERSION, value);
	}
    /**
     * Removes a value of property Previousversion given as an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void
            removePreviousversion( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.remove(model, instanceResource, PREVIOUSVERSION, value);
	}
	
    /**
     * Removes a value of property Previousversion given as an instance of Item 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removePreviousversion( Item value ) {
		Base.remove(this.model, this.getResource(), PREVIOUSVERSION, value);
	}
  
    /**
     * Removes all values of property Previousversion     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllPreviousversion( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, PREVIOUSVERSION);
	}
	
    /**
     * Removes all values of property Previousversion	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllPreviousversion() {
		Base.removeAll(this.model, this.getResource(), PREVIOUSVERSION);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4bdacf2 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasReply( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, REPLY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4bdacf2 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasReply() {
		return Base.has(this.model, this.getResource(), REPLY);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4bdacf2 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasReply( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, REPLY, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4bdacf2 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasReply( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), REPLY, value);
	}

     /**
     * Get all values of property Reply as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllReply_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, REPLY);
	}
	
    /**
     * Get all values of property Reply as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllReply_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, REPLY, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Reply as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllReply_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), REPLY);
	}

    /**
     * Get all values of property Reply as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllReply_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), REPLY, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Reply     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<Item> getAllReply( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, REPLY, Item.class);
	}
	
    /**
     * Get all values of property Reply as a ReactorResult of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<Item> getAllReply_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, REPLY, Item.class);
	}

    /**
     * Get all values of property Reply     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<Item> getAllReply() {
		return Base.getAll(this.model, this.getResource(), REPLY, Item.class);
	}

    /**
     * Get all values of property Reply as a ReactorResult of Item 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<Item> getAllReply_as() {
		return Base.getAll_as(this.model, this.getResource(), REPLY, Item.class);
	}
 
    /**
     * Adds a value to property Reply as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addReply( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, REPLY, value);
	}
	
    /**
     * Adds a value to property Reply as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addReply( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), REPLY, value);
	}
    /**
     * Adds a value to property Reply from an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void
            addReply( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.add(model, instanceResource, REPLY, value);
	}
	
    /**
     * Adds a value to property Reply from an instance of Item 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addReply( Item value ) {
		Base.add(this.model, this.getResource(), REPLY, value);
	}
  

    /**
     * Sets a value of property Reply from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setReply( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, REPLY, value);
	}
	
    /**
     * Sets a value of property Reply from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setReply( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), REPLY, value);
	}
    /**
     * Sets a value of property Reply from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void
            setReply( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.set(model, instanceResource, REPLY, value);
	}
	
    /**
     * Sets a value of property Reply from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setReply( Item value ) {
		Base.set(this.model, this.getResource(), REPLY, value);
	}
  


    /**
     * Removes a value of property Reply as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeReply( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, REPLY, value);
	}
	
    /**
     * Removes a value of property Reply as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeReply( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), REPLY, value);
	}
    /**
     * Removes a value of property Reply given as an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void
            removeReply( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.remove(model, instanceResource, REPLY, value);
	}
	
    /**
     * Removes a value of property Reply given as an instance of Item 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeReply( Item value ) {
		Base.remove(this.model, this.getResource(), REPLY, value);
	}
  
    /**
     * Removes all values of property Reply     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllReply( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, REPLY);
	}
	
    /**
     * Removes all values of property Reply	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllReply() {
		Base.removeAll(this.model, this.getResource(), REPLY);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2fb8c90 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasReplyof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, REPLYOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2fb8c90 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasReplyof() {
		return Base.has(this.model, this.getResource(), REPLYOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2fb8c90 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasReplyof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, REPLYOF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2fb8c90 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasReplyof( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), REPLYOF, value);
	}

     /**
     * Get all values of property Replyof as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllReplyof_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, REPLYOF);
	}
	
    /**
     * Get all values of property Replyof as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllReplyof_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, REPLYOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Replyof as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllReplyof_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), REPLYOF);
	}

    /**
     * Get all values of property Replyof as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllReplyof_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), REPLYOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Replyof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<Item> getAllReplyof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, REPLYOF, Item.class);
	}
	
    /**
     * Get all values of property Replyof as a ReactorResult of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<Item> getAllReplyof_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, REPLYOF, Item.class);
	}

    /**
     * Get all values of property Replyof     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<Item> getAllReplyof() {
		return Base.getAll(this.model, this.getResource(), REPLYOF, Item.class);
	}

    /**
     * Get all values of property Replyof as a ReactorResult of Item 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<Item> getAllReplyof_as() {
		return Base.getAll_as(this.model, this.getResource(), REPLYOF, Item.class);
	}
 
    /**
     * Adds a value to property Replyof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addReplyof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, REPLYOF, value);
	}
	
    /**
     * Adds a value to property Replyof as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addReplyof( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), REPLYOF, value);
	}
    /**
     * Adds a value to property Replyof from an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void
            addReplyof( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.add(model, instanceResource, REPLYOF, value);
	}
	
    /**
     * Adds a value to property Replyof from an instance of Item 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addReplyof( Item value ) {
		Base.add(this.model, this.getResource(), REPLYOF, value);
	}
  

    /**
     * Sets a value of property Replyof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setReplyof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, REPLYOF, value);
	}
	
    /**
     * Sets a value of property Replyof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setReplyof( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), REPLYOF, value);
	}
    /**
     * Sets a value of property Replyof from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void
            setReplyof( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.set(model, instanceResource, REPLYOF, value);
	}
	
    /**
     * Sets a value of property Replyof from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setReplyof( Item value ) {
		Base.set(this.model, this.getResource(), REPLYOF, value);
	}
  


    /**
     * Removes a value of property Replyof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeReplyof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, REPLYOF, value);
	}
	
    /**
     * Removes a value of property Replyof as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeReplyof( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), REPLYOF, value);
	}
    /**
     * Removes a value of property Replyof given as an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void
            removeReplyof( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.remove(model, instanceResource, REPLYOF, value);
	}
	
    /**
     * Removes a value of property Replyof given as an instance of Item 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeReplyof( Item value ) {
		Base.remove(this.model, this.getResource(), REPLYOF, value);
	}
  
    /**
     * Removes all values of property Replyof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllReplyof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, REPLYOF);
	}
	
    /**
     * Removes all values of property Replyof	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllReplyof() {
		Base.removeAll(this.model, this.getResource(), REPLYOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d2f7354 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasSibling( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, SIBLING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d2f7354 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasSibling() {
		return Base.has(this.model, this.getResource(), SIBLING);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d2f7354 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasSibling( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SIBLING, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3d2f7354 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasSibling( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SIBLING, value);
	}

     /**
     * Get all values of property Sibling as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllSibling_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, SIBLING);
	}
	
    /**
     * Get all values of property Sibling as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllSibling_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, SIBLING, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Sibling as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllSibling_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SIBLING);
	}

    /**
     * Get all values of property Sibling as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllSibling_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SIBLING, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Sibling     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<Item> getAllSibling( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, SIBLING, Item.class);
	}
	
    /**
     * Get all values of property Sibling as a ReactorResult of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<Item> getAllSibling_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, SIBLING, Item.class);
	}

    /**
     * Get all values of property Sibling     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<Item> getAllSibling() {
		return Base.getAll(this.model, this.getResource(), SIBLING, Item.class);
	}

    /**
     * Get all values of property Sibling as a ReactorResult of Item 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<Item> getAllSibling_as() {
		return Base.getAll_as(this.model, this.getResource(), SIBLING, Item.class);
	}
 
    /**
     * Adds a value to property Sibling as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addSibling( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, SIBLING, value);
	}
	
    /**
     * Adds a value to property Sibling as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addSibling( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), SIBLING, value);
	}
    /**
     * Adds a value to property Sibling from an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void
            addSibling( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.add(model, instanceResource, SIBLING, value);
	}
	
    /**
     * Adds a value to property Sibling from an instance of Item 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addSibling( Item value ) {
		Base.add(this.model, this.getResource(), SIBLING, value);
	}
  

    /**
     * Sets a value of property Sibling from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setSibling( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, SIBLING, value);
	}
	
    /**
     * Sets a value of property Sibling from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setSibling( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), SIBLING, value);
	}
    /**
     * Sets a value of property Sibling from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void
            setSibling( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.set(model, instanceResource, SIBLING, value);
	}
	
    /**
     * Sets a value of property Sibling from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setSibling( Item value ) {
		Base.set(this.model, this.getResource(), SIBLING, value);
	}
  


    /**
     * Removes a value of property Sibling as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeSibling( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, SIBLING, value);
	}
	
    /**
     * Removes a value of property Sibling as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeSibling( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), SIBLING, value);
	}
    /**
     * Removes a value of property Sibling given as an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void
            removeSibling( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.remove(model, instanceResource, SIBLING, value);
	}
	
    /**
     * Removes a value of property Sibling given as an instance of Item 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeSibling( Item value ) {
		Base.remove(this.model, this.getResource(), SIBLING, value);
	}
  
    /**
     * Removes all values of property Sibling     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllSibling( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, SIBLING);
	}
	
    /**
     * Removes all values of property Sibling	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllSibling() {
		Base.removeAll(this.model, this.getResource(), SIBLING);
	}
 }