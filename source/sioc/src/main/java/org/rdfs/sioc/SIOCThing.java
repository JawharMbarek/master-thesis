/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765
 * 2010-02-11 09:51:13Z max.at.xam.de $) on 21.12.12 17:00
 */
package org.rdfs.sioc;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;
import org.ontoware.rdfreactor.schema.owl.OwlThing;

/**
 * This class manages access to these properties:
 * <ul>
 * <li>Subject</li>
 * <li>hasPart</li>
 * <li>isPart</li>
 * <li>created</li>
 * <li>Creator</li>
 * <li>Date</li>
 * <li>Description</li>
 * <li>Function</li>
 * <li>Id</li>
 * <li>Lastactivitydate</li>
 * <li>Lastreplydate</li>
 * <li>Linksto</li>
 * <li>modified</li>
 * <li>Name</li>
 * <li>Note</li>
 * <li>Numauthors</li>
 * <li>Numreplies</li>
 * <li>Numviews</li>
 * <li>Owner</li>
 * <li>part</li>
 * <li>References</li>
 * <li>Relatedto</li>
 * <li>Scopeof</li>
 * <li>Space</li>
 * <li>Title</li>
 * <li>Topic</li>
 * </ul>
 * 
 * This class was generated by <a
 * href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 21.12.12 17:00
 */
public class SIOCThing extends OwlThing {
    /**
     * 
     */
    private static final long serialVersionUID = 9047324362517530425L;

    /** http://www.w3.org/2000/01/rdf-schema#Class */
    public static final URI   RDFS_CLASS       = OwlThing.RDFS_CLASS;

    /** http://purl.org/dc/terms/subject */
    public static final URI   SUBJECT          = new URIImpl(
                                                       "http://purl.org/dc/terms/subject",
                                                       false );

    /** http://purl.org/dc/terms/title */
    public static final URI   TITLE            = new URIImpl(
                                                       "http://purl.org/dc/terms/title",
                                                       false );

    /** http://purl.org/dc/terms/date */
    public static final URI   DATE             = new URIImpl(
                                                       "http://purl.org/dc/terms/date",
                                                       false );

    /** http://purl.org/dc/terms/created */
    public static final URI   CREATED          = new URIImpl(
                                                       "http://purl.org/dc/terms/created",
                                                       false );

    /** http://purl.org/dc/terms/modified */
    public static final URI   MODIFIED         = new URIImpl(
                                                       "http://purl.org/dc/terms/modified",
                                                       false );

    /** http://purl.org/dc/terms/hasPart */
    public static final URI   HASPART          = new URIImpl(
                                                       "http://purl.org/dc/terms/hasPart",
                                                       false );

    /** http://purl.org/dc/terms/isPartOf */
    public static final URI   ISPARTOF         = new URIImpl(
                                                       "http://purl.org/dc/terms/isPartOf",
                                                       false );

    /** http://purl.org/dc/terms/description */
    public static final URI   DESCRIPTION      = new URIImpl(
                                                       "http://purl.org/dc/terms/description",
                                                       false );

    /** http://purl.org/dc/terms/references */
    public static final URI   REFERENCES       = new URIImpl(
                                                       "http://purl.org/dc/terms/references",
                                                       false );

    /** http://rdfs.org/sioc/ns#has_creator */
    public static final URI   CREATOR          = new URIImpl(
                                                       "http://rdfs.org/sioc/ns#has_creator",
                                                       false );

    /** http://rdfs.org/sioc/ns#has_function */
    public static final URI   FUNCTION         = new URIImpl(
                                                       "http://rdfs.org/sioc/ns#has_function",
                                                       false );

    /** http://rdfs.org/sioc/ns#id */
    public static final URI   ID               = new URIImpl(
                                                       "http://rdfs.org/sioc/ns#id",
                                                       false );

    /** http://rdfs.org/sioc/ns#last_activity_date */
    public static final URI   LASTACTIVITYDATE = new URIImpl(
                                                       "http://rdfs.org/sioc/ns#last_activity_date",
                                                       false );

    /** http://rdfs.org/sioc/ns#last_reply_date */
    public static final URI   LASTREPLYDATE    = new URIImpl(
                                                       "http://rdfs.org/sioc/ns#last_reply_date",
                                                       false );

    /** http://rdfs.org/sioc/ns#links_to */
    public static final URI   LINKSTO          = new URIImpl(
                                                       "http://rdfs.org/sioc/ns#links_to",
                                                       false );

    /** http://rdfs.org/sioc/ns#name */
    public static final URI   _NAME            = new URIImpl(
                                                       "http://rdfs.org/sioc/ns#name",
                                                       false );

    /** http://rdfs.org/sioc/ns#note */
    public static final URI   NOTE             = new URIImpl(
                                                       "http://rdfs.org/sioc/ns#note",
                                                       false );

    /** http://rdfs.org/sioc/ns#num_authors */
    public static final URI   NUMAUTHORS       = new URIImpl(
                                                       "http://rdfs.org/sioc/ns#num_authors",
                                                       false );

    /** http://rdfs.org/sioc/ns#num_replies */
    public static final URI   NUMREPLIES       = new URIImpl(
                                                       "http://rdfs.org/sioc/ns#num_replies",
                                                       false );

    /** http://rdfs.org/sioc/ns#num_views */
    public static final URI   NUMVIEWS         = new URIImpl(
                                                       "http://rdfs.org/sioc/ns#num_views",
                                                       false );

    /** http://rdfs.org/sioc/ns#has_owner */
    public static final URI   OWNER            = new URIImpl(
                                                       "http://rdfs.org/sioc/ns#has_owner",
                                                       false );

    /** http://rdfs.org/sioc/ns#related_to */
    public static final URI   RELATEDTO        = new URIImpl(
                                                       "http://rdfs.org/sioc/ns#related_to",
                                                       false );

    /** http://rdfs.org/sioc/ns#scope_of */
    public static final URI   SCOPEOF          = new URIImpl(
                                                       "http://rdfs.org/sioc/ns#scope_of",
                                                       false );

    /** http://rdfs.org/sioc/ns#has_space */
    public static final URI   SPACE            = new URIImpl(
                                                       "http://rdfs.org/sioc/ns#has_space",
                                                       false );

    /** http://rdfs.org/sioc/ns#topic */
    public static final URI   TOPIC            = new URIImpl(
                                                       "http://rdfs.org/sioc/ns#topic",
                                                       false );

    /**
     * All property-URIs with this class as domain. All properties of all
     * super-classes are also available.
     */
    public static final URI[] MANAGED_URIS     = {
            new URIImpl( "http://purl.org/dc/terms/subject", false ),
            new URIImpl( "http://purl.org/dc/terms/title", false ),
            new URIImpl( "http://purl.org/dc/terms/created", false ),
            new URIImpl( "http://purl.org/dc/terms/date", false ),
            new URIImpl( "http://purl.org/dc/terms/description", false ),
            new URIImpl( "http://purl.org/dc/terms/references", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#has_creator", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#has_function", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#id", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#last_activity_date", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#last_reply_date", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#links_to", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#name", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#note", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#num_authors", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#num_replies", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#num_views", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#has_owner", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#related_to", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#scope_of", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#has_space", false ),
            new URIImpl( "http://rdfs.org/sioc/ns#topic", false ) };

    // protected constructors needed for inheritance

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.semweb4j.org
     * @param classURI
     *            URI of RDFS class
     * @param instanceIdentifier
     *            Resource that identifies this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c1]
     */
    protected SIOCThing( Model model, URI classURI,
            org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
            boolean write ) {
        super( model, classURI, instanceIdentifier, write );
    }

    // public constructors

    /**
     * Returns a Java wrapper over an RDF object, identified by URI. Creating
     * two wrappers for the same instanceURI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param instanceIdentifier
     *            an RDF2Go Resource identifying this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c2]
     */
    public SIOCThing( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceIdentifier,
            boolean write ) {
        super( model, RDFS_CLASS, instanceIdentifier, write );
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a URI, given as
     * a String. Creating two wrappers for the same URI is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param uriString
     *            a URI given as a String
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * @throws ModelRuntimeException
     *             if URI syntax is wrong
     * 
     *             [Generated from RDFReactor template rule #c7]
     */
    public SIOCThing( Model model, String uriString, boolean write )
            throws ModelRuntimeException {
        super( model, RDFS_CLASS, new URIImpl( uriString, false ), write );
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a blank node.
     * Creating two wrappers for the same blank node is legal.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param bnode
     *            BlankNode of this instance
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c8]
     */
    public SIOCThing( Model model, BlankNode bnode, boolean write ) {
        super( model, RDFS_CLASS, bnode, write );
    }

    /**
     * Returns a Java wrapper over an RDF object, identified by a randomly
     * generated URI. Creating two wrappers results in different URIs.
     * 
     * @param model
     *            RDF2GO Model implementation, see http://rdf2go.ontoware.org
     * @param write
     *            if true, the statement (this, rdf:type, TYPE) is written to
     *            the model
     * 
     *            [Generated from RDFReactor template rule #c9]
     */
    public SIOCThing( Model model, boolean write ) {
        super( model, RDFS_CLASS, model.newRandomUniqueURI(), write );
    }

    // /////////////////////////////////////////////////////////////////
    // typing

    /**
     * Return an existing instance of this class in the model. No statements are
     * written.
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return an instance of Thing or null if none existst
     * 
     *         [Generated from RDFReactor template rule #class0]
     */
    public static SIOCThing getInstance( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getInstance( model, instanceResource, SIOCThing.class );
    }

    /**
     * Create a new instance of this class in the model. That is, create the
     * statement (instanceResource, RDF.type,
     * http://www.w3.org/2000/01/rdf-schema#Class).
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class1]
     */
    public static void createInstance( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.createInstance( model, RDFS_CLASS, instanceResource );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * @return true if instanceResource is an instance of this class in the
     *         model
     * 
     *         [Generated from RDFReactor template rule #class2]
     */
    public static boolean hasInstance( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.hasInstance( model, RDFS_CLASS, instanceResource );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @return all instances of this class in Model 'model' as RDF resources
     * 
     *         [Generated from RDFReactor template rule #class3]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllInstances( Model model ) {
        return Base.getAllInstances( model, RDFS_CLASS,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @return all instances of this class in Model 'model' as a ReactorResult,
     *         which can conveniently be converted to iterator, list or array.
     * 
     *         [Generated from RDFReactor template rule #class3-as]
     */
    public static ReactorResult<? extends SIOCThing>
            getAllInstances_as( Model model ) {
        return Base.getAllInstances_as( model, RDFS_CLASS, SIOCThing.class );
    }

    /**
     * Remove rdf:type Thing from this instance. Other triples are not affected.
     * To delete more, use deleteAllProperties
     * 
     * @param model
     *            an RDF2Go model
     * @param instanceResource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #class4]
     */
    public static void deleteInstance( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.deleteInstance( model, RDFS_CLASS, instanceResource );
    }

    /**
     * Delete all (this, *, *), i.e. including rdf:type
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     */
    public static void deleteAllProperties( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.deleteAllProperties( model, instanceResource );
    }

    // /////////////////////////////////////////////////////////////////
    // property access methods

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'HasPart' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllHasPart_Inverse( Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, SIOCThing.HASPART, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'HasPart' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllHasPart_Inverse() {
        return Base.getAll_Inverse( this.model, SIOCThing.HASPART,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'HasPart' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllHasPart_Inverse_as( Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, SIOCThing.HASPART, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'IsPartOf' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllIsPartOf_Inverse( Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, SIOCThing.ISPARTOF, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'IsPartOf' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllIsPartOf_Inverse() {
        return Base.getAll_Inverse( this.model, SIOCThing.ISPARTOF,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'IsPartOf' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllIsPartOf_Inverse_as( Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, SIOCThing.ISPARTOF, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Date' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllDate_Inverse( Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, SIOCThing.DATE, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Date' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllDate_Inverse() {
        return Base.getAll_Inverse( this.model, SIOCThing.DATE, this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Date' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllDate_Inverse_as( Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, SIOCThing.DATE, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Description' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllDescription_Inverse( Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, SIOCThing.DESCRIPTION, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Description' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllDescription_Inverse() {
        return Base.getAll_Inverse( this.model, SIOCThing.DESCRIPTION,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Description' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static
            ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllDescription_Inverse_as( Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, SIOCThing.DESCRIPTION, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Linksto' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllLinksto_Inverse( Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, SIOCThing.LINKSTO, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Linksto' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllLinksto_Inverse() {
        return Base.getAll_Inverse( this.model, SIOCThing.LINKSTO,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Linksto' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllLinksto_Inverse_as( Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, SIOCThing.LINKSTO, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'References' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllReferences_Inverse( Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, SIOCThing.REFERENCES, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'References' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllReferences_Inverse() {
        return Base.getAll_Inverse( this.model, SIOCThing.REFERENCES,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'References' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static
            ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllReferences_Inverse_as( Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, SIOCThing.REFERENCES, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Relatedto' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllRelatedto_Inverse( Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, SIOCThing.RELATEDTO, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Relatedto' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllRelatedto_Inverse() {
        return Base.getAll_Inverse( this.model, SIOCThing.RELATEDTO,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Relatedto' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllRelatedto_Inverse_as( Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, SIOCThing.RELATEDTO, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Subject' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllSubject_Inverse( Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, SIOCThing.SUBJECT, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Subject' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllSubject_Inverse() {
        return Base.getAll_Inverse( this.model, SIOCThing.SUBJECT,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Subject' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllSubject_Inverse_as( Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, SIOCThing.SUBJECT, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Title' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllTitle_Inverse( Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, SIOCThing.TITLE, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Title' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllTitle_Inverse() {
        return Base
                .getAll_Inverse( this.model, SIOCThing.TITLE, this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Title' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllTitle_Inverse_as( Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, SIOCThing.TITLE, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Topic' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllTopic_Inverse( Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, SIOCThing.TOPIC, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Topic' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllTopic_Inverse() {
        return Base
                .getAll_Inverse( this.model, SIOCThing.TOPIC, this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Topic' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllTopic_Inverse_as( Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, SIOCThing.TOPIC, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Functionof' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllFunctionof_Inverse( Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Role.FUNCTIONOF, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Functionof' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllFunctionof_Inverse() {
        return Base.getAll_Inverse( this.model, Role.FUNCTIONOF,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Functionof' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllFunctionof_Inverse_as( Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Role.FUNCTIONOF, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Scope' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllScope_Inverse( Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Role.SCOPE, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Scope' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllScope_Inverse() {
        return Base.getAll_Inverse( this.model, Role.SCOPE, this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Scope' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllScope_Inverse_as( Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Role.SCOPE, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'About' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllAbout_Inverse( Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Item.ABOUT, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'About' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllAbout_Inverse() {
        return Base.getAll_Inverse( this.model, Item.ABOUT, this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'About' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllAbout_Inverse_as( Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Item.ABOUT, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Addressedto' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllAddressedto_Inverse( Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Item.ADDRESSEDTO, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Addressedto' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllAddressedto_Inverse() {
        return Base.getAll_Inverse( this.model, Item.ADDRESSEDTO,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Addressedto' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllAddressedto_Inverse_as( Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Item.ADDRESSEDTO, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Attachment' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllAttachment_Inverse( Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Item.ATTACHMENT, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Attachment' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllAttachment_Inverse() {
        return Base.getAll_Inverse( this.model, Item.ATTACHMENT,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Attachment' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllAttachment_Inverse_as( Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Item.ATTACHMENT, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Discussion' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllDiscussion_Inverse( Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Item.DISCUSSION, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Discussion' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllDiscussion_Inverse() {
        return Base.getAll_Inverse( this.model, Item.DISCUSSION,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Discussion' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllDiscussion_Inverse_as( Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Item.DISCUSSION, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Avatar' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllAvatar_Inverse( Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, UserAccount.AVATAR, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Avatar' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllAvatar_Inverse() {
        return Base.getAll_Inverse( this.model, UserAccount.AVATAR,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Avatar' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllAvatar_Inverse_as( Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, UserAccount.AVATAR, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Creatorof' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllCreatorof_Inverse( Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, UserAccount.CREATOROF, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Creatorof' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllCreatorof_Inverse() {
        return Base.getAll_Inverse( this.model, UserAccount.CREATOROF,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Creatorof' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllCreatorof_Inverse_as( Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, UserAccount.CREATOROF,
                objectValue, org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Email' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllEmail_Inverse( Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, UserAccount.EMAIL, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Email' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllEmail_Inverse() {
        return Base.getAll_Inverse( this.model, UserAccount.EMAIL,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Email' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllEmail_Inverse_as( Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, UserAccount.EMAIL, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Ownerof' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllOwnerof_Inverse( Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, UserAccount.OWNEROF, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Ownerof' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllOwnerof_Inverse() {
        return Base.getAll_Inverse( this.model, UserAccount.OWNEROF,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Ownerof' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllOwnerof_Inverse_as( Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, UserAccount.OWNEROF, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as RDF resources, that have a relation 'Spaceof' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllSpaceof_Inverse( Model model, Object objectValue ) {
        return Base.getAll_Inverse( model, Space.SPACEOF, objectValue );
    }

    /**
     * @return all A's as RDF resources, that have a relation 'Spaceof' to this
     *         Thing instance
     * 
     *         [Generated from RDFReactor template rule #getallinverse1dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllSpaceof_Inverse() {
        return Base.getAll_Inverse( this.model, Space.SPACEOF,
                this.getResource() );
    }

    /**
     * @param model
     *            an RDF2Go model
     * @param objectValue
     * @return all A's as a ReactorResult, that have a relation 'Spaceof' to
     *         this Thing instance
     * 
     *         [Generated from RDFReactor template rule
     *         #getallinverse-as1static]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllSpaceof_Inverse_as( Model model, Object objectValue ) {
        return Base.getAll_Inverse_as( model, Space.SPACEOF, objectValue,
                org.ontoware.rdf2go.model.node.Resource.class );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3a7b4d34 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasCreator( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, CREATOR );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3a7b4d34 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasCreator() {
        return Base.has( this.model, this.getResource(), CREATOR );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3a7b4d34 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasCreator( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, CREATOR, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3a7b4d34 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasCreator( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), CREATOR, value );
    }

    /**
     * Get all values of property Creator as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllCreator_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, CREATOR );
    }

    /**
     * Get all values of property Creator as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllCreator_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, CREATOR,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Creator as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllCreator_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), CREATOR );
    }

    /**
     * Get all values of property Creator as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllCreator_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), CREATOR,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Creator * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<UserAccount> getAllCreator( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base
                .getAll( model, instanceResource, CREATOR, UserAccount.class );
    }

    /**
     * Get all values of property Creator as a ReactorResult of UserAccount
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<UserAccount> getAllCreator_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, CREATOR,
                UserAccount.class );
    }

    /**
     * Get all values of property Creator * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<UserAccount> getAllCreator() {
        return Base.getAll( this.model, this.getResource(), CREATOR,
                UserAccount.class );
    }

    /**
     * Get all values of property Creator as a ReactorResult of UserAccount
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<UserAccount> getAllCreator_as() {
        return Base.getAll_as( this.model, this.getResource(), CREATOR,
                UserAccount.class );
    }

    /**
     * Adds a value to property Creator as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addCreator( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, CREATOR, value );
    }

    /**
     * Adds a value to property Creator as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addCreator( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), CREATOR, value );
    }

    /**
     * Adds a value to property Creator from an instance of UserAccount
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addCreator( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            UserAccount value ) {
        Base.add( model, instanceResource, CREATOR, value );
    }

    /**
     * Adds a value to property Creator from an instance of UserAccount
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addCreator( UserAccount value ) {
        Base.add( this.model, this.getResource(), CREATOR, value );
    }

    /**
     * Sets a value of property Creator from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setCreator( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, CREATOR, value );
    }

    /**
     * Sets a value of property Creator from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setCreator( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), CREATOR, value );
    }

    /**
     * Sets a value of property Creator from an instance of UserAccount First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setCreator( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            UserAccount value ) {
        Base.set( model, instanceResource, CREATOR, value );
    }

    /**
     * Sets a value of property Creator from an instance of UserAccount First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setCreator( UserAccount value ) {
        Base.set( this.model, this.getResource(), CREATOR, value );
    }

    /**
     * Removes a value of property Creator as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeCreator( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, CREATOR, value );
    }

    /**
     * Removes a value of property Creator as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeCreator( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), CREATOR, value );
    }

    /**
     * Removes a value of property Creator given as an instance of UserAccount
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeCreator( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            UserAccount value ) {
        Base.remove( model, instanceResource, CREATOR, value );
    }

    /**
     * Removes a value of property Creator given as an instance of UserAccount
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeCreator( UserAccount value ) {
        Base.remove( this.model, this.getResource(), CREATOR, value );
    }

    /**
     * Removes all values of property Creator * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllCreator( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, CREATOR );
    }

    /**
     * Removes all values of property Creator * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllCreator() {
        Base.removeAll( this.model, this.getResource(), CREATOR );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389aee72 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, DATE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389aee72 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasDate() {
        return Base.has( this.model, this.getResource(), DATE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389aee72 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, DATE, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@389aee72 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasDate( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), DATE, value );
    }

    /**
     * Get all values of property Date as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllDate_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, DATE );
    }

    /**
     * Get all values of property Date as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllDate_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, DATE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Date as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllDate_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), DATE );
    }

    /**
     * Get all values of property Date as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllDate_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), DATE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Date * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<String> getAllDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, DATE, String.class );
    }

    /**
     * Get all values of property Date as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<String> getAllDate_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, DATE, String.class );
    }

    /**
     * Get all values of property Date * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<String> getAllDate() {
        return Base.getAll( this.model, this.getResource(), DATE, String.class );
    }

    /**
     * Get all values of property Date as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<String> getAllDate_as() {
        return Base.getAll_as( this.model, this.getResource(), DATE,
                String.class );
    }

    /**
     * Adds a value to property Date as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, DATE, value );
    }

    /**
     * Adds a value to property Date as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addDate( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), DATE, value );
    }

    /**
     * Adds a value to property Date from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            String value ) {
        Base.add( model, instanceResource, DATE, value );
    }

    /**
     * Adds a value to property Date from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addDate( String value ) {
        Base.add( this.model, this.getResource(), DATE, value );
    }

    /**
     * Sets a value of property Date from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, DATE, value );
    }

    /**
     * Sets a value of property Date from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setDate( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), DATE, value );
    }

    /**
     * Sets a value of property Date from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            String value ) {
        Base.set( model, instanceResource, DATE, value );
    }

    /**
     * Sets a value of property Date from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setDate( String value ) {
        Base.set( this.model, this.getResource(), DATE, value );
    }

    /**
     * Removes a value of property Date as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, DATE, value );
    }

    /**
     * Removes a value of property Date as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeDate( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), DATE, value );
    }

    /**
     * Removes a value of property Date given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            String value ) {
        Base.remove( model, instanceResource, DATE, value );
    }

    /**
     * Removes a value of property Date given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeDate( SIOCThing value ) {
        Base.remove( this.model, this.getResource(), DATE, value );
    }

    /**
     * Removes all values of property Date * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllDate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, DATE );
    }

    /**
     * Removes all values of property Date * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllDate() {
        Base.removeAll( this.model, this.getResource(), DATE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d41b16b has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasDescription( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, DESCRIPTION );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d41b16b has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasDescription() {
        return Base.has( this.model, this.getResource(), DESCRIPTION );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d41b16b has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasDescription( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, DESCRIPTION, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@7d41b16b has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasDescription(
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), DESCRIPTION,
                value );
    }

    /**
     * Get all values of property Description as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllDescription_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, DESCRIPTION );
    }

    /**
     * Get all values of property Description as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllDescription_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, DESCRIPTION,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Description as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllDescription_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), DESCRIPTION );
    }

    /**
     * Get all values of property Description as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllDescription_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), DESCRIPTION,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Description * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<String> getAllDescription(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, DESCRIPTION, String.class );
    }

    /**
     * Get all values of property Description as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<String> getAllDescription_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, DESCRIPTION,
                String.class );
    }

    /**
     * Get all values of property Description * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<String> getAllDescription() {
        return Base.getAll( this.model, this.getResource(), DESCRIPTION,
                String.class );
    }

    /**
     * Get all values of property Description as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<String> getAllDescription_as() {
        return Base.getAll_as( this.model, this.getResource(), DESCRIPTION,
                String.class );
    }

    /**
     * Adds a value to property Description as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addDescription( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, DESCRIPTION, value );
    }

    /**
     * Adds a value to property Description as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void
 addDescription( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), DESCRIPTION, value );
    }

    /**
     * Adds a value to property Description from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addDescription( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            String value ) {
        Base.add( model, instanceResource, DESCRIPTION, value );
    }

    /**
     * Adds a value to property Description from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addDescription( String value ) {
        Base.add( this.model, this.getResource(), DESCRIPTION, value );
    }

    /**
     * Sets a value of property Description from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setDescription( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, DESCRIPTION, value );
    }

    /**
     * Sets a value of property Description from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void
 setDescription( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), DESCRIPTION, value );
    }

    /**
     * Sets a value of property Description from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setDescription( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            String value ) {
        Base.set( model, instanceResource, DESCRIPTION, value );
    }

    /**
     * Sets a value of property Description from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setDescription( String value ) {
        Base.set( this.model, this.getResource(), DESCRIPTION, value );
    }

    /**
     * Removes a value of property Description as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeDescription( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, DESCRIPTION, value );
    }

    /**
     * Removes a value of property Description as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeDescription(
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), DESCRIPTION, value );
    }

    /**
     * Removes a value of property Description given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeDescription( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
        Base.remove( model, instanceResource, DESCRIPTION, value );
    }

    /**
     * Removes a value of property Description given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeDescription( SIOCThing value ) {
        Base.remove( this.model, this.getResource(), DESCRIPTION, value );
    }

    /**
     * Removes all values of property Description * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllDescription( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, DESCRIPTION );
    }

    /**
     * Removes all values of property Description * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllDescription() {
        Base.removeAll( this.model, this.getResource(), DESCRIPTION );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a5dae04 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasFunction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, FUNCTION );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a5dae04 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasFunction() {
        return Base.has( this.model, this.getResource(), FUNCTION );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a5dae04 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasFunction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, FUNCTION, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5a5dae04 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasFunction( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), FUNCTION, value );
    }

    /**
     * Get all values of property Function as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllFunction_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, FUNCTION );
    }

    /**
     * Get all values of property Function as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllFunction_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, FUNCTION,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Function as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllFunction_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), FUNCTION );
    }

    /**
     * Get all values of property Function as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllFunction_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), FUNCTION,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Function * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Role> getAllFunction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, FUNCTION, Role.class );
    }

    /**
     * Get all values of property Function as a ReactorResult of Role
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Role> getAllFunction_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, FUNCTION, Role.class );
    }

    /**
     * Get all values of property Function * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Role> getAllFunction() {
        return Base.getAll( this.model, this.getResource(), FUNCTION,
                Role.class );
    }

    /**
     * Get all values of property Function as a ReactorResult of Role
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Role> getAllFunction_as() {
        return Base.getAll_as( this.model, this.getResource(), FUNCTION,
                Role.class );
    }

    /**
     * Adds a value to property Function as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addFunction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, FUNCTION, value );
    }

    /**
     * Adds a value to property Function as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addFunction( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), FUNCTION, value );
    }

    /**
     * Adds a value to property Function from an instance of Role
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void
            addFunction( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Role value ) {
        Base.add( model, instanceResource, FUNCTION, value );
    }

    /**
     * Adds a value to property Function from an instance of Role
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addFunction( Role value ) {
        Base.add( this.model, this.getResource(), FUNCTION, value );
    }

    /**
     * Sets a value of property Function from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setFunction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, FUNCTION, value );
    }

    /**
     * Sets a value of property Function from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setFunction( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), FUNCTION, value );
    }

    /**
     * Sets a value of property Function from an instance of Role First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void
            setFunction( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Role value ) {
        Base.set( model, instanceResource, FUNCTION, value );
    }

    /**
     * Sets a value of property Function from an instance of Role First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setFunction( Role value ) {
        Base.set( this.model, this.getResource(), FUNCTION, value );
    }

    /**
     * Removes a value of property Function as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeFunction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, FUNCTION, value );
    }

    /**
     * Removes a value of property Function as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeFunction( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), FUNCTION, value );
    }

    /**
     * Removes a value of property Function given as an instance of Role
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void
            removeFunction( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Role value ) {
        Base.remove( model, instanceResource, FUNCTION, value );
    }

    /**
     * Removes a value of property Function given as an instance of Role
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeFunction( Role value ) {
        Base.remove( this.model, this.getResource(), FUNCTION, value );
    }

    /**
     * Removes all values of property Function * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllFunction( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, FUNCTION );
    }

    /**
     * Removes all values of property Function * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllFunction() {
        Base.removeAll( this.model, this.getResource(), FUNCTION );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27cd61b has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasId( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, ID );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27cd61b has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasId() {
        return Base.has( this.model, this.getResource(), ID );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27cd61b has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasId( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, ID, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@27cd61b has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasId( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), ID, value );
    }

    /**
     * Get all values of property Id as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllId_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, ID );
    }

    /**
     * Get all values of property Id as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllId_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, ID,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Id as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllId_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), ID );
    }

    /**
     * Get all values of property Id as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllId_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), ID,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Id * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllId( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base
                .getAll( model, instanceResource, ID, java.lang.String.class );
    }

    /**
     * Get all values of property Id as a ReactorResult of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllId_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, ID,
                java.lang.String.class );
    }

    /**
     * Get all values of property Id * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllId() {
        return Base.getAll( this.model, this.getResource(), ID,
                java.lang.String.class );
    }

    /**
     * Get all values of property Id as a ReactorResult of java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllId_as() {
        return Base.getAll_as( this.model, this.getResource(), ID,
                java.lang.String.class );
    }

    /**
     * Adds a value to property Id as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addId( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, ID, value );
    }

    /**
     * Adds a value to property Id as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addId( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), ID, value );
    }

    /**
     * Adds a value to property Id from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addId( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.add( model, instanceResource, ID, value );
    }

    /**
     * Adds a value to property Id from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addId( java.lang.String value ) {
        Base.add( this.model, this.getResource(), ID, value );
    }

    /**
     * Sets a value of property Id from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setId( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, ID, value );
    }

    /**
     * Sets a value of property Id from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setId( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), ID, value );
    }

    /**
     * Sets a value of property Id from an instance of java.lang.String First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setId( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.set( model, instanceResource, ID, value );
    }

    /**
     * Sets a value of property Id from an instance of java.lang.String First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setId( java.lang.String value ) {
        Base.set( this.model, this.getResource(), ID, value );
    }

    /**
     * Removes a value of property Id as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeId( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, ID, value );
    }

    /**
     * Removes a value of property Id as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeId( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), ID, value );
    }

    /**
     * Removes a value of property Id given as an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeId( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.remove( model, instanceResource, ID, value );
    }

    /**
     * Removes a value of property Id given as an instance of java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeId( java.lang.String value ) {
        Base.remove( this.model, this.getResource(), ID, value );
    }

    /**
     * Removes all values of property Id * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllId( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, ID );
    }

    /**
     * Removes all values of property Id * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllId() {
        Base.removeAll( this.model, this.getResource(), ID );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b223cc6 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasLastactivitydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, LASTACTIVITYDATE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b223cc6 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasLastactivitydate() {
        return Base.has( this.model, this.getResource(), LASTACTIVITYDATE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b223cc6 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasLastactivitydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, LASTACTIVITYDATE, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6b223cc6 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasLastactivitydate(
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), LASTACTIVITYDATE,
                value );
    }

    /**
     * Get all values of property Lastactivitydate as an Iterator over RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllLastactivitydate_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, LASTACTIVITYDATE );
    }

    /**
     * Get all values of property Lastactivitydate as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllLastactivitydate_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, LASTACTIVITYDATE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Lastactivitydate as an Iterator over RDF2Go
     * nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllLastactivitydate_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(),
                LASTACTIVITYDATE );
    }

    /**
     * Get all values of property Lastactivitydate as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllLastactivitydate_asNode_() {
        return Base.getAll_as( this.model, this.getResource(),
                LASTACTIVITYDATE, org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Lastactivitydate * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String>
 getAllLastactivitydate(
            Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, LASTACTIVITYDATE,
                java.lang.String.class );
    }

    /**
     * Get all values of property Lastactivitydate as a ReactorResult of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String>
 getAllLastactivitydate_as(
            Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, LASTACTIVITYDATE,
                java.lang.String.class );
    }

    /**
     * Get all values of property Lastactivitydate * @return a ClosableIterator
     * of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllLastactivitydate() {
        return Base.getAll( this.model, this.getResource(), LASTACTIVITYDATE,
                java.lang.String.class );
    }

    /**
     * Get all values of property Lastactivitydate as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllLastactivitydate_as() {
        return Base.getAll_as( this.model, this.getResource(),
                LASTACTIVITYDATE, java.lang.String.class );
    }

    /**
     * Adds a value to property Lastactivitydate as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addLastactivitydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, LASTACTIVITYDATE, value );
    }

    /**
     * Adds a value to property Lastactivitydate as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addLastactivitydate(
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), LASTACTIVITYDATE, value );
    }

    /**
     * Adds a value to property Lastactivitydate from an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addLastactivitydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.add( model, instanceResource, LASTACTIVITYDATE, value );
    }

    /**
     * Adds a value to property Lastactivitydate from an instance of
     * java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addLastactivitydate( java.lang.String value ) {
        Base.add( this.model, this.getResource(), LASTACTIVITYDATE, value );
    }

    /**
     * Sets a value of property Lastactivitydate from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setLastactivitydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, LASTACTIVITYDATE, value );
    }

    /**
     * Sets a value of property Lastactivitydate from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setLastactivitydate(
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), LASTACTIVITYDATE, value );
    }

    /**
     * Sets a value of property Lastactivitydate from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setLastactivitydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.set( model, instanceResource, LASTACTIVITYDATE, value );
    }

    /**
     * Sets a value of property Lastactivitydate from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setLastactivitydate( java.lang.String value ) {
        Base.set( this.model, this.getResource(), LASTACTIVITYDATE, value );
    }

    /**
     * Removes a value of property Lastactivitydate as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeLastactivitydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, LASTACTIVITYDATE, value );
    }

    /**
     * Removes a value of property Lastactivitydate as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeLastactivitydate(
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), LASTACTIVITYDATE, value );
    }

    /**
     * Removes a value of property Lastactivitydate given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeLastactivitydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.remove( model, instanceResource, LASTACTIVITYDATE, value );
    }

    /**
     * Removes a value of property Lastactivitydate given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeLastactivitydate( java.lang.String value ) {
        Base.remove( this.model, this.getResource(), LASTACTIVITYDATE, value );
    }

    /**
     * Removes all values of property Lastactivitydate * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllLastactivitydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, LASTACTIVITYDATE );
    }

    /**
     * Removes all values of property Lastactivitydate * [Generated from
     * RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllLastactivitydate() {
        Base.removeAll( this.model, this.getResource(), LASTACTIVITYDATE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4721e1bb has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasLastreplydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, LASTREPLYDATE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4721e1bb has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasLastreplydate() {
        return Base.has( this.model, this.getResource(), LASTREPLYDATE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4721e1bb has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasLastreplydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, LASTREPLYDATE, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4721e1bb has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasLastreplydate(
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), LASTREPLYDATE,
                value );
    }

    /**
     * Get all values of property Lastreplydate as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllLastreplydate_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, LASTREPLYDATE );
    }

    /**
     * Get all values of property Lastreplydate as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllLastreplydate_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, LASTREPLYDATE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Lastreplydate as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllLastreplydate_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(),
                LASTREPLYDATE );
    }

    /**
     * Get all values of property Lastreplydate as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllLastreplydate_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), LASTREPLYDATE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Lastreplydate * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllLastreplydate(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, LASTREPLYDATE,
                java.lang.String.class );
    }

    /**
     * Get all values of property Lastreplydate as a ReactorResult of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllLastreplydate_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, LASTREPLYDATE,
                java.lang.String.class );
    }

    /**
     * Get all values of property Lastreplydate * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllLastreplydate() {
        return Base.getAll( this.model, this.getResource(), LASTREPLYDATE,
                java.lang.String.class );
    }

    /**
     * Get all values of property Lastreplydate as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllLastreplydate_as() {
        return Base.getAll_as( this.model, this.getResource(), LASTREPLYDATE,
                java.lang.String.class );
    }

    /**
     * Adds a value to property Lastreplydate as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addLastreplydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, LASTREPLYDATE, value );
    }

    /**
     * Adds a value to property Lastreplydate as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void
 addLastreplydate( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), LASTREPLYDATE, value );
    }

    /**
     * Adds a value to property Lastreplydate from an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addLastreplydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.add( model, instanceResource, LASTREPLYDATE, value );
    }

    /**
     * Adds a value to property Lastreplydate from an instance of
     * java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addLastreplydate( java.lang.String value ) {
        Base.add( this.model, this.getResource(), LASTREPLYDATE, value );
    }

    /**
     * Sets a value of property Lastreplydate from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setLastreplydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, LASTREPLYDATE, value );
    }

    /**
     * Sets a value of property Lastreplydate from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void
 setLastreplydate( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), LASTREPLYDATE, value );
    }

    /**
     * Sets a value of property Lastreplydate from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setLastreplydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.set( model, instanceResource, LASTREPLYDATE, value );
    }

    /**
     * Sets a value of property Lastreplydate from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setLastreplydate( java.lang.String value ) {
        Base.set( this.model, this.getResource(), LASTREPLYDATE, value );
    }

    /**
     * Removes a value of property Lastreplydate as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeLastreplydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, LASTREPLYDATE, value );
    }

    /**
     * Removes a value of property Lastreplydate as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeLastreplydate(
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), LASTREPLYDATE, value );
    }

    /**
     * Removes a value of property Lastreplydate given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeLastreplydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.remove( model, instanceResource, LASTREPLYDATE, value );
    }

    /**
     * Removes a value of property Lastreplydate given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeLastreplydate( java.lang.String value ) {
        Base.remove( this.model, this.getResource(), LASTREPLYDATE, value );
    }

    /**
     * Removes all values of property Lastreplydate * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllLastreplydate( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, LASTREPLYDATE );
    }

    /**
     * Removes all values of property Lastreplydate * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllLastreplydate() {
        Base.removeAll( this.model, this.getResource(), LASTREPLYDATE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3764253e has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasLinksto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, LINKSTO );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3764253e has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasLinksto() {
        return Base.has( this.model, this.getResource(), LINKSTO );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3764253e has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasLinksto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, LINKSTO, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3764253e has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasLinksto( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), LINKSTO, value );
    }

    /**
     * Get all values of property Linksto as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllLinksto_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, LINKSTO );
    }

    /**
     * Get all values of property Linksto as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllLinksto_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, LINKSTO,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Linksto as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllLinksto_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), LINKSTO );
    }

    /**
     * Get all values of property Linksto as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllLinksto_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), LINKSTO,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Linksto * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<SIOCThing> getAllLinksto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, LINKSTO, SIOCThing.class );
    }

    /**
     * Get all values of property Linksto as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<SIOCThing> getAllLinksto_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, LINKSTO, SIOCThing.class );
    }

    /**
     * Get all values of property Linksto * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<SIOCThing> getAllLinksto() {
        return Base.getAll( this.model, this.getResource(), LINKSTO,
                SIOCThing.class );
    }

    /**
     * Get all values of property Linksto as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<SIOCThing> getAllLinksto_as() {
        return Base.getAll_as( this.model, this.getResource(), LINKSTO,
                SIOCThing.class );
    }

    /**
     * Adds a value to property Linksto as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addLinksto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, LINKSTO, value );
    }

    /**
     * Adds a value to property Linksto as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addLinksto( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), LINKSTO, value );
    }

    /**
     * Adds a value to property Linksto from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addLinksto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
        Base.add( model, instanceResource, LINKSTO, value );
    }

    /**
     * Adds a value to property Linksto from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addLinksto( SIOCThing value ) {
        Base.add( this.model, this.getResource(), LINKSTO, value );
    }

    /**
     * Sets a value of property Linksto from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setLinksto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, LINKSTO, value );
    }

    /**
     * Sets a value of property Linksto from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setLinksto( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), LINKSTO, value );
    }

    /**
     * Sets a value of property Linksto from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setLinksto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
        Base.set( model, instanceResource, LINKSTO, value );
    }

    /**
     * Sets a value of property Linksto from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setLinksto( SIOCThing value ) {
        Base.set( this.model, this.getResource(), LINKSTO, value );
    }

    /**
     * Removes a value of property Linksto as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeLinksto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, LINKSTO, value );
    }

    /**
     * Removes a value of property Linksto as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeLinksto( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), LINKSTO, value );
    }

    /**
     * Removes a value of property Linksto given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeLinksto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
        Base.remove( model, instanceResource, LINKSTO, value );
    }

    /**
     * Removes a value of property Linksto given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeLinksto( SIOCThing value ) {
        Base.remove( this.model, this.getResource(), LINKSTO, value );
    }

    /**
     * Removes all values of property Linksto * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllLinksto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, LINKSTO );
    }

    /**
     * Removes all values of property Linksto * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllLinksto() {
        Base.removeAll( this.model, this.getResource(), LINKSTO );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c53a57a has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, _NAME );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c53a57a has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasName() {
        return Base.has( this.model, this.getResource(), _NAME );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c53a57a has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, _NAME, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@c53a57a has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasName( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), _NAME, value );
    }

    /**
     * Get all values of property Name as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllName_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, _NAME );
    }

    /**
     * Get all values of property Name as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllName_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, _NAME,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Name as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllName_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), _NAME );
    }

    /**
     * Get all values of property Name as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllName_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), _NAME,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Name * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllName(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, _NAME,
                java.lang.String.class );
    }

    /**
     * Get all values of property Name as a ReactorResult of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllName_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, _NAME,
                java.lang.String.class );
    }

    /**
     * Get all values of property Name * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllName() {
        return Base.getAll( this.model, this.getResource(), _NAME,
                java.lang.String.class );
    }

    /**
     * Get all values of property Name as a ReactorResult of java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllName_as() {
        return Base.getAll_as( this.model, this.getResource(), _NAME,
                java.lang.String.class );
    }

    /**
     * Adds a value to property Name as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, _NAME, value );
    }

    /**
     * Adds a value to property Name as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addName( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), _NAME, value );
    }

    /**
     * Adds a value to property Name from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.add( model, instanceResource, _NAME, value );
    }

    /**
     * Adds a value to property Name from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addName( java.lang.String value ) {
        Base.add( this.model, this.getResource(), _NAME, value );
    }

    /**
     * Sets a value of property Name from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, _NAME, value );
    }

    /**
     * Sets a value of property Name from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setName( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), _NAME, value );
    }

    /**
     * Sets a value of property Name from an instance of java.lang.String First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.set( model, instanceResource, _NAME, value );
    }

    /**
     * Sets a value of property Name from an instance of java.lang.String First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setName( java.lang.String value ) {
        Base.set( this.model, this.getResource(), _NAME, value );
    }

    /**
     * Removes a value of property Name as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, _NAME, value );
    }

    /**
     * Removes a value of property Name as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeName( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), _NAME, value );
    }

    /**
     * Removes a value of property Name given as an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.remove( model, instanceResource, _NAME, value );
    }

    /**
     * Removes a value of property Name given as an instance of java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeName( java.lang.String value ) {
        Base.remove( this.model, this.getResource(), _NAME, value );
    }

    /**
     * Removes all values of property Name * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllName( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, _NAME );
    }

    /**
     * Removes all values of property Name * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllName() {
        Base.removeAll( this.model, this.getResource(), _NAME );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4e9fd887 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNote( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, NOTE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4e9fd887 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNote() {
        return Base.has( this.model, this.getResource(), NOTE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4e9fd887 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNote( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, NOTE, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@4e9fd887 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNote( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), NOTE, value );
    }

    /**
     * Get all values of property Note as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllNote_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, NOTE );
    }

    /**
     * Get all values of property Note as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllNote_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, NOTE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Note as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllNote_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), NOTE );
    }

    /**
     * Get all values of property Note as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllNote_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), NOTE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Note * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllNote(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, NOTE,
                java.lang.String.class );
    }

    /**
     * Get all values of property Note as a ReactorResult of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllNote_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, NOTE,
                java.lang.String.class );
    }

    /**
     * Get all values of property Note * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllNote() {
        return Base.getAll( this.model, this.getResource(), NOTE,
                java.lang.String.class );
    }

    /**
     * Get all values of property Note as a ReactorResult of java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllNote_as() {
        return Base.getAll_as( this.model, this.getResource(), NOTE,
                java.lang.String.class );
    }

    /**
     * Adds a value to property Note as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNote( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, NOTE, value );
    }

    /**
     * Adds a value to property Note as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNote( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), NOTE, value );
    }

    /**
     * Adds a value to property Note from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNote( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.add( model, instanceResource, NOTE, value );
    }

    /**
     * Adds a value to property Note from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNote( java.lang.String value ) {
        Base.add( this.model, this.getResource(), NOTE, value );
    }

    /**
     * Sets a value of property Note from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNote( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, NOTE, value );
    }

    /**
     * Sets a value of property Note from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNote( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), NOTE, value );
    }

    /**
     * Sets a value of property Note from an instance of java.lang.String First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNote( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.set( model, instanceResource, NOTE, value );
    }

    /**
     * Sets a value of property Note from an instance of java.lang.String First,
     * all existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNote( java.lang.String value ) {
        Base.set( this.model, this.getResource(), NOTE, value );
    }

    /**
     * Removes a value of property Note as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNote( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, NOTE, value );
    }

    /**
     * Removes a value of property Note as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNote( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), NOTE, value );
    }

    /**
     * Removes a value of property Note given as an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNote( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.remove( model, instanceResource, NOTE, value );
    }

    /**
     * Removes a value of property Note given as an instance of java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNote( java.lang.String value ) {
        Base.remove( this.model, this.getResource(), NOTE, value );
    }

    /**
     * Removes all values of property Note * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNote( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, NOTE );
    }

    /**
     * Removes all values of property Note * [Generated from RDFReactor template
     * rule #removeall1dynamic]
     */
    public void removeAllNote() {
        Base.removeAll( this.model, this.getResource(), NOTE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14be60b has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNumauthors( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, NUMAUTHORS );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14be60b has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNumauthors() {
        return Base.has( this.model, this.getResource(), NUMAUTHORS );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14be60b has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNumauthors( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, NUMAUTHORS, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@14be60b has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean
 hasNumauthors( org.ontoware.rdf2go.model.node.Node value ) {
        return Base
                .hasValue( this.model, this.getResource(), NUMAUTHORS, value );
    }

    /**
     * Get all values of property Numauthors as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllNumauthors_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, NUMAUTHORS );
    }

    /**
     * Get all values of property Numauthors as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllNumauthors_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, NUMAUTHORS,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Numauthors as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllNumauthors_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), NUMAUTHORS );
    }

    /**
     * Get all values of property Numauthors as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllNumauthors_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), NUMAUTHORS,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Numauthors * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.Integer> getAllNumauthors(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, NUMAUTHORS,
                java.lang.Integer.class );
    }

    /**
     * Get all values of property Numauthors as a ReactorResult of
     * java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.Integer> getAllNumauthors_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, NUMAUTHORS,
                java.lang.Integer.class );
    }

    /**
     * Get all values of property Numauthors * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.Integer> getAllNumauthors() {
        return Base.getAll( this.model, this.getResource(), NUMAUTHORS,
                java.lang.Integer.class );
    }

    /**
     * Get all values of property Numauthors as a ReactorResult of
     * java.lang.Integer
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.Integer> getAllNumauthors_as() {
        return Base.getAll_as( this.model, this.getResource(), NUMAUTHORS,
                java.lang.Integer.class );
    }

    /**
     * Adds a value to property Numauthors as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNumauthors( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, NUMAUTHORS, value );
    }

    /**
     * Adds a value to property Numauthors as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNumauthors( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), NUMAUTHORS, value );
    }

    /**
     * Adds a value to property Numauthors from an instance of java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNumauthors( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.Integer value ) {
        Base.add( model, instanceResource, NUMAUTHORS, value );
    }

    /**
     * Adds a value to property Numauthors from an instance of java.lang.Integer
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNumauthors( java.lang.Integer value ) {
        Base.add( this.model, this.getResource(), NUMAUTHORS, value );
    }

    /**
     * Sets a value of property Numauthors from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNumauthors( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, NUMAUTHORS, value );
    }

    /**
     * Sets a value of property Numauthors from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNumauthors( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), NUMAUTHORS, value );
    }

    /**
     * Sets a value of property Numauthors from an instance of java.lang.Integer
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNumauthors( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.Integer value ) {
        Base.set( model, instanceResource, NUMAUTHORS, value );
    }

    /**
     * Sets a value of property Numauthors from an instance of java.lang.Integer
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNumauthors( java.lang.Integer value ) {
        Base.set( this.model, this.getResource(), NUMAUTHORS, value );
    }

    /**
     * Removes a value of property Numauthors as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNumauthors( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, NUMAUTHORS, value );
    }

    /**
     * Removes a value of property Numauthors as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void
 removeNumauthors( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), NUMAUTHORS, value );
    }

    /**
     * Removes a value of property Numauthors given as an instance of
     * java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNumauthors( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.Integer value ) {
        Base.remove( model, instanceResource, NUMAUTHORS, value );
    }

    /**
     * Removes a value of property Numauthors given as an instance of
     * java.lang.Integer
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNumauthors( java.lang.Integer value ) {
        Base.remove( this.model, this.getResource(), NUMAUTHORS, value );
    }

    /**
     * Removes all values of property Numauthors * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNumauthors( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, NUMAUTHORS );
    }

    /**
     * Removes all values of property Numauthors * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNumauthors() {
        Base.removeAll( this.model, this.getResource(), NUMAUTHORS );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@452d9a56 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNumreplies( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, NUMREPLIES );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@452d9a56 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNumreplies() {
        return Base.has( this.model, this.getResource(), NUMREPLIES );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@452d9a56 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNumreplies( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, NUMREPLIES, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@452d9a56 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean
 hasNumreplies( org.ontoware.rdf2go.model.node.Node value ) {
        return Base
                .hasValue( this.model, this.getResource(), NUMREPLIES, value );
    }

    /**
     * Get all values of property Numreplies as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllNumreplies_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, NUMREPLIES );
    }

    /**
     * Get all values of property Numreplies as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllNumreplies_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, NUMREPLIES,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Numreplies as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllNumreplies_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), NUMREPLIES );
    }

    /**
     * Get all values of property Numreplies as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllNumreplies_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), NUMREPLIES,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Numreplies * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.Integer> getAllNumreplies(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, NUMREPLIES,
                java.lang.Integer.class );
    }

    /**
     * Get all values of property Numreplies as a ReactorResult of
     * java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.Integer> getAllNumreplies_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, NUMREPLIES,
                java.lang.Integer.class );
    }

    /**
     * Get all values of property Numreplies * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.Integer> getAllNumreplies() {
        return Base.getAll( this.model, this.getResource(), NUMREPLIES,
                java.lang.Integer.class );
    }

    /**
     * Get all values of property Numreplies as a ReactorResult of
     * java.lang.Integer
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.Integer> getAllNumreplies_as() {
        return Base.getAll_as( this.model, this.getResource(), NUMREPLIES,
                java.lang.Integer.class );
    }

    /**
     * Adds a value to property Numreplies as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNumreplies( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, NUMREPLIES, value );
    }

    /**
     * Adds a value to property Numreplies as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNumreplies( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), NUMREPLIES, value );
    }

    /**
     * Adds a value to property Numreplies from an instance of java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNumreplies( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.Integer value ) {
        Base.add( model, instanceResource, NUMREPLIES, value );
    }

    /**
     * Adds a value to property Numreplies from an instance of java.lang.Integer
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNumreplies( java.lang.Integer value ) {
        Base.add( this.model, this.getResource(), NUMREPLIES, value );
    }

    /**
     * Sets a value of property Numreplies from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNumreplies( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, NUMREPLIES, value );
    }

    /**
     * Sets a value of property Numreplies from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNumreplies( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), NUMREPLIES, value );
    }

    /**
     * Sets a value of property Numreplies from an instance of java.lang.Integer
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNumreplies( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.Integer value ) {
        Base.set( model, instanceResource, NUMREPLIES, value );
    }

    /**
     * Sets a value of property Numreplies from an instance of java.lang.Integer
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNumreplies( java.lang.Integer value ) {
        Base.set( this.model, this.getResource(), NUMREPLIES, value );
    }

    /**
     * Removes a value of property Numreplies as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNumreplies( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, NUMREPLIES, value );
    }

    /**
     * Removes a value of property Numreplies as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void
 removeNumreplies( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), NUMREPLIES, value );
    }

    /**
     * Removes a value of property Numreplies given as an instance of
     * java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNumreplies( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.Integer value ) {
        Base.remove( model, instanceResource, NUMREPLIES, value );
    }

    /**
     * Removes a value of property Numreplies given as an instance of
     * java.lang.Integer
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNumreplies( java.lang.Integer value ) {
        Base.remove( this.model, this.getResource(), NUMREPLIES, value );
    }

    /**
     * Removes all values of property Numreplies * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNumreplies( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, NUMREPLIES );
    }

    /**
     * Removes all values of property Numreplies * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNumreplies() {
        Base.removeAll( this.model, this.getResource(), NUMREPLIES );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61d7f705 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasNumviews( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, NUMVIEWS );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61d7f705 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasNumviews() {
        return Base.has( this.model, this.getResource(), NUMVIEWS );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61d7f705 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasNumviews( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, NUMVIEWS, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61d7f705 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasNumviews( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), NUMVIEWS, value );
    }

    /**
     * Get all values of property Numviews as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllNumviews_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, NUMVIEWS );
    }

    /**
     * Get all values of property Numviews as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllNumviews_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, NUMVIEWS,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Numviews as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllNumviews_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), NUMVIEWS );
    }

    /**
     * Get all values of property Numviews as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllNumviews_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), NUMVIEWS,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Numviews * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.Integer> getAllNumviews(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, NUMVIEWS,
                java.lang.Integer.class );
    }

    /**
     * Get all values of property Numviews as a ReactorResult of
     * java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.Integer> getAllNumviews_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, NUMVIEWS,
                java.lang.Integer.class );
    }

    /**
     * Get all values of property Numviews * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.Integer> getAllNumviews() {
        return Base.getAll( this.model, this.getResource(), NUMVIEWS,
                java.lang.Integer.class );
    }

    /**
     * Get all values of property Numviews as a ReactorResult of
     * java.lang.Integer
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.Integer> getAllNumviews_as() {
        return Base.getAll_as( this.model, this.getResource(), NUMVIEWS,
                java.lang.Integer.class );
    }

    /**
     * Adds a value to property Numviews as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addNumviews( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, NUMVIEWS, value );
    }

    /**
     * Adds a value to property Numviews as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addNumviews( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), NUMVIEWS, value );
    }

    /**
     * Adds a value to property Numviews from an instance of java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addNumviews( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.Integer value ) {
        Base.add( model, instanceResource, NUMVIEWS, value );
    }

    /**
     * Adds a value to property Numviews from an instance of java.lang.Integer
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addNumviews( java.lang.Integer value ) {
        Base.add( this.model, this.getResource(), NUMVIEWS, value );
    }

    /**
     * Sets a value of property Numviews from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setNumviews( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, NUMVIEWS, value );
    }

    /**
     * Sets a value of property Numviews from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setNumviews( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), NUMVIEWS, value );
    }

    /**
     * Sets a value of property Numviews from an instance of java.lang.Integer
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setNumviews( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.Integer value ) {
        Base.set( model, instanceResource, NUMVIEWS, value );
    }

    /**
     * Sets a value of property Numviews from an instance of java.lang.Integer
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setNumviews( java.lang.Integer value ) {
        Base.set( this.model, this.getResource(), NUMVIEWS, value );
    }

    /**
     * Removes a value of property Numviews as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeNumviews( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, NUMVIEWS, value );
    }

    /**
     * Removes a value of property Numviews as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeNumviews( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), NUMVIEWS, value );
    }

    /**
     * Removes a value of property Numviews given as an instance of
     * java.lang.Integer
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeNumviews( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.Integer value ) {
        Base.remove( model, instanceResource, NUMVIEWS, value );
    }

    /**
     * Removes a value of property Numviews given as an instance of
     * java.lang.Integer
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeNumviews( java.lang.Integer value ) {
        Base.remove( this.model, this.getResource(), NUMVIEWS, value );
    }

    /**
     * Removes all values of property Numviews * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllNumviews( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, NUMVIEWS );
    }

    /**
     * Removes all values of property Numviews * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllNumviews() {
        Base.removeAll( this.model, this.getResource(), NUMVIEWS );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@759bade4 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasOwner( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, OWNER );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@759bade4 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasOwner() {
        return Base.has( this.model, this.getResource(), OWNER );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@759bade4 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasOwner( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, OWNER, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@759bade4 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasOwner( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), OWNER, value );
    }

    /**
     * Get all values of property Owner as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllOwner_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, OWNER );
    }

    /**
     * Get all values of property Owner as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllOwner_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, OWNER,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Owner as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllOwner_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), OWNER );
    }

    /**
     * Get all values of property Owner as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllOwner_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), OWNER,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Owner * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<UserAccount> getAllOwner( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, OWNER, UserAccount.class );
    }

    /**
     * Get all values of property Owner as a ReactorResult of UserAccount
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<UserAccount> getAllOwner_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, OWNER,
                UserAccount.class );
    }

    /**
     * Get all values of property Owner * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<UserAccount> getAllOwner() {
        return Base.getAll( this.model, this.getResource(), OWNER,
                UserAccount.class );
    }

    /**
     * Get all values of property Owner as a ReactorResult of UserAccount
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<UserAccount> getAllOwner_as() {
        return Base.getAll_as( this.model, this.getResource(), OWNER,
                UserAccount.class );
    }

    /**
     * Adds a value to property Owner as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addOwner( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, OWNER, value );
    }

    /**
     * Adds a value to property Owner as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addOwner( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), OWNER, value );
    }

    /**
     * Adds a value to property Owner from an instance of UserAccount
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addOwner( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            UserAccount value ) {
        Base.add( model, instanceResource, OWNER, value );
    }

    /**
     * Adds a value to property Owner from an instance of UserAccount
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addOwner( UserAccount value ) {
        Base.add( this.model, this.getResource(), OWNER, value );
    }

    /**
     * Sets a value of property Owner from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setOwner( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, OWNER, value );
    }

    /**
     * Sets a value of property Owner from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setOwner( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), OWNER, value );
    }

    /**
     * Sets a value of property Owner from an instance of UserAccount First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setOwner( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            UserAccount value ) {
        Base.set( model, instanceResource, OWNER, value );
    }

    /**
     * Sets a value of property Owner from an instance of UserAccount First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setOwner( UserAccount value ) {
        Base.set( this.model, this.getResource(), OWNER, value );
    }

    /**
     * Removes a value of property Owner as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeOwner( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, OWNER, value );
    }

    /**
     * Removes a value of property Owner as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeOwner( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), OWNER, value );
    }

    /**
     * Removes a value of property Owner given as an instance of UserAccount
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeOwner( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            UserAccount value ) {
        Base.remove( model, instanceResource, OWNER, value );
    }

    /**
     * Removes a value of property Owner given as an instance of UserAccount
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeOwner( UserAccount value ) {
        Base.remove( this.model, this.getResource(), OWNER, value );
    }

    /**
     * Removes all values of property Owner * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllOwner( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, OWNER );
    }

    /**
     * Removes all values of property Owner * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllOwner() {
        Base.removeAll( this.model, this.getResource(), OWNER );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b01812b has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, REFERENCES );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b01812b has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasReferences() {
        return Base.has( this.model, this.getResource(), REFERENCES );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b01812b has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, REFERENCES, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1b01812b has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasReferences(
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base
                .hasValue( this.model, this.getResource(), REFERENCES, value );
    }

    /**
     * Get all values of property References as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllReferences_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, REFERENCES );
    }

    /**
     * Get all values of property References as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllReferences_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, REFERENCES,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property References as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllReferences_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), REFERENCES );
    }

    /**
     * Get all values of property References as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllReferences_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), REFERENCES,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property References * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<SIOCThing> getAllReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, REFERENCES, SIOCThing.class );
    }

    /**
     * Get all values of property References as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<SIOCThing> getAllReferences_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base
                .getAll_as( model, instanceResource, REFERENCES, SIOCThing.class );
    }

    /**
     * Get all values of property References * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<SIOCThing> getAllReferences() {
        return Base.getAll( this.model, this.getResource(), REFERENCES,
                SIOCThing.class );
    }

    /**
     * Get all values of property References as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<SIOCThing> getAllReferences_as() {
        return Base.getAll_as( this.model, this.getResource(), REFERENCES,
                SIOCThing.class );
    }

    /**
     * Adds a value to property References as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, REFERENCES, value );
    }

    /**
     * Adds a value to property References as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void
 addReferences( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), REFERENCES, value );
    }

    /**
     * Adds a value to property References from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
        Base.add( model, instanceResource, REFERENCES, value );
    }

    /**
     * Adds a value to property References from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addReferences( SIOCThing value ) {
        Base.add( this.model, this.getResource(), REFERENCES, value );
    }

    /**
     * Sets a value of property References from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, REFERENCES, value );
    }

    /**
     * Sets a value of property References from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void
 setReferences( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), REFERENCES, value );
    }

    /**
     * Sets a value of property References from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
        Base.set( model, instanceResource, REFERENCES, value );
    }

    /**
     * Sets a value of property References from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setReferences( SIOCThing value ) {
        Base.set( this.model, this.getResource(), REFERENCES, value );
    }

    /**
     * Removes a value of property References as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, REFERENCES, value );
    }

    /**
     * Removes a value of property References as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeReferences(
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), REFERENCES, value );
    }

    /**
     * Removes a value of property References given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
        Base.remove( model, instanceResource, REFERENCES, value );
    }

    /**
     * Removes a value of property References given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeReferences( SIOCThing value ) {
        Base.remove( this.model, this.getResource(), REFERENCES, value );
    }

    /**
     * Removes all values of property References * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllReferences( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, REFERENCES );
    }

    /**
     * Removes all values of property References * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllReferences() {
        Base.removeAll( this.model, this.getResource(), REFERENCES );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@194e65cf has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasRelatedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, RELATEDTO );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@194e65cf has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasRelatedto() {
        return Base.has( this.model, this.getResource(), RELATEDTO );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@194e65cf has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasRelatedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, RELATEDTO, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@194e65cf has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasRelatedto( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), RELATEDTO, value );
    }

    /**
     * Get all values of property Relatedto as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllRelatedto_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, RELATEDTO );
    }

    /**
     * Get all values of property Relatedto as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllRelatedto_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, RELATEDTO,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Relatedto as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllRelatedto_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), RELATEDTO );
    }

    /**
     * Get all values of property Relatedto as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllRelatedto_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), RELATEDTO,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Relatedto * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<SIOCThing> getAllRelatedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, RELATEDTO, SIOCThing.class );
    }

    /**
     * Get all values of property Relatedto as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<SIOCThing> getAllRelatedto_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, RELATEDTO, SIOCThing.class );
    }

    /**
     * Get all values of property Relatedto * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<SIOCThing> getAllRelatedto() {
        return Base.getAll( this.model, this.getResource(), RELATEDTO,
                SIOCThing.class );
    }

    /**
     * Get all values of property Relatedto as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<SIOCThing> getAllRelatedto_as() {
        return Base.getAll_as( this.model, this.getResource(), RELATEDTO,
                SIOCThing.class );
    }

    /**
     * Adds a value to property Relatedto as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addRelatedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, RELATEDTO, value );
    }

    /**
     * Adds a value to property Relatedto as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addRelatedto( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), RELATEDTO, value );
    }

    /**
     * Adds a value to property Relatedto from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addRelatedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
        Base.add( model, instanceResource, RELATEDTO, value );
    }

    /**
     * Adds a value to property Relatedto from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addRelatedto( SIOCThing value ) {
        Base.add( this.model, this.getResource(), RELATEDTO, value );
    }

    /**
     * Sets a value of property Relatedto from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setRelatedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, RELATEDTO, value );
    }

    /**
     * Sets a value of property Relatedto from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setRelatedto( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), RELATEDTO, value );
    }

    /**
     * Sets a value of property Relatedto from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setRelatedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
        Base.set( model, instanceResource, RELATEDTO, value );
    }

    /**
     * Sets a value of property Relatedto from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setRelatedto( SIOCThing value ) {
        Base.set( this.model, this.getResource(), RELATEDTO, value );
    }

    /**
     * Removes a value of property Relatedto as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeRelatedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, RELATEDTO, value );
    }

    /**
     * Removes a value of property Relatedto as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeRelatedto( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), RELATEDTO, value );
    }

    /**
     * Removes a value of property Relatedto given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeRelatedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
        Base.remove( model, instanceResource, RELATEDTO, value );
    }

    /**
     * Removes a value of property Relatedto given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeRelatedto( SIOCThing value ) {
        Base.remove( this.model, this.getResource(), RELATEDTO, value );
    }

    /**
     * Removes all values of property Relatedto * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllRelatedto( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, RELATEDTO );
    }

    /**
     * Removes all values of property Relatedto * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllRelatedto() {
        Base.removeAll( this.model, this.getResource(), RELATEDTO );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c7f8123 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasScopeof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, SCOPEOF );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c7f8123 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasScopeof() {
        return Base.has( this.model, this.getResource(), SCOPEOF );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c7f8123 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasScopeof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, SCOPEOF, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2c7f8123 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasScopeof( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), SCOPEOF, value );
    }

    /**
     * Get all values of property Scopeof as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllScopeof_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, SCOPEOF );
    }

    /**
     * Get all values of property Scopeof as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllScopeof_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, SCOPEOF,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Scopeof as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllScopeof_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), SCOPEOF );
    }

    /**
     * Get all values of property Scopeof as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllScopeof_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), SCOPEOF,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Scopeof * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Role> getAllScopeof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, SCOPEOF, Role.class );
    }

    /**
     * Get all values of property Scopeof as a ReactorResult of Role
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Role> getAllScopeof_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, SCOPEOF, Role.class );
    }

    /**
     * Get all values of property Scopeof * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Role> getAllScopeof() {
        return Base
                .getAll( this.model, this.getResource(), SCOPEOF, Role.class );
    }

    /**
     * Get all values of property Scopeof as a ReactorResult of Role
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Role> getAllScopeof_as() {
        return Base.getAll_as( this.model, this.getResource(), SCOPEOF,
                Role.class );
    }

    /**
     * Adds a value to property Scopeof as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addScopeof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, SCOPEOF, value );
    }

    /**
     * Adds a value to property Scopeof as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addScopeof( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), SCOPEOF, value );
    }

    /**
     * Adds a value to property Scopeof from an instance of Role
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void
            addScopeof( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Role value ) {
        Base.add( model, instanceResource, SCOPEOF, value );
    }

    /**
     * Adds a value to property Scopeof from an instance of Role
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addScopeof( Role value ) {
        Base.add( this.model, this.getResource(), SCOPEOF, value );
    }

    /**
     * Sets a value of property Scopeof from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setScopeof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, SCOPEOF, value );
    }

    /**
     * Sets a value of property Scopeof from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setScopeof( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), SCOPEOF, value );
    }

    /**
     * Sets a value of property Scopeof from an instance of Role First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void
            setScopeof( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Role value ) {
        Base.set( model, instanceResource, SCOPEOF, value );
    }

    /**
     * Sets a value of property Scopeof from an instance of Role First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setScopeof( Role value ) {
        Base.set( this.model, this.getResource(), SCOPEOF, value );
    }

    /**
     * Removes a value of property Scopeof as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeScopeof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, SCOPEOF, value );
    }

    /**
     * Removes a value of property Scopeof as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeScopeof( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), SCOPEOF, value );
    }

    /**
     * Removes a value of property Scopeof given as an instance of Role
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void
            removeScopeof( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Role value ) {
        Base.remove( model, instanceResource, SCOPEOF, value );
    }

    /**
     * Removes a value of property Scopeof given as an instance of Role
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeScopeof( Role value ) {
        Base.remove( this.model, this.getResource(), SCOPEOF, value );
    }

    /**
     * Removes all values of property Scopeof * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllScopeof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, SCOPEOF );
    }

    /**
     * Removes all values of property Scopeof * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllScopeof() {
        Base.removeAll( this.model, this.getResource(), SCOPEOF );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e71f06c has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSpace( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, SPACE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e71f06c has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSpace() {
        return Base.has( this.model, this.getResource(), SPACE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e71f06c has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSpace( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, SPACE, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2e71f06c has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasSpace( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), SPACE, value );
    }

    /**
     * Get all values of property Space as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllSpace_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, SPACE );
    }

    /**
     * Get all values of property Space as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllSpace_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, SPACE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Space as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllSpace_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), SPACE );
    }

    /**
     * Get all values of property Space as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllSpace_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), SPACE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Space * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<Space> getAllSpace( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, SPACE, Space.class );
    }

    /**
     * Get all values of property Space as a ReactorResult of Space
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<Space> getAllSpace_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, SPACE, Space.class );
    }

    /**
     * Get all values of property Space * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<Space> getAllSpace() {
        return Base.getAll( this.model, this.getResource(), SPACE, Space.class );
    }

    /**
     * Get all values of property Space as a ReactorResult of Space
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<Space> getAllSpace_as() {
        return Base.getAll_as( this.model, this.getResource(), SPACE,
                Space.class );
    }

    /**
     * Adds a value to property Space as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSpace( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, SPACE, value );
    }

    /**
     * Adds a value to property Space as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSpace( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), SPACE, value );
    }

    /**
     * Adds a value to property Space from an instance of Space
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSpace( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Space value ) {
        Base.add( model, instanceResource, SPACE, value );
    }

    /**
     * Adds a value to property Space from an instance of Space
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSpace( Space value ) {
        Base.add( this.model, this.getResource(), SPACE, value );
    }

    /**
     * Sets a value of property Space from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSpace( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, SPACE, value );
    }

    /**
     * Sets a value of property Space from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSpace( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), SPACE, value );
    }

    /**
     * Sets a value of property Space from an instance of Space First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSpace( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Space value ) {
        Base.set( model, instanceResource, SPACE, value );
    }

    /**
     * Sets a value of property Space from an instance of Space First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSpace( Space value ) {
        Base.set( this.model, this.getResource(), SPACE, value );
    }

    /**
     * Removes a value of property Space as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSpace( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, SPACE, value );
    }

    /**
     * Removes a value of property Space as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeSpace( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), SPACE, value );
    }

    /**
     * Removes a value of property Space given as an instance of Space
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSpace( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Space value ) {
        Base.remove( model, instanceResource, SPACE, value );
    }

    /**
     * Removes a value of property Space given as an instance of Space
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSpace( Space value ) {
        Base.remove( this.model, this.getResource(), SPACE, value );
    }

    /**
     * Removes all values of property Space * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSpace( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, SPACE );
    }

    /**
     * Removes all values of property Space * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllSpace() {
        Base.removeAll( this.model, this.getResource(), SPACE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3efc68a7 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, SUBJECT );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3efc68a7 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasSubject() {
        return Base.has( this.model, this.getResource(), SUBJECT );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3efc68a7 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, SUBJECT, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3efc68a7 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean
 hasSubject( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), SUBJECT, value );
    }

    /**
     * Get all values of property Subject as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllSubject_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, SUBJECT );
    }

    /**
     * Get all values of property Subject as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllSubject_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, SUBJECT,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Subject as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllSubject_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), SUBJECT );
    }

    /**
     * Get all values of property Subject as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllSubject_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), SUBJECT,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Subject * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<String> getAllSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, SUBJECT, String.class );
    }

    /**
     * Get all values of property Subject as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<String> getAllSubject_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, SUBJECT, String.class );
    }

    /**
     * Get all values of property Subject * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<String> getAllSubject() {
        return Base.getAll( this.model, this.getResource(), SUBJECT,
                String.class );
    }

    /**
     * Get all values of property Subject as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<String> getAllSubject_as() {
        return Base.getAll_as( this.model, this.getResource(), SUBJECT,
                String.class );
    }

    /**
     * Adds a value to property Subject as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, SUBJECT, value );
    }

    /**
     * Adds a value to property Subject as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addSubject( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), SUBJECT, value );
    }

    /**
     * Adds a value to property Subject from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            String value ) {
        Base.add( model, instanceResource, SUBJECT, value );
    }

    /**
     * Adds a value to property Subject from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addSubject( String value ) {
        Base.add( this.model, this.getResource(), SUBJECT, value );
    }

    /**
     * Sets a value of property Subject from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, SUBJECT, value );
    }

    /**
     * Sets a value of property Subject from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setSubject( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), SUBJECT, value );
    }

    /**
     * Sets a value of property Subject from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            String value ) {
        Base.set( model, instanceResource, SUBJECT, value );
    }

    /**
     * Sets a value of property Subject from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setSubject( String value ) {
        Base.set( this.model, this.getResource(), SUBJECT, value );
    }

    /**
     * Removes a value of property Subject as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, SUBJECT, value );
    }

    /**
     * Removes a value of property Subject as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void
 removeSubject( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), SUBJECT, value );
    }

    /**
     * Removes a value of property Subject given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            String value ) {
        Base.remove( model, instanceResource, SUBJECT, value );
    }

    /**
     * Removes a value of property Subject given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeSubject( SIOCThing value ) {
        Base.remove( this.model, this.getResource(), SUBJECT, value );
    }

    /**
     * Removes all values of property Subject * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllSubject( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, SUBJECT );
    }

    /**
     * Removes all values of property Subject * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllSubject() {
        Base.removeAll( this.model, this.getResource(), SUBJECT );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bbe2ed3 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, TITLE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bbe2ed3 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasTitle() {
        return Base.has( this.model, this.getResource(), TITLE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bbe2ed3 has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, TITLE, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@5bbe2ed3 has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasTitle( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), TITLE, value );
    }

    /**
     * Get all values of property Title as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllTitle_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, TITLE );
    }

    /**
     * Get all values of property Title as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllTitle_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, TITLE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Title as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllTitle_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), TITLE );
    }

    /**
     * Get all values of property Title as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllTitle_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), TITLE,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Title * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<String> getAllTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, TITLE, String.class );
    }

    /**
     * Get all values of property Title as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<String> getAllTitle_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, TITLE, String.class );
    }

    /**
     * Get all values of property Title * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<String> getAllTitle() {
        return Base
                .getAll( this.model, this.getResource(), TITLE, String.class );
    }

    /**
     * Get all values of property Title as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<String> getAllTitle_as() {
        return Base.getAll_as( this.model, this.getResource(), TITLE,
                String.class );
    }

    /**
     * Adds a value to property Title as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, TITLE, value );
    }

    /**
     * Adds a value to property Title as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addTitle( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), TITLE, value );
    }

    /**
     * Adds a value to property Title from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            String value ) {
        Base.add( model, instanceResource, TITLE, value );
    }

    /**
     * Adds a value to property Title from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addTitle( String value ) {
        Base.add( this.model, this.getResource(), TITLE, value );
    }

    /**
     * Sets a value of property Title from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, TITLE, value );
    }

    /**
     * Sets a value of property Title from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setTitle( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), TITLE, value );
    }

    /**
     * Sets a value of property Title from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            String value ) {
        Base.set( model, instanceResource, TITLE, value );
    }

    /**
     * Sets a value of property Title from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setTitle( String value ) {
        Base.set( this.model, this.getResource(), TITLE, value );
    }

    /**
     * Removes a value of property Title as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, TITLE, value );
    }

    /**
     * Removes a value of property Title as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeTitle( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), TITLE, value );
    }

    /**
     * Removes a value of property Title given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            String value ) {
        Base.remove( model, instanceResource, TITLE, value );
    }

    /**
     * Removes a value of property Title given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeTitle( SIOCThing value ) {
        Base.remove( this.model, this.getResource(), TITLE, value );
    }

    /**
     * Removes all values of property Title * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllTitle( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, TITLE );
    }

    /**
     * Removes all values of property Title * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllTitle() {
        Base.removeAll( this.model, this.getResource(), TITLE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@334d545c has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasTopic( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, TITLE );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@334d545c has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasTopic() {
        return Base.has( this.model, this.getResource(), TOPIC );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@334d545c has
     * the given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasTopic( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, TOPIC, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@334d545c has
     * the given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean hasTopic( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), TOPIC, value );
    }

    /**
     * Get all values of property Topic as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllTopic_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, TOPIC );
    }

    /**
     * Get all values of property Topic as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllTopic_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, TOPIC,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Topic as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllTopic_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), TOPIC );
    }

    /**
     * Get all values of property Topic as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllTopic_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), TOPIC,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property Topic * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<String> getAllTopic( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, TOPIC, String.class );
    }

    /**
     * Get all values of property Topic as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<String> getAllTopic_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, TOPIC, String.class );
    }

    /**
     * Get all values of property Topic * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<String> getAllTopic() {
        return Base
                .getAll( this.model, this.getResource(), TOPIC, String.class );
    }

    /**
     * Get all values of property Topic as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<String> getAllTopic_as() {
        return Base.getAll_as( this.model, this.getResource(), TOPIC,
                String.class );
    }

    /**
     * Adds a value to property Topic as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addTopic( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, TOPIC, value );
    }

    /**
     * Adds a value to property Topic as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addTopic( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), TOPIC, value );
    }

    /**
     * Adds a value to property Topic from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addTopic( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            String value ) {
        Base.add( model, instanceResource, TOPIC, value );
    }

    /**
     * Adds a value to property Topic from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addTopic( String value ) {
        Base.add( this.model, this.getResource(), TOPIC, value );
    }

    /**
     * Sets a value of property Topic from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setTopic( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, TOPIC, value );
    }

    /**
     * Sets a value of property Topic from an RDF2Go node. First, all existing
     * values are removed, then this value is added. Cardinality constraints are
     * not checked, but this method exists only for properties with no
     * minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setTopic( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), TOPIC, value );
    }

    /**
     * Sets a value of property Topic from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setTopic( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            String value ) {
        Base.set( model, instanceResource, TOPIC, value );
    }

    /**
     * Sets a value of property Topic from an instance of Thing First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setTopic( String value ) {
        Base.set( this.model, this.getResource(), TOPIC, value );
    }

    /**
     * Removes a value of property Topic as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeTopic( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, TOPIC, value );
    }

    /**
     * Removes a value of property Topic as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void removeTopic( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), TOPIC, value );
    }

    /**
     * Removes a value of property Topic given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeTopic( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            String value ) {
        Base.remove( model, instanceResource, TOPIC, value );
    }

    /**
     * Removes a value of property Topic given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeTopic( SIOCThing value ) {
        Base.remove( this.model, this.getResource(), TOPIC, value );
    }

    /**
     * Removes all values of property Topic * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllTopic( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, TOPIC );
    }

    /**
     * Removes all values of property Topic * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllTopic() {
        Base.removeAll( this.model, this.getResource(), TOPIC );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@121c77b has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasModified( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, MODIFIED );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@121c77b has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasModified() {
        return Base.has( this.model, this.getResource(), MODIFIED );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@121c77b has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasModified( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, MODIFIED, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@121c77b has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean
 hasModified( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), MODIFIED, value );
    }

    /**
     * Get all values of property DateModified as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllModified_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, MODIFIED );
    }

    /**
     * Get all values of property DateModified as a ReactorResult of RDF2Go
     * nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllModified_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, MODIFIED,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property DateModified as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllModified_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), MODIFIED );
    }

    /**
     * Get all values of property DateModified as a ReactorResult of RDF2Go
     * nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllModified_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), MODIFIED,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property DateModified * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllModified(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, MODIFIED,
                java.lang.String.class );
    }

    /**
     * Get all values of property DateModified as a ReactorResult of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllModified_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, MODIFIED,
                java.lang.String.class );
    }

    /**
     * Get all values of property DateModified * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllModified() {
        return Base.getAll( this.model, this.getResource(), MODIFIED,
                java.lang.String.class );
    }

    /**
     * Get all values of property DateModified as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllModified_as() {
        return Base.getAll_as( this.model, this.getResource(), MODIFIED,
                java.lang.String.class );
    }

    /**
     * Adds a value to property DateModified as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addModified( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, MODIFIED, value );
    }

    /**
     * Adds a value to property DateModified as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addModified( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), MODIFIED, value );
    }

    /**
     * Adds a value to property DateModified from an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addModified( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.add( model, instanceResource, MODIFIED, value );
    }

    /**
     * Adds a value to property DateModified from an instance of
     * java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addModified( java.lang.String value ) {
        Base.add( this.model, this.getResource(), MODIFIED, value );
    }

    /**
     * Sets a value of property DateModified from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setModified( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, MODIFIED, value );
    }

    /**
     * Sets a value of property DateModified from an RDF2Go node. First, all
     * existing values are removed, then this value is added. Cardinality
     * constraints are not checked, but this method exists only for properties
     * with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setModified( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), MODIFIED, value );
    }

    /**
     * Sets a value of property DateModified from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setModified( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.set( model, instanceResource, MODIFIED, value );
    }

    /**
     * Sets a value of property DateModified from an instance of
     * java.lang.String First, all existing values are removed, then this value
     * is added. Cardinality constraints are not checked, but this method exists
     * only for properties with no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setModified( java.lang.String value ) {
        Base.set( this.model, this.getResource(), MODIFIED, value );
    }

    /**
     * Removes a value of property DateModified as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeModified( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, MODIFIED, value );
    }

    /**
     * Removes a value of property DateModified as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void
 removeModified( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), MODIFIED, value );
    }

    /**
     * Removes a value of property DateModified given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeModified( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.remove( model, instanceResource, MODIFIED, value );
    }

    /**
     * Removes a value of property DateModified given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeModified( java.lang.String value ) {
        Base.remove( this.model, this.getResource(), MODIFIED, value );
    }

    /**
     * Removes all values of property DateModified * @param model an RDF2Go
     * model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllModified( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, MODIFIED );
    }

    /**
     * Removes all values of property DateModified * [Generated from RDFReactor
     * template rule #removeall1dynamic]
     */
    public void removeAllModified() {
        Base.removeAll( this.model, this.getResource(), MODIFIED );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a56f0 has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasCreated( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, CREATED );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a56f0 has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasCreated() {
        return Base.has( this.model, this.getResource(), CREATED );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a56f0 has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasCreated( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, CREATED, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6a56f0 has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean
 hasCreated( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), CREATED, value );
    }

    /**
     * Get all values of property DateCreated as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllCreated_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, CREATED );
    }

    /**
     * Get all values of property DateCreated as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllCreated_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, CREATED,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property DateCreated as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllCreated_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), CREATED );
    }

    /**
     * Get all values of property DateCreated as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllCreated_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), CREATED,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property DateCreated * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<java.lang.String> getAllCreated(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, CREATED,
                java.lang.String.class );
    }

    /**
     * Get all values of property DateCreated as a ReactorResult of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<java.lang.String> getAllCreated_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, CREATED,
                java.lang.String.class );
    }

    /**
     * Get all values of property DateCreated * @return a ClosableIterator of
     * $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<java.lang.String> getAllCreated() {
        return Base.getAll( this.model, this.getResource(), CREATED,
                java.lang.String.class );
    }

    /**
     * Get all values of property DateCreated as a ReactorResult of
     * java.lang.String
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<java.lang.String> getAllCreated_as() {
        return Base.getAll_as( this.model, this.getResource(), CREATED,
                java.lang.String.class );
    }

    /**
     * Adds a value to property DateCreated as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addCreated( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, CREATED, value );
    }

    /**
     * Adds a value to property DateCreated as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addCreated( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), CREATED, value );
    }

    /**
     * Adds a value to property DateCreated from an instance of java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addCreated( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.add( model, instanceResource, CREATED, value );
    }

    /**
     * Adds a value to property DateCreated from an instance of java.lang.String
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addCreated( java.lang.String value ) {
        Base.add( this.model, this.getResource(), CREATED, value );
    }

    /**
     * Sets a value of property DateCreated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with
     * no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setCreated( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, CREATED, value );
    }

    /**
     * Sets a value of property DateCreated from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with
     * no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setCreated( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), CREATED, value );
    }

    /**
     * Sets a value of property DateCreated from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with
     * no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setCreated( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.set( model, instanceResource, CREATED, value );
    }

    /**
     * Sets a value of property DateCreated from an instance of java.lang.String
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with
     * no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setCreated( java.lang.String value ) {
        Base.set( this.model, this.getResource(), CREATED, value );
    }

    /**
     * Removes a value of property DateCreated as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeCreated( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, CREATED, value );
    }

    /**
     * Removes a value of property DateCreated as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void
 removeCreated( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), CREATED, value );
    }

    /**
     * Removes a value of property DateCreated given as an instance of
     * java.lang.String
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeCreated( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
        Base.remove( model, instanceResource, CREATED, value );
    }

    /**
     * Removes a value of property DateCreated given as an instance of
     * java.lang.String
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeCreated( java.lang.String value ) {
        Base.remove( this.model, this.getResource(), CREATED, value );
    }

    /**
     * Removes all values of property DateCreated * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllCreated( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, CREATED );
    }

    /**
     * Removes all values of property DateCreated *
     * [Generated from RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllCreated() {
        Base.removeAll( this.model, this.getResource(), CREATED );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10a73bc has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasHasPart( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, HASPART );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10a73bc has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasHasPart() {
        return Base.has( this.model, this.getResource(), HASPART );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10a73bc has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasHasPart( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, HASPART, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@10a73bc has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean
 hasHasPart( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), HASPART, value );
    }

    /**
     * Get all values of property HasPart as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllHasPart_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, HASPART );
    }

    /**
     * Get all values of property HasPart as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllHasPart_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, HASPART,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property HasPart as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllHasPart_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), HASPART );
    }

    /**
     * Get all values of property HasPart as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllHasPart_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), HASPART,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property HasPart * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<SIOCThing> getAllHasPart( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, HASPART, SIOCThing.class );
    }

    /**
     * Get all values of property HasPart as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<SIOCThing> getAllHasPart_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, HASPART, SIOCThing.class );
    }

    /**
     * Get all values of property HasPart * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<SIOCThing> getAllHasPart() {
        return Base.getAll( this.model, this.getResource(), HASPART,
                SIOCThing.class );
    }

    /**
     * Get all values of property HasPart as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<SIOCThing> getAllHasPart_as() {
        return Base.getAll_as( this.model, this.getResource(), HASPART,
                SIOCThing.class );
    }

    /**
     * Adds a value to property HasPart as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addHasPart( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, HASPART, value );
    }

    /**
     * Adds a value to property HasPart as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addHasPart( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), HASPART, value );
    }

    /**
     * Adds a value to property HasPart from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addHasPart( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
        Base.add( model, instanceResource, HASPART, value );
    }

    /**
     * Adds a value to property HasPart from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addHasPart( SIOCThing value ) {
        Base.add( this.model, this.getResource(), HASPART, value );
    }

    /**
     * Sets a value of property HasPart from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with
     * no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setHasPart( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, HASPART, value );
    }

    /**
     * Sets a value of property HasPart from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with
     * no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setHasPart( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), HASPART, value );
    }

    /**
     * Sets a value of property HasPart from an instance of Thing
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with
     * no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setHasPart( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
        Base.set( model, instanceResource, HASPART, value );
    }

    /**
     * Sets a value of property HasPart from an instance of Thing
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with
     * no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setHasPart( SIOCThing value ) {
        Base.set( this.model, this.getResource(), HASPART, value );
    }

    /**
     * Removes a value of property HasPart as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeHasPart( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, HASPART, value );
    }

    /**
     * Removes a value of property HasPart as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void
 removeHasPart( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), HASPART, value );
    }

    /**
     * Removes a value of property HasPart given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeHasPart( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
        Base.remove( model, instanceResource, HASPART, value );
    }

    /**
     * Removes a value of property HasPart given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeHasPart( SIOCThing value ) {
        Base.remove( this.model, this.getResource(), HASPART, value );
    }

    /**
     * Removes all values of property HasPart * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllHasPart( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, HASPART );
    }

    /**
     * Removes all values of property HasPart *
     * [Generated from RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllHasPart() {
        Base.removeAll( this.model, this.getResource(), HASPART );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1391b1a has at
     * least one value set
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-static]
     */
    public static boolean hasIsPartOf( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.has( model, instanceResource, ISPARTOF );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1391b1a has at
     * least one value set
     * 
     * @return true if this property has at least one value
     * 
     *         [Generated from RDFReactor template rule #get0has-dynamic]
     */
    public boolean hasIsPartOf() {
        return Base.has( this.model, this.getResource(), ISPARTOF );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1391b1a has the
     * given value (maybe among other values).
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-static]
     */
    public static boolean hasIsPartOf( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( model, instanceResource, ISPARTOF, value );
    }

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1391b1a has the
     * given value (maybe among other values).
     * 
     * @param value
     *            the value to be checked
     * @return true if this property contains (maybe among other) the given
     *         value
     * 
     *         [Generated from RDFReactor template rule #get0has-value-dynamic]
     */
    public boolean
 hasIsPartOf( org.ontoware.rdf2go.model.node.Node value ) {
        return Base.hasValue( this.model, this.getResource(), ISPARTOF, value );
    }

    /**
     * Get all values of property IsPartOf as an Iterator over RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get7static]
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllIsPartOf_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_asNode( model, instanceResource, ISPARTOF );
    }

    /**
     * Get all values of property IsPartOf as a ReactorResult of RDF2Go nodes
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get7static-reactor-result]
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllIsPartOf_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, ISPARTOF,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property IsPartOf as an Iterator over RDF2Go nodes
     * 
     * @return a ClosableIterator of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule #get8dynamic]
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllIsPartOf_asNode() {
        return Base.getAll_asNode( this.model, this.getResource(), ISPARTOF );
    }

    /**
     * Get all values of property IsPartOf as a ReactorResult of RDF2Go nodes
     * 
     * @return a List of RDF2Go Nodes
     * 
     *         [Generated from RDFReactor template rule
     *         #get8dynamic-reactor-result]
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllIsPartOf_asNode_() {
        return Base.getAll_as( this.model, this.getResource(), ISPARTOF,
                org.ontoware.rdf2go.model.node.Node.class );
    }

    /**
     * Get all values of property IsPartOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * @return a ClosableIterator of $type
     * 
     *         [Generated from RDFReactor template rule #get11static]
     */
    public static ClosableIterator<SIOCThing> getAllIsPartOf( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, ISPARTOF, SIOCThing.class );
    }

    /**
     * Get all values of property IsPartOf as a ReactorResult of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get11static-reactorresult]
     */
    public static ReactorResult<SIOCThing> getAllIsPartOf_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, ISPARTOF, SIOCThing.class );
    }

    /**
     * Get all values of property IsPartOf * @return a ClosableIterator of $type
     * 
     * [Generated from RDFReactor template rule #get12dynamic]
     */
    public ClosableIterator<SIOCThing> getAllIsPartOf() {
        return Base.getAll( this.model, this.getResource(), ISPARTOF,
                SIOCThing.class );
    }

    /**
     * Get all values of property IsPartOf as a ReactorResult of Thing
     * 
     * @return a ReactorResult of $type which can conveniently be converted to
     *         iterator, list or array
     * 
     *         [Generated from RDFReactor template rule
     *         #get12dynamic-reactorresult]
     */
    public ReactorResult<SIOCThing> getAllIsPartOf_as() {
        return Base.getAll_as( this.model, this.getResource(), ISPARTOF,
                SIOCThing.class );
    }

    /**
     * Adds a value to property IsPartOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1static]
     */
    public static void addIsPartOf( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( model, instanceResource, ISPARTOF, value );
    }

    /**
     * Adds a value to property IsPartOf as an RDF2Go node
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #add1dynamic]
     */
    public void addIsPartOf( org.ontoware.rdf2go.model.node.Node value ) {
        Base.add( this.model, this.getResource(), ISPARTOF, value );
    }

    /**
     * Adds a value to property IsPartOf from an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #add3static]
     */
    public static void addIsPartOf( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
        Base.add( model, instanceResource, ISPARTOF, value );
    }

    /**
     * Adds a value to property IsPartOf from an instance of Thing
     * 
     * [Generated from RDFReactor template rule #add4dynamic]
     */
    public void addIsPartOf( SIOCThing value ) {
        Base.add( this.model, this.getResource(), ISPARTOF, value );
    }

    /**
     * Sets a value of property IsPartOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with
     * no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be set
     * 
     *            [Generated from RDFReactor template rule #set1static]
     */
    public static void setIsPartOf( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( model, instanceResource, ISPARTOF, value );
    }

    /**
     * Sets a value of property IsPartOf from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with
     * no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set1dynamic]
     */
    public void setIsPartOf( org.ontoware.rdf2go.model.node.Node value ) {
        Base.set( this.model, this.getResource(), ISPARTOF, value );
    }

    /**
     * Sets a value of property IsPartOf from an instance of Thing
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with
     * no minCardinality or minCardinality == 1.
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set3static]
     */
    public static void setIsPartOf( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
        Base.set( model, instanceResource, ISPARTOF, value );
    }

    /**
     * Sets a value of property IsPartOf from an instance of Thing
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for
     * properties with
     * no minCardinality or minCardinality == 1.
     * 
     * @param value
     *            the value to be added
     * 
     *            [Generated from RDFReactor template rule #set4dynamic]
     */
    public void setIsPartOf( SIOCThing value ) {
        Base.set( this.model, this.getResource(), ISPARTOF, value );
    }

    /**
     * Removes a value of property IsPartOf as an RDF2Go node
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1static]
     */
    public static void removeIsPartOf( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( model, instanceResource, ISPARTOF, value );
    }

    /**
     * Removes a value of property IsPartOf as an RDF2Go node
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove1dynamic]
     */
    public void
 removeIsPartOf( org.ontoware.rdf2go.model.node.Node value ) {
        Base.remove( this.model, this.getResource(), ISPARTOF, value );
    }

    /**
     * Removes a value of property IsPartOf given as an instance of Thing
     * 
     * @param model
     *            an RDF2Go model
     * @param resource
     *            an RDF2Go resource
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove3static]
     */
    public static void removeIsPartOf( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
        Base.remove( model, instanceResource, ISPARTOF, value );
    }

    /**
     * Removes a value of property IsPartOf given as an instance of Thing
     * 
     * @param value
     *            the value to be removed
     * 
     *            [Generated from RDFReactor template rule #remove4dynamic]
     */
    public void removeIsPartOf( SIOCThing value ) {
        Base.remove( this.model, this.getResource(), ISPARTOF, value );
    }

    /**
     * Removes all values of property IsPartOf * @param model an RDF2Go model
     * 
     * @param resource
     *            an RDF2Go resource
     * 
     *            [Generated from RDFReactor template rule #removeall1static]
     */
    public static void removeAllIsPartOf( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        Base.removeAll( model, instanceResource, ISPARTOF );
    }

    /**
     * Removes all values of property IsPartOf *
     * [Generated from RDFReactor template rule #removeall1dynamic]
     */
    public void removeAllIsPartOf() {
        Base.removeAll( this.model, this.getResource(), ISPARTOF );
    }
}