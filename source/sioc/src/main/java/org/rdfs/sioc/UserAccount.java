/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) on 21.12.12 17:00
 */
package org.rdfs.sioc;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

import com.xmlns.foaf.Agent;
import com.xmlns.foaf.OnlineAccount;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> Accountof </li>
 *   <li> Administratorof </li>
 *   <li> Avatar </li>
 *   <li> Creatorof </li>
 *   <li> Email </li>
 *   <li> Emailsha1 </li>
 *   <li> Follows </li>
 *   <li> Memberof </li>
 *   <li> Moderatorof </li>
 *   <li> Modifierof </li>
 *   <li> Ownerof </li>
 *   <li> Subscriberof </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 21.12.12 17:00
 */
public class UserAccount extends OnlineAccount {

    /**
     * 
     */
    private static final long serialVersionUID = -7551135349428975021L;

    /** http://rdfs.org/sioc/ns#UserAccount */
	public static final URI RDFS_CLASS = new URIImpl("http://rdfs.org/sioc/ns#UserAccount", false);

    /** http://rdfs.org/sioc/ns#account_of */
	public static final URI ACCOUNTOF = new URIImpl("http://rdfs.org/sioc/ns#account_of",false);

    /** http://rdfs.org/sioc/ns#administrator_of */
	public static final URI ADMINISTRATOROF = new URIImpl("http://rdfs.org/sioc/ns#administrator_of",false);

    /** http://rdfs.org/sioc/ns#avatar */
	public static final URI AVATAR = new URIImpl("http://rdfs.org/sioc/ns#avatar",false);

    /** http://rdfs.org/sioc/ns#creator_of */
	public static final URI CREATOROF = new URIImpl("http://rdfs.org/sioc/ns#creator_of",false);

    /** http://rdfs.org/sioc/ns#email */
	public static final URI EMAIL = new URIImpl("http://rdfs.org/sioc/ns#email",false);

    /** http://rdfs.org/sioc/ns#email_sha1 */
	public static final URI EMAILSHA1 = new URIImpl("http://rdfs.org/sioc/ns#email_sha1",false);

    /** http://rdfs.org/sioc/ns#follows */
	public static final URI FOLLOWS = new URIImpl("http://rdfs.org/sioc/ns#follows",false);

    /** http://rdfs.org/sioc/ns#member_of */
	public static final URI MEMBEROF = new URIImpl("http://rdfs.org/sioc/ns#member_of",false);

    /** http://rdfs.org/sioc/ns#moderator_of */
	public static final URI MODERATOROF = new URIImpl("http://rdfs.org/sioc/ns#moderator_of",false);

    /** http://rdfs.org/sioc/ns#modifier_of */
	public static final URI MODIFIEROF = new URIImpl("http://rdfs.org/sioc/ns#modifier_of",false);

    /** http://rdfs.org/sioc/ns#owner_of */
	public static final URI OWNEROF = new URIImpl("http://rdfs.org/sioc/ns#owner_of",false);

    /** http://rdfs.org/sioc/ns#subscriber_of */
	public static final URI SUBSCRIBEROF = new URIImpl("http://rdfs.org/sioc/ns#subscriber_of",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://rdfs.org/sioc/ns#account_of",false),
      new URIImpl("http://rdfs.org/sioc/ns#administrator_of",false),
      new URIImpl("http://rdfs.org/sioc/ns#avatar",false),
      new URIImpl("http://rdfs.org/sioc/ns#creator_of",false),
      new URIImpl("http://rdfs.org/sioc/ns#email",false),
      new URIImpl("http://rdfs.org/sioc/ns#email_sha1",false),
      new URIImpl("http://rdfs.org/sioc/ns#follows",false),
      new URIImpl("http://rdfs.org/sioc/ns#member_of",false),
      new URIImpl("http://rdfs.org/sioc/ns#moderator_of",false),
      new URIImpl("http://rdfs.org/sioc/ns#modifier_of",false),
      new URIImpl("http://rdfs.org/sioc/ns#owner_of",false),
      new URIImpl("http://rdfs.org/sioc/ns#subscriber_of",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected UserAccount ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public UserAccount ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public UserAccount ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public UserAccount ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public UserAccount ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of UserAccount  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static UserAccount  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, UserAccount.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://rdfs.org/sioc/ns#UserAccount).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends UserAccount> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, UserAccount.class );
	}

    /**
	 * Remove rdf:type UserAccount from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Creator' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllCreator_Inverse( Model model, Object objectValue ) {
		return Base.getAll_Inverse(model, SIOCThing.CREATOR, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Creator' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllCreator_Inverse() {
		return Base.getAll_Inverse(this.model, SIOCThing.CREATOR, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Creator' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllCreator_Inverse_as( Model model, Object objectValue ) {
		return Base.getAll_Inverse_as(model, SIOCThing.CREATOR, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Owner' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllOwner_Inverse( Model model, Object objectValue ) {
		return Base.getAll_Inverse(model, SIOCThing.OWNER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Owner' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllOwner_Inverse() {
		return Base.getAll_Inverse(this.model, SIOCThing.OWNER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Owner' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllOwner_Inverse_as( Model model, Object objectValue ) {
		return Base.getAll_Inverse_as(model, SIOCThing.OWNER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Subscriber' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllSubscriber_Inverse( Model model, Object objectValue ) {
		return Base.getAll_Inverse(model, Container.SUBSCRIBER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Subscriber' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllSubscriber_Inverse() {
		return Base.getAll_Inverse(this.model, Container.SUBSCRIBER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Subscriber' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllSubscriber_Inverse_as( Model model, Object objectValue ) {
		return Base.getAll_Inverse_as(model, Container.SUBSCRIBER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Member' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllMember_Inverse( Model model, Object objectValue ) {
		return Base.getAll_Inverse(model, Usergroup.MEMBER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Member' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllMember_Inverse() {
		return Base.getAll_Inverse(this.model, Usergroup.MEMBER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Member' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllMember_Inverse_as( Model model, Object objectValue ) {
		return Base.getAll_Inverse_as(model, Usergroup.MEMBER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Administrator' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllAdministrator_Inverse( Model model, Object objectValue ) {
		return Base.getAll_Inverse(model, Site.ADMINISTRATOR, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Administrator' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllAdministrator_Inverse() {
		return Base.getAll_Inverse(this.model, Site.ADMINISTRATOR, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Administrator' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllAdministrator_Inverse_as( Model model, Object objectValue ) {
		return Base.getAll_Inverse_as(model, Site.ADMINISTRATOR, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Moderator' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllModerator_Inverse( Model model, Object objectValue ) {
		return Base.getAll_Inverse(model, Forum.MODERATOR, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Moderator' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllModerator_Inverse() {
		return Base.getAll_Inverse(this.model, Forum.MODERATOR, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Moderator' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllModerator_Inverse_as( Model model, Object objectValue ) {
		return Base.getAll_Inverse_as(model, Forum.MODERATOR, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Modifier' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllModifier_Inverse( Model model, Object objectValue ) {
		return Base.getAll_Inverse(model, Item.MODIFIER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Modifier' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllModifier_Inverse() {
		return Base.getAll_Inverse(this.model, Item.MODIFIER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Modifier' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllModifier_Inverse_as( Model model, Object objectValue ) {
		return Base.getAll_Inverse_as(model, Item.MODIFIER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Follows' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllFollows_Inverse( Model model, Object objectValue ) {
		return Base.getAll_Inverse(model, UserAccount.FOLLOWS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Follows' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Resource>
            getAllFollows_Inverse() {
		return Base.getAll_Inverse(this.model, UserAccount.FOLLOWS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Follows' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Resource>
            getAllFollows_Inverse_as( Model model, Object objectValue ) {
		return Base.getAll_Inverse_as(model, UserAccount.FOLLOWS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@60b964af has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasAccountof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, ACCOUNTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@60b964af has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasAccountof() {
		return Base.has(this.model, this.getResource(), ACCOUNTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@60b964af has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasAccountof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ACCOUNTOF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@60b964af has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasAccountof( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ACCOUNTOF, value);
	}

     /**
     * Get all values of property Accountof as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllAccountof_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, ACCOUNTOF);
	}
	
    /**
     * Get all values of property Accountof as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllAccountof_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, ACCOUNTOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Accountof as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllAccountof_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ACCOUNTOF);
	}

    /**
     * Get all values of property Accountof as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllAccountof_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ACCOUNTOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Accountof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<Agent> getAllAccountof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, ACCOUNTOF, Agent.class);
	}
	
    /**
     * Get all values of property Accountof as a ReactorResult of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<Agent> getAllAccountof_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, ACCOUNTOF, Agent.class);
	}

    /**
     * Get all values of property Accountof     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<Agent> getAllAccountof() {
		return Base.getAll(this.model, this.getResource(), ACCOUNTOF, Agent.class);
	}

    /**
     * Get all values of property Accountof as a ReactorResult of Agent 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<Agent> getAllAccountof_as() {
		return Base.getAll_as(this.model, this.getResource(), ACCOUNTOF, Agent.class);
	}
 
    /**
     * Adds a value to property Accountof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addAccountof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, ACCOUNTOF, value);
	}
	
    /**
     * Adds a value to property Accountof as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addAccountof( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), ACCOUNTOF, value);
	}
    /**
     * Adds a value to property Accountof from an instance of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void addAccountof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Agent value ) {
		Base.add(model, instanceResource, ACCOUNTOF, value);
	}
	
    /**
     * Adds a value to property Accountof from an instance of Agent 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addAccountof( Agent value ) {
		Base.add(this.model, this.getResource(), ACCOUNTOF, value);
	}
  

    /**
     * Sets a value of property Accountof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setAccountof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, ACCOUNTOF, value);
	}
	
    /**
     * Sets a value of property Accountof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setAccountof( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), ACCOUNTOF, value);
	}
    /**
     * Sets a value of property Accountof from an instance of Agent 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void setAccountof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Agent value ) {
		Base.set(model, instanceResource, ACCOUNTOF, value);
	}
	
    /**
     * Sets a value of property Accountof from an instance of Agent 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setAccountof( Agent value ) {
		Base.set(this.model, this.getResource(), ACCOUNTOF, value);
	}
  


    /**
     * Removes a value of property Accountof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeAccountof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, ACCOUNTOF, value);
	}
	
    /**
     * Removes a value of property Accountof as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeAccountof( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), ACCOUNTOF, value);
	}
    /**
     * Removes a value of property Accountof given as an instance of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void removeAccountof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Agent value ) {
		Base.remove(model, instanceResource, ACCOUNTOF, value);
	}
	
    /**
     * Removes a value of property Accountof given as an instance of Agent 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeAccountof( Agent value ) {
		Base.remove(this.model, this.getResource(), ACCOUNTOF, value);
	}
  
    /**
     * Removes all values of property Accountof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllAccountof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, ACCOUNTOF);
	}
	
    /**
     * Removes all values of property Accountof	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllAccountof() {
		Base.removeAll(this.model, this.getResource(), ACCOUNTOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18010d30 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasAdministratorof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, ADMINISTRATOROF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18010d30 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasAdministratorof() {
		return Base.has(this.model, this.getResource(), ADMINISTRATOROF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18010d30 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasAdministratorof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ADMINISTRATOROF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18010d30 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean
            hasAdministratorof( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ADMINISTRATOROF, value);
	}

     /**
     * Get all values of property Administratorof as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllAdministratorof_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, ADMINISTRATOROF);
	}
	
    /**
     * Get all values of property Administratorof as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllAdministratorof_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, ADMINISTRATOROF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Administratorof as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllAdministratorof_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ADMINISTRATOROF);
	}

    /**
     * Get all values of property Administratorof as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllAdministratorof_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ADMINISTRATOROF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Administratorof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<Site> getAllAdministratorof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, ADMINISTRATOROF, Site.class);
	}
	
    /**
     * Get all values of property Administratorof as a ReactorResult of Site 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<Site> getAllAdministratorof_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, ADMINISTRATOROF, Site.class);
	}

    /**
     * Get all values of property Administratorof     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<Site> getAllAdministratorof() {
		return Base.getAll(this.model, this.getResource(), ADMINISTRATOROF, Site.class);
	}

    /**
     * Get all values of property Administratorof as a ReactorResult of Site 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<Site> getAllAdministratorof_as() {
		return Base.getAll_as(this.model, this.getResource(), ADMINISTRATOROF, Site.class);
	}
 
    /**
     * Adds a value to property Administratorof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addAdministratorof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, ADMINISTRATOROF, value);
	}
	
    /**
     * Adds a value to property Administratorof as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addAdministratorof( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), ADMINISTRATOROF, value);
	}
    /**
     * Adds a value to property Administratorof from an instance of Site 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void
            addAdministratorof( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Site value ) {
		Base.add(model, instanceResource, ADMINISTRATOROF, value);
	}
	
    /**
     * Adds a value to property Administratorof from an instance of Site 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addAdministratorof( Site value ) {
		Base.add(this.model, this.getResource(), ADMINISTRATOROF, value);
	}
  

    /**
     * Sets a value of property Administratorof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setAdministratorof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, ADMINISTRATOROF, value);
	}
	
    /**
     * Sets a value of property Administratorof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setAdministratorof( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), ADMINISTRATOROF, value);
	}
    /**
     * Sets a value of property Administratorof from an instance of Site 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void
            setAdministratorof( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Site value ) {
		Base.set(model, instanceResource, ADMINISTRATOROF, value);
	}
	
    /**
     * Sets a value of property Administratorof from an instance of Site 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setAdministratorof( Site value ) {
		Base.set(this.model, this.getResource(), ADMINISTRATOROF, value);
	}
  


    /**
     * Removes a value of property Administratorof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeAdministratorof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, ADMINISTRATOROF, value);
	}
	
    /**
     * Removes a value of property Administratorof as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void
            removeAdministratorof( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), ADMINISTRATOROF, value);
	}
    /**
     * Removes a value of property Administratorof given as an instance of Site 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void
            removeAdministratorof( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Site value ) {
		Base.remove(model, instanceResource, ADMINISTRATOROF, value);
	}
	
    /**
     * Removes a value of property Administratorof given as an instance of Site 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeAdministratorof( Site value ) {
		Base.remove(this.model, this.getResource(), ADMINISTRATOROF, value);
	}
  
    /**
     * Removes all values of property Administratorof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllAdministratorof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, ADMINISTRATOROF);
	}
	
    /**
     * Removes all values of property Administratorof	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllAdministratorof() {
		Base.removeAll(this.model, this.getResource(), ADMINISTRATOROF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d1841f8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasAvatar( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, AVATAR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d1841f8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasAvatar() {
		return Base.has(this.model, this.getResource(), AVATAR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d1841f8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasAvatar( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, AVATAR, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d1841f8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasAvatar( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), AVATAR, value);
	}

     /**
     * Get all values of property Avatar as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllAvatar_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, AVATAR);
	}
	
    /**
     * Get all values of property Avatar as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllAvatar_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, AVATAR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Avatar as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllAvatar_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), AVATAR);
	}

    /**
     * Get all values of property Avatar as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllAvatar_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), AVATAR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Avatar     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<SIOCThing> getAllAvatar( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, AVATAR, SIOCThing.class);
	}
	
    /**
     * Get all values of property Avatar as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<SIOCThing> getAllAvatar_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, AVATAR, SIOCThing.class);
	}

    /**
     * Get all values of property Avatar     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<SIOCThing> getAllAvatar() {
		return Base.getAll(this.model, this.getResource(), AVATAR, SIOCThing.class);
	}

    /**
     * Get all values of property Avatar as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<SIOCThing> getAllAvatar_as() {
		return Base.getAll_as(this.model, this.getResource(), AVATAR, SIOCThing.class);
	}
 
    /**
     * Adds a value to property Avatar as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addAvatar( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, AVATAR, value);
	}
	
    /**
     * Adds a value to property Avatar as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addAvatar( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), AVATAR, value);
	}
    /**
     * Adds a value to property Avatar from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void addAvatar( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
		Base.add(model, instanceResource, AVATAR, value);
	}
	
    /**
     * Adds a value to property Avatar from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addAvatar( SIOCThing value ) {
		Base.add(this.model, this.getResource(), AVATAR, value);
	}
  

    /**
     * Sets a value of property Avatar from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setAvatar( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, AVATAR, value);
	}
	
    /**
     * Sets a value of property Avatar from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setAvatar( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), AVATAR, value);
	}
    /**
     * Sets a value of property Avatar from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void setAvatar( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
		Base.set(model, instanceResource, AVATAR, value);
	}
	
    /**
     * Sets a value of property Avatar from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setAvatar( SIOCThing value ) {
		Base.set(this.model, this.getResource(), AVATAR, value);
	}
  


    /**
     * Removes a value of property Avatar as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeAvatar( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, AVATAR, value);
	}
	
    /**
     * Removes a value of property Avatar as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeAvatar( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), AVATAR, value);
	}
    /**
     * Removes a value of property Avatar given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void removeAvatar( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
		Base.remove(model, instanceResource, AVATAR, value);
	}
	
    /**
     * Removes a value of property Avatar given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeAvatar( SIOCThing value ) {
		Base.remove(this.model, this.getResource(), AVATAR, value);
	}
  
    /**
     * Removes all values of property Avatar     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllAvatar( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, AVATAR);
	}
	
    /**
     * Removes all values of property Avatar	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllAvatar() {
		Base.removeAll(this.model, this.getResource(), AVATAR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2199ea11 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasCreatorof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, CREATOROF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2199ea11 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasCreatorof() {
		return Base.has(this.model, this.getResource(), CREATOROF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2199ea11 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasCreatorof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CREATOROF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2199ea11 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasCreatorof( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CREATOROF, value);
	}

     /**
     * Get all values of property Creatorof as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllCreatorof_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, CREATOROF);
	}
	
    /**
     * Get all values of property Creatorof as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllCreatorof_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, CREATOROF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Creatorof as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllCreatorof_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CREATOROF);
	}

    /**
     * Get all values of property Creatorof as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllCreatorof_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CREATOROF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Creatorof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<SIOCThing> getAllCreatorof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, CREATOROF, SIOCThing.class);
	}
	
    /**
     * Get all values of property Creatorof as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<SIOCThing> getAllCreatorof_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, CREATOROF, SIOCThing.class);
	}

    /**
     * Get all values of property Creatorof     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<SIOCThing> getAllCreatorof() {
		return Base.getAll(this.model, this.getResource(), CREATOROF, SIOCThing.class);
	}

    /**
     * Get all values of property Creatorof as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<SIOCThing> getAllCreatorof_as() {
		return Base.getAll_as(this.model, this.getResource(), CREATOROF, SIOCThing.class);
	}
 
    /**
     * Adds a value to property Creatorof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addCreatorof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, CREATOROF, value);
	}
	
    /**
     * Adds a value to property Creatorof as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addCreatorof( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), CREATOROF, value);
	}
    /**
     * Adds a value to property Creatorof from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void addCreatorof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
		Base.add(model, instanceResource, CREATOROF, value);
	}
	
    /**
     * Adds a value to property Creatorof from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addCreatorof( SIOCThing value ) {
		Base.add(this.model, this.getResource(), CREATOROF, value);
	}
  

    /**
     * Sets a value of property Creatorof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setCreatorof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, CREATOROF, value);
	}
	
    /**
     * Sets a value of property Creatorof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setCreatorof( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), CREATOROF, value);
	}
    /**
     * Sets a value of property Creatorof from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void setCreatorof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
		Base.set(model, instanceResource, CREATOROF, value);
	}
	
    /**
     * Sets a value of property Creatorof from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setCreatorof( SIOCThing value ) {
		Base.set(this.model, this.getResource(), CREATOROF, value);
	}
  


    /**
     * Removes a value of property Creatorof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeCreatorof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, CREATOROF, value);
	}
	
    /**
     * Removes a value of property Creatorof as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeCreatorof( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), CREATOROF, value);
	}
    /**
     * Removes a value of property Creatorof given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void removeCreatorof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
		Base.remove(model, instanceResource, CREATOROF, value);
	}
	
    /**
     * Removes a value of property Creatorof given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeCreatorof( SIOCThing value ) {
		Base.remove(this.model, this.getResource(), CREATOROF, value);
	}
  
    /**
     * Removes all values of property Creatorof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllCreatorof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, CREATOROF);
	}
	
    /**
     * Removes all values of property Creatorof	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllCreatorof() {
		Base.removeAll(this.model, this.getResource(), CREATOROF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@312ad978 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasEmail( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, EMAIL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@312ad978 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasEmail() {
		return Base.has(this.model, this.getResource(), EMAIL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@312ad978 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasEmail( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EMAIL, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@312ad978 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasEmail( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EMAIL, value);
	}

     /**
     * Get all values of property Email as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllEmail_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, EMAIL);
	}
	
    /**
     * Get all values of property Email as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllEmail_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, EMAIL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Email as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllEmail_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EMAIL);
	}

    /**
     * Get all values of property Email as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllEmail_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EMAIL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Email     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<SIOCThing> getAllEmail( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll( model, instanceResource, EMAIL, SIOCThing.class );
	}
	
    /**
     * Get all values of property Email as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<SIOCThing> getAllEmail_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
        return Base.getAll_as( model, instanceResource, EMAIL, SIOCThing.class );
	}

    /**
     * Get all values of property Email     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<SIOCThing> getAllEmail() {
        return Base.getAll( this.model, this.getResource(), EMAIL,
                SIOCThing.class );
	}

    /**
     * Get all values of property Email as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<SIOCThing> getAllEmail_as() {
        return Base.getAll_as( this.model, this.getResource(), EMAIL,
                SIOCThing.class );
	}
 
    /**
     * Adds a value to property Email as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addEmail( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, EMAIL, value);
	}
	
    /**
     * Adds a value to property Email as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addEmail( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), EMAIL, value);
	}
    /**
     * Adds a value to property Email from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void addEmail( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
		Base.add(model, instanceResource, EMAIL, value);
	}
	
    /**
     * Adds a value to property Email from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addEmail( SIOCThing value ) {
		Base.add(this.model, this.getResource(), EMAIL, value);
	}
  

    /**
     * Sets a value of property Email from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setEmail( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, EMAIL, value);
	}
	
    /**
     * Sets a value of property Email from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setEmail( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), EMAIL, value);
	}
    /**
     * Sets a value of property Email from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void setEmail( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
 SIOCThing value ) {
		Base.set(model, instanceResource, EMAIL, value);
	}
	
    /**
     * Sets a value of property Email from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setEmail( SIOCThing value ) {
		Base.set(this.model, this.getResource(), EMAIL, value);
	}
  


    /**
     * Removes a value of property Email as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeEmail( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, EMAIL, value);
	}
	
    /**
     * Removes a value of property Email as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeEmail( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), EMAIL, value);
	}
    /**
     * Removes a value of property Email given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void removeEmail( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
 SIOCThing value ) {
		Base.remove(model, instanceResource, EMAIL, value);
	}
	
    /**
     * Removes a value of property Email given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeEmail( SIOCThing value ) {
		Base.remove(this.model, this.getResource(), EMAIL, value);
	}
  
    /**
     * Removes all values of property Email     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllEmail( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, EMAIL);
	}
	
    /**
     * Removes all values of property Email	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllEmail() {
		Base.removeAll(this.model, this.getResource(), EMAIL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f4da460 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasEmailsha1( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, EMAILSHA1);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f4da460 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasEmailsha1() {
		return Base.has(this.model, this.getResource(), EMAILSHA1);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f4da460 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasEmailsha1( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EMAILSHA1, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f4da460 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasEmailsha1( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EMAILSHA1, value);
	}

     /**
     * Get all values of property Emailsha1 as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllEmailsha1_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, EMAILSHA1);
	}
	
    /**
     * Get all values of property Emailsha1 as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllEmailsha1_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, EMAILSHA1, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Emailsha1 as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllEmailsha1_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EMAILSHA1);
	}

    /**
     * Get all values of property Emailsha1 as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllEmailsha1_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EMAILSHA1, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Emailsha1     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<java.lang.String> getAllEmailsha1(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, EMAILSHA1, java.lang.String.class);
	}
	
    /**
     * Get all values of property Emailsha1 as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<java.lang.String> getAllEmailsha1_as(
            Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, EMAILSHA1, java.lang.String.class);
	}

    /**
     * Get all values of property Emailsha1     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<java.lang.String> getAllEmailsha1() {
		return Base.getAll(this.model, this.getResource(), EMAILSHA1, java.lang.String.class);
	}

    /**
     * Get all values of property Emailsha1 as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<java.lang.String> getAllEmailsha1_as() {
		return Base.getAll_as(this.model, this.getResource(), EMAILSHA1, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Emailsha1 as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addEmailsha1( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, EMAILSHA1, value);
	}
	
    /**
     * Adds a value to property Emailsha1 as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addEmailsha1( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), EMAILSHA1, value);
	}
    /**
     * Adds a value to property Emailsha1 from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void addEmailsha1( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
		Base.add(model, instanceResource, EMAILSHA1, value);
	}
	
    /**
     * Adds a value to property Emailsha1 from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addEmailsha1( java.lang.String value ) {
		Base.add(this.model, this.getResource(), EMAILSHA1, value);
	}
  

    /**
     * Sets a value of property Emailsha1 from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setEmailsha1( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, EMAILSHA1, value);
	}
	
    /**
     * Sets a value of property Emailsha1 from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setEmailsha1( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), EMAILSHA1, value);
	}
    /**
     * Sets a value of property Emailsha1 from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void setEmailsha1( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
		Base.set(model, instanceResource, EMAILSHA1, value);
	}
	
    /**
     * Sets a value of property Emailsha1 from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setEmailsha1( java.lang.String value ) {
		Base.set(this.model, this.getResource(), EMAILSHA1, value);
	}
  


    /**
     * Removes a value of property Emailsha1 as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeEmailsha1( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, EMAILSHA1, value);
	}
	
    /**
     * Removes a value of property Emailsha1 as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeEmailsha1( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), EMAILSHA1, value);
	}
    /**
     * Removes a value of property Emailsha1 given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void removeEmailsha1( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            java.lang.String value ) {
		Base.remove(model, instanceResource, EMAILSHA1, value);
	}
	
    /**
     * Removes a value of property Emailsha1 given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeEmailsha1( java.lang.String value ) {
		Base.remove(this.model, this.getResource(), EMAILSHA1, value);
	}
  
    /**
     * Removes all values of property Emailsha1     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllEmailsha1( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, EMAILSHA1);
	}
	
    /**
     * Removes all values of property Emailsha1	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllEmailsha1() {
		Base.removeAll(this.model, this.getResource(), EMAILSHA1);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@173bb17a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasFollows( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, FOLLOWS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@173bb17a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasFollows() {
		return Base.has(this.model, this.getResource(), FOLLOWS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@173bb17a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasFollows( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FOLLOWS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@173bb17a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasFollows( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FOLLOWS, value);
	}

     /**
     * Get all values of property Follows as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllFollows_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, FOLLOWS);
	}
	
    /**
     * Get all values of property Follows as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllFollows_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, FOLLOWS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Follows as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllFollows_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FOLLOWS);
	}

    /**
     * Get all values of property Follows as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllFollows_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FOLLOWS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Follows     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<UserAccount> getAllFollows( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, FOLLOWS, UserAccount.class);
	}
	
    /**
     * Get all values of property Follows as a ReactorResult of UserAccount 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<UserAccount> getAllFollows_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, FOLLOWS, UserAccount.class);
	}

    /**
     * Get all values of property Follows     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<UserAccount> getAllFollows() {
		return Base.getAll(this.model, this.getResource(), FOLLOWS, UserAccount.class);
	}

    /**
     * Get all values of property Follows as a ReactorResult of UserAccount 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<UserAccount> getAllFollows_as() {
		return Base.getAll_as(this.model, this.getResource(), FOLLOWS, UserAccount.class);
	}
 
    /**
     * Adds a value to property Follows as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addFollows( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, FOLLOWS, value);
	}
	
    /**
     * Adds a value to property Follows as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addFollows( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), FOLLOWS, value);
	}
    /**
     * Adds a value to property Follows from an instance of UserAccount 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void addFollows( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            UserAccount value ) {
		Base.add(model, instanceResource, FOLLOWS, value);
	}
	
    /**
     * Adds a value to property Follows from an instance of UserAccount 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addFollows( UserAccount value ) {
		Base.add(this.model, this.getResource(), FOLLOWS, value);
	}
  

    /**
     * Sets a value of property Follows from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setFollows( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, FOLLOWS, value);
	}
	
    /**
     * Sets a value of property Follows from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setFollows( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), FOLLOWS, value);
	}
    /**
     * Sets a value of property Follows from an instance of UserAccount 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void setFollows( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            UserAccount value ) {
		Base.set(model, instanceResource, FOLLOWS, value);
	}
	
    /**
     * Sets a value of property Follows from an instance of UserAccount 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setFollows( UserAccount value ) {
		Base.set(this.model, this.getResource(), FOLLOWS, value);
	}
  


    /**
     * Removes a value of property Follows as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeFollows( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, FOLLOWS, value);
	}
	
    /**
     * Removes a value of property Follows as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeFollows( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), FOLLOWS, value);
	}
    /**
     * Removes a value of property Follows given as an instance of UserAccount 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void removeFollows( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            UserAccount value ) {
		Base.remove(model, instanceResource, FOLLOWS, value);
	}
	
    /**
     * Removes a value of property Follows given as an instance of UserAccount 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeFollows( UserAccount value ) {
		Base.remove(this.model, this.getResource(), FOLLOWS, value);
	}
  
    /**
     * Removes all values of property Follows     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllFollows( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, FOLLOWS);
	}
	
    /**
     * Removes all values of property Follows	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllFollows() {
		Base.removeAll(this.model, this.getResource(), FOLLOWS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3cd5cdab has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasMemberof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, MEMBEROF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3cd5cdab has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasMemberof() {
		return Base.has(this.model, this.getResource(), MEMBEROF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3cd5cdab has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasMemberof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MEMBEROF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3cd5cdab has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasMemberof( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MEMBEROF, value);
	}

     /**
     * Get all values of property Memberof as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllMemberof_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, MEMBEROF);
	}
	
    /**
     * Get all values of property Memberof as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllMemberof_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, MEMBEROF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Memberof as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllMemberof_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MEMBEROF);
	}

    /**
     * Get all values of property Memberof as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllMemberof_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MEMBEROF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Memberof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<Usergroup> getAllMemberof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, MEMBEROF, Usergroup.class);
	}
	
    /**
     * Get all values of property Memberof as a ReactorResult of Usergroup 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<Usergroup> getAllMemberof_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, MEMBEROF, Usergroup.class);
	}

    /**
     * Get all values of property Memberof     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<Usergroup> getAllMemberof() {
		return Base.getAll(this.model, this.getResource(), MEMBEROF, Usergroup.class);
	}

    /**
     * Get all values of property Memberof as a ReactorResult of Usergroup 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<Usergroup> getAllMemberof_as() {
		return Base.getAll_as(this.model, this.getResource(), MEMBEROF, Usergroup.class);
	}
 
    /**
     * Adds a value to property Memberof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addMemberof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, MEMBEROF, value);
	}
	
    /**
     * Adds a value to property Memberof as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addMemberof( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), MEMBEROF, value);
	}
    /**
     * Adds a value to property Memberof from an instance of Usergroup 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void addMemberof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Usergroup value ) {
		Base.add(model, instanceResource, MEMBEROF, value);
	}
	
    /**
     * Adds a value to property Memberof from an instance of Usergroup 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addMemberof( Usergroup value ) {
		Base.add(this.model, this.getResource(), MEMBEROF, value);
	}
  

    /**
     * Sets a value of property Memberof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setMemberof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, MEMBEROF, value);
	}
	
    /**
     * Sets a value of property Memberof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setMemberof( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), MEMBEROF, value);
	}
    /**
     * Sets a value of property Memberof from an instance of Usergroup 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void setMemberof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Usergroup value ) {
		Base.set(model, instanceResource, MEMBEROF, value);
	}
	
    /**
     * Sets a value of property Memberof from an instance of Usergroup 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setMemberof( Usergroup value ) {
		Base.set(this.model, this.getResource(), MEMBEROF, value);
	}
  


    /**
     * Removes a value of property Memberof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeMemberof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, MEMBEROF, value);
	}
	
    /**
     * Removes a value of property Memberof as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeMemberof( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), MEMBEROF, value);
	}
    /**
     * Removes a value of property Memberof given as an instance of Usergroup 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void removeMemberof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Usergroup value ) {
		Base.remove(model, instanceResource, MEMBEROF, value);
	}
	
    /**
     * Removes a value of property Memberof given as an instance of Usergroup 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeMemberof( Usergroup value ) {
		Base.remove(this.model, this.getResource(), MEMBEROF, value);
	}
  
    /**
     * Removes all values of property Memberof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllMemberof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, MEMBEROF);
	}
	
    /**
     * Removes all values of property Memberof	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllMemberof() {
		Base.removeAll(this.model, this.getResource(), MEMBEROF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@51fdfe5 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasModeratorof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, MODERATOROF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@51fdfe5 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasModeratorof() {
		return Base.has(this.model, this.getResource(), MODERATOROF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@51fdfe5 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasModeratorof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MODERATOROF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@51fdfe5 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasModeratorof( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MODERATOROF, value);
	}

     /**
     * Get all values of property Moderatorof as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllModeratorof_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, MODERATOROF);
	}
	
    /**
     * Get all values of property Moderatorof as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllModeratorof_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, MODERATOROF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Moderatorof as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllModeratorof_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MODERATOROF);
	}

    /**
     * Get all values of property Moderatorof as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllModeratorof_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MODERATOROF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Moderatorof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<Forum> getAllModeratorof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, MODERATOROF, Forum.class);
	}
	
    /**
     * Get all values of property Moderatorof as a ReactorResult of Forum 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<Forum> getAllModeratorof_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, MODERATOROF, Forum.class);
	}

    /**
     * Get all values of property Moderatorof     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<Forum> getAllModeratorof() {
		return Base.getAll(this.model, this.getResource(), MODERATOROF, Forum.class);
	}

    /**
     * Get all values of property Moderatorof as a ReactorResult of Forum 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<Forum> getAllModeratorof_as() {
		return Base.getAll_as(this.model, this.getResource(), MODERATOROF, Forum.class);
	}
 
    /**
     * Adds a value to property Moderatorof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addModeratorof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, MODERATOROF, value);
	}
	
    /**
     * Adds a value to property Moderatorof as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addModeratorof( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), MODERATOROF, value);
	}
    /**
     * Adds a value to property Moderatorof from an instance of Forum 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void addModeratorof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Forum value ) {
		Base.add(model, instanceResource, MODERATOROF, value);
	}
	
    /**
     * Adds a value to property Moderatorof from an instance of Forum 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addModeratorof( Forum value ) {
		Base.add(this.model, this.getResource(), MODERATOROF, value);
	}
  

    /**
     * Sets a value of property Moderatorof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setModeratorof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, MODERATOROF, value);
	}
	
    /**
     * Sets a value of property Moderatorof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setModeratorof( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), MODERATOROF, value);
	}
    /**
     * Sets a value of property Moderatorof from an instance of Forum 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void setModeratorof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Forum value ) {
		Base.set(model, instanceResource, MODERATOROF, value);
	}
	
    /**
     * Sets a value of property Moderatorof from an instance of Forum 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setModeratorof( Forum value ) {
		Base.set(this.model, this.getResource(), MODERATOROF, value);
	}
  


    /**
     * Removes a value of property Moderatorof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeModeratorof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, MODERATOROF, value);
	}
	
    /**
     * Removes a value of property Moderatorof as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeModeratorof( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), MODERATOROF, value);
	}
    /**
     * Removes a value of property Moderatorof given as an instance of Forum 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void removeModeratorof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Forum value ) {
		Base.remove(model, instanceResource, MODERATOROF, value);
	}
	
    /**
     * Removes a value of property Moderatorof given as an instance of Forum 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeModeratorof( Forum value ) {
		Base.remove(this.model, this.getResource(), MODERATOROF, value);
	}
  
    /**
     * Removes all values of property Moderatorof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllModeratorof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, MODERATOROF);
	}
	
    /**
     * Removes all values of property Moderatorof	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllModeratorof() {
		Base.removeAll(this.model, this.getResource(), MODERATOROF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61e7f8de has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasModifierof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, MODIFIEROF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61e7f8de has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasModifierof() {
		return Base.has(this.model, this.getResource(), MODIFIEROF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61e7f8de has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasModifierof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MODIFIEROF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61e7f8de has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasModifierof( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MODIFIEROF, value);
	}

     /**
     * Get all values of property Modifierof as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllModifierof_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, MODIFIEROF);
	}
	
    /**
     * Get all values of property Modifierof as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllModifierof_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, MODIFIEROF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Modifierof as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllModifierof_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MODIFIEROF);
	}

    /**
     * Get all values of property Modifierof as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllModifierof_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MODIFIEROF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Modifierof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<Item> getAllModifierof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, MODIFIEROF, Item.class);
	}
	
    /**
     * Get all values of property Modifierof as a ReactorResult of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<Item> getAllModifierof_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, MODIFIEROF, Item.class);
	}

    /**
     * Get all values of property Modifierof     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<Item> getAllModifierof() {
		return Base.getAll(this.model, this.getResource(), MODIFIEROF, Item.class);
	}

    /**
     * Get all values of property Modifierof as a ReactorResult of Item 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<Item> getAllModifierof_as() {
		return Base.getAll_as(this.model, this.getResource(), MODIFIEROF, Item.class);
	}
 
    /**
     * Adds a value to property Modifierof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addModifierof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, MODIFIEROF, value);
	}
	
    /**
     * Adds a value to property Modifierof as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addModifierof( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), MODIFIEROF, value);
	}
    /**
     * Adds a value to property Modifierof from an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void
            addModifierof( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.add(model, instanceResource, MODIFIEROF, value);
	}
	
    /**
     * Adds a value to property Modifierof from an instance of Item 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addModifierof( Item value ) {
		Base.add(this.model, this.getResource(), MODIFIEROF, value);
	}
  

    /**
     * Sets a value of property Modifierof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setModifierof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, MODIFIEROF, value);
	}
	
    /**
     * Sets a value of property Modifierof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setModifierof( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), MODIFIEROF, value);
	}
    /**
     * Sets a value of property Modifierof from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void
            setModifierof( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.set(model, instanceResource, MODIFIEROF, value);
	}
	
    /**
     * Sets a value of property Modifierof from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setModifierof( Item value ) {
		Base.set(this.model, this.getResource(), MODIFIEROF, value);
	}
  


    /**
     * Removes a value of property Modifierof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeModifierof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, MODIFIEROF, value);
	}
	
    /**
     * Removes a value of property Modifierof as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeModifierof( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), MODIFIEROF, value);
	}
    /**
     * Removes a value of property Modifierof given as an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void
            removeModifierof( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource,
                    Item value ) {
		Base.remove(model, instanceResource, MODIFIEROF, value);
	}
	
    /**
     * Removes a value of property Modifierof given as an instance of Item 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeModifierof( Item value ) {
		Base.remove(this.model, this.getResource(), MODIFIEROF, value);
	}
  
    /**
     * Removes all values of property Modifierof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllModifierof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, MODIFIEROF);
	}
	
    /**
     * Removes all values of property Modifierof	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllModifierof() {
		Base.removeAll(this.model, this.getResource(), MODIFIEROF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@743e4500 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasOwnerof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, OWNEROF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@743e4500 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasOwnerof() {
		return Base.has(this.model, this.getResource(), OWNEROF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@743e4500 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasOwnerof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, OWNEROF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@743e4500 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasOwnerof( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), OWNEROF, value);
	}

     /**
     * Get all values of property Ownerof as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllOwnerof_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, OWNEROF);
	}
	
    /**
     * Get all values of property Ownerof as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllOwnerof_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, OWNEROF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Ownerof as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllOwnerof_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), OWNEROF);
	}

    /**
     * Get all values of property Ownerof as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllOwnerof_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), OWNEROF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Ownerof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<SIOCThing> getAllOwnerof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, OWNEROF, SIOCThing.class);
	}
	
    /**
     * Get all values of property Ownerof as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<SIOCThing> getAllOwnerof_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, OWNEROF, SIOCThing.class);
	}

    /**
     * Get all values of property Ownerof     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<SIOCThing> getAllOwnerof() {
		return Base.getAll(this.model, this.getResource(), OWNEROF, SIOCThing.class);
	}

    /**
     * Get all values of property Ownerof as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<SIOCThing> getAllOwnerof_as() {
		return Base.getAll_as(this.model, this.getResource(), OWNEROF, SIOCThing.class);
	}
 
    /**
     * Adds a value to property Ownerof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addOwnerof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, OWNEROF, value);
	}
	
    /**
     * Adds a value to property Ownerof as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addOwnerof( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), OWNEROF, value);
	}
    /**
     * Adds a value to property Ownerof from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void addOwnerof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
		Base.add(model, instanceResource, OWNEROF, value);
	}
	
    /**
     * Adds a value to property Ownerof from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addOwnerof( SIOCThing value ) {
		Base.add(this.model, this.getResource(), OWNEROF, value);
	}
  

    /**
     * Sets a value of property Ownerof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setOwnerof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, OWNEROF, value);
	}
	
    /**
     * Sets a value of property Ownerof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setOwnerof( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), OWNEROF, value);
	}
    /**
     * Sets a value of property Ownerof from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void setOwnerof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
		Base.set(model, instanceResource, OWNEROF, value);
	}
	
    /**
     * Sets a value of property Ownerof from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setOwnerof( SIOCThing value ) {
		Base.set(this.model, this.getResource(), OWNEROF, value);
	}
  


    /**
     * Removes a value of property Ownerof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeOwnerof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, OWNEROF, value);
	}
	
    /**
     * Removes a value of property Ownerof as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeOwnerof( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), OWNEROF, value);
	}
    /**
     * Removes a value of property Ownerof given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void removeOwnerof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            SIOCThing value ) {
		Base.remove(model, instanceResource, OWNEROF, value);
	}
	
    /**
     * Removes a value of property Ownerof given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeOwnerof( SIOCThing value ) {
		Base.remove(this.model, this.getResource(), OWNEROF, value);
	}
  
    /**
     * Removes all values of property Ownerof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllOwnerof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, OWNEROF);
	}
	
    /**
     * Removes all values of property Ownerof	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllOwnerof() {
		Base.removeAll(this.model, this.getResource(), OWNEROF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@59194827 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
    public static boolean hasSubscriberof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.has(model, instanceResource, SUBSCRIBEROF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@59194827 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
    public boolean hasSubscriberof() {
		return Base.has(this.model, this.getResource(), SUBSCRIBEROF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@59194827 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
    public static boolean hasSubscriberof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SUBSCRIBEROF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@59194827 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
    public boolean hasSubscriberof( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUBSCRIBEROF, value);
	}

     /**
     * Get all values of property Subscriberof as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
    public static ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllSubscriberof_asNode( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_asNode(model, instanceResource, SUBSCRIBEROF);
	}
	
    /**
     * Get all values of property Subscriberof as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
    public static ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllSubscriberof_asNode_( Model model,
                    org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, SUBSCRIBEROF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Subscriberof as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
    public ClosableIterator<org.ontoware.rdf2go.model.node.Node>
            getAllSubscriberof_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUBSCRIBEROF);
	}

    /**
     * Get all values of property Subscriberof as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
    public ReactorResult<org.ontoware.rdf2go.model.node.Node>
            getAllSubscriberof_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUBSCRIBEROF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Subscriberof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
    public static ClosableIterator<Container> getAllSubscriberof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll(model, instanceResource, SUBSCRIBEROF, Container.class);
	}
	
    /**
     * Get all values of property Subscriberof as a ReactorResult of Container 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
    public static ReactorResult<Container> getAllSubscriberof_as( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		return Base.getAll_as(model, instanceResource, SUBSCRIBEROF, Container.class);
	}

    /**
     * Get all values of property Subscriberof     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
    public ClosableIterator<Container> getAllSubscriberof() {
		return Base.getAll(this.model, this.getResource(), SUBSCRIBEROF, Container.class);
	}

    /**
     * Get all values of property Subscriberof as a ReactorResult of Container 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
    public ReactorResult<Container> getAllSubscriberof_as() {
		return Base.getAll_as(this.model, this.getResource(), SUBSCRIBEROF, Container.class);
	}
 
    /**
     * Adds a value to property Subscriberof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
    public static void addSubscriberof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(model, instanceResource, SUBSCRIBEROF, value);
	}
	
    /**
     * Adds a value to property Subscriberof as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
    public void addSubscriberof( org.ontoware.rdf2go.model.node.Node value ) {
		Base.add(this.model, this.getResource(), SUBSCRIBEROF, value);
	}
    /**
     * Adds a value to property Subscriberof from an instance of Container 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
    public static void addSubscriberof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Container value ) {
		Base.add(model, instanceResource, SUBSCRIBEROF, value);
	}
	
    /**
     * Adds a value to property Subscriberof from an instance of Container 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
    public void addSubscriberof( Container value ) {
		Base.add(this.model, this.getResource(), SUBSCRIBEROF, value);
	}
  

    /**
     * Sets a value of property Subscriberof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
    public static void setSubscriberof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(model, instanceResource, SUBSCRIBEROF, value);
	}
	
    /**
     * Sets a value of property Subscriberof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
    public void setSubscriberof( org.ontoware.rdf2go.model.node.Node value ) {
		Base.set(this.model, this.getResource(), SUBSCRIBEROF, value);
	}
    /**
     * Sets a value of property Subscriberof from an instance of Container 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
    public static void setSubscriberof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Container value ) {
		Base.set(model, instanceResource, SUBSCRIBEROF, value);
	}
	
    /**
     * Sets a value of property Subscriberof from an instance of Container 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
    public void setSubscriberof( Container value ) {
		Base.set(this.model, this.getResource(), SUBSCRIBEROF, value);
	}
  


    /**
     * Removes a value of property Subscriberof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
    public static void removeSubscriberof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(model, instanceResource, SUBSCRIBEROF, value);
	}
	
    /**
     * Removes a value of property Subscriberof as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
    public void removeSubscriberof( org.ontoware.rdf2go.model.node.Node value ) {
		Base.remove(this.model, this.getResource(), SUBSCRIBEROF, value);
	}
    /**
     * Removes a value of property Subscriberof given as an instance of Container 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
    public static void removeSubscriberof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource,
            Container value ) {
		Base.remove(model, instanceResource, SUBSCRIBEROF, value);
	}
	
    /**
     * Removes a value of property Subscriberof given as an instance of Container 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
    public void removeSubscriberof( Container value ) {
		Base.remove(this.model, this.getResource(), SUBSCRIBEROF, value);
	}
  
    /**
     * Removes all values of property Subscriberof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
    public static void removeAllSubscriberof( Model model,
            org.ontoware.rdf2go.model.node.Resource instanceResource ) {
		Base.removeAll(model, instanceResource, SUBSCRIBEROF);
	}
	
    /**
     * Removes all values of property Subscriberof	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
    public void removeAllSubscriberof() {
		Base.removeAll(this.model, this.getResource(), SUBSCRIBEROF);
	}
 }