/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1765 2010-02-11 09:51:13Z max.at.xam.de $) on 21.12.12 17:00
 */
package de.m0ep.uni.ma.rdf.sioc;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

import de.m0ep.uni.ma.rdf.foaf.Agent;
import de.m0ep.uni.ma.rdf.foaf.OnlineAccount;
import de.m0ep.uni.ma.rdf.owl.Thing;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> Accountof </li>
 *   <li> Administratorof </li>
 *   <li> Avatar </li>
 *   <li> Creatorof </li>
 *   <li> Email </li>
 *   <li> Emailsha1 </li>
 *   <li> Follows </li>
 *   <li> Memberof </li>
 *   <li> Moderatorof </li>
 *   <li> Modifierof </li>
 *   <li> Ownerof </li>
 *   <li> Subscriberof </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 21.12.12 17:00
 */
public class UserAccount extends OnlineAccount {

    /**
     * 
     */
    private static final long serialVersionUID = -7551135349428975021L;

    /** http://rdfs.org/sioc/ns#UserAccount */
	public static final URI RDFS_CLASS = new URIImpl("http://rdfs.org/sioc/ns#UserAccount", false);

    /** http://rdfs.org/sioc/ns#account_of */
	public static final URI ACCOUNTOF = new URIImpl("http://rdfs.org/sioc/ns#account_of",false);

    /** http://rdfs.org/sioc/ns#administrator_of */
	public static final URI ADMINISTRATOROF = new URIImpl("http://rdfs.org/sioc/ns#administrator_of",false);

    /** http://rdfs.org/sioc/ns#avatar */
	public static final URI AVATAR = new URIImpl("http://rdfs.org/sioc/ns#avatar",false);

    /** http://rdfs.org/sioc/ns#creator_of */
	public static final URI CREATOROF = new URIImpl("http://rdfs.org/sioc/ns#creator_of",false);

    /** http://rdfs.org/sioc/ns#email */
	public static final URI EMAIL = new URIImpl("http://rdfs.org/sioc/ns#email",false);

    /** http://rdfs.org/sioc/ns#email_sha1 */
	public static final URI EMAILSHA1 = new URIImpl("http://rdfs.org/sioc/ns#email_sha1",false);

    /** http://rdfs.org/sioc/ns#follows */
	public static final URI FOLLOWS = new URIImpl("http://rdfs.org/sioc/ns#follows",false);

    /** http://rdfs.org/sioc/ns#member_of */
	public static final URI MEMBEROF = new URIImpl("http://rdfs.org/sioc/ns#member_of",false);

    /** http://rdfs.org/sioc/ns#moderator_of */
	public static final URI MODERATOROF = new URIImpl("http://rdfs.org/sioc/ns#moderator_of",false);

    /** http://rdfs.org/sioc/ns#modifier_of */
	public static final URI MODIFIEROF = new URIImpl("http://rdfs.org/sioc/ns#modifier_of",false);

    /** http://rdfs.org/sioc/ns#owner_of */
	public static final URI OWNEROF = new URIImpl("http://rdfs.org/sioc/ns#owner_of",false);

    /** http://rdfs.org/sioc/ns#subscriber_of */
	public static final URI SUBSCRIBEROF = new URIImpl("http://rdfs.org/sioc/ns#subscriber_of",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://rdfs.org/sioc/ns#account_of",false),
      new URIImpl("http://rdfs.org/sioc/ns#administrator_of",false),
      new URIImpl("http://rdfs.org/sioc/ns#avatar",false),
      new URIImpl("http://rdfs.org/sioc/ns#creator_of",false),
      new URIImpl("http://rdfs.org/sioc/ns#email",false),
      new URIImpl("http://rdfs.org/sioc/ns#email_sha1",false),
      new URIImpl("http://rdfs.org/sioc/ns#follows",false),
      new URIImpl("http://rdfs.org/sioc/ns#member_of",false),
      new URIImpl("http://rdfs.org/sioc/ns#moderator_of",false),
      new URIImpl("http://rdfs.org/sioc/ns#modifier_of",false),
      new URIImpl("http://rdfs.org/sioc/ns#owner_of",false),
      new URIImpl("http://rdfs.org/sioc/ns#subscriber_of",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected UserAccount ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public UserAccount ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public UserAccount ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public UserAccount ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public UserAccount ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of UserAccount  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static UserAccount  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, UserAccount.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://rdfs.org/sioc/ns#UserAccount).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends UserAccount> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, UserAccount.class );
	}

    /**
	 * Remove rdf:type UserAccount from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Creator' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCCreator_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.CREATOR, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Creator' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCCreator_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.CREATOR, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Creator' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCCreator_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.CREATOR, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Owner' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCOwner_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Thing.OWNER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Owner' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCOwner_Inverse() {
		return Base.getAll_Inverse(this.model, Thing.OWNER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Owner' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCOwner_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Thing.OWNER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Subscriber' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCSubscriber_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Container.SUBSCRIBER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Subscriber' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCSubscriber_Inverse() {
		return Base.getAll_Inverse(this.model, Container.SUBSCRIBER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Subscriber' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCSubscriber_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Container.SUBSCRIBER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Member' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCMember_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Usergroup.MEMBER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Member' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCMember_Inverse() {
		return Base.getAll_Inverse(this.model, Usergroup.MEMBER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Member' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCMember_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Usergroup.MEMBER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Administrator' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCAdministrator_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Site.ADMINISTRATOR, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Administrator' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCAdministrator_Inverse() {
		return Base.getAll_Inverse(this.model, Site.ADMINISTRATOR, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Administrator' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCAdministrator_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Site.ADMINISTRATOR, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Moderator' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCModerator_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Forum.MODERATOR, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Moderator' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCModerator_Inverse() {
		return Base.getAll_Inverse(this.model, Forum.MODERATOR, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Moderator' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCModerator_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Forum.MODERATOR, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Modifier' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCModifier_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, Item.MODIFIER, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Modifier' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCModifier_Inverse() {
		return Base.getAll_Inverse(this.model, Item.MODIFIER, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Modifier' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCModifier_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, Item.MODIFIER, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'Follows' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCFollows_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, UserAccount.FOLLOWS, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'Follows' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllSIOCFollows_Inverse() {
		return Base.getAll_Inverse(this.model, UserAccount.FOLLOWS, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'Follows' to this UserAccount instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllSIOCFollows_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, UserAccount.FOLLOWS, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@60b964af has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCAccountof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ACCOUNTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@60b964af has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCAccountof() {
		return Base.has(this.model, this.getResource(), ACCOUNTOF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@60b964af has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCAccountof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ACCOUNTOF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@60b964af has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCAccountof( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ACCOUNTOF, value);
	}

     /**
     * Get all values of property Accountof as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCAccountof_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ACCOUNTOF);
	}
	
    /**
     * Get all values of property Accountof as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCAccountof_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ACCOUNTOF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Accountof as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCAccountof_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ACCOUNTOF);
	}

    /**
     * Get all values of property Accountof as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCAccountof_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ACCOUNTOF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Accountof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Agent> getAllSIOCAccountof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ACCOUNTOF, Agent.class);
	}
	
    /**
     * Get all values of property Accountof as a ReactorResult of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Agent> getAllSIOCAccountof_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ACCOUNTOF, Agent.class);
	}

    /**
     * Get all values of property Accountof     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Agent> getAllSIOCAccountof() {
		return Base.getAll(this.model, this.getResource(), ACCOUNTOF, Agent.class);
	}

    /**
     * Get all values of property Accountof as a ReactorResult of Agent 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Agent> getAllSIOCAccountof_as() {
		return Base.getAll_as(this.model, this.getResource(), ACCOUNTOF, Agent.class);
	}
 
    /**
     * Adds a value to property Accountof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCAccountof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ACCOUNTOF, value);
	}
	
    /**
     * Adds a value to property Accountof as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCAccountof( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ACCOUNTOF, value);
	}
    /**
     * Adds a value to property Accountof from an instance of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCAccountof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Agent value) {
		Base.add(model, instanceResource, ACCOUNTOF, value);
	}
	
    /**
     * Adds a value to property Accountof from an instance of Agent 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCAccountof(Agent value) {
		Base.add(this.model, this.getResource(), ACCOUNTOF, value);
	}
  

    /**
     * Sets a value of property Accountof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCAccountof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ACCOUNTOF, value);
	}
	
    /**
     * Sets a value of property Accountof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCAccountof( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ACCOUNTOF, value);
	}
    /**
     * Sets a value of property Accountof from an instance of Agent 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCAccountof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Agent value) {
		Base.set(model, instanceResource, ACCOUNTOF, value);
	}
	
    /**
     * Sets a value of property Accountof from an instance of Agent 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCAccountof(Agent value) {
		Base.set(this.model, this.getResource(), ACCOUNTOF, value);
	}
  


    /**
     * Removes a value of property Accountof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCAccountof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ACCOUNTOF, value);
	}
	
    /**
     * Removes a value of property Accountof as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCAccountof( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ACCOUNTOF, value);
	}
    /**
     * Removes a value of property Accountof given as an instance of Agent 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCAccountof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Agent value) {
		Base.remove(model, instanceResource, ACCOUNTOF, value);
	}
	
    /**
     * Removes a value of property Accountof given as an instance of Agent 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCAccountof(Agent value) {
		Base.remove(this.model, this.getResource(), ACCOUNTOF, value);
	}
  
    /**
     * Removes all values of property Accountof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCAccountof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ACCOUNTOF);
	}
	
    /**
     * Removes all values of property Accountof	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCAccountof() {
		Base.removeAll(this.model, this.getResource(), ACCOUNTOF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18010d30 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCAdministratorof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, ADMINISTRATOROF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18010d30 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCAdministratorof() {
		return Base.has(this.model, this.getResource(), ADMINISTRATOROF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18010d30 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCAdministratorof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, ADMINISTRATOROF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@18010d30 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCAdministratorof( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), ADMINISTRATOROF, value);
	}

     /**
     * Get all values of property Administratorof as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCAdministratorof_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, ADMINISTRATOROF);
	}
	
    /**
     * Get all values of property Administratorof as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCAdministratorof_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ADMINISTRATOROF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Administratorof as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCAdministratorof_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), ADMINISTRATOROF);
	}

    /**
     * Get all values of property Administratorof as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCAdministratorof_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), ADMINISTRATOROF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Administratorof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Site> getAllSIOCAdministratorof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, ADMINISTRATOROF, Site.class);
	}
	
    /**
     * Get all values of property Administratorof as a ReactorResult of Site 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Site> getAllSIOCAdministratorof_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, ADMINISTRATOROF, Site.class);
	}

    /**
     * Get all values of property Administratorof     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Site> getAllSIOCAdministratorof() {
		return Base.getAll(this.model, this.getResource(), ADMINISTRATOROF, Site.class);
	}

    /**
     * Get all values of property Administratorof as a ReactorResult of Site 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Site> getAllSIOCAdministratorof_as() {
		return Base.getAll_as(this.model, this.getResource(), ADMINISTRATOROF, Site.class);
	}
 
    /**
     * Adds a value to property Administratorof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCAdministratorof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, ADMINISTRATOROF, value);
	}
	
    /**
     * Adds a value to property Administratorof as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCAdministratorof( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), ADMINISTRATOROF, value);
	}
    /**
     * Adds a value to property Administratorof from an instance of Site 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCAdministratorof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Site value) {
		Base.add(model, instanceResource, ADMINISTRATOROF, value);
	}
	
    /**
     * Adds a value to property Administratorof from an instance of Site 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCAdministratorof(Site value) {
		Base.add(this.model, this.getResource(), ADMINISTRATOROF, value);
	}
  

    /**
     * Sets a value of property Administratorof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCAdministratorof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, ADMINISTRATOROF, value);
	}
	
    /**
     * Sets a value of property Administratorof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCAdministratorof( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), ADMINISTRATOROF, value);
	}
    /**
     * Sets a value of property Administratorof from an instance of Site 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCAdministratorof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Site value) {
		Base.set(model, instanceResource, ADMINISTRATOROF, value);
	}
	
    /**
     * Sets a value of property Administratorof from an instance of Site 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCAdministratorof(Site value) {
		Base.set(this.model, this.getResource(), ADMINISTRATOROF, value);
	}
  


    /**
     * Removes a value of property Administratorof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCAdministratorof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, ADMINISTRATOROF, value);
	}
	
    /**
     * Removes a value of property Administratorof as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCAdministratorof( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), ADMINISTRATOROF, value);
	}
    /**
     * Removes a value of property Administratorof given as an instance of Site 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCAdministratorof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Site value) {
		Base.remove(model, instanceResource, ADMINISTRATOROF, value);
	}
	
    /**
     * Removes a value of property Administratorof given as an instance of Site 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCAdministratorof(Site value) {
		Base.remove(this.model, this.getResource(), ADMINISTRATOROF, value);
	}
  
    /**
     * Removes all values of property Administratorof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCAdministratorof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, ADMINISTRATOROF);
	}
	
    /**
     * Removes all values of property Administratorof	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCAdministratorof() {
		Base.removeAll(this.model, this.getResource(), ADMINISTRATOROF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d1841f8 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCAvatar(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, AVATAR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d1841f8 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCAvatar() {
		return Base.has(this.model, this.getResource(), AVATAR);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d1841f8 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCAvatar(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, AVATAR, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@1d1841f8 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCAvatar( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), AVATAR, value);
	}

     /**
     * Get all values of property Avatar as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCAvatar_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, AVATAR);
	}
	
    /**
     * Get all values of property Avatar as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCAvatar_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, AVATAR, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Avatar as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCAvatar_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), AVATAR);
	}

    /**
     * Get all values of property Avatar as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCAvatar_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), AVATAR, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Avatar     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSIOCAvatar(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, AVATAR, Thing.class);
	}
	
    /**
     * Get all values of property Avatar as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSIOCAvatar_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, AVATAR, Thing.class);
	}

    /**
     * Get all values of property Avatar     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSIOCAvatar() {
		return Base.getAll(this.model, this.getResource(), AVATAR, Thing.class);
	}

    /**
     * Get all values of property Avatar as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSIOCAvatar_as() {
		return Base.getAll_as(this.model, this.getResource(), AVATAR, Thing.class);
	}
 
    /**
     * Adds a value to property Avatar as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCAvatar( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, AVATAR, value);
	}
	
    /**
     * Adds a value to property Avatar as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCAvatar( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), AVATAR, value);
	}
    /**
     * Adds a value to property Avatar from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCAvatar(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, AVATAR, value);
	}
	
    /**
     * Adds a value to property Avatar from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCAvatar(Thing value) {
		Base.add(this.model, this.getResource(), AVATAR, value);
	}
  

    /**
     * Sets a value of property Avatar from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCAvatar( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, AVATAR, value);
	}
	
    /**
     * Sets a value of property Avatar from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCAvatar( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), AVATAR, value);
	}
    /**
     * Sets a value of property Avatar from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCAvatar(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, AVATAR, value);
	}
	
    /**
     * Sets a value of property Avatar from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCAvatar(Thing value) {
		Base.set(this.model, this.getResource(), AVATAR, value);
	}
  


    /**
     * Removes a value of property Avatar as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCAvatar( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, AVATAR, value);
	}
	
    /**
     * Removes a value of property Avatar as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCAvatar( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), AVATAR, value);
	}
    /**
     * Removes a value of property Avatar given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCAvatar(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, AVATAR, value);
	}
	
    /**
     * Removes a value of property Avatar given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCAvatar(Thing value) {
		Base.remove(this.model, this.getResource(), AVATAR, value);
	}
  
    /**
     * Removes all values of property Avatar     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCAvatar( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, AVATAR);
	}
	
    /**
     * Removes all values of property Avatar	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCAvatar() {
		Base.removeAll(this.model, this.getResource(), AVATAR);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2199ea11 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCCreatorof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, CREATOROF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2199ea11 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCCreatorof() {
		return Base.has(this.model, this.getResource(), CREATOROF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2199ea11 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCCreatorof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, CREATOROF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2199ea11 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCCreatorof( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), CREATOROF, value);
	}

     /**
     * Get all values of property Creatorof as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCCreatorof_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, CREATOROF);
	}
	
    /**
     * Get all values of property Creatorof as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCCreatorof_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CREATOROF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Creatorof as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCCreatorof_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), CREATOROF);
	}

    /**
     * Get all values of property Creatorof as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCCreatorof_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), CREATOROF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Creatorof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSIOCCreatorof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, CREATOROF, Thing.class);
	}
	
    /**
     * Get all values of property Creatorof as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSIOCCreatorof_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, CREATOROF, Thing.class);
	}

    /**
     * Get all values of property Creatorof     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSIOCCreatorof() {
		return Base.getAll(this.model, this.getResource(), CREATOROF, Thing.class);
	}

    /**
     * Get all values of property Creatorof as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSIOCCreatorof_as() {
		return Base.getAll_as(this.model, this.getResource(), CREATOROF, Thing.class);
	}
 
    /**
     * Adds a value to property Creatorof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCCreatorof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, CREATOROF, value);
	}
	
    /**
     * Adds a value to property Creatorof as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCCreatorof( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), CREATOROF, value);
	}
    /**
     * Adds a value to property Creatorof from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCCreatorof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, CREATOROF, value);
	}
	
    /**
     * Adds a value to property Creatorof from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCCreatorof(Thing value) {
		Base.add(this.model, this.getResource(), CREATOROF, value);
	}
  

    /**
     * Sets a value of property Creatorof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCCreatorof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, CREATOROF, value);
	}
	
    /**
     * Sets a value of property Creatorof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCCreatorof( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), CREATOROF, value);
	}
    /**
     * Sets a value of property Creatorof from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCCreatorof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, CREATOROF, value);
	}
	
    /**
     * Sets a value of property Creatorof from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCCreatorof(Thing value) {
		Base.set(this.model, this.getResource(), CREATOROF, value);
	}
  


    /**
     * Removes a value of property Creatorof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCCreatorof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, CREATOROF, value);
	}
	
    /**
     * Removes a value of property Creatorof as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCCreatorof( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), CREATOROF, value);
	}
    /**
     * Removes a value of property Creatorof given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCCreatorof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, CREATOROF, value);
	}
	
    /**
     * Removes a value of property Creatorof given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCCreatorof(Thing value) {
		Base.remove(this.model, this.getResource(), CREATOROF, value);
	}
  
    /**
     * Removes all values of property Creatorof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCCreatorof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, CREATOROF);
	}
	
    /**
     * Removes all values of property Creatorof	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCCreatorof() {
		Base.removeAll(this.model, this.getResource(), CREATOROF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@312ad978 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCEmail(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EMAIL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@312ad978 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCEmail() {
		return Base.has(this.model, this.getResource(), EMAIL);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@312ad978 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCEmail(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EMAIL, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@312ad978 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCEmail( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EMAIL, value);
	}

     /**
     * Get all values of property Email as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCEmail_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EMAIL);
	}
	
    /**
     * Get all values of property Email as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCEmail_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EMAIL, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Email as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCEmail_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EMAIL);
	}

    /**
     * Get all values of property Email as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCEmail_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EMAIL, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Email     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSIOCEmail(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EMAIL, Thing.class);
	}
	
    /**
     * Get all values of property Email as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSIOCEmail_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EMAIL, Thing.class);
	}

    /**
     * Get all values of property Email     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSIOCEmail() {
		return Base.getAll(this.model, this.getResource(), EMAIL, Thing.class);
	}

    /**
     * Get all values of property Email as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSIOCEmail_as() {
		return Base.getAll_as(this.model, this.getResource(), EMAIL, Thing.class);
	}
 
    /**
     * Adds a value to property Email as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCEmail( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EMAIL, value);
	}
	
    /**
     * Adds a value to property Email as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCEmail( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EMAIL, value);
	}
    /**
     * Adds a value to property Email from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCEmail(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, EMAIL, value);
	}
	
    /**
     * Adds a value to property Email from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCEmail(Thing value) {
		Base.add(this.model, this.getResource(), EMAIL, value);
	}
  

    /**
     * Sets a value of property Email from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCEmail( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EMAIL, value);
	}
	
    /**
     * Sets a value of property Email from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCEmail( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EMAIL, value);
	}
    /**
     * Sets a value of property Email from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCEmail(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, EMAIL, value);
	}
	
    /**
     * Sets a value of property Email from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCEmail(Thing value) {
		Base.set(this.model, this.getResource(), EMAIL, value);
	}
  


    /**
     * Removes a value of property Email as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCEmail( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EMAIL, value);
	}
	
    /**
     * Removes a value of property Email as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCEmail( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EMAIL, value);
	}
    /**
     * Removes a value of property Email given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCEmail(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, EMAIL, value);
	}
	
    /**
     * Removes a value of property Email given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCEmail(Thing value) {
		Base.remove(this.model, this.getResource(), EMAIL, value);
	}
  
    /**
     * Removes all values of property Email     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCEmail( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EMAIL);
	}
	
    /**
     * Removes all values of property Email	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCEmail() {
		Base.removeAll(this.model, this.getResource(), EMAIL);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f4da460 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCEmailsha1(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, EMAILSHA1);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f4da460 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCEmailsha1() {
		return Base.has(this.model, this.getResource(), EMAILSHA1);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f4da460 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCEmailsha1(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, EMAILSHA1, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@6f4da460 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCEmailsha1( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), EMAILSHA1, value);
	}

     /**
     * Get all values of property Emailsha1 as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCEmailsha1_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, EMAILSHA1);
	}
	
    /**
     * Get all values of property Emailsha1 as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCEmailsha1_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EMAILSHA1, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Emailsha1 as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCEmailsha1_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), EMAILSHA1);
	}

    /**
     * Get all values of property Emailsha1 as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCEmailsha1_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), EMAILSHA1, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Emailsha1     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<java.lang.String> getAllSIOCEmailsha1(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, EMAILSHA1, java.lang.String.class);
	}
	
    /**
     * Get all values of property Emailsha1 as a ReactorResult of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<java.lang.String> getAllSIOCEmailsha1_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, EMAILSHA1, java.lang.String.class);
	}

    /**
     * Get all values of property Emailsha1     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<java.lang.String> getAllSIOCEmailsha1() {
		return Base.getAll(this.model, this.getResource(), EMAILSHA1, java.lang.String.class);
	}

    /**
     * Get all values of property Emailsha1 as a ReactorResult of java.lang.String 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<java.lang.String> getAllSIOCEmailsha1_as() {
		return Base.getAll_as(this.model, this.getResource(), EMAILSHA1, java.lang.String.class);
	}
 
    /**
     * Adds a value to property Emailsha1 as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCEmailsha1( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, EMAILSHA1, value);
	}
	
    /**
     * Adds a value to property Emailsha1 as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCEmailsha1( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), EMAILSHA1, value);
	}
    /**
     * Adds a value to property Emailsha1 from an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCEmailsha1(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.add(model, instanceResource, EMAILSHA1, value);
	}
	
    /**
     * Adds a value to property Emailsha1 from an instance of java.lang.String 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCEmailsha1(java.lang.String value) {
		Base.add(this.model, this.getResource(), EMAILSHA1, value);
	}
  

    /**
     * Sets a value of property Emailsha1 from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCEmailsha1( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, EMAILSHA1, value);
	}
	
    /**
     * Sets a value of property Emailsha1 from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCEmailsha1( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), EMAILSHA1, value);
	}
    /**
     * Sets a value of property Emailsha1 from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCEmailsha1(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.set(model, instanceResource, EMAILSHA1, value);
	}
	
    /**
     * Sets a value of property Emailsha1 from an instance of java.lang.String 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCEmailsha1(java.lang.String value) {
		Base.set(this.model, this.getResource(), EMAILSHA1, value);
	}
  


    /**
     * Removes a value of property Emailsha1 as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCEmailsha1( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, EMAILSHA1, value);
	}
	
    /**
     * Removes a value of property Emailsha1 as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCEmailsha1( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), EMAILSHA1, value);
	}
    /**
     * Removes a value of property Emailsha1 given as an instance of java.lang.String 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCEmailsha1(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, java.lang.String value) {
		Base.remove(model, instanceResource, EMAILSHA1, value);
	}
	
    /**
     * Removes a value of property Emailsha1 given as an instance of java.lang.String 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCEmailsha1(java.lang.String value) {
		Base.remove(this.model, this.getResource(), EMAILSHA1, value);
	}
  
    /**
     * Removes all values of property Emailsha1     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCEmailsha1( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, EMAILSHA1);
	}
	
    /**
     * Removes all values of property Emailsha1	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCEmailsha1() {
		Base.removeAll(this.model, this.getResource(), EMAILSHA1);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@173bb17a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCFollows(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, FOLLOWS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@173bb17a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCFollows() {
		return Base.has(this.model, this.getResource(), FOLLOWS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@173bb17a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCFollows(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, FOLLOWS, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@173bb17a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCFollows( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), FOLLOWS, value);
	}

     /**
     * Get all values of property Follows as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCFollows_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, FOLLOWS);
	}
	
    /**
     * Get all values of property Follows as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCFollows_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FOLLOWS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Follows as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCFollows_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), FOLLOWS);
	}

    /**
     * Get all values of property Follows as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCFollows_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), FOLLOWS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Follows     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<UserAccount> getAllSIOCFollows(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, FOLLOWS, UserAccount.class);
	}
	
    /**
     * Get all values of property Follows as a ReactorResult of UserAccount 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<UserAccount> getAllSIOCFollows_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, FOLLOWS, UserAccount.class);
	}

    /**
     * Get all values of property Follows     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<UserAccount> getAllSIOCFollows() {
		return Base.getAll(this.model, this.getResource(), FOLLOWS, UserAccount.class);
	}

    /**
     * Get all values of property Follows as a ReactorResult of UserAccount 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<UserAccount> getAllSIOCFollows_as() {
		return Base.getAll_as(this.model, this.getResource(), FOLLOWS, UserAccount.class);
	}
 
    /**
     * Adds a value to property Follows as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCFollows( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, FOLLOWS, value);
	}
	
    /**
     * Adds a value to property Follows as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCFollows( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), FOLLOWS, value);
	}
    /**
     * Adds a value to property Follows from an instance of UserAccount 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCFollows(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, UserAccount value) {
		Base.add(model, instanceResource, FOLLOWS, value);
	}
	
    /**
     * Adds a value to property Follows from an instance of UserAccount 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCFollows(UserAccount value) {
		Base.add(this.model, this.getResource(), FOLLOWS, value);
	}
  

    /**
     * Sets a value of property Follows from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCFollows( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, FOLLOWS, value);
	}
	
    /**
     * Sets a value of property Follows from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCFollows( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), FOLLOWS, value);
	}
    /**
     * Sets a value of property Follows from an instance of UserAccount 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCFollows(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, UserAccount value) {
		Base.set(model, instanceResource, FOLLOWS, value);
	}
	
    /**
     * Sets a value of property Follows from an instance of UserAccount 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCFollows(UserAccount value) {
		Base.set(this.model, this.getResource(), FOLLOWS, value);
	}
  


    /**
     * Removes a value of property Follows as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCFollows( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, FOLLOWS, value);
	}
	
    /**
     * Removes a value of property Follows as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCFollows( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), FOLLOWS, value);
	}
    /**
     * Removes a value of property Follows given as an instance of UserAccount 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCFollows(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, UserAccount value) {
		Base.remove(model, instanceResource, FOLLOWS, value);
	}
	
    /**
     * Removes a value of property Follows given as an instance of UserAccount 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCFollows(UserAccount value) {
		Base.remove(this.model, this.getResource(), FOLLOWS, value);
	}
  
    /**
     * Removes all values of property Follows     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCFollows( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, FOLLOWS);
	}
	
    /**
     * Removes all values of property Follows	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCFollows() {
		Base.removeAll(this.model, this.getResource(), FOLLOWS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3cd5cdab has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCMemberof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MEMBEROF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3cd5cdab has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCMemberof() {
		return Base.has(this.model, this.getResource(), MEMBEROF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3cd5cdab has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCMemberof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MEMBEROF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@3cd5cdab has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCMemberof( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MEMBEROF, value);
	}

     /**
     * Get all values of property Memberof as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCMemberof_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MEMBEROF);
	}
	
    /**
     * Get all values of property Memberof as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCMemberof_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MEMBEROF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Memberof as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCMemberof_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MEMBEROF);
	}

    /**
     * Get all values of property Memberof as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCMemberof_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MEMBEROF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Memberof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Usergroup> getAllSIOCMemberof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MEMBEROF, Usergroup.class);
	}
	
    /**
     * Get all values of property Memberof as a ReactorResult of Usergroup 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Usergroup> getAllSIOCMemberof_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MEMBEROF, Usergroup.class);
	}

    /**
     * Get all values of property Memberof     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Usergroup> getAllSIOCMemberof() {
		return Base.getAll(this.model, this.getResource(), MEMBEROF, Usergroup.class);
	}

    /**
     * Get all values of property Memberof as a ReactorResult of Usergroup 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Usergroup> getAllSIOCMemberof_as() {
		return Base.getAll_as(this.model, this.getResource(), MEMBEROF, Usergroup.class);
	}
 
    /**
     * Adds a value to property Memberof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCMemberof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MEMBEROF, value);
	}
	
    /**
     * Adds a value to property Memberof as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCMemberof( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MEMBEROF, value);
	}
    /**
     * Adds a value to property Memberof from an instance of Usergroup 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCMemberof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Usergroup value) {
		Base.add(model, instanceResource, MEMBEROF, value);
	}
	
    /**
     * Adds a value to property Memberof from an instance of Usergroup 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCMemberof(Usergroup value) {
		Base.add(this.model, this.getResource(), MEMBEROF, value);
	}
  

    /**
     * Sets a value of property Memberof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCMemberof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MEMBEROF, value);
	}
	
    /**
     * Sets a value of property Memberof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCMemberof( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MEMBEROF, value);
	}
    /**
     * Sets a value of property Memberof from an instance of Usergroup 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCMemberof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Usergroup value) {
		Base.set(model, instanceResource, MEMBEROF, value);
	}
	
    /**
     * Sets a value of property Memberof from an instance of Usergroup 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCMemberof(Usergroup value) {
		Base.set(this.model, this.getResource(), MEMBEROF, value);
	}
  


    /**
     * Removes a value of property Memberof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCMemberof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MEMBEROF, value);
	}
	
    /**
     * Removes a value of property Memberof as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCMemberof( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MEMBEROF, value);
	}
    /**
     * Removes a value of property Memberof given as an instance of Usergroup 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCMemberof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Usergroup value) {
		Base.remove(model, instanceResource, MEMBEROF, value);
	}
	
    /**
     * Removes a value of property Memberof given as an instance of Usergroup 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCMemberof(Usergroup value) {
		Base.remove(this.model, this.getResource(), MEMBEROF, value);
	}
  
    /**
     * Removes all values of property Memberof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCMemberof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MEMBEROF);
	}
	
    /**
     * Removes all values of property Memberof	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCMemberof() {
		Base.removeAll(this.model, this.getResource(), MEMBEROF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@51fdfe5 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCModeratorof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MODERATOROF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@51fdfe5 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCModeratorof() {
		return Base.has(this.model, this.getResource(), MODERATOROF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@51fdfe5 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCModeratorof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MODERATOROF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@51fdfe5 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCModeratorof( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MODERATOROF, value);
	}

     /**
     * Get all values of property Moderatorof as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCModeratorof_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MODERATOROF);
	}
	
    /**
     * Get all values of property Moderatorof as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCModeratorof_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MODERATOROF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Moderatorof as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCModeratorof_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MODERATOROF);
	}

    /**
     * Get all values of property Moderatorof as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCModeratorof_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MODERATOROF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Moderatorof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Forum> getAllSIOCModeratorof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MODERATOROF, Forum.class);
	}
	
    /**
     * Get all values of property Moderatorof as a ReactorResult of Forum 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Forum> getAllSIOCModeratorof_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MODERATOROF, Forum.class);
	}

    /**
     * Get all values of property Moderatorof     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Forum> getAllSIOCModeratorof() {
		return Base.getAll(this.model, this.getResource(), MODERATOROF, Forum.class);
	}

    /**
     * Get all values of property Moderatorof as a ReactorResult of Forum 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Forum> getAllSIOCModeratorof_as() {
		return Base.getAll_as(this.model, this.getResource(), MODERATOROF, Forum.class);
	}
 
    /**
     * Adds a value to property Moderatorof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCModeratorof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MODERATOROF, value);
	}
	
    /**
     * Adds a value to property Moderatorof as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCModeratorof( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MODERATOROF, value);
	}
    /**
     * Adds a value to property Moderatorof from an instance of Forum 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCModeratorof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Forum value) {
		Base.add(model, instanceResource, MODERATOROF, value);
	}
	
    /**
     * Adds a value to property Moderatorof from an instance of Forum 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCModeratorof(Forum value) {
		Base.add(this.model, this.getResource(), MODERATOROF, value);
	}
  

    /**
     * Sets a value of property Moderatorof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCModeratorof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MODERATOROF, value);
	}
	
    /**
     * Sets a value of property Moderatorof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCModeratorof( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MODERATOROF, value);
	}
    /**
     * Sets a value of property Moderatorof from an instance of Forum 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCModeratorof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Forum value) {
		Base.set(model, instanceResource, MODERATOROF, value);
	}
	
    /**
     * Sets a value of property Moderatorof from an instance of Forum 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCModeratorof(Forum value) {
		Base.set(this.model, this.getResource(), MODERATOROF, value);
	}
  


    /**
     * Removes a value of property Moderatorof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCModeratorof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MODERATOROF, value);
	}
	
    /**
     * Removes a value of property Moderatorof as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCModeratorof( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MODERATOROF, value);
	}
    /**
     * Removes a value of property Moderatorof given as an instance of Forum 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCModeratorof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Forum value) {
		Base.remove(model, instanceResource, MODERATOROF, value);
	}
	
    /**
     * Removes a value of property Moderatorof given as an instance of Forum 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCModeratorof(Forum value) {
		Base.remove(this.model, this.getResource(), MODERATOROF, value);
	}
  
    /**
     * Removes all values of property Moderatorof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCModeratorof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MODERATOROF);
	}
	
    /**
     * Removes all values of property Moderatorof	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCModeratorof() {
		Base.removeAll(this.model, this.getResource(), MODERATOROF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61e7f8de has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCModifierof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, MODIFIEROF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61e7f8de has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCModifierof() {
		return Base.has(this.model, this.getResource(), MODIFIEROF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61e7f8de has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCModifierof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, MODIFIEROF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@61e7f8de has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCModifierof( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), MODIFIEROF, value);
	}

     /**
     * Get all values of property Modifierof as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCModifierof_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, MODIFIEROF);
	}
	
    /**
     * Get all values of property Modifierof as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCModifierof_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MODIFIEROF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Modifierof as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCModifierof_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), MODIFIEROF);
	}

    /**
     * Get all values of property Modifierof as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCModifierof_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), MODIFIEROF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Modifierof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Item> getAllSIOCModifierof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, MODIFIEROF, Item.class);
	}
	
    /**
     * Get all values of property Modifierof as a ReactorResult of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Item> getAllSIOCModifierof_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, MODIFIEROF, Item.class);
	}

    /**
     * Get all values of property Modifierof     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Item> getAllSIOCModifierof() {
		return Base.getAll(this.model, this.getResource(), MODIFIEROF, Item.class);
	}

    /**
     * Get all values of property Modifierof as a ReactorResult of Item 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Item> getAllSIOCModifierof_as() {
		return Base.getAll_as(this.model, this.getResource(), MODIFIEROF, Item.class);
	}
 
    /**
     * Adds a value to property Modifierof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCModifierof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, MODIFIEROF, value);
	}
	
    /**
     * Adds a value to property Modifierof as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCModifierof( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), MODIFIEROF, value);
	}
    /**
     * Adds a value to property Modifierof from an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCModifierof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.add(model, instanceResource, MODIFIEROF, value);
	}
	
    /**
     * Adds a value to property Modifierof from an instance of Item 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCModifierof(Item value) {
		Base.add(this.model, this.getResource(), MODIFIEROF, value);
	}
  

    /**
     * Sets a value of property Modifierof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCModifierof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, MODIFIEROF, value);
	}
	
    /**
     * Sets a value of property Modifierof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCModifierof( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), MODIFIEROF, value);
	}
    /**
     * Sets a value of property Modifierof from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCModifierof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.set(model, instanceResource, MODIFIEROF, value);
	}
	
    /**
     * Sets a value of property Modifierof from an instance of Item 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCModifierof(Item value) {
		Base.set(this.model, this.getResource(), MODIFIEROF, value);
	}
  


    /**
     * Removes a value of property Modifierof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCModifierof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, MODIFIEROF, value);
	}
	
    /**
     * Removes a value of property Modifierof as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCModifierof( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), MODIFIEROF, value);
	}
    /**
     * Removes a value of property Modifierof given as an instance of Item 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCModifierof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Item value) {
		Base.remove(model, instanceResource, MODIFIEROF, value);
	}
	
    /**
     * Removes a value of property Modifierof given as an instance of Item 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCModifierof(Item value) {
		Base.remove(this.model, this.getResource(), MODIFIEROF, value);
	}
  
    /**
     * Removes all values of property Modifierof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCModifierof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, MODIFIEROF);
	}
	
    /**
     * Removes all values of property Modifierof	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCModifierof() {
		Base.removeAll(this.model, this.getResource(), MODIFIEROF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@743e4500 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCOwnerof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, OWNEROF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@743e4500 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCOwnerof() {
		return Base.has(this.model, this.getResource(), OWNEROF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@743e4500 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCOwnerof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, OWNEROF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@743e4500 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCOwnerof( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), OWNEROF, value);
	}

     /**
     * Get all values of property Ownerof as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCOwnerof_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, OWNEROF);
	}
	
    /**
     * Get all values of property Ownerof as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCOwnerof_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OWNEROF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Ownerof as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCOwnerof_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), OWNEROF);
	}

    /**
     * Get all values of property Ownerof as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCOwnerof_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), OWNEROF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Ownerof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Thing> getAllSIOCOwnerof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, OWNEROF, Thing.class);
	}
	
    /**
     * Get all values of property Ownerof as a ReactorResult of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Thing> getAllSIOCOwnerof_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, OWNEROF, Thing.class);
	}

    /**
     * Get all values of property Ownerof     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Thing> getAllSIOCOwnerof() {
		return Base.getAll(this.model, this.getResource(), OWNEROF, Thing.class);
	}

    /**
     * Get all values of property Ownerof as a ReactorResult of Thing 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Thing> getAllSIOCOwnerof_as() {
		return Base.getAll_as(this.model, this.getResource(), OWNEROF, Thing.class);
	}
 
    /**
     * Adds a value to property Ownerof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCOwnerof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, OWNEROF, value);
	}
	
    /**
     * Adds a value to property Ownerof as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCOwnerof( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), OWNEROF, value);
	}
    /**
     * Adds a value to property Ownerof from an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCOwnerof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.add(model, instanceResource, OWNEROF, value);
	}
	
    /**
     * Adds a value to property Ownerof from an instance of Thing 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCOwnerof(Thing value) {
		Base.add(this.model, this.getResource(), OWNEROF, value);
	}
  

    /**
     * Sets a value of property Ownerof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCOwnerof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, OWNEROF, value);
	}
	
    /**
     * Sets a value of property Ownerof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCOwnerof( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), OWNEROF, value);
	}
    /**
     * Sets a value of property Ownerof from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCOwnerof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.set(model, instanceResource, OWNEROF, value);
	}
	
    /**
     * Sets a value of property Ownerof from an instance of Thing 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCOwnerof(Thing value) {
		Base.set(this.model, this.getResource(), OWNEROF, value);
	}
  


    /**
     * Removes a value of property Ownerof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCOwnerof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, OWNEROF, value);
	}
	
    /**
     * Removes a value of property Ownerof as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCOwnerof( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), OWNEROF, value);
	}
    /**
     * Removes a value of property Ownerof given as an instance of Thing 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCOwnerof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Thing value) {
		Base.remove(model, instanceResource, OWNEROF, value);
	}
	
    /**
     * Removes a value of property Ownerof given as an instance of Thing 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCOwnerof(Thing value) {
		Base.remove(this.model, this.getResource(), OWNEROF, value);
	}
  
    /**
     * Removes all values of property Ownerof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCOwnerof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, OWNEROF);
	}
	
    /**
     * Removes all values of property Ownerof	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCOwnerof() {
		Base.removeAll(this.model, this.getResource(), OWNEROF);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@59194827 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasSIOCSubscriberof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, SUBSCRIBEROF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@59194827 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasSIOCSubscriberof() {
		return Base.has(this.model, this.getResource(), SUBSCRIBEROF);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@59194827 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasSIOCSubscriberof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, SUBSCRIBEROF, value);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@59194827 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasSIOCSubscriberof( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), SUBSCRIBEROF, value);
	}

     /**
     * Get all values of property Subscriberof as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCSubscriberof_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, SUBSCRIBEROF);
	}
	
    /**
     * Get all values of property Subscriberof as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCSubscriberof_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBSCRIBEROF, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property Subscriberof as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllSIOCSubscriberof_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), SUBSCRIBEROF);
	}

    /**
     * Get all values of property Subscriberof as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllSIOCSubscriberof_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), SUBSCRIBEROF, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property Subscriberof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Container> getAllSIOCSubscriberof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, SUBSCRIBEROF, Container.class);
	}
	
    /**
     * Get all values of property Subscriberof as a ReactorResult of Container 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Container> getAllSIOCSubscriberof_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, SUBSCRIBEROF, Container.class);
	}

    /**
     * Get all values of property Subscriberof     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Container> getAllSIOCSubscriberof() {
		return Base.getAll(this.model, this.getResource(), SUBSCRIBEROF, Container.class);
	}

    /**
     * Get all values of property Subscriberof as a ReactorResult of Container 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Container> getAllSIOCSubscriberof_as() {
		return Base.getAll_as(this.model, this.getResource(), SUBSCRIBEROF, Container.class);
	}
 
    /**
     * Adds a value to property Subscriberof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addSIOCSubscriberof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, SUBSCRIBEROF, value);
	}
	
    /**
     * Adds a value to property Subscriberof as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addSIOCSubscriberof( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), SUBSCRIBEROF, value);
	}
    /**
     * Adds a value to property Subscriberof from an instance of Container 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addSIOCSubscriberof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Container value) {
		Base.add(model, instanceResource, SUBSCRIBEROF, value);
	}
	
    /**
     * Adds a value to property Subscriberof from an instance of Container 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addSIOCSubscriberof(Container value) {
		Base.add(this.model, this.getResource(), SUBSCRIBEROF, value);
	}
  

    /**
     * Sets a value of property Subscriberof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setSIOCSubscriberof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, SUBSCRIBEROF, value);
	}
	
    /**
     * Sets a value of property Subscriberof from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setSIOCSubscriberof( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), SUBSCRIBEROF, value);
	}
    /**
     * Sets a value of property Subscriberof from an instance of Container 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setSIOCSubscriberof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Container value) {
		Base.set(model, instanceResource, SUBSCRIBEROF, value);
	}
	
    /**
     * Sets a value of property Subscriberof from an instance of Container 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setSIOCSubscriberof(Container value) {
		Base.set(this.model, this.getResource(), SUBSCRIBEROF, value);
	}
  


    /**
     * Removes a value of property Subscriberof as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removeSIOCSubscriberof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, SUBSCRIBEROF, value);
	}
	
    /**
     * Removes a value of property Subscriberof as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removeSIOCSubscriberof( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), SUBSCRIBEROF, value);
	}
    /**
     * Removes a value of property Subscriberof given as an instance of Container 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removeSIOCSubscriberof(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Container value) {
		Base.remove(model, instanceResource, SUBSCRIBEROF, value);
	}
	
    /**
     * Removes a value of property Subscriberof given as an instance of Container 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removeSIOCSubscriberof(Container value) {
		Base.remove(this.model, this.getResource(), SUBSCRIBEROF, value);
	}
  
    /**
     * Removes all values of property Subscriberof     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllSIOCSubscriberof( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, SUBSCRIBEROF);
	}
	
    /**
     * Removes all values of property Subscriberof	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllSIOCSubscriberof() {
		Base.removeAll(this.model, this.getResource(), SUBSCRIBEROF);
	}
 }